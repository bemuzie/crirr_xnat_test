<!-- 
/*
 * Copyright 2001-2004 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 -->
<j:jelly
  xmlns:ant="jelly:ant"
  xmlns:j="jelly:core" 
  xmlns:u="jelly:util"
  xmlns:x="jelly:xml"
  xmlns:maven="jelly:maven"
  xmlns:test="test"
  xmlns="dummy">

  <ant:tstamp />
  <!-- get first repo in the list -->
  <u:tokenize var="repos" delim=",">${maven.repo.remote}</u:tokenize>
  <j:set var="repo">${repos[0]}</j:set>
  <!-- set up relative paths -->
  <maven:makeRelativePath var="srcDir" basedir="${basedir}" path="${pom.build.sourceDirectory}" separator="/"/>

  <j:if test="${unitTestSourcesPresent == 'true'}">
    <maven:makeRelativePath var="testSrcDir" basedir="${basedir}" path="${pom.build.unitTestSourceDirectory}" separator="/"/>
  </j:if>

  <x:comment>
  build.xml generated by maven from project.xml version ${pom.currentVersion}
  on date ${TODAY}, time ${TSTAMP}
  </x:comment>

<project name="${pom.artifactId}" default="jar" basedir=".">
  
  <j:set var="baseDirFile" value="${pom.file.canonicalFile.parentFile}"/>
  <maven:makeRelativePath basedir="${baseDirFile}" path="${maven.build.dir}" separator="/" var="defaulttargetdir"/>
  <property name="defaulttargetdir" value="${defaulttargetdir}"/> 
  <property name="libdir" value="${defaulttargetdir}/lib" />

  <maven:makeRelativePath basedir="${baseDirFile}" path="${maven.build.dest}" separator="/" var="classesdir"/>
  <property name="classesdir" value="${classesdir}" />

  <maven:makeRelativePath basedir="${baseDirFile}" path="${maven.test.dest}" separator="/" var="testclassesdir"/>
  <property name="testclassesdir" value="${testclassesdir}" />

  <j:if test="${unitTestSourcesPresent == 'true'}">
    <maven:pluginVar plugin="maven-test-plugin" property="maven.test.dest" var="abstestclassesdir" />
    <maven:makeRelativePath basedir="${baseDirFile}" path="${abstestclassesdir}" separator="/" var="testclassesdir"/>
    <property name="testclassesdir" value="${testclassesdir}" />
    
    <maven:pluginVar plugin="maven-test-plugin" property="maven.test.reportsDirectory" var="abstestreportdir" />
    <maven:makeRelativePath basedir="${baseDirFile}" path="${abstestreportdir}" separator="/" var="testreportdir"/>
    <property name="testreportdir" value="${testreportdir}" />
  </j:if>

  <property name="distdir" value="dist"/>
  <property name="javadocdir" value="dist/docs/api"/>
  <property name="final.name" value="${maven.final.name}"/>

  <path id="build.classpath">
    <fileset dir="$${libdir}" >
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target 
    name="init"
    description="o Initializes some properties">
    <mkdir dir="$${libdir}"/>
    <condition property="noget">
      <equals arg1="$${build.sysclasspath}" arg2="only"/>
    </condition>
    <x:comment> Test if JUNIT is present in ANT classpath </x:comment>
    <available classname="junit.framework.Test" property="Junit.present"/>
  </target>

  <target
    name="compile"
    depends="get-deps"
    description="o Compile the code">
    
    <mkdir dir="$${classesdir}"/>

    <j:if test="${sourcesPresent}">
      <javac
        destdir="$${classesdir}"
        excludes="**/package.html"
        debug="true"
        deprecation="true"
        optimize="false">
        <src>
          <pathelement location="${srcDir}"/>
        </src>
        <classpath refid="build.classpath" />
      </javac>
    </j:if>
    
    <!-- 
     | Copy any resources that must be present in the deployed
     | JAR file.
    -->
    <j:forEach var="resource" items="${pom.build.resources}">

      <j:choose trim="true">
        <j:when test="${(resource.targetPath != null) and (!resource.targetPath.equals(''))}">
          <j:set var="outputDir" value="$${classesdir}/${resource.targetPath}"/>
          <mkdir dir="$${classesdir}/${resource.targetPath}"/>
        </j:when>
        <j:otherwise>
          <j:set var="outputDir" value="$${classesdir}"/>
        </j:otherwise>
      </j:choose>   
 
      <copy todir="${outputDir}">
        
        <maven:makeRelativePath var="dir" basedir="${basedir}" path="${resource.directory}" separator="/"/>
  
        <j:if test="${empty dir}">
          <j:set var="dir" value="."/>
        </j:if>
        
        <fileset dir="${dir}">
        
        <j:forEach var="res" items="${resource.includes}">
          <include name="${res}"/>
        </j:forEach>
        <j:forEach var="res" items="${resource.excludes}">
          <exclude name="${res}"/>
        </j:forEach>
        </fileset>
      </copy>
    
    </j:forEach>

  </target>
    
  <target
    name="jar"
    depends="compile,test"
    description="o Create the jar">

    <jar
      jarfile="$${defaulttargetdir}/$${final.name}.jar"
      basedir="$${classesdir}"
      excludes="**/package.html"
    />

  </target>
  
  <target
    name="clean"
    description="o Clean up the generated directories">
    <delete dir="$${defaulttargetdir}"/>
    <delete dir="$${distdir}"/>
  </target>

  <target
    name="dist"
    depends="jar, javadoc"
    description="o Create a distribution">
    <mkdir dir="dist"/>
    <copy todir="dist">
      <fileset dir="$${defaulttargetdir}" includes="*.jar"/>        
      <fileset dir="$${basedir}" includes="LICENSE*, README*"/>        
    </copy>
  </target>
 
  <target
    name="test"
    depends="internal-test"
    if="test.failure"
    description="o Run the test cases">
    <fail message="There were test failures."/>
  </target>
  
  <target
    name="internal-test"
    depends="junit-present,compile-tests"
    if="Junit.present">
    <j:if test="${unitTestSourcesPresent}">
      <mkdir dir="$${testreportdir}"/>
      <junit printSummary="yes"
             haltonerror="true"
             failureproperty="test.failure"
             fork="true"
             dir="./">

        <sysproperty key="basedir" value="."/>
        <formatter type="xml"/>
        <formatter type="plain" usefile="false"/>
        <classpath>
          <path refid="build.classpath" />
          <pathelement path="$${testclassesdir}"/>
          <pathelement path="$${classesdir}"/>
        </classpath>
        <batchtest todir="$${testreportdir}">
          <fileset dir="${testSrcDir}">
            <j:forEach var="pat" items="${pom.build.unitTest.includes}">
              <include name="${pat}"/>
            </j:forEach>
            <j:forEach var="pat" items="${pom.build.unitTest.excludes}">
              <exclude name="${pat}"/>
            </j:forEach>
            
            <!-- add extra excludes if the property is set -->
            <j:if test="${context.getVariable('maven.ant.excludeTests') != null}">
              <u:tokenize var="patterns" delim=",">${maven.ant.excludeTests}</u:tokenize>
              <j:forEach var="pattern" items="${patterns}">
                <exclude name="${pattern}" />
              </j:forEach>
            </j:if>
          </fileset>
        </batchtest>
      </junit>
    </j:if>
  </target>

  <target
    name="junit-present"
    depends="init"
    unless="Junit.present">
    <echo>================================= WARNING ================================</echo>
    <echo>Junit isn't present in your $${ANT_HOME}/lib directory. Tests not executed.</echo>
    <echo>==========================================================================</echo>
  </target>

  <target 
    name="compile-tests"
    depends="junit-present,compile"
    if="Junit.present">
    <j:if test="${unitTestSourcesPresent}">
      <mkdir dir="$${testclassesdir}"/>
      <javac
        destdir="$${testclassesdir}"
        excludes="**/package.html"
        debug="true"
        deprecation="true"
        optimize="false">
        <src>
          <pathelement location="${testSrcDir}"/>
        </src>
        <classpath>
          <path refid="build.classpath" />
          <pathelement path="$${classesdir}"/>
        </classpath>
      </javac>

    <!-- Copy any resources required for unit testing -->

      <j:if test="${!pom.build.unitTest.resources.isEmpty()}">
        <j:forEach var="resource" items="${pom.build.unitTest.resources}">
          <j:choose trim="true">
            <j:when test="${!resource.includes.isEmpty()}">
               <j:set var="maven.has.test.resource.patterns" value="true"/>
             </j:when>
             <j:when test="${!resource.excludes.isEmpty()}">
               <j:set var="maven.has.test.resource.patterns" value="true"/>
             </j:when>
          </j:choose>      
        </j:forEach>
      </j:if>
   
      <j:if test="${maven.has.test.resource.patterns}">
        <j:forEach var="resource" items="${pom.build.unitTest.resources}">     
          <j:choose trim="true">
            <j:when test="${(resource.targetPath != null) and (!resource.targetPath.equals(''))}">
              <j:set var="outputDir" value="$${testclassesdir}/${resource.targetPath}"/>
              <mkdir dir="$${testclassesdir}/${resource.targetPath}"/>
            </j:when>
            <j:otherwise>
              <j:set var="outputDir" value="$${testclassesdir}"/>
            </j:otherwise>
          </j:choose>   
          <copy todir="${outputDir}">
            <fileset dir="${testSrcDir}">
              <j:forEach var="res" items="${resource.includes}">
                <include name="${res}"/>
              </j:forEach>
              <j:forEach var="res" items="${resource.excludes}">
                <exclude name="${res}"/>
              </j:forEach>
            </fileset>
          </copy>
        </j:forEach>      
      </j:if>
    </j:if>
  </target>

  <target
    name="javadoc"
    description="o Generate javadoc"
    depends="get-deps">
 
 
    <mkdir dir="$${javadocdir}"/>
 
    <!-- Get the year to display in the Javadocs -->
    <tstamp>
      <format property="year" pattern="${pom.inceptionYear}-yyyy"/>
    </tstamp>
 
    <property
      name="copyright"      
      value="Copyright &amp;copy; ${year} ${pom.organization.name}. All Rights Reserved."
    />
 
    <property
      name="title"
      value="${pom.name} ${pom.currentVersion} API"
    />
 
    <javadoc
      sourcepath="${srcDir}"
      packagenames="${pom.package}.*"
      destdir="$${javadocdir}"
      author="true"
      private="true"
      version="true"
      use="true"
      windowtitle="${title}"
      doctitle="${title}"
      bottom="${copyright}">
      <classpath>
        <path refid="build.classpath" />
      </classpath>
    </javadoc>
 
  </target>

  <target
    name="get-deps"
    depends="init"
    unless="noget">

    <x:comment>Proxy settings works only with a JDK 1.2 and higher.</x:comment>
    <setproxy 
      proxyhost="${maven.proxy.host}" 
      proxyport="${maven.proxy.port}" 
      proxyuser="${maven.proxy.username}" 
      proxypassword="${maven.proxy.password}"/>
  
    <j:forEach var="dep" items="${pom.dependencies}">
    <!-- note: this is a valid use of artifactDirectory -->
    <get 
      src="${repo}/${dep.artifactDirectory}/${dep.type}s/${dep.artifact}"
      dest="$${libdir}/${dep.artifact}"
      usetimestamp="true"
      ignoreerrors="true"
    /></j:forEach>
  </target>

  <!-- ================================================================== -->
  <!-- A N T  A U T O  I N S T A L L E R                                  -->
  <!-- ================================================================== -->
  <!-- For users that have Ant installed Maven can be automatically       -->
  <!-- installed by answering a few simple questions. We only need to     -->
  <!-- know what the user wants for ${maven.home} and ${maven.repo.local} -->
  <!-- and we're set.                                                     -->
  <!-- ================================================================== -->

  <target
    name="install-maven">

    <!--
    
    Ask the user what they would like to use for
    
    ${maven.home}
    ${maven.repo.local}
    
    -->

    <get 
      src="$${repo}/maven/maven-install-latest.jar"
      dest="$${user.home}/maven-install-latest.jar"
      usetimestamp="true"
    />
    
    <unjar
      src="$${user.home}/maven-install-latest.jar"
      dest="$${maven.home}"
    />
    
  </target>

</project>
</j:jelly>
