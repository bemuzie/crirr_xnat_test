-- Generated SQL File for updating an existing XNAT database.
-- This script is created by the update XNAT feature, which reviews an existing database and only specifies create statements for missing TABLES and COLUMNS.  It will also drop and recreate any necessary functions or views.
-- If you are running from pgAdmin, remove the following line to stop on errors (pgAdmin does not recognize the statement)
\set ON_ERROR_STOP on;

-- start transaction (if an error occurs, the database will be rolled back to its state before this file was executed)
BEGIN;



CREATE OR REPLACE FUNCTION class_exists( VARCHAR)
RETURNS BOOLEAN AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM pg_catalog.pg_class WHERE  relname=LOWER($1)
     LOOP
          RETURN TRUE;
      END LOOP;

	 RETURN FALSE;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION schema_exists( VARCHAR)
RETURNS BOOLEAN AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM pg_namespace WHERE nspname=LOWER($1)
     LOOP
          RETURN TRUE;
      END LOOP;

	 RETURN FALSE;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


CREATE OR REPLACE FUNCTION function_exists( VARCHAR)
RETURNS BOOLEAN AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM pg_proc WHERE  proname=LOWER($1)
     LOOP
          RETURN TRUE;
      END LOOP;

	 RETURN FALSE;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


CREATE OR REPLACE FUNCTION trigger_exists( VARCHAR)
RETURNS BOOLEAN AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM pg_trigger WHERE  tgname=LOWER($1)
     LOOP
          RETURN TRUE;
      END LOOP;

	 RETURN FALSE;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


CREATE OR REPLACE FUNCTION create_trigger(VARCHAR,VARCHAR)
RETURNS VARCHAR AS
'
    begin
	IF(NOT TRIGGER_EXISTS($1)) THEN
		EXECUTE $2;
		RETURN ''CREATED'';
	END IF;
	RETURN ''EXISTS'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION create_class(VARCHAR,VARCHAR)
RETURNS VARCHAR AS
'
    begin
	IF(NOT CLASS_EXISTS($1)) THEN
		EXECUTE $2;
		RETURN ''CREATED'';
	END IF;
	RETURN ''EXISTS'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION create_schema(VARCHAR,VARCHAR)
RETURNS VARCHAR AS
'
    begin
	IF(NOT SCHEMA_EXISTS($1)) THEN
		EXECUTE $2;
		RETURN ''CREATED'';
	END IF;
	RETURN ''EXISTS'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION create_function(VARCHAR,VARCHAR)
RETURNS VARCHAR AS
'
    begin
	IF(NOT FUNCTION_EXISTS($1)) THEN
		EXECUTE $2;
		RETURN ''CREATED'';
	END IF;

	RETURN ''EXISTS'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION xs_concat(text, text) RETURNS text AS
'
    DECLARE
       t text;
    begin
       IF(character_length($1) > 0) THEN
          t = $1 ||'', ''|| $2;
       ELSE
          t = $2;
       END IF;
       RETURN t;
    END;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



SELECT create_function('xs_a_concat','CREATE AGGREGATE xs_a_concat(
    BASETYPE = text,
    SFUNC = textcat,
    STYPE = text,
    INITCOND = '''')');
--BR



CREATE OR REPLACE FUNCTION i_xdat_userGroup_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:userGroup_history)('';
      FOR current_row IN SELECT * FROM xdat_userGroup_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_access_history WHERE xdat_userGroup_xdat_usergroup_id=current_row.xdat_usergroup_id AND xft_version=current_row.xft_version ORDER BY xdat_element_access_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_access_history( parent_row.xdat_element_access_id, child_count,$3,false,false);
              fullText := fullText || ''(element_access_element_access'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.displayname IS NOT NULL) THEN 
              fullText := fullText || ''(displayname:string)=('' || REPLACE(REPLACE(current_row.displayname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tag IS NOT NULL) THEN 
              fullText := fullText || ''(tag:string)=('' || REPLACE(REPLACE(current_row.tag,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.userGroup_info IS NOT NULL)) THEN
            fullText := fullText || ''(usergroup_info:integer)=('' || current_row.usergroup_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_userGroup_meta_data(current_row.userGroup_info, child_count,$3,false,false);
              fullText := fullText || ''(usergroup_info_usergroup_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.groups_group_xdat_security_xdat_security_id IS NOT NULL)) THEN
            fullText := fullText || ''(groups_group_xdat_security_xdat_security_id:integer)=('' || current_row.groups_group_xdat_security_xdat_security_id || '')'';
        END IF;
          IF (current_row.xdat_usergroup_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_usergroup_id:integer)=('' || current_row.xdat_usergroup_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_security_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:security_history)('';
      FOR current_row IN SELECT * FROM xdat_security_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_userGroup_history WHERE groups_group_xdat_security_xdat_security_id=current_row.xdat_security_id AND xft_version=current_row.xft_version ORDER BY xdat_usergroup_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_userGroup_history( parent_row.xdat_usergroup_id, child_count,$3,false,false);
              fullText := fullText || ''(groups_group_usergroup'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_user_history WHERE users_user_xdat_security_xdat_security_id=current_row.xdat_security_id AND xft_version=current_row.xft_version ORDER BY xdat_user_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_history( parent_row.xdat_user_id, child_count,$3,false,false);
              fullText := fullText || ''(users_user_user'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_role_type_history WHERE roles_role_xdat_security_xdat_security_id=current_row.xdat_security_id AND xft_version=current_row.xft_version ORDER BY role_name
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_role_type_history( parent_row.role_name, child_count,$3,false,false);
              fullText := fullText || ''(roles_role_role_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_action_type_history WHERE actions_action_xdat_security_xdat_security_id=current_row.xdat_security_id AND xft_version=current_row.xft_version ORDER BY action_name
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_action_type_history( parent_row.action_name, child_count,$3,false,false);
              fullText := fullText || ''(actions_action_action_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_security_history WHERE element_security_set_element_se_xdat_security_id=current_row.xdat_security_id AND xft_version=current_row.xft_version ORDER BY element_name
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_security_history( parent_row.element_name, child_count,$3,false,false);
              fullText := fullText || ''(element_security_set_element_security_element_security'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.newslist_news_xdat_newsentry_id IS NOT NULL)) THEN
            fullText := fullText || ''(newslist_news_xdat_newsentry_id:integer)=('' || current_row.newslist_news_xdat_newsentry_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xdat_newsEntry_history WHERE  xdat_newsentry_id=current_row.newslist_news_xdat_newsentry_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_newsEntry_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(newslist_news_newsentry:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF ((current_row.infolist_info_xdat_infoentry_id IS NOT NULL)) THEN
            fullText := fullText || ''(infolist_info_xdat_infoentry_id:integer)=('' || current_row.infolist_info_xdat_infoentry_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xdat_infoEntry_history WHERE  xdat_infoentry_id=current_row.infolist_info_xdat_infoentry_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_infoEntry_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(infolist_info_infoentry:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.system IS NOT NULL) THEN 
              fullText := fullText || ''(system:string)=('' || REPLACE(REPLACE(current_row.system,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.require_login IS NOT NULL) THEN 
              fullText := fullText || ''(require_login:integer)=('' || current_row.require_login || '')'';
          END IF;
        IF ((current_row.security_info IS NOT NULL)) THEN
            fullText := fullText || ''(security_info:integer)=('' || current_row.security_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_security_meta_data(current_row.security_info, child_count,$3,false,false);
              fullText := fullText || ''(security_info_security_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xdat_security_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_security_id:integer)=('' || current_row.xdat_security_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_access_log_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:access_log_history)('';
      FOR current_row IN SELECT * FROM xdat_access_log_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.login IS NOT NULL) THEN 
              fullText := fullText || ''(login:string)=('' || REPLACE(REPLACE(current_row.login,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.access_date IS NOT NULL) THEN 
              fullText := fullText || ''(access_date:dateTime)=('' || current_row.access_date || '')'';
          END IF;
          IF (current_row.ip IS NOT NULL) THEN 
              fullText := fullText || ''(ip:string)=('' || REPLACE(REPLACE(current_row.ip,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.method IS NOT NULL) THEN 
              fullText := fullText || ''(method:string)=('' || REPLACE(REPLACE(current_row.method,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.access_log_info IS NOT NULL)) THEN
            fullText := fullText || ''(access_log_info:integer)=('' || current_row.access_log_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_access_log_meta_data(current_row.access_log_info, child_count,$3,false,false);
              fullText := fullText || ''(access_log_info_access_log_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xdat_access_log_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_access_log_id:integer)=('' || current_row.xdat_access_log_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_security_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_security_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_element_security_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_action_type_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:action_type_history)('';
      FOR current_row IN SELECT * FROM xdat_action_type_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.action_name IS NOT NULL) THEN 
              fullText := fullText || ''(action_name:string)=('' || REPLACE(REPLACE(current_row.action_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.display_name IS NOT NULL) THEN 
              fullText := fullText || ''(display_name:string)=('' || REPLACE(REPLACE(current_row.display_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
        IF ((current_row.action_type_info IS NOT NULL)) THEN
            fullText := fullText || ''(action_type_info:integer)=('' || current_row.action_type_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_action_type_meta_data(current_row.action_type_info, child_count,$3,false,false);
              fullText := fullText || ''(action_type_info_action_type_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.actions_action_xdat_security_xdat_security_id IS NOT NULL)) THEN
            fullText := fullText || ''(actions_action_xdat_security_xdat_security_id:integer)=('' || current_row.actions_action_xdat_security_xdat_security_id || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_access_secure_ip_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_access_secure_ip_history)('';
      FOR current_row IN SELECT * FROM xdat_element_access_secure_ip_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.secure_ip IS NOT NULL) THEN 
              fullText := fullText || ''(secure_ip:string)=('' || REPLACE(REPLACE(current_row.secure_ip,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.element_access_secure_ip_info IS NOT NULL)) THEN
            fullText := fullText || ''(element_access_secure_ip_info:integer)=('' || current_row.element_access_secure_ip_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_access_secure_ip_meta_data(current_row.element_access_secure_ip_info, child_count,$3,false,false);
              fullText := fullText || ''(element_access_secure_ip_info_element_access_secure_ip_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_element_access_xdat_element_access_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_element_access_xdat_element_access_id:integer)=('' || current_row.xdat_element_access_xdat_element_access_id || '')'';
        END IF;
          IF (current_row.xdat_element_access_secure_ip_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_element_access_secure_ip_id:integer)=('' || current_row.xdat_element_access_secure_ip_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_primary_security_field_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:primary_security_field_history)('';
      FOR current_row IN SELECT * FROM xdat_primary_security_field_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.primary_security_field IS NOT NULL) THEN 
              fullText := fullText || ''(primary_security_field:string)=('' || REPLACE(REPLACE(current_row.primary_security_field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.primary_security_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(primary_security_field_info:integer)=('' || current_row.primary_security_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_primary_security_field_meta_data(current_row.primary_security_field_info, child_count,$3,false,false);
              fullText := fullText || ''(primary_security_field_info_primary_security_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.primary_security_fields_primary_element_name IS NOT NULL)) THEN
            fullText := fullText || ''(primary_security_fields_primary_element_name:string)=('' || current_row.primary_security_fields_primary_element_name || '')'';
        END IF;
          IF (current_row.xdat_primary_security_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_primary_security_field_id:integer)=('' || current_row.xdat_primary_security_field_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_user_login_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:user_login_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_user_login_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_action_type_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_action_type_history)('';
      FOR current_row IN SELECT * FROM xdat_element_action_type_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.element_action_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_action_name:string)=('' || REPLACE(REPLACE(current_row.element_action_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.display_name IS NOT NULL) THEN 
              fullText := fullText || ''(display_name:string)=('' || REPLACE(REPLACE(current_row.display_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
          IF (current_row.image IS NOT NULL) THEN 
              fullText := fullText || ''(image:string)=('' || REPLACE(REPLACE(current_row.image,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.popup IS NOT NULL) THEN 
              fullText := fullText || ''(popup:string)=('' || REPLACE(REPLACE(current_row.popup,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.secureaccess IS NOT NULL) THEN 
              fullText := fullText || ''(secureaccess:string)=('' || REPLACE(REPLACE(current_row.secureaccess,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.securefeature IS NOT NULL) THEN 
              fullText := fullText || ''(securefeature:string)=('' || REPLACE(REPLACE(current_row.securefeature,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameterstring IS NOT NULL) THEN 
              fullText := fullText || ''(parameterstring:string)=('' || REPLACE(REPLACE(current_row.parameterstring,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.grouping IS NOT NULL) THEN 
              fullText := fullText || ''(grouping:string)=('' || REPLACE(REPLACE(current_row.grouping,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.element_action_type_info IS NOT NULL)) THEN
            fullText := fullText || ''(element_action_type_info:integer)=('' || current_row.element_action_type_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_action_type_meta_data(current_row.element_action_type_info, child_count,$3,false,false);
              fullText := fullText || ''(element_action_type_info_element_action_type_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.element_actions_element_action__element_name IS NOT NULL)) THEN
            fullText := fullText || ''(element_actions_element_action__element_name:string)=('' || current_row.element_actions_element_action__element_name || '')'';
        END IF;
          IF (current_row.xdat_element_action_type_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_element_action_type_id:integer)=('' || current_row.xdat_element_action_type_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_access_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_access_history)('';
      FOR current_row IN SELECT * FROM xdat_element_access_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.secondary_password IS NOT NULL) THEN 
              fullText := fullText || ''(secondary_password:string)=('' || REPLACE(REPLACE(current_row.secondary_password,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.secondary_password_encrypt IS NOT NULL) THEN 
              fullText := fullText || ''(secondary_password_encrypt:integer)=('' || current_row.secondary_password_encrypt || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_access_secure_ip_history WHERE xdat_element_access_xdat_element_access_id=current_row.xdat_element_access_id AND xft_version=current_row.xft_version ORDER BY xdat_element_access_secure_ip_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_access_secure_ip_history( parent_row.xdat_element_access_secure_ip_id, child_count,$3,false,false);
              fullText := fullText || ''(secure_ip_element_access_secure_ip'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_field_mapping_set_history WHERE permissions_allow_set_xdat_elem_xdat_element_access_id=current_row.xdat_element_access_id AND xft_version=current_row.xft_version ORDER BY xdat_field_mapping_set_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_field_mapping_set_history( parent_row.xdat_field_mapping_set_id, child_count,$3,false,false);
              fullText := fullText || ''(permissions_allow_set_field_mapping_set'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.element_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_name:string)=('' || REPLACE(REPLACE(current_row.element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.element_access_info IS NOT NULL)) THEN
            fullText := fullText || ''(element_access_info:integer)=('' || current_row.element_access_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_access_meta_data(current_row.element_access_info, child_count,$3,false,false);
              fullText := fullText || ''(element_access_info_element_access_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_user_xdat_user_id:integer)=('' || current_row.xdat_user_xdat_user_id || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_userGroup_xdat_usergroup_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_usergroup_xdat_usergroup_id:integer)=('' || current_row.xdat_usergroup_xdat_usergroup_id || '')'';
        END IF;
          IF (current_row.xdat_element_access_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_element_access_id:integer)=('' || current_row.xdat_element_access_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_action_type_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:action_type_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_action_type_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_action_type( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:action_type)('';
      FOR current_row IN SELECT * FROM xdat_action_type WHERE  action_name=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.action_name IS NOT NULL) THEN 
              fullText := fullText || ''(action_name:string)=('' || REPLACE(REPLACE(current_row.action_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.display_name IS NOT NULL) THEN 
              fullText := fullText || ''(display_name:string)=('' || REPLACE(REPLACE(current_row.display_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
        IF ((current_row.action_type_info IS NOT NULL)) THEN
            fullText := fullText || ''(action_type_info:integer)=('' || current_row.action_type_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_action_type_meta_data(current_row.action_type_info, child_count,$3,false,false);
              fullText := fullText || ''(action_type_info_action_type_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.actions_action_xdat_security_xdat_security_id IS NOT NULL)) THEN
            fullText := fullText || ''(actions_action_xdat_security_xdat_security_id:integer)=('' || current_row.actions_action_xdat_security_xdat_security_id || '')'';
        END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_action_type( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_action_type.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_action_type LEFT JOIN xdat_action_type_meta_data meta ON xdat_action_type.action_type_info=meta.meta_data_id WHERE  action_name=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_action_type_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_action_type( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_action_type.*, meta.meta_data_id FROM xdat_action_type LEFT JOIN xdat_action_type_meta_data meta ON xdat_action_type.action_type_info=meta.meta_data_id WHERE  action_name=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:security/actions/action
        IF ((current_row.actions_action_xdat_security_xdat_security_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_security(current_row.actions_action_xdat_security_xdat_security_id, $2);
        END IF;

        --PROCESS MAPPING TABLE RELATION xdat:role_type/allowed_actions/allowed_action
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xdat_a_xdat_action_type_allowe_xdat_role_type WHERE  xdat_action_type_action_name=current_row.action_name
           LOOP 
               PERFORM update_ls_xdat_role_type( mapping_row.xdat_role_type_role_name, $2);
           END LOOP; 
        END; 
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_action_type()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_action_type( OLD.action_name, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_action_type','CREATE TRIGGER a_u_xdat_action_type  AFTER UPDATE OR DELETE ON xdat_action_type FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_action_type()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_stored_search_allowed_user_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:stored_search_allowed_user_history)('';
      FOR current_row IN SELECT * FROM xdat_stored_search_allowed_user_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.login IS NOT NULL) THEN 
              fullText := fullText || ''(login:string)=('' || REPLACE(REPLACE(current_row.login,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.stored_search_allowed_user_info IS NOT NULL)) THEN
            fullText := fullText || ''(stored_search_allowed_user_info:integer)=('' || current_row.stored_search_allowed_user_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_stored_search_allowed_user_meta_data(current_row.stored_search_allowed_user_info, child_count,$3,false,false);
              fullText := fullText || ''(stored_search_allowed_user_info_stored_search_allowed_user_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_stored_search_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_stored_search_id:string)=('' || current_row.xdat_stored_search_id || '')'';
        END IF;
          IF (current_row.xdat_stored_search_allowed_user_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_stored_search_allowed_user_id:integer)=('' || current_row.xdat_stored_search_allowed_user_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_action_type_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_action_type_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_element_action_type_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_action_type( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_action_type)('';
      FOR current_row IN SELECT * FROM xdat_element_action_type WHERE  xdat_element_action_type_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.element_action_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_action_name:string)=('' || REPLACE(REPLACE(current_row.element_action_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.display_name IS NOT NULL) THEN 
              fullText := fullText || ''(display_name:string)=('' || REPLACE(REPLACE(current_row.display_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
          IF (current_row.image IS NOT NULL) THEN 
              fullText := fullText || ''(image:string)=('' || REPLACE(REPLACE(current_row.image,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.popup IS NOT NULL) THEN 
              fullText := fullText || ''(popup:string)=('' || REPLACE(REPLACE(current_row.popup,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.secureaccess IS NOT NULL) THEN 
              fullText := fullText || ''(secureaccess:string)=('' || REPLACE(REPLACE(current_row.secureaccess,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.securefeature IS NOT NULL) THEN 
              fullText := fullText || ''(securefeature:string)=('' || REPLACE(REPLACE(current_row.securefeature,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameterstring IS NOT NULL) THEN 
              fullText := fullText || ''(parameterstring:string)=('' || REPLACE(REPLACE(current_row.parameterstring,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.grouping IS NOT NULL) THEN 
              fullText := fullText || ''(grouping:string)=('' || REPLACE(REPLACE(current_row.grouping,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.element_action_type_info IS NOT NULL)) THEN
            fullText := fullText || ''(element_action_type_info:integer)=('' || current_row.element_action_type_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_action_type_meta_data(current_row.element_action_type_info, child_count,$3,false,false);
              fullText := fullText || ''(element_action_type_info_element_action_type_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.element_actions_element_action__element_name IS NOT NULL)) THEN
            fullText := fullText || ''(element_actions_element_action__element_name:string)=('' || current_row.element_actions_element_action__element_name || '')'';
        END IF;
          IF (current_row.xdat_element_action_type_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_element_action_type_id:integer)=('' || current_row.xdat_element_action_type_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_element_action_type( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_element_action_type.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_element_action_type LEFT JOIN xdat_element_action_type_meta_data meta ON xdat_element_action_type.element_action_type_info=meta.meta_data_id WHERE  xdat_element_action_type_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_element_action_type_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_element_action_type( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_element_action_type.*, meta.meta_data_id FROM xdat_element_action_type LEFT JOIN xdat_element_action_type_meta_data meta ON xdat_element_action_type.element_action_type_info=meta.meta_data_id WHERE  xdat_element_action_type_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:element_security/element_actions/element_action
        IF ((current_row.element_actions_element_action__element_name IS NOT NULL)) THEN
        PERFORM update_ls_xdat_element_security(current_row.element_actions_element_action__element_name, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_element_action_type()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_element_action_type( OLD.xdat_element_action_type_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_element_action_type','CREATE TRIGGER a_u_xdat_element_action_type  AFTER UPDATE OR DELETE ON xdat_element_action_type FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_element_action_type()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_user_groupID_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:user_groupID_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_user_groupID_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_user_groupID( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:user_groupID)('';
      FOR current_row IN SELECT * FROM xdat_user_groupID WHERE  xdat_user_groupid_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.groupid IS NOT NULL) THEN 
              fullText := fullText || ''(groupid:string)=('' || REPLACE(REPLACE(current_row.groupid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.user_groupID_info IS NOT NULL)) THEN
            fullText := fullText || ''(user_groupid_info:integer)=('' || current_row.user_groupid_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_groupID_meta_data(current_row.user_groupID_info, child_count,$3,false,false);
              fullText := fullText || ''(user_groupid_info_user_groupid_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.groups_groupid_xdat_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(groups_groupid_xdat_user_xdat_user_id:integer)=('' || current_row.groups_groupid_xdat_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.xdat_user_groupid_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_user_groupid_id:integer)=('' || current_row.xdat_user_groupid_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_user_groupID( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_user_groupID.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_user_groupID LEFT JOIN xdat_user_groupID_meta_data meta ON xdat_user_groupID.user_groupID_info=meta.meta_data_id WHERE  xdat_user_groupid_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_user_groupID_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_user_groupID( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_user_groupID.*, meta.meta_data_id FROM xdat_user_groupID LEFT JOIN xdat_user_groupID_meta_data meta ON xdat_user_groupID.user_groupID_info=meta.meta_data_id WHERE  xdat_user_groupid_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:user/groups/groupID
        IF ((current_row.groups_groupid_xdat_user_xdat_user_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_user(current_row.groups_groupid_xdat_user_xdat_user_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_user_groupID()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_user_groupID( OLD.xdat_user_groupid_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_user_groupID','CREATE TRIGGER a_u_xdat_user_groupID  AFTER UPDATE OR DELETE ON xdat_user_groupID FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_user_groupID()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_user_groupID_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:user_groupID_history)('';
      FOR current_row IN SELECT * FROM xdat_user_groupID_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.groupid IS NOT NULL) THEN 
              fullText := fullText || ''(groupid:string)=('' || REPLACE(REPLACE(current_row.groupid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.user_groupID_info IS NOT NULL)) THEN
            fullText := fullText || ''(user_groupid_info:integer)=('' || current_row.user_groupid_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_groupID_meta_data(current_row.user_groupID_info, child_count,$3,false,false);
              fullText := fullText || ''(user_groupid_info_user_groupid_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.groups_groupid_xdat_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(groups_groupid_xdat_user_xdat_user_id:integer)=('' || current_row.groups_groupid_xdat_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.xdat_user_groupid_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_user_groupid_id:integer)=('' || current_row.xdat_user_groupid_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_access_log_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:access_log_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_access_log_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_access_log( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:access_log)('';
      FOR current_row IN SELECT * FROM xdat_access_log WHERE  xdat_access_log_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.login IS NOT NULL) THEN 
              fullText := fullText || ''(login:string)=('' || REPLACE(REPLACE(current_row.login,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.access_date IS NOT NULL) THEN 
              fullText := fullText || ''(access_date:dateTime)=('' || current_row.access_date || '')'';
          END IF;
          IF (current_row.ip IS NOT NULL) THEN 
              fullText := fullText || ''(ip:string)=('' || REPLACE(REPLACE(current_row.ip,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.method IS NOT NULL) THEN 
              fullText := fullText || ''(method:string)=('' || REPLACE(REPLACE(current_row.method,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.access_log_info IS NOT NULL)) THEN
            fullText := fullText || ''(access_log_info:integer)=('' || current_row.access_log_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_access_log_meta_data(current_row.access_log_info, child_count,$3,false,false);
              fullText := fullText || ''(access_log_info_access_log_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xdat_access_log_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_access_log_id:integer)=('' || current_row.xdat_access_log_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_access_log( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_access_log.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_access_log LEFT JOIN xdat_access_log_meta_data meta ON xdat_access_log.access_log_info=meta.meta_data_id WHERE  xdat_access_log_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_access_log_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_access_log( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_access_log.*, meta.meta_data_id FROM xdat_access_log LEFT JOIN xdat_access_log_meta_data meta ON xdat_access_log.access_log_info=meta.meta_data_id WHERE  xdat_access_log_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_access_log()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_access_log( OLD.xdat_access_log_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_access_log','CREATE TRIGGER a_u_xdat_access_log  AFTER UPDATE OR DELETE ON xdat_access_log FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_access_log()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_role_type_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:role_type_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_role_type_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_role_type( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:role_type)('';
      FOR current_row IN SELECT * FROM xdat_role_type WHERE  role_name=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xdat_a_xdat_action_type_allowe_xdat_role_type WHERE  xdat_role_type_role_name=current_row.role_name
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_action_type( mapping_row.xdat_action_type_action_name, child_count,$3,false,false);
              fullText := fullText || ''(allowed_actions_allowed_action_action_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
          IF (current_row.role_name IS NOT NULL) THEN 
              fullText := fullText || ''(role_name:string)=('' || REPLACE(REPLACE(current_row.role_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
        IF ((current_row.role_type_info IS NOT NULL)) THEN
            fullText := fullText || ''(role_type_info:integer)=('' || current_row.role_type_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_role_type_meta_data(current_row.role_type_info, child_count,$3,false,false);
              fullText := fullText || ''(role_type_info_role_type_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.roles_role_xdat_security_xdat_security_id IS NOT NULL)) THEN
            fullText := fullText || ''(roles_role_xdat_security_xdat_security_id:integer)=('' || current_row.roles_role_xdat_security_xdat_security_id || '')'';
        END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_role_type( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_role_type.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_role_type LEFT JOIN xdat_role_type_meta_data meta ON xdat_role_type.role_type_info=meta.meta_data_id WHERE  role_name=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_role_type_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xdat_a_xdat_action_type_allowe_xdat_role_type WHERE  xdat_role_type_role_name=current_row.role_name
        LOOP
          PERFORM  a_xdat_action_type( mapping_row.xdat_action_type_action_name, $2,$3,false);
        END LOOP;
        END; 
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_role_type( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_role_type.*, meta.meta_data_id FROM xdat_role_type LEFT JOIN xdat_role_type_meta_data meta ON xdat_role_type.role_type_info=meta.meta_data_id WHERE  role_name=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:security/roles/role
        IF ((current_row.roles_role_xdat_security_xdat_security_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_security(current_row.roles_role_xdat_security_xdat_security_id, $2);
        END IF;

        --PROCESS MAPPING TABLE RELATION xdat:user/assigned_roles/assigned_role
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xdat_r_xdat_role_type_assign_xdat_user WHERE  xdat_role_type_role_name=current_row.role_name
           LOOP 
               PERFORM update_ls_xdat_user( mapping_row.xdat_user_xdat_user_id, $2);
           END LOOP; 
        END; 
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_role_type()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_role_type( OLD.role_name, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_role_type','CREATE TRIGGER a_u_xdat_role_type  AFTER UPDATE OR DELETE ON xdat_role_type FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_role_type()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_search_field_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:search_field_history)('';
      FOR current_row IN SELECT * FROM xdat_search_field_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.element_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_name:string)=('' || REPLACE(REPLACE(current_row.element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.field_id IS NOT NULL) THEN 
              fullText := fullText || ''(field_id:string)=('' || REPLACE(REPLACE(current_row.field_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.header IS NOT NULL) THEN 
              fullText := fullText || ''(header:string)=('' || REPLACE(REPLACE(current_row.header,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.value IS NOT NULL) THEN 
              fullText := fullText || ''(value:string)=('' || REPLACE(REPLACE(current_row.value,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visible IS NOT NULL) THEN 
              fullText := fullText || ''(visible:integer)=('' || current_row.visible || '')'';
          END IF;
        IF ((current_row.search_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(search_field_info:integer)=('' || current_row.search_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_search_field_meta_data(current_row.search_field_info, child_count,$3,false,false);
              fullText := fullText || ''(search_field_info_search_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_stored_search_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_stored_search_id:string)=('' || current_row.xdat_stored_search_id || '')'';
        END IF;
          IF (current_row.xdat_search_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_search_field_id:integer)=('' || current_row.xdat_search_field_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_stored_search_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:stored_search_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_stored_search_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_criteria_set_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:criteria_set_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_criteria_set_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_security_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_security_history)('';
      FOR current_row IN SELECT * FROM xdat_element_security_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_primary_security_field_history WHERE primary_security_fields_primary_element_name=current_row.element_name AND xft_version=current_row.xft_version ORDER BY xdat_primary_security_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_primary_security_field_history( parent_row.xdat_primary_security_field_id, child_count,$3,false,false);
              fullText := fullText || ''(primary_security_fields_primary_security_field_primary_security_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_action_type_history WHERE element_actions_element_action__element_name=current_row.element_name AND xft_version=current_row.xft_version ORDER BY xdat_element_action_type_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_action_type_history( parent_row.xdat_element_action_type_id, child_count,$3,false,false);
              fullText := fullText || ''(element_actions_element_action_element_action_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_security_listing_action_history WHERE listing_actions_listing_action__element_name=current_row.element_name AND xft_version=current_row.xft_version ORDER BY xdat_element_security_listing_action_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_security_listing_action_history( parent_row.xdat_element_security_listing_action_id, child_count,$3,false,false);
              fullText := fullText || ''(listing_actions_listing_action_element_security_listing_action'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.element_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_name:string)=('' || REPLACE(REPLACE(current_row.element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.secondary_password IS NOT NULL) THEN 
              fullText := fullText || ''(secondary_password:integer)=('' || current_row.secondary_password || '')'';
          END IF;
          IF (current_row.secure_ip IS NOT NULL) THEN 
              fullText := fullText || ''(secure_ip:integer)=('' || current_row.secure_ip || '')'';
          END IF;
          IF (current_row.secure IS NOT NULL) THEN 
              fullText := fullText || ''(secure:integer)=('' || current_row.secure || '')'';
          END IF;
          IF (current_row.browse IS NOT NULL) THEN 
              fullText := fullText || ''(browse:integer)=('' || current_row.browse || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
          IF (current_row.quarantine IS NOT NULL) THEN 
              fullText := fullText || ''(quarantine:integer)=('' || current_row.quarantine || '')'';
          END IF;
          IF (current_row.pre_load IS NOT NULL) THEN 
              fullText := fullText || ''(pre_load:integer)=('' || current_row.pre_load || '')'';
          END IF;
          IF (current_row.searchable IS NOT NULL) THEN 
              fullText := fullText || ''(searchable:integer)=('' || current_row.searchable || '')'';
          END IF;
          IF (current_row.secure_read IS NOT NULL) THEN 
              fullText := fullText || ''(secure_read:integer)=('' || current_row.secure_read || '')'';
          END IF;
          IF (current_row.secure_edit IS NOT NULL) THEN 
              fullText := fullText || ''(secure_edit:integer)=('' || current_row.secure_edit || '')'';
          END IF;
          IF (current_row.secure_create IS NOT NULL) THEN 
              fullText := fullText || ''(secure_create:integer)=('' || current_row.secure_create || '')'';
          END IF;
          IF (current_row.secure_delete IS NOT NULL) THEN 
              fullText := fullText || ''(secure_delete:integer)=('' || current_row.secure_delete || '')'';
          END IF;
          IF (current_row.accessible IS NOT NULL) THEN 
              fullText := fullText || ''(accessible:integer)=('' || current_row.accessible || '')'';
          END IF;
          IF (current_row.usage IS NOT NULL) THEN 
              fullText := fullText || ''(usage:string)=('' || REPLACE(REPLACE(current_row.usage,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.singular IS NOT NULL) THEN 
              fullText := fullText || ''(singular:string)=('' || REPLACE(REPLACE(current_row.singular,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.plural IS NOT NULL) THEN 
              fullText := fullText || ''(plural:string)=('' || REPLACE(REPLACE(current_row.plural,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.category IS NOT NULL) THEN 
              fullText := fullText || ''(category:string)=('' || REPLACE(REPLACE(current_row.category,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.code IS NOT NULL) THEN 
              fullText := fullText || ''(code:string)=('' || REPLACE(REPLACE(current_row.code,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.element_security_info IS NOT NULL)) THEN
            fullText := fullText || ''(element_security_info:integer)=('' || current_row.element_security_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_security_meta_data(current_row.element_security_info, child_count,$3,false,false);
              fullText := fullText || ''(element_security_info_element_security_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.element_security_set_element_se_xdat_security_id IS NOT NULL)) THEN
            fullText := fullText || ''(element_security_set_element_se_xdat_security_id:integer)=('' || current_row.element_security_set_element_se_xdat_security_id || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_change_info_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:change_info_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_change_info_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_stored_search_groupID_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:stored_search_groupID_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_stored_search_groupID_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_stored_search_groupID( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:stored_search_groupID)('';
      FOR current_row IN SELECT * FROM xdat_stored_search_groupID WHERE  xdat_stored_search_groupid_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.groupid IS NOT NULL) THEN 
              fullText := fullText || ''(groupid:string)=('' || REPLACE(REPLACE(current_row.groupid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.stored_search_groupID_info IS NOT NULL)) THEN
            fullText := fullText || ''(stored_search_groupid_info:integer)=('' || current_row.stored_search_groupid_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_stored_search_groupID_meta_data(current_row.stored_search_groupID_info, child_count,$3,false,false);
              fullText := fullText || ''(stored_search_groupid_info_stored_search_groupid_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.allowed_groups_groupid_xdat_sto_id IS NOT NULL)) THEN
            fullText := fullText || ''(allowed_groups_groupid_xdat_sto_id:string)=('' || current_row.allowed_groups_groupid_xdat_sto_id || '')'';
        END IF;
          IF (current_row.xdat_stored_search_groupid_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_stored_search_groupid_id:integer)=('' || current_row.xdat_stored_search_groupid_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_stored_search_groupID( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_stored_search_groupID.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_stored_search_groupID LEFT JOIN xdat_stored_search_groupID_meta_data meta ON xdat_stored_search_groupID.stored_search_groupID_info=meta.meta_data_id WHERE  xdat_stored_search_groupid_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_stored_search_groupID_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_stored_search_groupID( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_stored_search_groupID.*, meta.meta_data_id FROM xdat_stored_search_groupID LEFT JOIN xdat_stored_search_groupID_meta_data meta ON xdat_stored_search_groupID.stored_search_groupID_info=meta.meta_data_id WHERE  xdat_stored_search_groupid_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:stored_search/allowed_groups/groupID
        IF ((current_row.allowed_groups_groupid_xdat_sto_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_stored_search(current_row.allowed_groups_groupid_xdat_sto_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_stored_search_groupID()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_stored_search_groupID( OLD.xdat_stored_search_groupid_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_stored_search_groupID','CREATE TRIGGER a_u_xdat_stored_search_groupID  AFTER UPDATE OR DELETE ON xdat_stored_search_groupID FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_stored_search_groupID()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_access_secure_ip_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_access_secure_ip_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_element_access_secure_ip_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_access_secure_ip( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_access_secure_ip)('';
      FOR current_row IN SELECT * FROM xdat_element_access_secure_ip WHERE  xdat_element_access_secure_ip_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.secure_ip IS NOT NULL) THEN 
              fullText := fullText || ''(secure_ip:string)=('' || REPLACE(REPLACE(current_row.secure_ip,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.element_access_secure_ip_info IS NOT NULL)) THEN
            fullText := fullText || ''(element_access_secure_ip_info:integer)=('' || current_row.element_access_secure_ip_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_access_secure_ip_meta_data(current_row.element_access_secure_ip_info, child_count,$3,false,false);
              fullText := fullText || ''(element_access_secure_ip_info_element_access_secure_ip_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_element_access_xdat_element_access_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_element_access_xdat_element_access_id:integer)=('' || current_row.xdat_element_access_xdat_element_access_id || '')'';
        END IF;
          IF (current_row.xdat_element_access_secure_ip_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_element_access_secure_ip_id:integer)=('' || current_row.xdat_element_access_secure_ip_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_element_access_secure_ip( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_element_access_secure_ip.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_element_access_secure_ip LEFT JOIN xdat_element_access_secure_ip_meta_data meta ON xdat_element_access_secure_ip.element_access_secure_ip_info=meta.meta_data_id WHERE  xdat_element_access_secure_ip_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_element_access_secure_ip_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_element_access_secure_ip( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_element_access_secure_ip.*, meta.meta_data_id FROM xdat_element_access_secure_ip LEFT JOIN xdat_element_access_secure_ip_meta_data meta ON xdat_element_access_secure_ip.element_access_secure_ip_info=meta.meta_data_id WHERE  xdat_element_access_secure_ip_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:element_access/secure_ip
        IF ((current_row.xdat_element_access_xdat_element_access_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_element_access(current_row.xdat_element_access_xdat_element_access_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_element_access_secure_ip()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_element_access_secure_ip( OLD.xdat_element_access_secure_ip_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_element_access_secure_ip','CREATE TRIGGER a_u_xdat_element_access_secure_ip  AFTER UPDATE OR DELETE ON xdat_element_access_secure_ip FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_element_access_secure_ip()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_Search_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:Search_history)('';
      FOR current_row IN SELECT * FROM xdat_Search_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xdat_stored_search_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xdat_stored_search_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(stored_search_stored_search:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.page IS NOT NULL) THEN 
              fullText := fullText || ''(page:integer)=('' || current_row.page || '')'';
          END IF;
        IF ((current_row.Search_info IS NOT NULL)) THEN
            fullText := fullText || ''(search_info:integer)=('' || current_row.search_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_Search_meta_data(current_row.Search_info, child_count,$3,false,false);
              fullText := fullText || ''(search_info_search_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xdat_stored_search_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(stored_search_stored_search:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_newsEntry_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:newsEntry_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_newsEntry_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_newsEntry( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:newsEntry)('';
      FOR current_row IN SELECT * FROM xdat_newsEntry WHERE  xdat_newsentry_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.date IS NOT NULL) THEN 
              fullText := fullText || ''(date:dateTime)=('' || current_row.date || '')'';
          END IF;
          IF (current_row.title IS NOT NULL) THEN 
              fullText := fullText || ''(title:string)=('' || REPLACE(REPLACE(current_row.title,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.link IS NOT NULL) THEN 
              fullText := fullText || ''(link:string)=('' || REPLACE(REPLACE(current_row.link,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.newsEntry_info IS NOT NULL)) THEN
            fullText := fullText || ''(newsentry_info:integer)=('' || current_row.newsentry_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_newsEntry_meta_data(current_row.newsEntry_info, child_count,$3,false,false);
              fullText := fullText || ''(newsentry_info_newsentry_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xdat_newsentry_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_newsentry_id:integer)=('' || current_row.xdat_newsentry_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_newsEntry( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_newsEntry.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_newsEntry LEFT JOIN xdat_newsEntry_meta_data meta ON xdat_newsEntry.newsEntry_info=meta.meta_data_id WHERE  xdat_newsentry_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_newsEntry_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_newsEntry( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xdat:newsEntry'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_newsEntry.*, meta.meta_data_id FROM xdat_newsEntry LEFT JOIN xdat_newsEntry_meta_data meta ON xdat_newsEntry.newsEntry_info=meta.meta_data_id WHERE  xdat_newsentry_id=$1
      LOOP
         UPDATE xdat_newsEntry_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION xdat:security/newsList/news
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_security WHERE newslist_news_xdat_newsentry_id=current_row.xdat_newsentry_id
        LOOP
        PERFORM update_ls_xdat_security( parent_row.xdat_security_id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_newsEntry()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_newsEntry( OLD.xdat_newsentry_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_newsEntry','CREATE TRIGGER a_u_xdat_newsEntry  AFTER UPDATE OR DELETE ON xdat_newsEntry FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_newsEntry()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_infoEntry_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:infoEntry_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_infoEntry_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_infoEntry( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:infoEntry)('';
      FOR current_row IN SELECT * FROM xdat_infoEntry WHERE  xdat_infoentry_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.date IS NOT NULL) THEN 
              fullText := fullText || ''(date:dateTime)=('' || current_row.date || '')'';
          END IF;
          IF (current_row.title IS NOT NULL) THEN 
              fullText := fullText || ''(title:string)=('' || REPLACE(REPLACE(current_row.title,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.link IS NOT NULL) THEN 
              fullText := fullText || ''(link:string)=('' || REPLACE(REPLACE(current_row.link,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.infoEntry_info IS NOT NULL)) THEN
            fullText := fullText || ''(infoentry_info:integer)=('' || current_row.infoentry_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_infoEntry_meta_data(current_row.infoEntry_info, child_count,$3,false,false);
              fullText := fullText || ''(infoentry_info_infoentry_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xdat_infoentry_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_infoentry_id:integer)=('' || current_row.xdat_infoentry_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_infoEntry( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_infoEntry.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_infoEntry LEFT JOIN xdat_infoEntry_meta_data meta ON xdat_infoEntry.infoEntry_info=meta.meta_data_id WHERE  xdat_infoentry_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_infoEntry_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_infoEntry( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xdat:infoEntry'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_infoEntry.*, meta.meta_data_id FROM xdat_infoEntry LEFT JOIN xdat_infoEntry_meta_data meta ON xdat_infoEntry.infoEntry_info=meta.meta_data_id WHERE  xdat_infoentry_id=$1
      LOOP
         UPDATE xdat_infoEntry_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION xdat:security/infoList/info
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_security WHERE infolist_info_xdat_infoentry_id=current_row.xdat_infoentry_id
        LOOP
        PERFORM update_ls_xdat_security( parent_row.xdat_security_id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_infoEntry()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_infoEntry( OLD.xdat_infoentry_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_infoEntry','CREATE TRIGGER a_u_xdat_infoEntry  AFTER UPDATE OR DELETE ON xdat_infoEntry FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_infoEntry()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_access_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_access_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_element_access_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_infoEntry_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:infoEntry_history)('';
      FOR current_row IN SELECT * FROM xdat_infoEntry_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.date IS NOT NULL) THEN 
              fullText := fullText || ''(date:dateTime)=('' || current_row.date || '')'';
          END IF;
          IF (current_row.title IS NOT NULL) THEN 
              fullText := fullText || ''(title:string)=('' || REPLACE(REPLACE(current_row.title,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.link IS NOT NULL) THEN 
              fullText := fullText || ''(link:string)=('' || REPLACE(REPLACE(current_row.link,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.infoEntry_info IS NOT NULL)) THEN
            fullText := fullText || ''(infoentry_info:integer)=('' || current_row.infoentry_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_infoEntry_meta_data(current_row.infoEntry_info, child_count,$3,false,false);
              fullText := fullText || ''(infoentry_info_infoentry_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xdat_infoentry_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_infoentry_id:integer)=('' || current_row.xdat_infoentry_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_security_listing_action_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_security_listing_action_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_element_security_listing_action_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_security_listing_action( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_security_listing_action)('';
      FOR current_row IN SELECT * FROM xdat_element_security_listing_action WHERE  xdat_element_security_listing_action_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.element_action_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_action_name:string)=('' || REPLACE(REPLACE(current_row.element_action_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.display_name IS NOT NULL) THEN 
              fullText := fullText || ''(display_name:string)=('' || REPLACE(REPLACE(current_row.display_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
          IF (current_row.image IS NOT NULL) THEN 
              fullText := fullText || ''(image:string)=('' || REPLACE(REPLACE(current_row.image,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.popup IS NOT NULL) THEN 
              fullText := fullText || ''(popup:string)=('' || REPLACE(REPLACE(current_row.popup,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.secureaccess IS NOT NULL) THEN 
              fullText := fullText || ''(secureaccess:string)=('' || REPLACE(REPLACE(current_row.secureaccess,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.securefeature IS NOT NULL) THEN 
              fullText := fullText || ''(securefeature:string)=('' || REPLACE(REPLACE(current_row.securefeature,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameterstring IS NOT NULL) THEN 
              fullText := fullText || ''(parameterstring:string)=('' || REPLACE(REPLACE(current_row.parameterstring,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.element_security_listing_action_info IS NOT NULL)) THEN
            fullText := fullText || ''(element_security_listing_action_info:integer)=('' || current_row.element_security_listing_action_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_security_listing_action_meta_data(current_row.element_security_listing_action_info, child_count,$3,false,false);
              fullText := fullText || ''(element_security_listing_action_info_element_security_listing_action_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.listing_actions_listing_action__element_name IS NOT NULL)) THEN
            fullText := fullText || ''(listing_actions_listing_action__element_name:string)=('' || current_row.listing_actions_listing_action__element_name || '')'';
        END IF;
          IF (current_row.xdat_element_security_listing_action_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_element_security_listing_action_id:integer)=('' || current_row.xdat_element_security_listing_action_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_element_security_listing_action( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_element_security_listing_action.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_element_security_listing_action LEFT JOIN xdat_element_security_listing_action_meta_data meta ON xdat_element_security_listing_action.element_security_listing_action_info=meta.meta_data_id WHERE  xdat_element_security_listing_action_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_element_security_listing_action_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_element_security_listing_action( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_element_security_listing_action.*, meta.meta_data_id FROM xdat_element_security_listing_action LEFT JOIN xdat_element_security_listing_action_meta_data meta ON xdat_element_security_listing_action.element_security_listing_action_info=meta.meta_data_id WHERE  xdat_element_security_listing_action_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:element_security/listing_actions/listing_action
        IF ((current_row.listing_actions_listing_action__element_name IS NOT NULL)) THEN
        PERFORM update_ls_xdat_element_security(current_row.listing_actions_listing_action__element_name, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_element_security_listing_action()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_element_security_listing_action( OLD.xdat_element_security_listing_action_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_element_security_listing_action','CREATE TRIGGER a_u_xdat_element_security_listing_action  AFTER UPDATE OR DELETE ON xdat_element_security_listing_action FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_element_security_listing_action()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_search_field_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:search_field_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_search_field_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_search_field( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:search_field)('';
      FOR current_row IN SELECT * FROM xdat_search_field WHERE  xdat_search_field_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.element_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_name:string)=('' || REPLACE(REPLACE(current_row.element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.field_id IS NOT NULL) THEN 
              fullText := fullText || ''(field_id:string)=('' || REPLACE(REPLACE(current_row.field_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.header IS NOT NULL) THEN 
              fullText := fullText || ''(header:string)=('' || REPLACE(REPLACE(current_row.header,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.value IS NOT NULL) THEN 
              fullText := fullText || ''(value:string)=('' || REPLACE(REPLACE(current_row.value,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visible IS NOT NULL) THEN 
              fullText := fullText || ''(visible:integer)=('' || current_row.visible || '')'';
          END IF;
        IF ((current_row.search_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(search_field_info:integer)=('' || current_row.search_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_search_field_meta_data(current_row.search_field_info, child_count,$3,false,false);
              fullText := fullText || ''(search_field_info_search_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_stored_search_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_stored_search_id:string)=('' || current_row.xdat_stored_search_id || '')'';
        END IF;
          IF (current_row.xdat_search_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_search_field_id:integer)=('' || current_row.xdat_search_field_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_search_field( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_search_field.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_search_field LEFT JOIN xdat_search_field_meta_data meta ON xdat_search_field.search_field_info=meta.meta_data_id WHERE  xdat_search_field_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_search_field_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_search_field( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_search_field.*, meta.meta_data_id FROM xdat_search_field LEFT JOIN xdat_search_field_meta_data meta ON xdat_search_field.search_field_info=meta.meta_data_id WHERE  xdat_search_field_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:stored_search/search_field
        IF ((current_row.xdat_stored_search_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_stored_search(current_row.xdat_stored_search_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_search_field()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_search_field( OLD.xdat_search_field_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_search_field','CREATE TRIGGER a_u_xdat_search_field  AFTER UPDATE OR DELETE ON xdat_search_field FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_search_field()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_Search_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:Search_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_Search_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_stored_search_allowed_user_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:stored_search_allowed_user_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_stored_search_allowed_user_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_stored_search_allowed_user( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:stored_search_allowed_user)('';
      FOR current_row IN SELECT * FROM xdat_stored_search_allowed_user WHERE  xdat_stored_search_allowed_user_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.login IS NOT NULL) THEN 
              fullText := fullText || ''(login:string)=('' || REPLACE(REPLACE(current_row.login,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.stored_search_allowed_user_info IS NOT NULL)) THEN
            fullText := fullText || ''(stored_search_allowed_user_info:integer)=('' || current_row.stored_search_allowed_user_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_stored_search_allowed_user_meta_data(current_row.stored_search_allowed_user_info, child_count,$3,false,false);
              fullText := fullText || ''(stored_search_allowed_user_info_stored_search_allowed_user_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_stored_search_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_stored_search_id:string)=('' || current_row.xdat_stored_search_id || '')'';
        END IF;
          IF (current_row.xdat_stored_search_allowed_user_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_stored_search_allowed_user_id:integer)=('' || current_row.xdat_stored_search_allowed_user_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_stored_search_allowed_user( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_stored_search_allowed_user.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_stored_search_allowed_user LEFT JOIN xdat_stored_search_allowed_user_meta_data meta ON xdat_stored_search_allowed_user.stored_search_allowed_user_info=meta.meta_data_id WHERE  xdat_stored_search_allowed_user_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_stored_search_allowed_user_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_stored_search_allowed_user( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_stored_search_allowed_user.*, meta.meta_data_id FROM xdat_stored_search_allowed_user LEFT JOIN xdat_stored_search_allowed_user_meta_data meta ON xdat_stored_search_allowed_user.stored_search_allowed_user_info=meta.meta_data_id WHERE  xdat_stored_search_allowed_user_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:stored_search/allowed_user
        IF ((current_row.xdat_stored_search_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_stored_search(current_row.xdat_stored_search_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_stored_search_allowed_user()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_stored_search_allowed_user( OLD.xdat_stored_search_allowed_user_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_stored_search_allowed_user','CREATE TRIGGER a_u_xdat_stored_search_allowed_user  AFTER UPDATE OR DELETE ON xdat_stored_search_allowed_user FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_stored_search_allowed_user()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_user_login_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:user_login_history)('';
      FOR current_row IN SELECT * FROM xdat_user_login_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.login_date IS NOT NULL) THEN 
              fullText := fullText || ''(login_date:dateTime)=('' || current_row.login_date || '')'';
          END IF;
          IF (current_row.logout_date IS NOT NULL) THEN 
              fullText := fullText || ''(logout_date:dateTime)=('' || current_row.logout_date || '')'';
          END IF;
          IF (current_row.session_id IS NOT NULL) THEN 
              fullText := fullText || ''(session_id:string)=('' || REPLACE(REPLACE(current_row.session_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.ip_address IS NOT NULL) THEN 
              fullText := fullText || ''(ip_address:string)=('' || REPLACE(REPLACE(current_row.ip_address,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(user_xdat_user_id:integer)=('' || current_row.user_xdat_user_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xdat_user_history WHERE  xdat_user_id=current_row.user_xdat_user_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(user_user:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF ((current_row.user_login_info IS NOT NULL)) THEN
            fullText := fullText || ''(user_login_info:integer)=('' || current_row.user_login_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_login_meta_data(current_row.user_login_info, child_count,$3,false,false);
              fullText := fullText || ''(user_login_info_user_login_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xdat_user_login_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_user_login_id:integer)=('' || current_row.xdat_user_login_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_field_mapping_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:field_mapping_history)('';
      FOR current_row IN SELECT * FROM xdat_field_mapping_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.field IS NOT NULL) THEN 
              fullText := fullText || ''(field:string)=('' || REPLACE(REPLACE(current_row.field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.field_value IS NOT NULL) THEN 
              fullText := fullText || ''(field_value:string)=('' || REPLACE(REPLACE(current_row.field_value,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.create_element IS NOT NULL) THEN 
              fullText := fullText || ''(create_element:integer)=('' || current_row.create_element || '')'';
          END IF;
          IF (current_row.read_element IS NOT NULL) THEN 
              fullText := fullText || ''(read_element:integer)=('' || current_row.read_element || '')'';
          END IF;
          IF (current_row.edit_element IS NOT NULL) THEN 
              fullText := fullText || ''(edit_element:integer)=('' || current_row.edit_element || '')'';
          END IF;
          IF (current_row.delete_element IS NOT NULL) THEN 
              fullText := fullText || ''(delete_element:integer)=('' || current_row.delete_element || '')'';
          END IF;
          IF (current_row.active_element IS NOT NULL) THEN 
              fullText := fullText || ''(active_element:integer)=('' || current_row.active_element || '')'';
          END IF;
          IF (current_row.comparison_type IS NOT NULL) THEN 
              fullText := fullText || ''(comparison_type:string)=('' || REPLACE(REPLACE(current_row.comparison_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.field_mapping_info IS NOT NULL)) THEN
            fullText := fullText || ''(field_mapping_info:integer)=('' || current_row.field_mapping_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_field_mapping_meta_data(current_row.field_mapping_info, child_count,$3,false,false);
              fullText := fullText || ''(field_mapping_info_field_mapping_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_field_mapping_set_xdat_field_mapping_set_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_field_mapping_set_xdat_field_mapping_set_id:integer)=('' || current_row.xdat_field_mapping_set_xdat_field_mapping_set_id || '')'';
        END IF;
          IF (current_row.xdat_field_mapping_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_field_mapping_id:integer)=('' || current_row.xdat_field_mapping_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_field_mapping_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:field_mapping_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_field_mapping_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_field_mapping( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:field_mapping)('';
      FOR current_row IN SELECT * FROM xdat_field_mapping WHERE  xdat_field_mapping_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.field IS NOT NULL) THEN 
              fullText := fullText || ''(field:string)=('' || REPLACE(REPLACE(current_row.field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.field_value IS NOT NULL) THEN 
              fullText := fullText || ''(field_value:string)=('' || REPLACE(REPLACE(current_row.field_value,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.create_element IS NOT NULL) THEN 
              fullText := fullText || ''(create_element:integer)=('' || current_row.create_element || '')'';
          END IF;
          IF (current_row.read_element IS NOT NULL) THEN 
              fullText := fullText || ''(read_element:integer)=('' || current_row.read_element || '')'';
          END IF;
          IF (current_row.edit_element IS NOT NULL) THEN 
              fullText := fullText || ''(edit_element:integer)=('' || current_row.edit_element || '')'';
          END IF;
          IF (current_row.delete_element IS NOT NULL) THEN 
              fullText := fullText || ''(delete_element:integer)=('' || current_row.delete_element || '')'';
          END IF;
          IF (current_row.active_element IS NOT NULL) THEN 
              fullText := fullText || ''(active_element:integer)=('' || current_row.active_element || '')'';
          END IF;
          IF (current_row.comparison_type IS NOT NULL) THEN 
              fullText := fullText || ''(comparison_type:string)=('' || REPLACE(REPLACE(current_row.comparison_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.field_mapping_info IS NOT NULL)) THEN
            fullText := fullText || ''(field_mapping_info:integer)=('' || current_row.field_mapping_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_field_mapping_meta_data(current_row.field_mapping_info, child_count,$3,false,false);
              fullText := fullText || ''(field_mapping_info_field_mapping_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_field_mapping_set_xdat_field_mapping_set_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_field_mapping_set_xdat_field_mapping_set_id:integer)=('' || current_row.xdat_field_mapping_set_xdat_field_mapping_set_id || '')'';
        END IF;
          IF (current_row.xdat_field_mapping_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_field_mapping_id:integer)=('' || current_row.xdat_field_mapping_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_field_mapping( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_field_mapping.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_field_mapping LEFT JOIN xdat_field_mapping_meta_data meta ON xdat_field_mapping.field_mapping_info=meta.meta_data_id WHERE  xdat_field_mapping_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_field_mapping_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_field_mapping( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_field_mapping.*, meta.meta_data_id FROM xdat_field_mapping LEFT JOIN xdat_field_mapping_meta_data meta ON xdat_field_mapping.field_mapping_info=meta.meta_data_id WHERE  xdat_field_mapping_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:field_mapping_set/allow
        IF ((current_row.xdat_field_mapping_set_xdat_field_mapping_set_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_field_mapping_set(current_row.xdat_field_mapping_set_xdat_field_mapping_set_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_field_mapping()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_field_mapping( OLD.xdat_field_mapping_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_field_mapping','CREATE TRIGGER a_u_xdat_field_mapping  AFTER UPDATE OR DELETE ON xdat_field_mapping FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_field_mapping()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_userGroup_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:userGroup_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_userGroup_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_field_mapping_set_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:field_mapping_set_history)('';
      FOR current_row IN SELECT * FROM xdat_field_mapping_set_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_field_mapping_history WHERE xdat_field_mapping_set_xdat_field_mapping_set_id=current_row.xdat_field_mapping_set_id AND xft_version=current_row.xft_version ORDER BY xdat_field_mapping_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_field_mapping_history( parent_row.xdat_field_mapping_id, child_count,$3,false,false);
              fullText := fullText || ''(allow_field_mapping'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_field_mapping_set_history WHERE sub_set_xdat_field_mapping_set_id=current_row.xdat_field_mapping_set_id AND xft_version=current_row.xft_version ORDER BY xdat_field_mapping_set_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_field_mapping_set_history( parent_row.xdat_field_mapping_set_id, child_count,$3,false,false);
              fullText := fullText || ''(sub_set_field_mapping_set'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.method IS NOT NULL) THEN 
              fullText := fullText || ''(method:string)=('' || REPLACE(REPLACE(current_row.method,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.field_mapping_set_info IS NOT NULL)) THEN
            fullText := fullText || ''(field_mapping_set_info:integer)=('' || current_row.field_mapping_set_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_field_mapping_set_meta_data(current_row.field_mapping_set_info, child_count,$3,false,false);
              fullText := fullText || ''(field_mapping_set_info_field_mapping_set_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.permissions_allow_set_xdat_elem_xdat_element_access_id IS NOT NULL)) THEN
            fullText := fullText || ''(permissions_allow_set_xdat_elem_xdat_element_access_id:integer)=('' || current_row.permissions_allow_set_xdat_elem_xdat_element_access_id || '')'';
        END IF;
          IF (current_row.xdat_field_mapping_set_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_field_mapping_set_id:integer)=('' || current_row.xdat_field_mapping_set_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_criteria_set_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:criteria_set_history)('';
      FOR current_row IN SELECT * FROM xdat_criteria_set_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_criteria_history WHERE xdat_criteria_set_xdat_criteria_set_id=current_row.xdat_criteria_set_id AND xft_version=current_row.xft_version ORDER BY xdat_criteria_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_criteria_history( parent_row.xdat_criteria_id, child_count,$3,false,false);
              fullText := fullText || ''(criteria_criteria'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_criteria_set_history WHERE child_set_xdat_criteria_set_id=current_row.xdat_criteria_set_id AND xft_version=current_row.xft_version ORDER BY xdat_criteria_set_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_criteria_set_history( parent_row.xdat_criteria_set_id, child_count,$3,false,false);
              fullText := fullText || ''(child_set_criteria_set'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.method IS NOT NULL) THEN 
              fullText := fullText || ''(method:string)=('' || REPLACE(REPLACE(current_row.method,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.criteria_set_info IS NOT NULL)) THEN
            fullText := fullText || ''(criteria_set_info:integer)=('' || current_row.criteria_set_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_criteria_set_meta_data(current_row.criteria_set_info, child_count,$3,false,false);
              fullText := fullText || ''(criteria_set_info_criteria_set_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_stored_search_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_stored_search_id:string)=('' || current_row.xdat_stored_search_id || '')'';
        END IF;
          IF (current_row.xdat_criteria_set_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_criteria_set_id:integer)=('' || current_row.xdat_criteria_set_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_field_mapping_set_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:field_mapping_set_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_field_mapping_set_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_field_mapping_set( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:field_mapping_set)('';
      FOR current_row IN SELECT * FROM xdat_field_mapping_set WHERE  xdat_field_mapping_set_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_field_mapping WHERE xdat_field_mapping_set_xdat_field_mapping_set_id=current_row.xdat_field_mapping_set_id ORDER BY xdat_field_mapping_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_field_mapping( parent_row.xdat_field_mapping_id, child_count,$3,false,false);
              fullText := fullText || ''(allow_field_mapping'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_field_mapping_set WHERE sub_set_xdat_field_mapping_set_id=current_row.xdat_field_mapping_set_id ORDER BY xdat_field_mapping_set_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_field_mapping_set( parent_row.xdat_field_mapping_set_id, child_count,$3,false,false);
              fullText := fullText || ''(sub_set_field_mapping_set'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.method IS NOT NULL) THEN 
              fullText := fullText || ''(method:string)=('' || REPLACE(REPLACE(current_row.method,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.field_mapping_set_info IS NOT NULL)) THEN
            fullText := fullText || ''(field_mapping_set_info:integer)=('' || current_row.field_mapping_set_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_field_mapping_set_meta_data(current_row.field_mapping_set_info, child_count,$3,false,false);
              fullText := fullText || ''(field_mapping_set_info_field_mapping_set_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.permissions_allow_set_xdat_elem_xdat_element_access_id IS NOT NULL)) THEN
            fullText := fullText || ''(permissions_allow_set_xdat_elem_xdat_element_access_id:integer)=('' || current_row.permissions_allow_set_xdat_elem_xdat_element_access_id || '')'';
        END IF;
          IF (current_row.xdat_field_mapping_set_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_field_mapping_set_id:integer)=('' || current_row.xdat_field_mapping_set_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_field_mapping_set( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_field_mapping_set.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_field_mapping_set LEFT JOIN xdat_field_mapping_set_meta_data meta ON xdat_field_mapping_set.field_mapping_set_info=meta.meta_data_id WHERE  xdat_field_mapping_set_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_field_mapping_set_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_field_mapping WHERE xdat_field_mapping_set_xdat_field_mapping_set_id=current_row.xdat_field_mapping_set_id
        LOOP
          PERFORM  a_xdat_field_mapping( parent_row.xdat_field_mapping_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_field_mapping_set WHERE sub_set_xdat_field_mapping_set_id=current_row.xdat_field_mapping_set_id
        LOOP
          PERFORM  a_xdat_field_mapping_set( parent_row.xdat_field_mapping_set_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_field_mapping_set( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_field_mapping_set.*, meta.meta_data_id FROM xdat_field_mapping_set LEFT JOIN xdat_field_mapping_set_meta_data meta ON xdat_field_mapping_set.field_mapping_set_info=meta.meta_data_id WHERE  xdat_field_mapping_set_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:element_access/permissions/allow_set
        IF ((current_row.permissions_allow_set_xdat_elem_xdat_element_access_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_element_access(current_row.permissions_allow_set_xdat_elem_xdat_element_access_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_field_mapping_set()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_field_mapping_set( OLD.xdat_field_mapping_set_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_field_mapping_set','CREATE TRIGGER a_u_xdat_field_mapping_set  AFTER UPDATE OR DELETE ON xdat_field_mapping_set FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_field_mapping_set()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_access( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_access)('';
      FOR current_row IN SELECT * FROM xdat_element_access WHERE  xdat_element_access_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.secondary_password IS NOT NULL) THEN 
              fullText := fullText || ''(secondary_password:string)=('' || REPLACE(REPLACE(current_row.secondary_password,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.secondary_password_encrypt IS NOT NULL) THEN 
              fullText := fullText || ''(secondary_password_encrypt:integer)=('' || current_row.secondary_password_encrypt || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_access_secure_ip WHERE xdat_element_access_xdat_element_access_id=current_row.xdat_element_access_id ORDER BY xdat_element_access_secure_ip_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_access_secure_ip( parent_row.xdat_element_access_secure_ip_id, child_count,$3,false,false);
              fullText := fullText || ''(secure_ip_element_access_secure_ip'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_field_mapping_set WHERE permissions_allow_set_xdat_elem_xdat_element_access_id=current_row.xdat_element_access_id ORDER BY xdat_field_mapping_set_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_field_mapping_set( parent_row.xdat_field_mapping_set_id, child_count,$3,false,false);
              fullText := fullText || ''(permissions_allow_set_field_mapping_set'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.element_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_name:string)=('' || REPLACE(REPLACE(current_row.element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.element_access_info IS NOT NULL)) THEN
            fullText := fullText || ''(element_access_info:integer)=('' || current_row.element_access_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_access_meta_data(current_row.element_access_info, child_count,$3,false,false);
              fullText := fullText || ''(element_access_info_element_access_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_user_xdat_user_id:integer)=('' || current_row.xdat_user_xdat_user_id || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_userGroup_xdat_usergroup_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_usergroup_xdat_usergroup_id:integer)=('' || current_row.xdat_usergroup_xdat_usergroup_id || '')'';
        END IF;
          IF (current_row.xdat_element_access_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_element_access_id:integer)=('' || current_row.xdat_element_access_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_element_access( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_element_access.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_element_access LEFT JOIN xdat_element_access_meta_data meta ON xdat_element_access.element_access_info=meta.meta_data_id WHERE  xdat_element_access_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_element_access_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_access_secure_ip WHERE xdat_element_access_xdat_element_access_id=current_row.xdat_element_access_id
        LOOP
          PERFORM  a_xdat_element_access_secure_ip( parent_row.xdat_element_access_secure_ip_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_field_mapping_set WHERE permissions_allow_set_xdat_elem_xdat_element_access_id=current_row.xdat_element_access_id
        LOOP
          PERFORM  a_xdat_field_mapping_set( parent_row.xdat_field_mapping_set_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_element_access( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xdat:element_access'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_element_access.*, meta.meta_data_id FROM xdat_element_access LEFT JOIN xdat_element_access_meta_data meta ON xdat_element_access.element_access_info=meta.meta_data_id WHERE  xdat_element_access_id=$1
      LOOP
         UPDATE xdat_element_access_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:user/element_access
        IF ((current_row.xdat_user_xdat_user_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_user(current_row.xdat_user_xdat_user_id, $2);
        END IF;

        --PROCESS SUBORDINATE RELATION xdat:userGroup/element_access
        IF ((current_row.xdat_userGroup_xdat_usergroup_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_userGroup(current_row.xdat_userGroup_xdat_usergroup_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_element_access()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_element_access( OLD.xdat_element_access_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_element_access','CREATE TRIGGER a_u_xdat_element_access  AFTER UPDATE OR DELETE ON xdat_element_access FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_element_access()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_userGroup( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:userGroup)('';
      FOR current_row IN SELECT * FROM xdat_userGroup WHERE  xdat_usergroup_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_access WHERE xdat_userGroup_xdat_usergroup_id=current_row.xdat_usergroup_id ORDER BY xdat_element_access_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_access( parent_row.xdat_element_access_id, child_count,$3,false,false);
              fullText := fullText || ''(element_access_element_access'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.displayname IS NOT NULL) THEN 
              fullText := fullText || ''(displayname:string)=('' || REPLACE(REPLACE(current_row.displayname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tag IS NOT NULL) THEN 
              fullText := fullText || ''(tag:string)=('' || REPLACE(REPLACE(current_row.tag,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.userGroup_info IS NOT NULL)) THEN
            fullText := fullText || ''(usergroup_info:integer)=('' || current_row.usergroup_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_userGroup_meta_data(current_row.userGroup_info, child_count,$3,false,false);
              fullText := fullText || ''(usergroup_info_usergroup_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.groups_group_xdat_security_xdat_security_id IS NOT NULL)) THEN
            fullText := fullText || ''(groups_group_xdat_security_xdat_security_id:integer)=('' || current_row.groups_group_xdat_security_xdat_security_id || '')'';
        END IF;
          IF (current_row.xdat_usergroup_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_usergroup_id:integer)=('' || current_row.xdat_usergroup_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_userGroup( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_userGroup.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_userGroup LEFT JOIN xdat_userGroup_meta_data meta ON xdat_userGroup.userGroup_info=meta.meta_data_id WHERE  xdat_usergroup_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_userGroup_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_access WHERE xdat_userGroup_xdat_usergroup_id=current_row.xdat_usergroup_id
        LOOP
          PERFORM  a_xdat_element_access( parent_row.xdat_element_access_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_userGroup( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xdat:userGroup'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_userGroup.*, meta.meta_data_id FROM xdat_userGroup LEFT JOIN xdat_userGroup_meta_data meta ON xdat_userGroup.userGroup_info=meta.meta_data_id WHERE  xdat_usergroup_id=$1
      LOOP
         UPDATE xdat_userGroup_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:security/groups/group
        IF ((current_row.groups_group_xdat_security_xdat_security_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_security(current_row.groups_group_xdat_security_xdat_security_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_userGroup()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_userGroup( OLD.xdat_usergroup_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_userGroup','CREATE TRIGGER a_u_xdat_userGroup  AFTER UPDATE OR DELETE ON xdat_userGroup FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_userGroup()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_change_info_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:change_info_history)('';
      FOR current_row IN SELECT * FROM xdat_change_info_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.change_user IS NOT NULL)) THEN
            fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xdat_user_history WHERE  xdat_user_id=current_row.change_user AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(change_user_user:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.comment IS NOT NULL) THEN 
              fullText := fullText || ''(comment:string)=('' || REPLACE(REPLACE(current_row.comment,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.event_id IS NOT NULL) THEN 
              fullText := fullText || ''(event_id:integer)=('' || current_row.event_id || '')'';
          END IF;
          IF (current_row.xdat_change_info_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_change_info_id:long)=('' || current_row.xdat_change_info_id || '')'';
          END IF;
        IF ((current_row.change_info_info IS NOT NULL)) THEN
            fullText := fullText || ''(change_info_info:integer)=('' || current_row.change_info_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_change_info_meta_data(current_row.change_info_info, child_count,$3,false,false);
              fullText := fullText || ''(change_info_info_change_info_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_role_type_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:role_type_history)('';
      FOR current_row IN SELECT * FROM xdat_role_type_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xdat_a_xdat_action_type_allowe_xdat_role_type_history WHERE  xdat_role_type_role_name=current_row.role_name AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_action_type_history( mapping_row.xdat_action_type_action_name, child_count,$3,false,false);
              fullText := fullText || ''(allowed_actions_allowed_action_action_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
          IF (current_row.role_name IS NOT NULL) THEN 
              fullText := fullText || ''(role_name:string)=('' || REPLACE(REPLACE(current_row.role_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
        IF ((current_row.role_type_info IS NOT NULL)) THEN
            fullText := fullText || ''(role_type_info:integer)=('' || current_row.role_type_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_role_type_meta_data(current_row.role_type_info, child_count,$3,false,false);
              fullText := fullText || ''(role_type_info_role_type_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.roles_role_xdat_security_xdat_security_id IS NOT NULL)) THEN
            fullText := fullText || ''(roles_role_xdat_security_xdat_security_id:integer)=('' || current_row.roles_role_xdat_security_xdat_security_id || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_stored_search_groupID_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:stored_search_groupID_history)('';
      FOR current_row IN SELECT * FROM xdat_stored_search_groupID_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.groupid IS NOT NULL) THEN 
              fullText := fullText || ''(groupid:string)=('' || REPLACE(REPLACE(current_row.groupid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.stored_search_groupID_info IS NOT NULL)) THEN
            fullText := fullText || ''(stored_search_groupid_info:integer)=('' || current_row.stored_search_groupid_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_stored_search_groupID_meta_data(current_row.stored_search_groupID_info, child_count,$3,false,false);
              fullText := fullText || ''(stored_search_groupid_info_stored_search_groupid_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.allowed_groups_groupid_xdat_sto_id IS NOT NULL)) THEN
            fullText := fullText || ''(allowed_groups_groupid_xdat_sto_id:string)=('' || current_row.allowed_groups_groupid_xdat_sto_id || '')'';
        END IF;
          IF (current_row.xdat_stored_search_groupid_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_stored_search_groupid_id:integer)=('' || current_row.xdat_stored_search_groupid_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_criteria_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:criteria_history)('';
      FOR current_row IN SELECT * FROM xdat_criteria_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.schema_field IS NOT NULL) THEN 
              fullText := fullText || ''(schema_field:string)=('' || REPLACE(REPLACE(current_row.schema_field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.comparison_type IS NOT NULL) THEN 
              fullText := fullText || ''(comparison_type:string)=('' || REPLACE(REPLACE(current_row.comparison_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.custom_search IS NOT NULL) THEN 
              fullText := fullText || ''(custom_search:string)=('' || REPLACE(REPLACE(current_row.custom_search,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.value IS NOT NULL) THEN 
              fullText := fullText || ''(value:string)=('' || REPLACE(REPLACE(current_row.value,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.override_value_formatting IS NOT NULL) THEN 
              fullText := fullText || ''(override_value_formatting:integer)=('' || current_row.override_value_formatting || '')'';
          END IF;
        IF ((current_row.criteria_info IS NOT NULL)) THEN
            fullText := fullText || ''(criteria_info:integer)=('' || current_row.criteria_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_criteria_meta_data(current_row.criteria_info, child_count,$3,false,false);
              fullText := fullText || ''(criteria_info_criteria_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_criteria_set_xdat_criteria_set_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_criteria_set_xdat_criteria_set_id:integer)=('' || current_row.xdat_criteria_set_xdat_criteria_set_id || '')'';
        END IF;
          IF (current_row.xdat_criteria_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_criteria_id:integer)=('' || current_row.xdat_criteria_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_security_listing_action_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_security_listing_action_history)('';
      FOR current_row IN SELECT * FROM xdat_element_security_listing_action_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.element_action_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_action_name:string)=('' || REPLACE(REPLACE(current_row.element_action_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.display_name IS NOT NULL) THEN 
              fullText := fullText || ''(display_name:string)=('' || REPLACE(REPLACE(current_row.display_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
          IF (current_row.image IS NOT NULL) THEN 
              fullText := fullText || ''(image:string)=('' || REPLACE(REPLACE(current_row.image,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.popup IS NOT NULL) THEN 
              fullText := fullText || ''(popup:string)=('' || REPLACE(REPLACE(current_row.popup,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.secureaccess IS NOT NULL) THEN 
              fullText := fullText || ''(secureaccess:string)=('' || REPLACE(REPLACE(current_row.secureaccess,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.securefeature IS NOT NULL) THEN 
              fullText := fullText || ''(securefeature:string)=('' || REPLACE(REPLACE(current_row.securefeature,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameterstring IS NOT NULL) THEN 
              fullText := fullText || ''(parameterstring:string)=('' || REPLACE(REPLACE(current_row.parameterstring,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.element_security_listing_action_info IS NOT NULL)) THEN
            fullText := fullText || ''(element_security_listing_action_info:integer)=('' || current_row.element_security_listing_action_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_security_listing_action_meta_data(current_row.element_security_listing_action_info, child_count,$3,false,false);
              fullText := fullText || ''(element_security_listing_action_info_element_security_listing_action_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.listing_actions_listing_action__element_name IS NOT NULL)) THEN
            fullText := fullText || ''(listing_actions_listing_action__element_name:string)=('' || current_row.listing_actions_listing_action__element_name || '')'';
        END IF;
          IF (current_row.xdat_element_security_listing_action_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_element_security_listing_action_id:integer)=('' || current_row.xdat_element_security_listing_action_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_newsEntry_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:newsEntry_history)('';
      FOR current_row IN SELECT * FROM xdat_newsEntry_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.date IS NOT NULL) THEN 
              fullText := fullText || ''(date:dateTime)=('' || current_row.date || '')'';
          END IF;
          IF (current_row.title IS NOT NULL) THEN 
              fullText := fullText || ''(title:string)=('' || REPLACE(REPLACE(current_row.title,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.link IS NOT NULL) THEN 
              fullText := fullText || ''(link:string)=('' || REPLACE(REPLACE(current_row.link,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.newsEntry_info IS NOT NULL)) THEN
            fullText := fullText || ''(newsentry_info:integer)=('' || current_row.newsentry_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_newsEntry_meta_data(current_row.newsEntry_info, child_count,$3,false,false);
              fullText := fullText || ''(newsentry_info_newsentry_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xdat_newsentry_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_newsentry_id:integer)=('' || current_row.xdat_newsentry_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_user_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:user_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_user_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_user( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:user)('';
      FOR current_row IN SELECT * FROM xdat_user WHERE  xdat_user_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.login IS NOT NULL) THEN 
              fullText := fullText || ''(login:string)=('' || REPLACE(REPLACE(current_row.login,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.firstname IS NOT NULL) THEN 
              fullText := fullText || ''(firstname:string)=('' || REPLACE(REPLACE(current_row.firstname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.lastname IS NOT NULL) THEN 
              fullText := fullText || ''(lastname:string)=('' || REPLACE(REPLACE(current_row.lastname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.email IS NOT NULL) THEN 
              fullText := fullText || ''(email:string)=('' || REPLACE(REPLACE(current_row.email,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.primary_password IS NOT NULL) THEN 
              fullText := fullText || ''(primary_password:string)=('' || REPLACE(REPLACE(current_row.primary_password,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.primary_password_encrypt IS NOT NULL) THEN 
              fullText := fullText || ''(primary_password_encrypt:integer)=('' || current_row.primary_password_encrypt || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_access WHERE xdat_user_xdat_user_id=current_row.xdat_user_id ORDER BY xdat_element_access_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_access( parent_row.xdat_element_access_id, child_count,$3,false,false);
              fullText := fullText || ''(element_access_element_access'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xdat_r_xdat_role_type_assign_xdat_user WHERE  xdat_user_xdat_user_id=current_row.xdat_user_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_role_type( mapping_row.xdat_role_type_role_name, child_count,$3,false,false);
              fullText := fullText || ''(assigned_roles_assigned_role_role_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
          IF (current_row.quarantine_path IS NOT NULL) THEN 
              fullText := fullText || ''(quarantine_path:string)=('' || REPLACE(REPLACE(current_row.quarantine_path,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_user_groupID WHERE groups_groupid_xdat_user_xdat_user_id=current_row.xdat_user_id ORDER BY xdat_user_groupid_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_groupID( parent_row.xdat_user_groupid_id, child_count,$3,false,false);
              fullText := fullText || ''(groups_groupid_user_groupid'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.enabled IS NOT NULL) THEN 
              fullText := fullText || ''(enabled:integer)=('' || current_row.enabled || '')'';
          END IF;
          IF (current_row.verified IS NOT NULL) THEN 
              fullText := fullText || ''(verified:integer)=('' || current_row.verified || '')'';
          END IF;
          IF (current_row.salt IS NOT NULL) THEN 
              fullText := fullText || ''(salt:string)=('' || REPLACE(REPLACE(current_row.salt,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.user_info IS NOT NULL)) THEN
            fullText := fullText || ''(user_info:integer)=('' || current_row.user_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_meta_data(current_row.user_info, child_count,$3,false,false);
              fullText := fullText || ''(user_info_user_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.users_user_xdat_security_xdat_security_id IS NOT NULL)) THEN
            fullText := fullText || ''(users_user_xdat_security_xdat_security_id:integer)=('' || current_row.users_user_xdat_security_xdat_security_id || '')'';
        END IF;
          IF (current_row.xdat_user_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_user_id:integer)=('' || current_row.xdat_user_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_user( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_user.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_user LEFT JOIN xdat_user_meta_data meta ON xdat_user.user_info=meta.meta_data_id WHERE  xdat_user_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_user_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_access WHERE xdat_user_xdat_user_id=current_row.xdat_user_id
        LOOP
          PERFORM  a_xdat_element_access( parent_row.xdat_element_access_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xdat_r_xdat_role_type_assign_xdat_user WHERE  xdat_user_xdat_user_id=current_row.xdat_user_id
        LOOP
          PERFORM  a_xdat_role_type( mapping_row.xdat_role_type_role_name, $2,$3,false);
        END LOOP;
        END; 
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_user_groupID WHERE groups_groupid_xdat_user_xdat_user_id=current_row.xdat_user_id
        LOOP
          PERFORM  a_xdat_user_groupID( parent_row.xdat_user_groupid_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_user( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xdat:user'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_user.*, meta.meta_data_id FROM xdat_user LEFT JOIN xdat_user_meta_data meta ON xdat_user.user_info=meta.meta_data_id WHERE  xdat_user_id=$1
      LOOP
         UPDATE xdat_user_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:security/users/user
        IF ((current_row.users_user_xdat_security_xdat_security_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_security(current_row.users_user_xdat_security_xdat_security_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_user()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_user( OLD.xdat_user_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_user','CREATE TRIGGER a_u_xdat_user  AFTER UPDATE OR DELETE ON xdat_user FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_user()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_user_login( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:user_login)('';
      FOR current_row IN SELECT * FROM xdat_user_login WHERE  xdat_user_login_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.login_date IS NOT NULL) THEN 
              fullText := fullText || ''(login_date:dateTime)=('' || current_row.login_date || '')'';
          END IF;
          IF (current_row.logout_date IS NOT NULL) THEN 
              fullText := fullText || ''(logout_date:dateTime)=('' || current_row.logout_date || '')'';
          END IF;
          IF (current_row.session_id IS NOT NULL) THEN 
              fullText := fullText || ''(session_id:string)=('' || REPLACE(REPLACE(current_row.session_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.ip_address IS NOT NULL) THEN 
              fullText := fullText || ''(ip_address:string)=('' || REPLACE(REPLACE(current_row.ip_address,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(user_xdat_user_id:integer)=('' || current_row.user_xdat_user_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user(current_row.user_xdat_user_id, child_count,$3,false,false);
              fullText := fullText || ''(user_user:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.user_login_info IS NOT NULL)) THEN
            fullText := fullText || ''(user_login_info:integer)=('' || current_row.user_login_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_login_meta_data(current_row.user_login_info, child_count,$3,false,false);
              fullText := fullText || ''(user_login_info_user_login_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xdat_user_login_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_user_login_id:integer)=('' || current_row.xdat_user_login_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_user_login( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_user_login.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_user_login LEFT JOIN xdat_user_login_meta_data meta ON xdat_user_login.user_login_info=meta.meta_data_id WHERE  xdat_user_login_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_user_login_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.user_xdat_user_id IS NOT NULL)) THEN
          PERFORM  a_xdat_user(current_row.user_xdat_user_id, $2,$3,false);
        END IF;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_user_login( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_user_login.*, meta.meta_data_id FROM xdat_user_login LEFT JOIN xdat_user_login_meta_data meta ON xdat_user_login.user_login_info=meta.meta_data_id WHERE  xdat_user_login_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_user_login()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_user_login( OLD.xdat_user_login_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_user_login','CREATE TRIGGER a_u_xdat_user_login  AFTER UPDATE OR DELETE ON xdat_user_login FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_user_login()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_change_info( BIGINT, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:change_info)('';
      FOR current_row IN SELECT * FROM xdat_change_info WHERE  xdat_change_info_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.change_user IS NOT NULL)) THEN
            fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user(current_row.change_user, child_count,$3,false,false);
              fullText := fullText || ''(change_user_user:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.comment IS NOT NULL) THEN 
              fullText := fullText || ''(comment:string)=('' || REPLACE(REPLACE(current_row.comment,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.event_id IS NOT NULL) THEN 
              fullText := fullText || ''(event_id:integer)=('' || current_row.event_id || '')'';
          END IF;
          IF (current_row.xdat_change_info_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_change_info_id:long)=('' || current_row.xdat_change_info_id || '')'';
          END IF;
        IF ((current_row.change_info_info IS NOT NULL)) THEN
            fullText := fullText || ''(change_info_info:integer)=('' || current_row.change_info_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_change_info_meta_data(current_row.change_info_info, child_count,$3,false,false);
              fullText := fullText || ''(change_info_info_change_info_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_change_info( BIGINT, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_change_info.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_change_info LEFT JOIN xdat_change_info_meta_data meta ON xdat_change_info.change_info_info=meta.meta_data_id WHERE  xdat_change_info_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_change_info_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.change_user IS NOT NULL)) THEN
          PERFORM  a_xdat_user(current_row.change_user, $2,$3,false);
        END IF;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_change_info( BIGINT, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_change_info.*, meta.meta_data_id FROM xdat_change_info LEFT JOIN xdat_change_info_meta_data meta ON xdat_change_info.change_info_info=meta.meta_data_id WHERE  xdat_change_info_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_change_info()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_change_info( OLD.xdat_change_info_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_change_info','CREATE TRIGGER a_u_xdat_change_info  AFTER UPDATE OR DELETE ON xdat_change_info FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_change_info()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_user_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:user_history)('';
      FOR current_row IN SELECT * FROM xdat_user_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.login IS NOT NULL) THEN 
              fullText := fullText || ''(login:string)=('' || REPLACE(REPLACE(current_row.login,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.firstname IS NOT NULL) THEN 
              fullText := fullText || ''(firstname:string)=('' || REPLACE(REPLACE(current_row.firstname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.lastname IS NOT NULL) THEN 
              fullText := fullText || ''(lastname:string)=('' || REPLACE(REPLACE(current_row.lastname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.email IS NOT NULL) THEN 
              fullText := fullText || ''(email:string)=('' || REPLACE(REPLACE(current_row.email,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.primary_password IS NOT NULL) THEN 
              fullText := fullText || ''(primary_password:string)=('' || REPLACE(REPLACE(current_row.primary_password,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.primary_password_encrypt IS NOT NULL) THEN 
              fullText := fullText || ''(primary_password_encrypt:integer)=('' || current_row.primary_password_encrypt || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_access_history WHERE xdat_user_xdat_user_id=current_row.xdat_user_id AND xft_version=current_row.xft_version ORDER BY xdat_element_access_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_access_history( parent_row.xdat_element_access_id, child_count,$3,false,false);
              fullText := fullText || ''(element_access_element_access'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xdat_r_xdat_role_type_assign_xdat_user_history WHERE  xdat_user_xdat_user_id=current_row.xdat_user_id AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_role_type_history( mapping_row.xdat_role_type_role_name, child_count,$3,false,false);
              fullText := fullText || ''(assigned_roles_assigned_role_role_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
          IF (current_row.quarantine_path IS NOT NULL) THEN 
              fullText := fullText || ''(quarantine_path:string)=('' || REPLACE(REPLACE(current_row.quarantine_path,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_user_groupID_history WHERE groups_groupid_xdat_user_xdat_user_id=current_row.xdat_user_id AND xft_version=current_row.xft_version ORDER BY xdat_user_groupid_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_groupID_history( parent_row.xdat_user_groupid_id, child_count,$3,false,false);
              fullText := fullText || ''(groups_groupid_user_groupid'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.enabled IS NOT NULL) THEN 
              fullText := fullText || ''(enabled:integer)=('' || current_row.enabled || '')'';
          END IF;
          IF (current_row.verified IS NOT NULL) THEN 
              fullText := fullText || ''(verified:integer)=('' || current_row.verified || '')'';
          END IF;
          IF (current_row.salt IS NOT NULL) THEN 
              fullText := fullText || ''(salt:string)=('' || REPLACE(REPLACE(current_row.salt,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.user_info IS NOT NULL)) THEN
            fullText := fullText || ''(user_info:integer)=('' || current_row.user_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user_meta_data(current_row.user_info, child_count,$3,false,false);
              fullText := fullText || ''(user_info_user_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.users_user_xdat_security_xdat_security_id IS NOT NULL)) THEN
            fullText := fullText || ''(users_user_xdat_security_xdat_security_id:integer)=('' || current_row.users_user_xdat_security_xdat_security_id || '')'';
        END IF;
          IF (current_row.xdat_user_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_user_id:integer)=('' || current_row.xdat_user_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_criteria_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:criteria_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_criteria_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_criteria( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:criteria)('';
      FOR current_row IN SELECT * FROM xdat_criteria WHERE  xdat_criteria_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.schema_field IS NOT NULL) THEN 
              fullText := fullText || ''(schema_field:string)=('' || REPLACE(REPLACE(current_row.schema_field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.comparison_type IS NOT NULL) THEN 
              fullText := fullText || ''(comparison_type:string)=('' || REPLACE(REPLACE(current_row.comparison_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.custom_search IS NOT NULL) THEN 
              fullText := fullText || ''(custom_search:string)=('' || REPLACE(REPLACE(current_row.custom_search,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.value IS NOT NULL) THEN 
              fullText := fullText || ''(value:string)=('' || REPLACE(REPLACE(current_row.value,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.override_value_formatting IS NOT NULL) THEN 
              fullText := fullText || ''(override_value_formatting:integer)=('' || current_row.override_value_formatting || '')'';
          END IF;
        IF ((current_row.criteria_info IS NOT NULL)) THEN
            fullText := fullText || ''(criteria_info:integer)=('' || current_row.criteria_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_criteria_meta_data(current_row.criteria_info, child_count,$3,false,false);
              fullText := fullText || ''(criteria_info_criteria_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_criteria_set_xdat_criteria_set_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_criteria_set_xdat_criteria_set_id:integer)=('' || current_row.xdat_criteria_set_xdat_criteria_set_id || '')'';
        END IF;
          IF (current_row.xdat_criteria_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_criteria_id:integer)=('' || current_row.xdat_criteria_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_criteria( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_criteria.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_criteria LEFT JOIN xdat_criteria_meta_data meta ON xdat_criteria.criteria_info=meta.meta_data_id WHERE  xdat_criteria_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_criteria_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_criteria( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_criteria.*, meta.meta_data_id FROM xdat_criteria LEFT JOIN xdat_criteria_meta_data meta ON xdat_criteria.criteria_info=meta.meta_data_id WHERE  xdat_criteria_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:criteria_set/criteria
        IF ((current_row.xdat_criteria_set_xdat_criteria_set_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_criteria_set(current_row.xdat_criteria_set_xdat_criteria_set_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_criteria()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_criteria( OLD.xdat_criteria_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_criteria','CREATE TRIGGER a_u_xdat_criteria  AFTER UPDATE OR DELETE ON xdat_criteria FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_criteria()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_criteria_set( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:criteria_set)('';
      FOR current_row IN SELECT * FROM xdat_criteria_set WHERE  xdat_criteria_set_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_criteria WHERE xdat_criteria_set_xdat_criteria_set_id=current_row.xdat_criteria_set_id ORDER BY xdat_criteria_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_criteria( parent_row.xdat_criteria_id, child_count,$3,false,false);
              fullText := fullText || ''(criteria_criteria'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_criteria_set WHERE child_set_xdat_criteria_set_id=current_row.xdat_criteria_set_id ORDER BY xdat_criteria_set_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_criteria_set( parent_row.xdat_criteria_set_id, child_count,$3,false,false);
              fullText := fullText || ''(child_set_criteria_set'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.method IS NOT NULL) THEN 
              fullText := fullText || ''(method:string)=('' || REPLACE(REPLACE(current_row.method,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.criteria_set_info IS NOT NULL)) THEN
            fullText := fullText || ''(criteria_set_info:integer)=('' || current_row.criteria_set_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_criteria_set_meta_data(current_row.criteria_set_info, child_count,$3,false,false);
              fullText := fullText || ''(criteria_set_info_criteria_set_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xdat_stored_search_id IS NOT NULL)) THEN
            fullText := fullText || ''(xdat_stored_search_id:string)=('' || current_row.xdat_stored_search_id || '')'';
        END IF;
          IF (current_row.xdat_criteria_set_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_criteria_set_id:integer)=('' || current_row.xdat_criteria_set_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_criteria_set( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_criteria_set.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_criteria_set LEFT JOIN xdat_criteria_set_meta_data meta ON xdat_criteria_set.criteria_set_info=meta.meta_data_id WHERE  xdat_criteria_set_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_criteria_set_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_criteria WHERE xdat_criteria_set_xdat_criteria_set_id=current_row.xdat_criteria_set_id
        LOOP
          PERFORM  a_xdat_criteria( parent_row.xdat_criteria_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_criteria_set WHERE child_set_xdat_criteria_set_id=current_row.xdat_criteria_set_id
        LOOP
          PERFORM  a_xdat_criteria_set( parent_row.xdat_criteria_set_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_criteria_set( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_criteria_set.*, meta.meta_data_id FROM xdat_criteria_set LEFT JOIN xdat_criteria_set_meta_data meta ON xdat_criteria_set.criteria_set_info=meta.meta_data_id WHERE  xdat_criteria_set_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:stored_search/search_where
        IF ((current_row.xdat_stored_search_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_stored_search(current_row.xdat_stored_search_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_criteria_set()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_criteria_set( OLD.xdat_criteria_set_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_criteria_set','CREATE TRIGGER a_u_xdat_criteria_set  AFTER UPDATE OR DELETE ON xdat_criteria_set FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_criteria_set()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_security_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:security_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_security_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_primary_security_field_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:primary_security_field_meta_data)('';
      FOR current_row IN SELECT * FROM xdat_primary_security_field_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_primary_security_field( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:primary_security_field)('';
      FOR current_row IN SELECT * FROM xdat_primary_security_field WHERE  xdat_primary_security_field_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.primary_security_field IS NOT NULL) THEN 
              fullText := fullText || ''(primary_security_field:string)=('' || REPLACE(REPLACE(current_row.primary_security_field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.primary_security_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(primary_security_field_info:integer)=('' || current_row.primary_security_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_primary_security_field_meta_data(current_row.primary_security_field_info, child_count,$3,false,false);
              fullText := fullText || ''(primary_security_field_info_primary_security_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.primary_security_fields_primary_element_name IS NOT NULL)) THEN
            fullText := fullText || ''(primary_security_fields_primary_element_name:string)=('' || current_row.primary_security_fields_primary_element_name || '')'';
        END IF;
          IF (current_row.xdat_primary_security_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_primary_security_field_id:integer)=('' || current_row.xdat_primary_security_field_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_primary_security_field( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_primary_security_field.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_primary_security_field LEFT JOIN xdat_primary_security_field_meta_data meta ON xdat_primary_security_field.primary_security_field_info=meta.meta_data_id WHERE  xdat_primary_security_field_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_primary_security_field_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_primary_security_field( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_primary_security_field.*, meta.meta_data_id FROM xdat_primary_security_field LEFT JOIN xdat_primary_security_field_meta_data meta ON xdat_primary_security_field.primary_security_field_info=meta.meta_data_id WHERE  xdat_primary_security_field_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:element_security/primary_security_fields/primary_security_field
        IF ((current_row.primary_security_fields_primary_element_name IS NOT NULL)) THEN
        PERFORM update_ls_xdat_element_security(current_row.primary_security_fields_primary_element_name, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_primary_security_field()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_primary_security_field( OLD.xdat_primary_security_field_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_primary_security_field','CREATE TRIGGER a_u_xdat_primary_security_field  AFTER UPDATE OR DELETE ON xdat_primary_security_field FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_primary_security_field()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_element_security( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:element_security)('';
      FOR current_row IN SELECT * FROM xdat_element_security WHERE  element_name=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_primary_security_field WHERE primary_security_fields_primary_element_name=current_row.element_name ORDER BY xdat_primary_security_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_primary_security_field( parent_row.xdat_primary_security_field_id, child_count,$3,false,false);
              fullText := fullText || ''(primary_security_fields_primary_security_field_primary_security_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_action_type WHERE element_actions_element_action__element_name=current_row.element_name ORDER BY xdat_element_action_type_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_action_type( parent_row.xdat_element_action_type_id, child_count,$3,false,false);
              fullText := fullText || ''(element_actions_element_action_element_action_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_security_listing_action WHERE listing_actions_listing_action__element_name=current_row.element_name ORDER BY xdat_element_security_listing_action_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_security_listing_action( parent_row.xdat_element_security_listing_action_id, child_count,$3,false,false);
              fullText := fullText || ''(listing_actions_listing_action_element_security_listing_action'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.element_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_name:string)=('' || REPLACE(REPLACE(current_row.element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.secondary_password IS NOT NULL) THEN 
              fullText := fullText || ''(secondary_password:integer)=('' || current_row.secondary_password || '')'';
          END IF;
          IF (current_row.secure_ip IS NOT NULL) THEN 
              fullText := fullText || ''(secure_ip:integer)=('' || current_row.secure_ip || '')'';
          END IF;
          IF (current_row.secure IS NOT NULL) THEN 
              fullText := fullText || ''(secure:integer)=('' || current_row.secure || '')'';
          END IF;
          IF (current_row.browse IS NOT NULL) THEN 
              fullText := fullText || ''(browse:integer)=('' || current_row.browse || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
          IF (current_row.quarantine IS NOT NULL) THEN 
              fullText := fullText || ''(quarantine:integer)=('' || current_row.quarantine || '')'';
          END IF;
          IF (current_row.pre_load IS NOT NULL) THEN 
              fullText := fullText || ''(pre_load:integer)=('' || current_row.pre_load || '')'';
          END IF;
          IF (current_row.searchable IS NOT NULL) THEN 
              fullText := fullText || ''(searchable:integer)=('' || current_row.searchable || '')'';
          END IF;
          IF (current_row.secure_read IS NOT NULL) THEN 
              fullText := fullText || ''(secure_read:integer)=('' || current_row.secure_read || '')'';
          END IF;
          IF (current_row.secure_edit IS NOT NULL) THEN 
              fullText := fullText || ''(secure_edit:integer)=('' || current_row.secure_edit || '')'';
          END IF;
          IF (current_row.secure_create IS NOT NULL) THEN 
              fullText := fullText || ''(secure_create:integer)=('' || current_row.secure_create || '')'';
          END IF;
          IF (current_row.secure_delete IS NOT NULL) THEN 
              fullText := fullText || ''(secure_delete:integer)=('' || current_row.secure_delete || '')'';
          END IF;
          IF (current_row.accessible IS NOT NULL) THEN 
              fullText := fullText || ''(accessible:integer)=('' || current_row.accessible || '')'';
          END IF;
          IF (current_row.usage IS NOT NULL) THEN 
              fullText := fullText || ''(usage:string)=('' || REPLACE(REPLACE(current_row.usage,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.singular IS NOT NULL) THEN 
              fullText := fullText || ''(singular:string)=('' || REPLACE(REPLACE(current_row.singular,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.plural IS NOT NULL) THEN 
              fullText := fullText || ''(plural:string)=('' || REPLACE(REPLACE(current_row.plural,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.category IS NOT NULL) THEN 
              fullText := fullText || ''(category:string)=('' || REPLACE(REPLACE(current_row.category,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.code IS NOT NULL) THEN 
              fullText := fullText || ''(code:string)=('' || REPLACE(REPLACE(current_row.code,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.element_security_info IS NOT NULL)) THEN
            fullText := fullText || ''(element_security_info:integer)=('' || current_row.element_security_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_security_meta_data(current_row.element_security_info, child_count,$3,false,false);
              fullText := fullText || ''(element_security_info_element_security_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.element_security_set_element_se_xdat_security_id IS NOT NULL)) THEN
            fullText := fullText || ''(element_security_set_element_se_xdat_security_id:integer)=('' || current_row.element_security_set_element_se_xdat_security_id || '')'';
        END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_element_security( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_element_security.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_element_security LEFT JOIN xdat_element_security_meta_data meta ON xdat_element_security.element_security_info=meta.meta_data_id WHERE  element_name=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_element_security_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_primary_security_field WHERE primary_security_fields_primary_element_name=current_row.element_name
        LOOP
          PERFORM  a_xdat_primary_security_field( parent_row.xdat_primary_security_field_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_action_type WHERE element_actions_element_action__element_name=current_row.element_name
        LOOP
          PERFORM  a_xdat_element_action_type( parent_row.xdat_element_action_type_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_security_listing_action WHERE listing_actions_listing_action__element_name=current_row.element_name
        LOOP
          PERFORM  a_xdat_element_security_listing_action( parent_row.xdat_element_security_listing_action_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_element_security( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_element_security.*, meta.meta_data_id FROM xdat_element_security LEFT JOIN xdat_element_security_meta_data meta ON xdat_element_security.element_security_info=meta.meta_data_id WHERE  element_name=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xdat:security/element_security_set/element_security
        IF ((current_row.element_security_set_element_se_xdat_security_id IS NOT NULL)) THEN
        PERFORM update_ls_xdat_security(current_row.element_security_set_element_se_xdat_security_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_element_security()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_element_security( OLD.element_name, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_element_security','CREATE TRIGGER a_u_xdat_element_security  AFTER UPDATE OR DELETE ON xdat_element_security FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_element_security()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_security( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:security)('';
      FOR current_row IN SELECT * FROM xdat_security WHERE  xdat_security_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_userGroup WHERE groups_group_xdat_security_xdat_security_id=current_row.xdat_security_id ORDER BY xdat_usergroup_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_userGroup( parent_row.xdat_usergroup_id, child_count,$3,false,false);
              fullText := fullText || ''(groups_group_usergroup'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_user WHERE users_user_xdat_security_xdat_security_id=current_row.xdat_security_id ORDER BY xdat_user_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user( parent_row.xdat_user_id, child_count,$3,false,false);
              fullText := fullText || ''(users_user_user'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_role_type WHERE roles_role_xdat_security_xdat_security_id=current_row.xdat_security_id ORDER BY role_name
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_role_type( parent_row.role_name, child_count,$3,false,false);
              fullText := fullText || ''(roles_role_role_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_action_type WHERE actions_action_xdat_security_xdat_security_id=current_row.xdat_security_id ORDER BY action_name
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_action_type( parent_row.action_name, child_count,$3,false,false);
              fullText := fullText || ''(actions_action_action_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_security WHERE element_security_set_element_se_xdat_security_id=current_row.xdat_security_id ORDER BY element_name
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_element_security( parent_row.element_name, child_count,$3,false,false);
              fullText := fullText || ''(element_security_set_element_security_element_security'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.newslist_news_xdat_newsentry_id IS NOT NULL)) THEN
            fullText := fullText || ''(newslist_news_xdat_newsentry_id:integer)=('' || current_row.newslist_news_xdat_newsentry_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_newsEntry(current_row.newslist_news_xdat_newsentry_id, child_count,$3,false,false);
              fullText := fullText || ''(newslist_news_newsentry:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.infolist_info_xdat_infoentry_id IS NOT NULL)) THEN
            fullText := fullText || ''(infolist_info_xdat_infoentry_id:integer)=('' || current_row.infolist_info_xdat_infoentry_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_infoEntry(current_row.infolist_info_xdat_infoentry_id, child_count,$3,false,false);
              fullText := fullText || ''(infolist_info_infoentry:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.system IS NOT NULL) THEN 
              fullText := fullText || ''(system:string)=('' || REPLACE(REPLACE(current_row.system,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.require_login IS NOT NULL) THEN 
              fullText := fullText || ''(require_login:integer)=('' || current_row.require_login || '')'';
          END IF;
        IF ((current_row.security_info IS NOT NULL)) THEN
            fullText := fullText || ''(security_info:integer)=('' || current_row.security_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_security_meta_data(current_row.security_info, child_count,$3,false,false);
              fullText := fullText || ''(security_info_security_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xdat_security_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_security_id:integer)=('' || current_row.xdat_security_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_security( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_security.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_security LEFT JOIN xdat_security_meta_data meta ON xdat_security.security_info=meta.meta_data_id WHERE  xdat_security_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_security_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_userGroup WHERE groups_group_xdat_security_xdat_security_id=current_row.xdat_security_id
        LOOP
          PERFORM  a_xdat_userGroup( parent_row.xdat_usergroup_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_user WHERE users_user_xdat_security_xdat_security_id=current_row.xdat_security_id
        LOOP
          PERFORM  a_xdat_user( parent_row.xdat_user_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_role_type WHERE roles_role_xdat_security_xdat_security_id=current_row.xdat_security_id
        LOOP
          PERFORM  a_xdat_role_type( parent_row.role_name, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_action_type WHERE actions_action_xdat_security_xdat_security_id=current_row.xdat_security_id
        LOOP
          PERFORM  a_xdat_action_type( parent_row.action_name, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_element_security WHERE element_security_set_element_se_xdat_security_id=current_row.xdat_security_id
        LOOP
          PERFORM  a_xdat_element_security( parent_row.element_name, $2,$3,false);
        END LOOP;
        END;
        IF ((current_row.newslist_news_xdat_newsentry_id IS NOT NULL)) THEN
          PERFORM  a_xdat_newsEntry(current_row.newslist_news_xdat_newsentry_id, $2,$3,false);
        END IF;
        IF ((current_row.infolist_info_xdat_infoentry_id IS NOT NULL)) THEN
          PERFORM  a_xdat_infoEntry(current_row.infolist_info_xdat_infoentry_id, $2,$3,false);
        END IF;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_security( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xdat:security'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_security.*, meta.meta_data_id FROM xdat_security LEFT JOIN xdat_security_meta_data meta ON xdat_security.security_info=meta.meta_data_id WHERE  xdat_security_id=$1
      LOOP
         UPDATE xdat_security_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_security()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_security( OLD.xdat_security_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_security','CREATE TRIGGER a_u_xdat_security  AFTER UPDATE OR DELETE ON xdat_security FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_security()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:history)('';
      FOR current_row IN SELECT * FROM xdat_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.new_row IS NOT NULL) THEN 
              fullText := fullText || ''(new_row:string)=('' || current_row.new_row || '')'';
          END IF;
        IF ((current_row.change_user IS NOT NULL)) THEN
            fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_user(current_row.change_user, child_count,$3,false,false);
              fullText := fullText || ''(change_user_user:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:meta_data)('';
      FOR current_row IN SELECT * FROM xdat_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_meta_element( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:meta_element)('';
      FOR current_row IN SELECT * FROM xdat_meta_element WHERE  xdat_meta_element_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.element_name IS NOT NULL) THEN 
              fullText := fullText || ''(element_name:string)=('' || REPLACE(REPLACE(current_row.element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.xdat_meta_element_id IS NOT NULL) THEN 
              fullText := fullText || ''(xdat_meta_element_id:integer)=('' || current_row.xdat_meta_element_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_meta_element( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_meta_element.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_meta_element LEFT JOIN xdat_meta_element_meta_data meta ON xdat_meta_element.meta_element_info=meta.meta_data_id WHERE  xdat_meta_element_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_meta_element_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_meta_element( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_meta_element.*, meta.meta_data_id FROM xdat_meta_element LEFT JOIN xdat_meta_element_meta_data meta ON xdat_meta_element.meta_element_info=meta.meta_data_id WHERE  xdat_meta_element_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION wrk:abstractExecutionEnvironment/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM wrk_abstractExecutionEnvironment WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_wrk_abstractExecutionEnvironment( parent_row.wrk_abstractexecutionenvironment_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION cat:catalog/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_catalog WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_cat_catalog( parent_row.cat_catalog_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION cat:entry/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_entry WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_cat_entry( parent_row.cat_entry_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION arc:pipelineData/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_pipelineData WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_arc_pipelineData( parent_row.arc_pipelinedata_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:experimentData/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_experimentData WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_xnat_experimentData( parent_row.id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:abstractSubjectMetadata/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractSubjectMetadata WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_xnat_abstractSubjectMetadata( parent_row.xnat_abstractsubjectmetadata_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:abstractDemographicData/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractDemographicData WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_xnat_abstractDemographicData( parent_row.xnat_abstractdemographicdata_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:abstractResource/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractResource WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_xnat_abstractResource( parent_row.xnat_abstractresource_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:abstractProtocol/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractProtocol WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_xnat_abstractProtocol( parent_row.xnat_abstractprotocol_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:abstractStatistics/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractStatistics WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_xnat_abstractStatistics( parent_row.xnat_abstractstatistics_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:imageScanData/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageScanData WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_xnat_imageScanData( parent_row.xnat_imagescandata_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:qcScanData/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcScanData WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_xnat_qcScanData( parent_row.xnat_qcscandata_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xdat:stored_search/extension_item
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_stored_search WHERE extension=current_row.xdat_meta_element_id
        LOOP
        PERFORM update_ls_xdat_stored_search( parent_row.id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_meta_element()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_meta_element( OLD.xdat_meta_element_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_meta_element','CREATE TRIGGER a_u_xdat_meta_element  AFTER UPDATE OR DELETE ON xdat_meta_element FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_meta_element()');
--BR



CREATE OR REPLACE FUNCTION ie_xdat_stored_search( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:stored_search)('';
      FOR current_row IN SELECT * FROM xdat_stored_search WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.root_element_name IS NOT NULL) THEN 
              fullText := fullText || ''(root_element_name:string)=('' || REPLACE(REPLACE(current_row.root_element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_search_field WHERE xdat_stored_search_id=current_row.id ORDER BY xdat_search_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_search_field( parent_row.xdat_search_field_id, child_count,$3,false,false);
              fullText := fullText || ''(search_field_search_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_criteria_set WHERE xdat_stored_search_id=current_row.id ORDER BY xdat_criteria_set_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_criteria_set( parent_row.xdat_criteria_set_id, child_count,$3,false,false);
              fullText := fullText || ''(search_where_criteria_set'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.sort_by_element_name IS NOT NULL) THEN 
              fullText := fullText || ''(sort_by_element_name:string)=('' || REPLACE(REPLACE(current_row.sort_by_element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sort_by_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(sort_by_field_id:string)=('' || REPLACE(REPLACE(current_row.sort_by_field_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_stored_search_allowed_user WHERE xdat_stored_search_id=current_row.id ORDER BY xdat_stored_search_allowed_user_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_stored_search_allowed_user( parent_row.xdat_stored_search_allowed_user_id, child_count,$3,false,false);
              fullText := fullText || ''(allowed_user_stored_search_allowed_user'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_stored_search_groupID WHERE allowed_groups_groupid_xdat_sto_id=current_row.id ORDER BY xdat_stored_search_groupid_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_stored_search_groupID( parent_row.xdat_stored_search_groupid_id, child_count,$3,false,false);
              fullText := fullText || ''(allowed_groups_groupid_stored_search_groupid'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.layeredsequence IS NOT NULL) THEN 
              fullText := fullText || ''(layeredsequence:string)=('' || REPLACE(REPLACE(current_row.layeredsequence,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.allow_diff_columns IS NOT NULL) THEN 
              fullText := fullText || ''(allow_diff_columns:integer)=('' || current_row.allow_diff_columns || '')'';
          END IF;
          IF (current_row.secure IS NOT NULL) THEN 
              fullText := fullText || ''(secure:integer)=('' || current_row.secure || '')'';
          END IF;
          IF (current_row.brief_description IS NOT NULL) THEN 
              fullText := fullText || ''(brief_description:string)=('' || REPLACE(REPLACE(current_row.brief_description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tag IS NOT NULL) THEN 
              fullText := fullText || ''(tag:string)=('' || REPLACE(REPLACE(current_row.tag,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.stored_search_info IS NOT NULL)) THEN
            fullText := fullText || ''(stored_search_info:integer)=('' || current_row.stored_search_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_stored_search_meta_data(current_row.stored_search_info, child_count,$3,false,false);
              fullText := fullText || ''(stored_search_info_stored_search_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_stored_search( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xdat_stored_search.id AS xdat_stored_search3, table1.element_name AS xdat_meta_element103, table2.insert_date AS xdat_stored_search_meta_data110 FROM xdat_stored_search xdat_stored_search   LEFT JOIN xdat_meta_element table1 ON xdat_stored_search.extension=table1.xdat_meta_element_id   LEFT JOIN xdat_stored_search_meta_data table2 ON xdat_stored_search.stored_search_info=table2.meta_data_id) SEARCH  WHERE 
 ( (xdat_stored_search3=$1))
      LOOP
         IF (current_row.xdat_meta_element103 IS NULL) THEN 
             fullText:= ie_xdat_stored_search( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element103=''xdat:Search'') THEN
                fullText:= i_xdat_Search( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xdat_stored_search( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xdat_stored_search( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_stored_search.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_stored_search LEFT JOIN xdat_stored_search_meta_data meta ON xdat_stored_search.stored_search_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_stored_search_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_search_field WHERE xdat_stored_search_id=current_row.id
        LOOP
          PERFORM  a_xdat_search_field( parent_row.xdat_search_field_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_criteria_set WHERE xdat_stored_search_id=current_row.id
        LOOP
          PERFORM  a_xdat_criteria_set( parent_row.xdat_criteria_set_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_stored_search_allowed_user WHERE xdat_stored_search_id=current_row.id
        LOOP
          PERFORM  a_xdat_stored_search_allowed_user( parent_row.xdat_stored_search_allowed_user_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_stored_search_groupID WHERE allowed_groups_groupid_xdat_sto_id=current_row.id
        LOOP
          PERFORM  a_xdat_stored_search_groupID( parent_row.xdat_stored_search_groupid_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_stored_search( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xdat_stored_search.id AS xdat_stored_search3, table1.element_name AS xdat_meta_element103, table2.insert_date AS xdat_stored_search_meta_data110 FROM xdat_stored_search xdat_stored_search   LEFT JOIN xdat_meta_element table1 ON xdat_stored_search.extension=table1.xdat_meta_element_id   LEFT JOIN xdat_stored_search_meta_data table2 ON xdat_stored_search.stored_search_info=table2.meta_data_id) SEARCH WHERE 
 ( (xdat_stored_search3=$1))
      LOOP
         IF (current_row.xdat_meta_element103 IS NULL) THEN 
            PERFORM  ae_xdat_stored_search( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element103=''xdat:Search'') THEN
            PERFORM  a_xdat_Search( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xdat_stored_search( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xdat_stored_search( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xdat:stored_search'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_stored_search.*, meta.meta_data_id FROM xdat_stored_search LEFT JOIN xdat_stored_search_meta_data meta ON xdat_stored_search.stored_search_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xdat_stored_search_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_stored_search( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xdat_stored_search.id AS xdat_stored_search3, table1.element_name AS xdat_meta_element103, table2.insert_date AS xdat_stored_search_meta_data110 FROM xdat_stored_search xdat_stored_search   LEFT JOIN xdat_meta_element table1 ON xdat_stored_search.extension=table1.xdat_meta_element_id   LEFT JOIN xdat_stored_search_meta_data table2 ON xdat_stored_search.stored_search_info=table2.meta_data_id) SEARCH WHERE 
 ( (xdat_stored_search3=$1))
      LOOP
         IF (current_row.xdat_meta_element103 IS NULL) THEN 
             PERFORM update_ls_ext_xdat_stored_search( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element103=''xdat:Search'') THEN
                PERFORM update_ls_xdat_Search( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element103;
                    PERFORM update_ls_ext_xdat_stored_search( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_stored_search()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_stored_search( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_stored_search','CREATE TRIGGER a_u_xdat_stored_search  AFTER UPDATE OR DELETE ON xdat_stored_search FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_stored_search()');
--BR



CREATE OR REPLACE FUNCTION i_xdat_Search( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:Search)('';
      FOR current_row IN SELECT * FROM xdat_Search WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xdat_stored_search(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(stored_search_stored_search:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.page IS NOT NULL) THEN 
              fullText := fullText || ''(page:integer)=('' || current_row.page || '')'';
          END IF;
        IF ((current_row.Search_info IS NOT NULL)) THEN
            fullText := fullText || ''(search_info:integer)=('' || current_row.search_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_Search_meta_data(current_row.Search_info, child_count,$3,false,false);
              fullText := fullText || ''(search_info_search_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xdat_stored_search( $1, child_count,$3,$4,false);
              fullText := fullText || ''(stored_search_stored_search:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xdat_Search( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_Search.*, meta.meta_data_id, meta.status AS meta_status FROM xdat_Search LEFT JOIN xdat_Search_meta_data meta ON xdat_Search.Search_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xdat_Search_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xdat_stored_search(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xdat_stored_search( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xdat_Search( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xdat:Search'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xdat_Search.*, meta.meta_data_id FROM xdat_Search LEFT JOIN xdat_Search_meta_data meta ON xdat_Search.Search_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xdat_Search_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xdat_stored_search( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xdat_Search()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xdat_Search( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xdat_Search','CREATE TRIGGER a_u_xdat_Search  AFTER UPDATE OR DELETE ON xdat_Search FOR EACH ROW EXECUTE PROCEDURE after_update_xdat_Search()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_experimentData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:experimentData_history)('';
      FOR current_row IN SELECT * FROM xnat_experimentData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_experimentData_share_history WHERE sharing_share_xnat_experimentDa_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_experimentdata_share_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_experimentData_share_history( parent_row.xnat_experimentdata_share_id, child_count,$3,false,false);
              fullText := fullText || ''(sharing_share_experimentdata_share'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.date IS NOT NULL) THEN 
              fullText := fullText || ''(date:date)=('' || current_row.date || '')'';
          END IF;
          IF (current_row.time IS NOT NULL) THEN 
              fullText := fullText || ''(time:time)=('' || current_row.time || '')'';
          END IF;
          IF (current_row.duration IS NOT NULL) THEN 
              fullText := fullText || ''(duration:string)=('' || current_row.duration || '')'';
          END IF;
          IF (current_row.delay IS NOT NULL) THEN 
              fullText := fullText || ''(delay:integer)=('' || current_row.delay || '')'';
          END IF;
          IF (current_row.delay_ref_expt_id IS NOT NULL) THEN 
              fullText := fullText || ''(delay_ref_expt_id:string)=('' || REPLACE(REPLACE(current_row.delay_ref_expt_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.note IS NOT NULL) THEN 
              fullText := fullText || ''(note:string)=('' || REPLACE(REPLACE(current_row.note,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.investigator_xnat_investigatordata_id IS NOT NULL)) THEN
            fullText := fullText || ''(investigator_xnat_investigatordata_id:integer)=('' || current_row.investigator_xnat_investigatordata_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_investigatorData_history WHERE  xnat_investigatordata_id=current_row.investigator_xnat_investigatordata_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_investigatorData_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(investigator_investigatordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF ((current_row.validation_xnat_validationdata_id IS NOT NULL)) THEN
            fullText := fullText || ''(validation_xnat_validationdata_id:integer)=('' || current_row.validation_xnat_validationdata_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_validationData_history WHERE  xnat_validationdata_id=current_row.validation_xnat_validationdata_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_validationData_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(validation_validationdata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_experimentData_resource_history WHERE  xnat_experimentData_id=current_row.id AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_history( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(resources_resource_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_experimentData_field_history WHERE fields_field_xnat_experimentDat_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_experimentdata_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_experimentData_field_history( parent_row.xnat_experimentdata_field_id, child_count,$3,false,false);
              fullText := fullText || ''(fields_field_experimentdata_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.acquisition_site IS NOT NULL) THEN 
              fullText := fullText || ''(acquisition_site:string)=('' || REPLACE(REPLACE(current_row.acquisition_site,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visit_id IS NOT NULL) THEN 
              fullText := fullText || ''(visit_id:string)=('' || REPLACE(REPLACE(current_row.visit_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visit IS NOT NULL) THEN 
              fullText := fullText || ''(visit:string)=('' || REPLACE(REPLACE(current_row.visit,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.version IS NOT NULL) THEN 
              fullText := fullText || ''(version:integer)=('' || current_row.version || '')'';
          END IF;
          IF (current_row.original IS NOT NULL) THEN 
              fullText := fullText || ''(original:string)=('' || REPLACE(REPLACE(current_row.original,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.protocol IS NOT NULL) THEN 
              fullText := fullText || ''(protocol:string)=('' || REPLACE(REPLACE(current_row.protocol,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.experimentData_info IS NOT NULL)) THEN
            fullText := fullText || ''(experimentdata_info:integer)=('' || current_row.experimentdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_experimentData_meta_data(current_row.experimentData_info, child_count,$3,false,false);
              fullText := fullText || ''(experimentdata_info_experimentdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_experimentData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_experimentData_history.history_id AS xnat_experimentData_history17, table1.element_name AS xdat_meta_element25, xnat_experimentData_history.xft_version AS xnat_experimentData_history_xft_version, xnat_experimentData_history.id AS xnat_experimentData_history16 FROM xnat_experimentData_history xnat_experimentData_history   LEFT JOIN xdat_meta_element table1 ON xnat_experimentData_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_experimentData_history17=$1))
      LOOP
         IF (current_row.xdat_meta_element25 IS NULL) THEN 
             fullText:= ie_xnat_experimentData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element25=''scr:screeningAssessment'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM scr_screeningAssessment_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_scr_screeningAssessment_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''ext:atlasScalingFactorData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM ext_atlasScalingFactorData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_ext_atlasScalingFactorData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''ext:clinicalAssessmentData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM ext_clinicalAssessmentData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_ext_clinicalAssessmentData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''ext:segmentationFastData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM ext_segmentationFastData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_ext_segmentationFastData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''val:protocolData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM val_protocolData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_val_protocolData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:genericData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_genericData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= ie_xnat_genericData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:pVisitData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_pVisitData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_pVisitData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:subjectAssessorData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= ie_xnat_subjectAssessorData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:subjectVariablesData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_subjectVariablesData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_subjectVariablesData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:imageSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= ie_xnat_imageSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:mrSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_mrSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_mrSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:mrAssessorData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_mrAssessorData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= ie_xnat_mrAssessorData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:derivedData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_derivedData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= ie_xnat_derivedData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:petAssessorData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_petAssessorData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_petAssessorData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:petSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_petSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_petSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:petmrSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_petmrSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_petmrSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:qcAssessmentData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_qcAssessmentData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_qcAssessmentData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:imageAssessorData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_imageAssessorData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= ie_xnat_imageAssessorData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:ctSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_ctSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_ctSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:crSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_crSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_crSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:dxSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_dxSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_dxSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:mgSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_mgSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_mgSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:ioSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_ioSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_ioSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:usSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_usSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_usSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:ecgSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_ecgSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_ecgSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:hdSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_hdSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_hdSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:epsSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_epsSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_epsSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:xaSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_xaSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_xaSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:rfSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_rfSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_rfSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:xa3DSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_xa3DSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_xa3DSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:dx3DCraniofacialSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_dx3DCraniofacialSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_dx3DCraniofacialSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:nmSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_nmSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_nmSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:srSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_srSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_srSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:esSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_esSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_esSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:esvSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_esvSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_esvSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:gmSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_gmSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_gmSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:gmvSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_gmvSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_gmvSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:smSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_smSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_smSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:xcSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_xcSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_xcSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:xcvSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_xcvSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_xcvSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:opSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_opSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_opSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:optSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_optSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_optSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:rtSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_rtSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_rtSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:otherDicomSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_otherDicomSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_otherDicomSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:qcManualAssessorData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_qcManualAssessorData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_qcManualAssessorData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:megSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_megSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_megSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:eegSessionData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_eegSessionData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_eegSessionData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat_a:sideEffectsPittsburghData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_a_sideEffectsPittsburghData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_a_sideEffectsPittsburghData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat_a:ybocsData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_a_ybocsData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_a_ybocsData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat_a:ygtssData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_a_ygtssData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_a_ygtssData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat_a:updrs3Data'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_a_updrs3Data_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_a_updrs3Data_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat_a:scidResearchData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_a_scidResearchData_history WHERE id=current_row.xnat_experimentData_history16 AND xft_version=current_row.xnat_experimentData_history_xft_version
           	LOOP
                fullText:= i_xnat_a_scidResearchData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_experimentData_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_abstractProtocol_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractProtocol_history)('';
      FOR current_row IN SELECT * FROM xnat_abstractProtocol_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.data_type IS NOT NULL) THEN 
              fullText := fullText || ''(data_type:string)=('' || REPLACE(REPLACE(current_row.data_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractProtocol_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractprotocol_info:integer)=('' || current_row.abstractprotocol_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractProtocol_meta_data(current_row.abstractProtocol_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractprotocol_info_abstractprotocol_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xnat_projectData_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_projectdata_id:string)=('' || current_row.xnat_projectdata_id || '')'';
        END IF;
          IF (current_row.xnat_abstractprotocol_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractprotocol_id:integer)=('' || current_row.xnat_abstractprotocol_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractProtocol_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractProtocol_history.history_id AS xnat_abstractProtocol_history6, table1.element_name AS xdat_meta_element14, xnat_abstractProtocol_history.xft_version AS xnat_abstractProtocol_history_xft_version, xnat_abstractProtocol_history.xnat_abstractprotocol_id AS xnat_abstractProtocol_history3 FROM xnat_abstractProtocol_history xnat_abstractProtocol_history   LEFT JOIN xdat_meta_element table1 ON xnat_abstractProtocol_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_abstractProtocol_history6=$1))
      LOOP
         IF (current_row.xdat_meta_element14 IS NULL) THEN 
             fullText:= ie_xnat_abstractProtocol( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element14=''xnat:studyProtocol'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_studyProtocol_history WHERE xnat_abstractprotocol_id=current_row.xnat_abstractProtocol_history3 AND xft_version=current_row.xnat_abstractProtocol_history_xft_version
           	LOOP
                fullText:= i_xnat_studyProtocol_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element14=''xnat:datatypeProtocol'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_datatypeProtocol_history WHERE xnat_abstractprotocol_id=current_row.xnat_abstractProtocol_history3 AND xft_version=current_row.xnat_abstractProtocol_history_xft_version
           	LOOP
                fullText:= i_xnat_datatypeProtocol_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_abstractProtocol_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_qcScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_qcScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.imagescan_id IS NOT NULL) THEN 
              fullText := fullText || ''(imagescan_id:string)=('' || REPLACE(REPLACE(current_row.imagescan_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rater IS NOT NULL) THEN 
              fullText := fullText || ''(rater:string)=('' || REPLACE(REPLACE(current_row.rater,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.coverage IS NOT NULL) THEN 
              fullText := fullText || ''(coverage:string)=('' || REPLACE(REPLACE(current_row.coverage,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.motion IS NOT NULL) THEN 
              fullText := fullText || ''(motion:string)=('' || REPLACE(REPLACE(current_row.motion,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.otherimageartifacts IS NOT NULL) THEN 
              fullText := fullText || ''(otherimageartifacts:string)=('' || REPLACE(REPLACE(current_row.otherimageartifacts,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.comments IS NOT NULL) THEN 
              fullText := fullText || ''(comments:string)=('' || REPLACE(REPLACE(current_row.comments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pass IS NOT NULL) THEN 
              fullText := fullText || ''(pass:string)=('' || REPLACE(REPLACE(current_row.pass,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rating IS NOT NULL) THEN 
              fullText := fullText || ''(rating:string)=('' || REPLACE(REPLACE(current_row.rating,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rating_scale IS NOT NULL) THEN 
              fullText := fullText || ''(rating_scale:string)=('' || REPLACE(REPLACE(current_row.rating_scale,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcScanData_field_history WHERE fields_field_xnat_qcScanData_xnat_qcscandata_id=current_row.xnat_qcscandata_id AND xft_version=current_row.xft_version ORDER BY xnat_qcscandata_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcScanData_field_history( parent_row.xnat_qcscandata_field_id, child_count,$3,false,false);
              fullText := fullText || ''(fields_field_qcscandata_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.qcScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcscandata_info:integer)=('' || current_row.qcscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcScanData_meta_data(current_row.qcScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(qcscandata_info_qcscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.scans_scan_xnat_qcManualAssesso_id IS NOT NULL)) THEN
            fullText := fullText || ''(scans_scan_xnat_qcmanualassesso_id:string)=('' || current_row.scans_scan_xnat_qcmanualassesso_id || '')'';
        END IF;
          IF (current_row.xnat_qcscandata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_qcscandata_id:integer)=('' || current_row.xnat_qcscandata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_qcScanData_history.history_id AS xnat_qcScanData_history13, table1.element_name AS xdat_meta_element19, xnat_qcScanData_history.xft_version AS xnat_qcScanData_history_xft_version, xnat_qcScanData_history.xnat_qcscandata_id AS xnat_qcScanData_history11 FROM xnat_qcScanData_history xnat_qcScanData_history   LEFT JOIN xdat_meta_element table1 ON xnat_qcScanData_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_qcScanData_history13=$1))
      LOOP
         IF (current_row.xdat_meta_element19 IS NULL) THEN 
             fullText:= ie_xnat_qcScanData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element19=''xnat:mrQcScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_mrQcScanData_history WHERE xnat_qcscandata_id=current_row.xnat_qcScanData_history11 AND xft_version=current_row.xnat_qcScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_mrQcScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element19=''xnat:petQcScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_petQcScanData_history WHERE xnat_qcscandata_id=current_row.xnat_qcScanData_history11 AND xft_version=current_row.xnat_qcScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_petQcScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element19=''xnat:otherQcScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_otherQcScanData_history WHERE xnat_qcscandata_id=current_row.xnat_qcScanData_history11 AND xft_version=current_row.xnat_qcScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_otherQcScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_qcScanData_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_imageScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_imageScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageScanData_share_history WHERE sharing_share_xnat_imageScanDat_xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version ORDER BY xnat_imagescandata_share_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageScanData_share_history( parent_row.xnat_imagescandata_share_id, child_count,$3,false,false);
              fullText := fullText || ''(sharing_share_imagescandata_share'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.image_session_id IS NOT NULL) THEN 
              fullText := fullText || ''(image_session_id:string)=('' || REPLACE(REPLACE(current_row.image_session_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.note IS NOT NULL) THEN 
              fullText := fullText || ''(note:string)=('' || REPLACE(REPLACE(current_row.note,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.quality IS NOT NULL) THEN 
              fullText := fullText || ''(quality:string)=('' || REPLACE(REPLACE(current_row.quality,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.condition IS NOT NULL) THEN 
              fullText := fullText || ''(condition:string)=('' || REPLACE(REPLACE(current_row.condition,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.series_description IS NOT NULL) THEN 
              fullText := fullText || ''(series_description:string)=('' || REPLACE(REPLACE(current_row.series_description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.documentation IS NOT NULL) THEN 
              fullText := fullText || ''(documentation:string)=('' || REPLACE(REPLACE(current_row.documentation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.scanner IS NOT NULL) THEN 
              fullText := fullText || ''(scanner:string)=('' || REPLACE(REPLACE(current_row.scanner,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.scanner_manufacturer IS NOT NULL) THEN 
              fullText := fullText || ''(scanner_manufacturer:string)=('' || REPLACE(REPLACE(current_row.scanner_manufacturer,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.scanner_model IS NOT NULL) THEN 
              fullText := fullText || ''(scanner_model:string)=('' || REPLACE(REPLACE(current_row.scanner_model,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modality IS NOT NULL) THEN 
              fullText := fullText || ''(modality:string)=('' || REPLACE(REPLACE(current_row.modality,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.frames IS NOT NULL) THEN 
              fullText := fullText || ''(frames:integer)=('' || current_row.frames || '')'';
          END IF;
          IF (current_row.operator IS NOT NULL) THEN 
              fullText := fullText || ''(operator:string)=('' || REPLACE(REPLACE(current_row.operator,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractResource_history WHERE xnat_imageScanData_xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version ORDER BY xnat_abstractresource_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_history( parent_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(file_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.validation_xnat_validationdata_id IS NOT NULL)) THEN
            fullText := fullText || ''(validation_xnat_validationdata_id:integer)=('' || current_row.validation_xnat_validationdata_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_validationData_history WHERE  xnat_validationdata_id=current_row.validation_xnat_validationdata_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_validationData_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(validation_validationdata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.starttime IS NOT NULL) THEN 
              fullText := fullText || ''(starttime:time)=('' || current_row.starttime || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.uid IS NOT NULL) THEN 
              fullText := fullText || ''(uid:string)=('' || REPLACE(REPLACE(current_row.uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.imageScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(imagescandata_info:integer)=('' || current_row.imagescandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageScanData_meta_data(current_row.imageScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_info_imagescandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_imagescandata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_imageScanData_history.history_id AS xnat_imageScanData_history19, table1.element_name AS xdat_meta_element27, xnat_imageScanData_history.xft_version AS xnat_imageScanData_history_xft_version, xnat_imageScanData_history.xnat_imagescandata_id AS xnat_imageScanData_history14 FROM xnat_imageScanData_history xnat_imageScanData_history   LEFT JOIN xdat_meta_element table1 ON xnat_imageScanData_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_imageScanData_history19=$1))
      LOOP
         IF (current_row.xdat_meta_element27 IS NULL) THEN 
             fullText:= ie_xnat_imageScanData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element27=''xnat:mrScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_mrScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_mrScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:petScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_petScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_petScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:ctScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_ctScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_ctScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:crScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_crScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_crScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:dxScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_dxScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_dxScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:mgScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_mgScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_mgScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:ioScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_ioScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_ioScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:usScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_usScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_usScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:ecgScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_ecgScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_ecgScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:hdScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_hdScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_hdScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:epsScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_epsScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_epsScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:xaScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_xaScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_xaScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:rfScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_rfScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_rfScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:xa3DScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_xa3DScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_xa3DScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:dx3DCraniofacialScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_dx3DCraniofacialScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_dx3DCraniofacialScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:nmScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_nmScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_nmScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:srScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_srScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_srScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:esScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_esScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_esScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:esvScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_esvScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_esvScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:gmScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_gmScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_gmScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:gmvScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_gmvScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_gmvScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:smScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_smScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_smScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:xcScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_xcScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_xcScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:xcvScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_xcvScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_xcvScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:opScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_opScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_opScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:optScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_optScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_optScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:rtImageScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_rtImageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_rtImageScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:scScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_scScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_scScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:segScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_segScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_segScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:mrsScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_mrsScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_mrsScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:voiceAudioScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_voiceAudioScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_voiceAudioScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:otherDicomScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_otherDicomScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_otherDicomScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:megScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_megScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_megScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element27=''xnat:eegScanData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_eegScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imageScanData_history14 AND xft_version=current_row.xnat_imageScanData_history_xft_version
           	LOOP
                fullText:= i_xnat_eegScanData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_imageScanData_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_abstractSubjectMetadata_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractSubjectMetadata_history)('';
      FOR current_row IN SELECT * FROM xnat_abstractSubjectMetadata_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractSubjectMetadata_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractsubjectmetadata_info:integer)=('' || current_row.abstractsubjectmetadata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractSubjectMetadata_meta_data(current_row.abstractSubjectMetadata_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractsubjectmetadata_info_abstractsubjectmetadata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_abstractsubjectmetadata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractsubjectmetadata_id:integer)=('' || current_row.xnat_abstractsubjectmetadata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractSubjectMetadata_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractSubjectMetadata_history.history_id AS xnat_abstractSubjectMetadata_history3, table1.element_name AS xdat_meta_element9, xnat_abstractSubjectMetadata_history.xft_version AS xnat_abstractSubjectMetadata_history_xft_version, xnat_abstractSubjectMetadata_history.xnat_abstractsubjectmetadata_id AS xnat_abstractSubjectMetadata_history0 FROM xnat_abstractSubjectMetadata_history xnat_abstractSubjectMetadata_history   LEFT JOIN xdat_meta_element table1 ON xnat_abstractSubjectMetadata_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_abstractSubjectMetadata_history3=$1))
      LOOP
         IF (current_row.xdat_meta_element9 IS NULL) THEN 
             fullText:= ie_xnat_abstractSubjectMetadata( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element9=''xnat:subjectMetadata'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_subjectMetadata_history WHERE xnat_abstractsubjectmetadata_id=current_row.xnat_abstractSubjectMetadata_history0 AND xft_version=current_row.xnat_abstractSubjectMetadata_history_xft_version
           	LOOP
                fullText:= i_xnat_subjectMetadata_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_abstractSubjectMetadata_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_abstractStatistics_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractStatistics_history)('';
      FOR current_row IN SELECT * FROM xnat_abstractStatistics_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractStatistics_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractstatistics_info:integer)=('' || current_row.abstractstatistics_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractStatistics_meta_data(current_row.abstractStatistics_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractstatistics_info_abstractstatistics_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_abstractstatistics_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractstatistics_id:integer)=('' || current_row.xnat_abstractstatistics_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractStatistics_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractStatistics_history.history_id AS xnat_abstractStatistics_history3, table1.element_name AS xdat_meta_element9, xnat_abstractStatistics_history.xft_version AS xnat_abstractStatistics_history_xft_version, xnat_abstractStatistics_history.xnat_abstractstatistics_id AS xnat_abstractStatistics_history4 FROM xnat_abstractStatistics_history xnat_abstractStatistics_history   LEFT JOIN xdat_meta_element table1 ON xnat_abstractStatistics_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_abstractStatistics_history3=$1))
      LOOP
         IF (current_row.xdat_meta_element9 IS NULL) THEN 
             fullText:= ie_xnat_abstractStatistics( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element9=''xnat:statisticsData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_statisticsData_history WHERE xnat_abstractstatistics_id=current_row.xnat_abstractStatistics_history4 AND xft_version=current_row.xnat_abstractStatistics_history_xft_version
           	LOOP
                fullText:= i_xnat_statisticsData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_abstractStatistics_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_abstractDemographicData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractDemographicData_history)('';
      FOR current_row IN SELECT * FROM xnat_abstractDemographicData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractDemographicData_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractdemographicdata_info:integer)=('' || current_row.abstractdemographicdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractDemographicData_meta_data(current_row.abstractDemographicData_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractdemographicdata_info_abstractdemographicdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_abstractdemographicdata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractdemographicdata_id:integer)=('' || current_row.xnat_abstractdemographicdata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractDemographicData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractDemographicData_history.history_id AS xnat_abstractDemographicData_history4, table1.element_name AS xdat_meta_element9, xnat_abstractDemographicData_history.xft_version AS xnat_abstractDemographicData_history_xft_version, xnat_abstractDemographicData_history.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData_history1 FROM xnat_abstractDemographicData_history xnat_abstractDemographicData_history   LEFT JOIN xdat_meta_element table1 ON xnat_abstractDemographicData_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_abstractDemographicData_history4=$1))
      LOOP
         IF (current_row.xdat_meta_element9 IS NULL) THEN 
             fullText:= ie_xnat_abstractDemographicData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element9=''xnat:demographicData'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_demographicData_history WHERE xnat_abstractdemographicdata_id=current_row.xnat_abstractDemographicData_history1 AND xft_version=current_row.xnat_abstractDemographicData_history_xft_version
           	LOOP
                fullText:= i_xnat_demographicData_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_abstractDemographicData_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_abstractResource_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractResource_history)('';
      FOR current_row IN SELECT * FROM xnat_abstractResource_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.note IS NOT NULL) THEN 
              fullText := fullText || ''(note:string)=('' || REPLACE(REPLACE(current_row.note,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractResource_tag_history WHERE tags_tag_xnat_abstractResource_xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version ORDER BY xnat_abstractresource_tag_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_tag_history( parent_row.xnat_abstractresource_tag_id, child_count,$3,false,false);
              fullText := fullText || ''(tags_tag_abstractresource_tag'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.file_count IS NOT NULL) THEN 
              fullText := fullText || ''(file_count:integer)=('' || current_row.file_count || '')'';
          END IF;
          IF (current_row.file_size IS NOT NULL) THEN 
              fullText := fullText || ''(file_size:long)=('' || current_row.file_size || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractResource_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractresource_info:integer)=('' || current_row.abstractresource_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_meta_data(current_row.abstractResource_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractresource_info_abstractresource_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xnat_imageScanData_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_xnat_imagescandata_id || '')'';
        END IF;
          IF (current_row.xnat_abstractresource_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractResource_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractResource_history.history_id AS xnat_abstractResource_history5, table1.element_name AS xdat_meta_element14, xnat_abstractResource_history.xft_version AS xnat_abstractResource_history_xft_version, xnat_abstractResource_history.xnat_abstractresource_id AS xnat_abstractResource_history9 FROM xnat_abstractResource_history xnat_abstractResource_history   LEFT JOIN xdat_meta_element table1 ON xnat_abstractResource_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_abstractResource_history5=$1))
      LOOP
         IF (current_row.xdat_meta_element14 IS NULL) THEN 
             fullText:= ie_xnat_abstractResource( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element14=''xnat:resource'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_resource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractResource_history9 AND xft_version=current_row.xnat_abstractResource_history_xft_version
           	LOOP
                fullText:= ie_xnat_resource_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element14=''xnat:imageResource'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_imageResource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractResource_history9 AND xft_version=current_row.xnat_abstractResource_history_xft_version
           	LOOP
                fullText:= i_xnat_imageResource_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element14=''xnat:resourceSeries'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_resourceSeries_history WHERE xnat_abstractresource_id=current_row.xnat_abstractResource_history9 AND xft_version=current_row.xnat_abstractResource_history_xft_version
           	LOOP
                fullText:= ie_xnat_resourceSeries_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element14=''xnat:imageResourceSeries'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_imageResourceSeries_history WHERE xnat_abstractresource_id=current_row.xnat_abstractResource_history9 AND xft_version=current_row.xnat_abstractResource_history_xft_version
           	LOOP
                fullText:= i_xnat_imageResourceSeries_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element14=''xnat:dicomSeries'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_dicomSeries_history WHERE xnat_abstractresource_id=current_row.xnat_abstractResource_history9 AND xft_version=current_row.xnat_abstractResource_history_xft_version
           	LOOP
                fullText:= i_xnat_dicomSeries_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element14=''xnat:publicationResource'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_publicationResource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractResource_history9 AND xft_version=current_row.xnat_abstractResource_history_xft_version
           	LOOP
                fullText:= i_xnat_publicationResource_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element14=''xnat:resourceCatalog'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xnat_resourceCatalog_history WHERE xnat_abstractresource_id=current_row.xnat_abstractResource_history9 AND xft_version=current_row.xnat_abstractResource_history_xft_version
           	LOOP
                fullText:= i_xnat_resourceCatalog_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_abstractResource_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_arc_pipelineData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:pipelineData_history)('';
      FOR current_row IN SELECT * FROM arc_pipelineData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.displaytext IS NOT NULL) THEN 
              fullText := fullText || ''(displaytext:string)=('' || REPLACE(REPLACE(current_row.displaytext,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.location IS NOT NULL) THEN 
              fullText := fullText || ''(location:string)=('' || REPLACE(REPLACE(current_row.location,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_pipelineParameterData_history WHERE parameters_parameter_arc_pipeli_arc_pipelinedata_id=current_row.arc_pipelinedata_id AND xft_version=current_row.xft_version ORDER BY arc_pipelineparameterdata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pipelineParameterData_history( parent_row.arc_pipelineparameterdata_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_parameter_pipelineparameterdata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.customwebpage IS NOT NULL) THEN 
              fullText := fullText || ''(customwebpage:string)=('' || REPLACE(REPLACE(current_row.customwebpage,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.pipelineData_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelinedata_info:integer)=('' || current_row.pipelinedata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pipelineData_meta_data(current_row.pipelineData_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelinedata_info_pipelinedata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.arc_pipelinedata_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_pipelinedata_id:integer)=('' || current_row.arc_pipelinedata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_pipelineData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT arc_pipelineData_history.history_id AS arc_pipelineData_history6, table1.element_name AS xdat_meta_element14, arc_pipelineData_history.xft_version AS arc_pipelineData_history_xft_version, arc_pipelineData_history.arc_pipelinedata_id AS arc_pipelineData_history7 FROM arc_pipelineData_history arc_pipelineData_history   LEFT JOIN xdat_meta_element table1 ON arc_pipelineData_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (arc_pipelineData_history6=$1))
      LOOP
         IF (current_row.xdat_meta_element14 IS NULL) THEN 
             fullText:= ie_arc_pipelineData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element14=''arc:project_descendant_pipeline'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM arc_project_descendant_pipeline_history WHERE arc_pipelinedata_id=current_row.arc_pipelineData_history7 AND xft_version=current_row.arc_pipelineData_history_xft_version
           	LOOP
                fullText:= i_arc_project_descendant_pipeline_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
            IF (current_row.xdat_meta_element14=''arc:project_pipeline'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM arc_project_pipeline_history WHERE arc_pipelinedata_id=current_row.arc_pipelineData_history7 AND xft_version=current_row.arc_pipelineData_history_xft_version
           	LOOP
                fullText:= i_arc_project_pipeline_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_arc_pipelineData_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_cat_entry_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:entry_history)('';
      FOR current_row IN SELECT * FROM cat_entry_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_entry_metaField_history WHERE metafields_metafield_cat_entry_cat_entry_id=current_row.cat_entry_id AND xft_version=current_row.xft_version ORDER BY cat_entry_metafield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_metaField_history( parent_row.cat_entry_metafield_id, child_count,$3,false,false);
              fullText := fullText || ''(metafields_metafield_entry_metafield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_entry_tag_history WHERE tags_tag_cat_entry_cat_entry_id=current_row.cat_entry_id AND xft_version=current_row.xft_version ORDER BY cat_entry_tag_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_tag_history( parent_row.cat_entry_tag_id, child_count,$3,false,false);
              fullText := fullText || ''(tags_tag_entry_tag'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.uri IS NOT NULL) THEN 
              fullText := fullText || ''(uri:string)=('' || REPLACE(REPLACE(current_row.uri,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.format IS NOT NULL) THEN 
              fullText := fullText || ''(format:string)=('' || REPLACE(REPLACE(current_row.format,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.content IS NOT NULL) THEN 
              fullText := fullText || ''(content:string)=('' || REPLACE(REPLACE(current_row.content,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.cachepath IS NOT NULL) THEN 
              fullText := fullText || ''(cachepath:string)=('' || REPLACE(REPLACE(current_row.cachepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.createdtime IS NOT NULL) THEN 
              fullText := fullText || ''(createdtime:dateTime)=('' || current_row.createdtime || '')'';
          END IF;
          IF (current_row.createdby IS NOT NULL) THEN 
              fullText := fullText || ''(createdby:string)=('' || REPLACE(REPLACE(current_row.createdby,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.createdeventid IS NOT NULL) THEN 
              fullText := fullText || ''(createdeventid:integer)=('' || current_row.createdeventid || '')'';
          END IF;
          IF (current_row.modifiedtime IS NOT NULL) THEN 
              fullText := fullText || ''(modifiedtime:dateTime)=('' || current_row.modifiedtime || '')'';
          END IF;
          IF (current_row.modifiedby IS NOT NULL) THEN 
              fullText := fullText || ''(modifiedby:string)=('' || REPLACE(REPLACE(current_row.modifiedby,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modifiedeventid IS NOT NULL) THEN 
              fullText := fullText || ''(modifiedeventid:integer)=('' || current_row.modifiedeventid || '')'';
          END IF;
          IF (current_row.digest IS NOT NULL) THEN 
              fullText := fullText || ''(digest:string)=('' || REPLACE(REPLACE(current_row.digest,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.entry_info IS NOT NULL)) THEN
            fullText := fullText || ''(entry_info:integer)=('' || current_row.entry_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_meta_data(current_row.entry_info, child_count,$3,false,false);
              fullText := fullText || ''(entry_info_entry_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.entries_entry_cat_catalog_cat_catalog_id IS NOT NULL)) THEN
            fullText := fullText || ''(entries_entry_cat_catalog_cat_catalog_id:integer)=('' || current_row.entries_entry_cat_catalog_cat_catalog_id || '')'';
        END IF;
          IF (current_row.cat_entry_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_entry_id:integer)=('' || current_row.cat_entry_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_entry_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT cat_entry_history.history_id AS cat_entry_history14, table1.element_name AS xdat_meta_element24, cat_entry_history.xft_version AS cat_entry_history_xft_version, cat_entry_history.cat_entry_id AS cat_entry_history0 FROM cat_entry_history cat_entry_history   LEFT JOIN xdat_meta_element table1 ON cat_entry_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (cat_entry_history14=$1))
      LOOP
         IF (current_row.xdat_meta_element24 IS NULL) THEN 
             fullText:= ie_cat_entry( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element24=''cat:dcmEntry'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM cat_dcmEntry_history WHERE cat_entry_id=current_row.cat_entry_history0 AND xft_version=current_row.cat_entry_history_xft_version
           	LOOP
                fullText:= i_cat_dcmEntry_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_cat_entry_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_cat_catalog_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:catalog_history)('';
      FOR current_row IN SELECT * FROM cat_catalog_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_catalog_metaField_history WHERE metafields_metafield_cat_catalo_cat_catalog_id=current_row.cat_catalog_id AND xft_version=current_row.xft_version ORDER BY cat_catalog_metafield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_metaField_history( parent_row.cat_catalog_metafield_id, child_count,$3,false,false);
              fullText := fullText || ''(metafields_metafield_catalog_metafield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_catalog_tag_history WHERE tags_tag_cat_catalog_cat_catalog_id=current_row.cat_catalog_id AND xft_version=current_row.xft_version ORDER BY cat_catalog_tag_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_tag_history( parent_row.cat_catalog_tag_id, child_count,$3,false,false);
              fullText := fullText || ''(tags_tag_catalog_tag'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_catalog_history WHERE sets_entryset_cat_catalog_id=current_row.cat_catalog_id AND xft_version=current_row.xft_version ORDER BY cat_catalog_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_history( parent_row.cat_catalog_id, child_count,$3,false,false);
              fullText := fullText || ''(sets_entryset_catalog'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_entry_history WHERE entries_entry_cat_catalog_cat_catalog_id=current_row.cat_catalog_id AND xft_version=current_row.xft_version ORDER BY cat_entry_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_history( parent_row.cat_entry_id, child_count,$3,false,false);
              fullText := fullText || ''(entries_entry_entry'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.catalog_info IS NOT NULL)) THEN
            fullText := fullText || ''(catalog_info:integer)=('' || current_row.catalog_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_meta_data(current_row.catalog_info, child_count,$3,false,false);
              fullText := fullText || ''(catalog_info_catalog_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.cat_catalog_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_catalog_id:integer)=('' || current_row.cat_catalog_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_catalog_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT cat_catalog_history.history_id AS cat_catalog_history5, table1.element_name AS xdat_meta_element12, cat_catalog_history.xft_version AS cat_catalog_history_xft_version, cat_catalog_history.cat_catalog_id AS cat_catalog_history6 FROM cat_catalog_history cat_catalog_history   LEFT JOIN xdat_meta_element table1 ON cat_catalog_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (cat_catalog_history5=$1))
      LOOP
         IF (current_row.xdat_meta_element12 IS NULL) THEN 
             fullText:= ie_cat_catalog( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element12=''cat:dcmCatalog'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM cat_dcmCatalog_history WHERE cat_catalog_id=current_row.cat_catalog_history6 AND xft_version=current_row.cat_catalog_history_xft_version
           	LOOP
                fullText:= i_cat_dcmCatalog_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_cat_catalog_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_wrk_abstractExecutionEnvironment_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:abstractExecutionEnvironment_history)('';
      FOR current_row IN SELECT * FROM wrk_abstractExecutionEnvironment_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractExecutionEnvironment_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractexecutionenvironment_info:integer)=('' || current_row.abstractexecutionenvironment_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_abstractExecutionEnvironment_meta_data(current_row.abstractExecutionEnvironment_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractexecutionenvironment_info_abstractexecutionenvironment_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.wrk_abstractexecutionenvironment_id IS NOT NULL) THEN 
              fullText := fullText || ''(wrk_abstractexecutionenvironment_id:integer)=('' || current_row.wrk_abstractexecutionenvironment_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_abstractExecutionEnvironment_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT wrk_abstractExecutionEnvironment_history.history_id AS wrk_abstractExecutionEnvironment_history4, table1.element_name AS xdat_meta_element9, wrk_abstractExecutionEnvironment_history.xft_version AS wrk_abstractExecutionEnvironment_history_xft_version, wrk_abstractExecutionEnvironment_history.wrk_abstractexecutionenvironment_id AS wrk_abstractExecutionEnvironment_history0 FROM wrk_abstractExecutionEnvironment_history wrk_abstractExecutionEnvironment_history   LEFT JOIN xdat_meta_element table1 ON wrk_abstractExecutionEnvironment_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (wrk_abstractExecutionEnvironment_history4=$1))
      LOOP
         IF (current_row.xdat_meta_element9 IS NULL) THEN 
             fullText:= ie_wrk_abstractExecutionEnvironment( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element9=''wrk:xnatExecutionEnvironment'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM wrk_xnatExecutionEnvironment_history WHERE wrk_abstractexecutionenvironment_id=current_row.wrk_abstractExecutionEnvironment_history0 AND xft_version=current_row.wrk_abstractExecutionEnvironment_history_xft_version
           	LOOP
                fullText:= i_wrk_xnatExecutionEnvironment_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_wrk_abstractExecutionEnvironment_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xdat_stored_search_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xdat:stored_search_history)('';
      FOR current_row IN SELECT * FROM xdat_stored_search_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.root_element_name IS NOT NULL) THEN 
              fullText := fullText || ''(root_element_name:string)=('' || REPLACE(REPLACE(current_row.root_element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_search_field_history WHERE xdat_stored_search_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xdat_search_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_search_field_history( parent_row.xdat_search_field_id, child_count,$3,false,false);
              fullText := fullText || ''(search_field_search_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_criteria_set_history WHERE xdat_stored_search_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xdat_criteria_set_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_criteria_set_history( parent_row.xdat_criteria_set_id, child_count,$3,false,false);
              fullText := fullText || ''(search_where_criteria_set'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.sort_by_element_name IS NOT NULL) THEN 
              fullText := fullText || ''(sort_by_element_name:string)=('' || REPLACE(REPLACE(current_row.sort_by_element_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sort_by_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(sort_by_field_id:string)=('' || REPLACE(REPLACE(current_row.sort_by_field_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_stored_search_allowed_user_history WHERE xdat_stored_search_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xdat_stored_search_allowed_user_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_stored_search_allowed_user_history( parent_row.xdat_stored_search_allowed_user_id, child_count,$3,false,false);
              fullText := fullText || ''(allowed_user_stored_search_allowed_user'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xdat_stored_search_groupID_history WHERE allowed_groups_groupid_xdat_sto_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xdat_stored_search_groupid_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_stored_search_groupID_history( parent_row.xdat_stored_search_groupid_id, child_count,$3,false,false);
              fullText := fullText || ''(allowed_groups_groupid_stored_search_groupid'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.layeredsequence IS NOT NULL) THEN 
              fullText := fullText || ''(layeredsequence:string)=('' || REPLACE(REPLACE(current_row.layeredsequence,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.allow_diff_columns IS NOT NULL) THEN 
              fullText := fullText || ''(allow_diff_columns:integer)=('' || current_row.allow_diff_columns || '')'';
          END IF;
          IF (current_row.secure IS NOT NULL) THEN 
              fullText := fullText || ''(secure:integer)=('' || current_row.secure || '')'';
          END IF;
          IF (current_row.brief_description IS NOT NULL) THEN 
              fullText := fullText || ''(brief_description:string)=('' || REPLACE(REPLACE(current_row.brief_description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tag IS NOT NULL) THEN 
              fullText := fullText || ''(tag:string)=('' || REPLACE(REPLACE(current_row.tag,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.stored_search_info IS NOT NULL)) THEN
            fullText := fullText || ''(stored_search_info:integer)=('' || current_row.stored_search_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_stored_search_meta_data(current_row.stored_search_info, child_count,$3,false,false);
              fullText := fullText || ''(stored_search_info_stored_search_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xdat_stored_search_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xdat_stored_search_history.history_id AS xdat_stored_search_history7, table1.element_name AS xdat_meta_element18, xdat_stored_search_history.xft_version AS xdat_stored_search_history_xft_version, xdat_stored_search_history.id AS xdat_stored_search_history6 FROM xdat_stored_search_history xdat_stored_search_history   LEFT JOIN xdat_meta_element table1 ON xdat_stored_search_history.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (xdat_stored_search_history7=$1))
      LOOP
         IF (current_row.xdat_meta_element18 IS NULL) THEN 
             fullText:= ie_xdat_stored_search( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element18=''xdat:Search'') THEN
            --907 
            DECLARE
            	ext_row RECORD;
            BEGIN 
            	FOR ext_row IN SELECT * FROM xdat_Search_history WHERE id=current_row.xdat_stored_search_history6 AND xft_version=current_row.xdat_stored_search_history_xft_version
           	LOOP
                fullText:= i_xdat_Search_history(ext_row.history_id, $2,$3,$4,$5);
                matches:=1;
            	END LOOP;
            END;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xdat_stored_search_history( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_prov_processStep_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(prov:processStep_history)('';
      FOR current_row IN SELECT * FROM prov_processStep_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.program IS NOT NULL) THEN 
              fullText := fullText || ''(program:string)=('' || REPLACE(REPLACE(current_row.program,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.program_version IS NOT NULL) THEN 
              fullText := fullText || ''(program_version:string)=('' || REPLACE(REPLACE(current_row.program_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.program_arguments IS NOT NULL) THEN 
              fullText := fullText || ''(program_arguments:string)=('' || REPLACE(REPLACE(current_row.program_arguments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.timestamp IS NOT NULL) THEN 
              fullText := fullText || ''(timestamp:dateTime)=('' || current_row.timestamp || '')'';
          END IF;
          IF (current_row.cvs IS NOT NULL) THEN 
              fullText := fullText || ''(cvs:string)=('' || REPLACE(REPLACE(current_row.cvs,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.user_name IS NOT NULL) THEN 
              fullText := fullText || ''(user_name:string)=('' || REPLACE(REPLACE(current_row.user_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.machine IS NOT NULL) THEN 
              fullText := fullText || ''(machine:string)=('' || REPLACE(REPLACE(current_row.machine,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.platform IS NOT NULL) THEN 
              fullText := fullText || ''(platform:string)=('' || REPLACE(REPLACE(current_row.platform,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.platform_version IS NOT NULL) THEN 
              fullText := fullText || ''(platform_version:string)=('' || REPLACE(REPLACE(current_row.platform_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.compiler IS NOT NULL) THEN 
              fullText := fullText || ''(compiler:string)=('' || REPLACE(REPLACE(current_row.compiler,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.compiler_version IS NOT NULL) THEN 
              fullText := fullText || ''(compiler_version:string)=('' || REPLACE(REPLACE(current_row.compiler_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM prov_processStep_library_history WHERE prov_processStep_prov_processstep_id=current_row.prov_processstep_id AND xft_version=current_row.xft_version ORDER BY prov_processstep_library_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_processStep_library_history( parent_row.prov_processstep_library_id, child_count,$3,false,false);
              fullText := fullText || ''(library_processstep_library'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.processStep_info IS NOT NULL)) THEN
            fullText := fullText || ''(processstep_info:integer)=('' || current_row.processstep_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_processStep_meta_data(current_row.processStep_info, child_count,$3,false,false);
              fullText := fullText || ''(processstep_info_processstep_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.prov_process_prov_process_id IS NOT NULL)) THEN
            fullText := fullText || ''(prov_process_prov_process_id:integer)=('' || current_row.prov_process_prov_process_id || '')'';
        END IF;
          IF (current_row.prov_processstep_id IS NOT NULL) THEN 
              fullText := fullText || ''(prov_processstep_id:integer)=('' || current_row.prov_processstep_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_prov_processStep_library_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(prov:processStep_library_history)('';
      FOR current_row IN SELECT * FROM prov_processStep_library_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.library IS NOT NULL) THEN 
              fullText := fullText || ''(library:string)=('' || REPLACE(REPLACE(current_row.library,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.version IS NOT NULL) THEN 
              fullText := fullText || ''(version:string)=('' || REPLACE(REPLACE(current_row.version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.processStep_library_info IS NOT NULL)) THEN
            fullText := fullText || ''(processstep_library_info:integer)=('' || current_row.processstep_library_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_processStep_library_meta_data(current_row.processStep_library_info, child_count,$3,false,false);
              fullText := fullText || ''(processstep_library_info_processstep_library_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.prov_processStep_prov_processstep_id IS NOT NULL)) THEN
            fullText := fullText || ''(prov_processstep_prov_processstep_id:integer)=('' || current_row.prov_processstep_prov_processstep_id || '')'';
        END IF;
          IF (current_row.prov_processstep_library_id IS NOT NULL) THEN 
              fullText := fullText || ''(prov_processstep_library_id:integer)=('' || current_row.prov_processstep_library_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_prov_processStep_library_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(prov:processStep_library_meta_data)('';
      FOR current_row IN SELECT * FROM prov_processStep_library_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_prov_processStep_library( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(prov:processStep_library)('';
      FOR current_row IN SELECT * FROM prov_processStep_library WHERE  prov_processstep_library_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.library IS NOT NULL) THEN 
              fullText := fullText || ''(library:string)=('' || REPLACE(REPLACE(current_row.library,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.version IS NOT NULL) THEN 
              fullText := fullText || ''(version:string)=('' || REPLACE(REPLACE(current_row.version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.processStep_library_info IS NOT NULL)) THEN
            fullText := fullText || ''(processstep_library_info:integer)=('' || current_row.processstep_library_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_processStep_library_meta_data(current_row.processStep_library_info, child_count,$3,false,false);
              fullText := fullText || ''(processstep_library_info_processstep_library_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.prov_processStep_prov_processstep_id IS NOT NULL)) THEN
            fullText := fullText || ''(prov_processstep_prov_processstep_id:integer)=('' || current_row.prov_processstep_prov_processstep_id || '')'';
        END IF;
          IF (current_row.prov_processstep_library_id IS NOT NULL) THEN 
              fullText := fullText || ''(prov_processstep_library_id:integer)=('' || current_row.prov_processstep_library_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_prov_processStep_library( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT prov_processStep_library.*, meta.meta_data_id, meta.status AS meta_status FROM prov_processStep_library LEFT JOIN prov_processStep_library_meta_data meta ON prov_processStep_library.processStep_library_info=meta.meta_data_id WHERE  prov_processstep_library_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE prov_processStep_library_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_prov_processStep_library( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT prov_processStep_library.*, meta.meta_data_id FROM prov_processStep_library LEFT JOIN prov_processStep_library_meta_data meta ON prov_processStep_library.processStep_library_info=meta.meta_data_id WHERE  prov_processstep_library_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION prov:processStep/library
        IF ((current_row.prov_processStep_prov_processstep_id IS NOT NULL)) THEN
        PERFORM update_ls_prov_processStep(current_row.prov_processStep_prov_processstep_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_prov_processStep_library()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_prov_processStep_library( OLD.prov_processstep_library_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_prov_processStep_library','CREATE TRIGGER a_u_prov_processStep_library  AFTER UPDATE OR DELETE ON prov_processStep_library FOR EACH ROW EXECUTE PROCEDURE after_update_prov_processStep_library()');
--BR



CREATE OR REPLACE FUNCTION i_prov_process_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(prov:process_meta_data)('';
      FOR current_row IN SELECT * FROM prov_process_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_prov_process_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(prov:process_history)('';
      FOR current_row IN SELECT * FROM prov_process_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM prov_processStep_history WHERE prov_process_prov_process_id=current_row.prov_process_id AND xft_version=current_row.xft_version ORDER BY prov_processstep_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_processStep_history( parent_row.prov_processstep_id, child_count,$3,false,false);
              fullText := fullText || ''(processstep_processstep'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.process_info IS NOT NULL)) THEN
            fullText := fullText || ''(process_info:integer)=('' || current_row.process_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_process_meta_data(current_row.process_info, child_count,$3,false,false);
              fullText := fullText || ''(process_info_process_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.prov_process_id IS NOT NULL) THEN 
              fullText := fullText || ''(prov_process_id:integer)=('' || current_row.prov_process_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_prov_processStep_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(prov:processStep_meta_data)('';
      FOR current_row IN SELECT * FROM prov_processStep_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_prov_processStep( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(prov:processStep)('';
      FOR current_row IN SELECT * FROM prov_processStep WHERE  prov_processstep_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.program IS NOT NULL) THEN 
              fullText := fullText || ''(program:string)=('' || REPLACE(REPLACE(current_row.program,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.program_version IS NOT NULL) THEN 
              fullText := fullText || ''(program_version:string)=('' || REPLACE(REPLACE(current_row.program_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.program_arguments IS NOT NULL) THEN 
              fullText := fullText || ''(program_arguments:string)=('' || REPLACE(REPLACE(current_row.program_arguments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.timestamp IS NOT NULL) THEN 
              fullText := fullText || ''(timestamp:dateTime)=('' || current_row.timestamp || '')'';
          END IF;
          IF (current_row.cvs IS NOT NULL) THEN 
              fullText := fullText || ''(cvs:string)=('' || REPLACE(REPLACE(current_row.cvs,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.user_name IS NOT NULL) THEN 
              fullText := fullText || ''(user_name:string)=('' || REPLACE(REPLACE(current_row.user_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.machine IS NOT NULL) THEN 
              fullText := fullText || ''(machine:string)=('' || REPLACE(REPLACE(current_row.machine,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.platform IS NOT NULL) THEN 
              fullText := fullText || ''(platform:string)=('' || REPLACE(REPLACE(current_row.platform,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.platform_version IS NOT NULL) THEN 
              fullText := fullText || ''(platform_version:string)=('' || REPLACE(REPLACE(current_row.platform_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.compiler IS NOT NULL) THEN 
              fullText := fullText || ''(compiler:string)=('' || REPLACE(REPLACE(current_row.compiler,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.compiler_version IS NOT NULL) THEN 
              fullText := fullText || ''(compiler_version:string)=('' || REPLACE(REPLACE(current_row.compiler_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM prov_processStep_library WHERE prov_processStep_prov_processstep_id=current_row.prov_processstep_id ORDER BY prov_processstep_library_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_processStep_library( parent_row.prov_processstep_library_id, child_count,$3,false,false);
              fullText := fullText || ''(library_processstep_library'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.processStep_info IS NOT NULL)) THEN
            fullText := fullText || ''(processstep_info:integer)=('' || current_row.processstep_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_processStep_meta_data(current_row.processStep_info, child_count,$3,false,false);
              fullText := fullText || ''(processstep_info_processstep_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.prov_process_prov_process_id IS NOT NULL)) THEN
            fullText := fullText || ''(prov_process_prov_process_id:integer)=('' || current_row.prov_process_prov_process_id || '')'';
        END IF;
          IF (current_row.prov_processstep_id IS NOT NULL) THEN 
              fullText := fullText || ''(prov_processstep_id:integer)=('' || current_row.prov_processstep_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_prov_processStep( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT prov_processStep.*, meta.meta_data_id, meta.status AS meta_status FROM prov_processStep LEFT JOIN prov_processStep_meta_data meta ON prov_processStep.processStep_info=meta.meta_data_id WHERE  prov_processstep_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE prov_processStep_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM prov_processStep_library WHERE prov_processStep_prov_processstep_id=current_row.prov_processstep_id
        LOOP
          PERFORM  a_prov_processStep_library( parent_row.prov_processstep_library_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_prov_processStep( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT prov_processStep.*, meta.meta_data_id FROM prov_processStep LEFT JOIN prov_processStep_meta_data meta ON prov_processStep.processStep_info=meta.meta_data_id WHERE  prov_processstep_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION prov:process/processStep
        IF ((current_row.prov_process_prov_process_id IS NOT NULL)) THEN
        PERFORM update_ls_prov_process(current_row.prov_process_prov_process_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_prov_processStep()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_prov_processStep( OLD.prov_processstep_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_prov_processStep','CREATE TRIGGER a_u_prov_processStep  AFTER UPDATE OR DELETE ON prov_processStep FOR EACH ROW EXECUTE PROCEDURE after_update_prov_processStep()');
--BR



CREATE OR REPLACE FUNCTION i_prov_process( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(prov:process)('';
      FOR current_row IN SELECT * FROM prov_process WHERE  prov_process_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM prov_processStep WHERE prov_process_prov_process_id=current_row.prov_process_id ORDER BY prov_processstep_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_processStep( parent_row.prov_processstep_id, child_count,$3,false,false);
              fullText := fullText || ''(processstep_processstep'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.process_info IS NOT NULL)) THEN
            fullText := fullText || ''(process_info:integer)=('' || current_row.process_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_process_meta_data(current_row.process_info, child_count,$3,false,false);
              fullText := fullText || ''(process_info_process_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.prov_process_id IS NOT NULL) THEN 
              fullText := fullText || ''(prov_process_id:integer)=('' || current_row.prov_process_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_prov_process( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT prov_process.*, meta.meta_data_id, meta.status AS meta_status FROM prov_process LEFT JOIN prov_process_meta_data meta ON prov_process.process_info=meta.meta_data_id WHERE  prov_process_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE prov_process_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM prov_processStep WHERE prov_process_prov_process_id=current_row.prov_process_id
        LOOP
          PERFORM  a_prov_processStep( parent_row.prov_processstep_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_prov_process( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''prov:process'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT prov_process.*, meta.meta_data_id FROM prov_process LEFT JOIN prov_process_meta_data meta ON prov_process.process_info=meta.meta_data_id WHERE  prov_process_id=$1
      LOOP
         UPDATE prov_process_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION xnat:derivedData/provenance
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_derivedData WHERE provenance_prov_process_id=current_row.prov_process_id
        LOOP
        PERFORM update_ls_xnat_derivedData( parent_row.id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:reconstructedImageData/provenance
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_reconstructedImageData WHERE provenance_prov_process_id=current_row.prov_process_id
        LOOP
        PERFORM update_ls_xnat_reconstructedImageData( parent_row.xnat_reconstructedimagedata_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:resource/provenance
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_resource WHERE provenance_prov_process_id=current_row.prov_process_id
        LOOP
        PERFORM update_ls_xnat_resource( parent_row.xnat_abstractresource_id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_prov_process()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_prov_process( OLD.prov_process_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_prov_process','CREATE TRIGGER a_u_prov_process  AFTER UPDATE OR DELETE ON prov_process FOR EACH ROW EXECUTE PROCEDURE after_update_prov_process()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_sideEffectsPittsburghData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:sideEffectsPittsburghData_history)('';
      FOR current_row IN SELECT * FROM xnat_a_sideEffectsPittsburghData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_subjectAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.motortics IS NOT NULL) THEN 
              fullText := fullText || ''(motortics:integer)=('' || current_row.motortics || '')'';
          END IF;
          IF (current_row.buccal_lingualmovements IS NOT NULL) THEN 
              fullText := fullText || ''(buccal_lingualmovements:integer)=('' || current_row.buccal_lingualmovements || '')'';
          END IF;
          IF (current_row.picking_skin_fingers_nails_lip IS NOT NULL) THEN 
              fullText := fullText || ''(picking_skin_fingers_nails_lip:integer)=('' || current_row.picking_skin_fingers_nails_lip || '')'';
          END IF;
          IF (current_row.worried_anxious IS NOT NULL) THEN 
              fullText := fullText || ''(worried_anxious:integer)=('' || current_row.worried_anxious || '')'';
          END IF;
          IF (current_row.dull_tired_listless IS NOT NULL) THEN 
              fullText := fullText || ''(dull_tired_listless:integer)=('' || current_row.dull_tired_listless || '')'';
          END IF;
          IF (current_row.sedation IS NOT NULL) THEN 
              fullText := fullText || ''(sedation:integer)=('' || current_row.sedation || '')'';
          END IF;
          IF (current_row.stomachache IS NOT NULL) THEN 
              fullText := fullText || ''(stomachache:integer)=('' || current_row.stomachache || '')'';
          END IF;
          IF (current_row.nausea_vomiting IS NOT NULL) THEN 
              fullText := fullText || ''(nausea_vomiting:integer)=('' || current_row.nausea_vomiting || '')'';
          END IF;
          IF (current_row.crabby_irritable IS NOT NULL) THEN 
              fullText := fullText || ''(crabby_irritable:integer)=('' || current_row.crabby_irritable || '')'';
          END IF;
          IF (current_row.tearful_sad_depressed IS NOT NULL) THEN 
              fullText := fullText || ''(tearful_sad_depressed:integer)=('' || current_row.tearful_sad_depressed || '')'';
          END IF;
          IF (current_row.hallucinations IS NOT NULL) THEN 
              fullText := fullText || ''(hallucinations:integer)=('' || current_row.hallucinations || '')'';
          END IF;
          IF (current_row.troublesleeping IS NOT NULL) THEN 
              fullText := fullText || ''(troublesleeping:integer)=('' || current_row.troublesleeping || '')'';
          END IF;
          IF (current_row.lossofappetite IS NOT NULL) THEN 
              fullText := fullText || ''(lossofappetite:integer)=('' || current_row.lossofappetite || '')'';
          END IF;
          IF (current_row.troubleconcentrating_distractible IS NOT NULL) THEN 
              fullText := fullText || ''(troubleconcentrating_distractible:integer)=('' || current_row.troubleconcentrating_distractible || '')'';
          END IF;
          IF (current_row.dizziness_lightheadedness IS NOT NULL) THEN 
              fullText := fullText || ''(dizziness_lightheadedness:integer)=('' || current_row.dizziness_lightheadedness || '')'';
          END IF;
          IF (current_row.headaches IS NOT NULL) THEN 
              fullText := fullText || ''(headaches:integer)=('' || current_row.headaches || '')'';
          END IF;
          IF (current_row.socialwithdrawal IS NOT NULL) THEN 
              fullText := fullText || ''(socialwithdrawal:integer)=('' || current_row.socialwithdrawal || '')'';
          END IF;
          IF (current_row.drymouth IS NOT NULL) THEN 
              fullText := fullText || ''(drymouth:integer)=('' || current_row.drymouth || '')'';
          END IF;
          IF (current_row.palpitations IS NOT NULL) THEN 
              fullText := fullText || ''(palpitations:integer)=('' || current_row.palpitations || '')'';
          END IF;
        IF ((current_row.sideEffectsPittsburghData_info IS NOT NULL)) THEN
            fullText := fullText || ''(sideeffectspittsburghdata_info:integer)=('' || current_row.sideeffectspittsburghdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_a_sideEffectsPittsburghData_meta_data(current_row.sideEffectsPittsburghData_info, child_count,$3,false,false);
              fullText := fullText || ''(sideeffectspittsburghdata_info_sideeffectspittsburghdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_sideEffectsPittsburghData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:sideEffectsPittsburghData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_a_sideEffectsPittsburghData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_ygtssData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:ygtssData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_a_ygtssData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_scidResearchData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:scidResearchData_history)('';
      FOR current_row IN SELECT * FROM xnat_a_scidResearchData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_subjectAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.administrator IS NOT NULL) THEN 
              fullText := fullText || ''(administrator:string)=('' || REPLACE(REPLACE(current_row.administrator,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.moodepisodes_currentmajordepressiveepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currentmajordepressiveepisode:integer)=('' || current_row.moodepisodes_currentmajordepressiveepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_pastmajordepressiveepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_pastmajordepressiveepisode:integer)=('' || current_row.moodepisodes_pastmajordepressiveepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_currentmanicepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currentmanicepisode:integer)=('' || current_row.moodepisodes_currentmanicepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_pastmanicepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_pastmanicepisode:integer)=('' || current_row.moodepisodes_pastmanicepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_currenthypomanicepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currenthypomanicepisode:integer)=('' || current_row.moodepisodes_currenthypomanicepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_pasthypomanicepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_pasthypomanicepisode:integer)=('' || current_row.moodepisodes_pasthypomanicepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_currentdysthmicepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currentdysthmicepisode:integer)=('' || current_row.moodepisodes_currentdysthmicepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_currentmooddisorderduetomedicalcondition IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currentmooddisorderduetomedicalcondition:integer)=('' || current_row.moodepisodes_currentmooddisorderduetomedicalcondition || '')'';
          END IF;
          IF (current_row.moodepisodes_pastmooddisorderduetomedicalcondition IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_pastmooddisorderduetomedicalcondition:integer)=('' || current_row.moodepisodes_pastmooddisorderduetomedicalcondition || '')'';
          END IF;
          IF (current_row.moodepisodes_currentsubstanceinducedmooddisorder IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currentsubstanceinducedmooddisorder:integer)=('' || current_row.moodepisodes_currentsubstanceinducedmooddisorder || '')'';
          END IF;
          IF (current_row.moodepisodes_pastsubstanceinducedmooddisorder IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_pastsubstanceinducedmooddisorder:integer)=('' || current_row.moodepisodes_pastsubstanceinducedmooddisorder || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_currentdelusions IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_currentdelusions:integer)=('' || current_row.psychoticsymptoms_currentdelusions || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_pastdelusions IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_pastdelusions:integer)=('' || current_row.psychoticsymptoms_pastdelusions || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_currenthallucinations IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_currenthallucinations:integer)=('' || current_row.psychoticsymptoms_currenthallucinations || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_pasthallucinations IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_pasthallucinations:integer)=('' || current_row.psychoticsymptoms_pasthallucinations || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_currentdisorganizedspeechbehavior IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_currentdisorganizedspeechbehavior:integer)=('' || current_row.psychoticsymptoms_currentdisorganizedspeechbehavior || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_pastdisorganizedspeechbehavior IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_pastdisorganizedspeechbehavior:integer)=('' || current_row.psychoticsymptoms_pastdisorganizedspeechbehavior || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_currentcatatonicbehavior IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_currentcatatonicbehavior:integer)=('' || current_row.psychoticsymptoms_currentcatatonicbehavior || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_pastcatatonicbehavior IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_pastcatatonicbehavior:integer)=('' || current_row.psychoticsymptoms_pastcatatonicbehavior || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_currentnegativesymptoms IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_currentnegativesymptoms:integer)=('' || current_row.psychoticsymptoms_currentnegativesymptoms || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_pastnegativesymptoms IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_pastnegativesymptoms:integer)=('' || current_row.psychoticsymptoms_pastnegativesymptoms || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentschizophrenia IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentschizophrenia:integer)=('' || current_row.psychoticdisorders_currentschizophrenia || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastschizophrenia IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastschizophrenia:integer)=('' || current_row.psychoticdisorders_pastschizophrenia || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentparanoidtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentparanoidtype:integer)=('' || current_row.psychoticdisorders_currentparanoidtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastparanoidtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastparanoidtype:integer)=('' || current_row.psychoticdisorders_pastparanoidtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentcatatonictype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentcatatonictype:integer)=('' || current_row.psychoticdisorders_currentcatatonictype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastcatatonictype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastcatatonictype:integer)=('' || current_row.psychoticdisorders_pastcatatonictype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentdisorganizedtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentdisorganizedtype:integer)=('' || current_row.psychoticdisorders_currentdisorganizedtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastdisorganizedtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastdisorganizedtype:integer)=('' || current_row.psychoticdisorders_pastdisorganizedtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentundifferentiatedtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentundifferentiatedtype:integer)=('' || current_row.psychoticdisorders_currentundifferentiatedtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastundifferentiatedtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastundifferentiatedtype:integer)=('' || current_row.psychoticdisorders_pastundifferentiatedtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentresidualtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentresidualtype:integer)=('' || current_row.psychoticdisorders_currentresidualtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastresidualtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastresidualtype:integer)=('' || current_row.psychoticdisorders_pastresidualtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentschizophreniformdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentschizophreniformdisorder:integer)=('' || current_row.psychoticdisorders_currentschizophreniformdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastschizophreniformdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastschizophreniformdisorder:integer)=('' || current_row.psychoticdisorders_pastschizophreniformdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentschizoaffectivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentschizoaffectivedisorder:integer)=('' || current_row.psychoticdisorders_currentschizoaffectivedisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastschizoaffectivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastschizoaffectivedisorder:integer)=('' || current_row.psychoticdisorders_pastschizoaffectivedisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentdelusionaldisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentdelusionaldisorder:integer)=('' || current_row.psychoticdisorders_currentdelusionaldisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastdelusionaldisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastdelusionaldisorder:integer)=('' || current_row.psychoticdisorders_pastdelusionaldisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentbriefpsychoticdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentbriefpsychoticdisorder:integer)=('' || current_row.psychoticdisorders_currentbriefpsychoticdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastbriefpsychoticdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastbriefpsychoticdisorder:integer)=('' || current_row.psychoticdisorders_pastbriefpsychoticdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentpsychoticdisorderduetomedicalconditio IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentpsychoticdisorderduetomedicalconditio:integer)=('' || current_row.psychoticdisorders_currentpsychoticdisorderduetomedicalconditio || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastpsychoticdisorderduetomedicalcondition IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastpsychoticdisorderduetomedicalcondition:integer)=('' || current_row.psychoticdisorders_pastpsychoticdisorderduetomedicalcondition || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentsubstanceinducedpsychoticdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentsubstanceinducedpsychoticdisorder:integer)=('' || current_row.psychoticdisorders_currentsubstanceinducedpsychoticdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastsubstanceinducedpsychoticdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastsubstanceinducedpsychoticdisorder:integer)=('' || current_row.psychoticdisorders_pastsubstanceinducedpsychoticdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentpsychoticdisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentpsychoticdisordernos:integer)=('' || current_row.psychoticdisorders_currentpsychoticdisordernos || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastpsychoticdisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastpsychoticdisordernos:integer)=('' || current_row.psychoticdisorders_pastpsychoticdisordernos || '')'';
          END IF;
          IF (current_row.mooddisorders_currentbipolar1disorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_currentbipolar1disorder:integer)=('' || current_row.mooddisorders_currentbipolar1disorder || '')'';
          END IF;
          IF (current_row.mooddisorders_pastbipolar1disorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_pastbipolar1disorder:integer)=('' || current_row.mooddisorders_pastbipolar1disorder || '')'';
          END IF;
          IF (current_row.mooddisorders_currentbipolar2disorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_currentbipolar2disorder:integer)=('' || current_row.mooddisorders_currentbipolar2disorder || '')'';
          END IF;
          IF (current_row.mooddisorders_pastbipolar2disorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_pastbipolar2disorder:integer)=('' || current_row.mooddisorders_pastbipolar2disorder || '')'';
          END IF;
          IF (current_row.mooddisorders_currentotherbipolardisorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_currentotherbipolardisorder:integer)=('' || current_row.mooddisorders_currentotherbipolardisorder || '')'';
          END IF;
          IF (current_row.mooddisorders_pastotherbipolardisorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_pastotherbipolardisorder:integer)=('' || current_row.mooddisorders_pastotherbipolardisorder || '')'';
          END IF;
          IF (current_row.mooddisorders_currentmajordepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_currentmajordepressivedisorder:integer)=('' || current_row.mooddisorders_currentmajordepressivedisorder || '')'';
          END IF;
          IF (current_row.mooddisorders_pastmajordepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_pastmajordepressivedisorder:integer)=('' || current_row.mooddisorders_pastmajordepressivedisorder || '')'';
          END IF;
          IF (current_row.mooddisorders_currentdepressivedisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_currentdepressivedisordernos:integer)=('' || current_row.mooddisorders_currentdepressivedisordernos || '')'';
          END IF;
          IF (current_row.mooddisorders_pastdepressivedisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_pastdepressivedisordernos:integer)=('' || current_row.mooddisorders_pastdepressivedisordernos || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentalcoholdependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentalcoholdependence:integer)=('' || current_row.substanceusedisorders_currentalcoholdependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastalcoholdependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastalcoholdependence:integer)=('' || current_row.substanceusedisorders_pastalcoholdependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentalcoholabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentalcoholabuse:integer)=('' || current_row.substanceusedisorders_currentalcoholabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastalcoholabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastalcoholabuse:integer)=('' || current_row.substanceusedisorders_pastalcoholabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentamphetaminedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentamphetaminedependence:integer)=('' || current_row.substanceusedisorders_currentamphetaminedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastamphetaminedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastamphetaminedependence:integer)=('' || current_row.substanceusedisorders_pastamphetaminedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentamphetamineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentamphetamineabuse:integer)=('' || current_row.substanceusedisorders_currentamphetamineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastamphetamineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastamphetamineabuse:integer)=('' || current_row.substanceusedisorders_pastamphetamineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentcannabisdependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentcannabisdependence:integer)=('' || current_row.substanceusedisorders_currentcannabisdependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastcannabisdependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastcannabisdependence:integer)=('' || current_row.substanceusedisorders_pastcannabisdependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentcannabisabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentcannabisabuse:integer)=('' || current_row.substanceusedisorders_currentcannabisabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastcannabisabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastcannabisabuse:integer)=('' || current_row.substanceusedisorders_pastcannabisabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentcocainedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentcocainedependence:integer)=('' || current_row.substanceusedisorders_currentcocainedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastcocainedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastcocainedependence:integer)=('' || current_row.substanceusedisorders_pastcocainedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentcocaineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentcocaineabuse:integer)=('' || current_row.substanceusedisorders_currentcocaineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastcocaineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastcocaineabuse:integer)=('' || current_row.substanceusedisorders_pastcocaineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currenthallucinogendependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currenthallucinogendependence:integer)=('' || current_row.substanceusedisorders_currenthallucinogendependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pasthallucinogendependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pasthallucinogendependence:integer)=('' || current_row.substanceusedisorders_pasthallucinogendependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currenthallucinogenabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currenthallucinogenabuse:integer)=('' || current_row.substanceusedisorders_currenthallucinogenabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pasthallucinogenabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pasthallucinogenabuse:integer)=('' || current_row.substanceusedisorders_pasthallucinogenabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentopioiddependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentopioiddependence:integer)=('' || current_row.substanceusedisorders_currentopioiddependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastopioiddependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastopioiddependence:integer)=('' || current_row.substanceusedisorders_pastopioiddependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentopioidabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentopioidabuse:integer)=('' || current_row.substanceusedisorders_currentopioidabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastopioidabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastopioidabuse:integer)=('' || current_row.substanceusedisorders_pastopioidabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentphencyclidinedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentphencyclidinedependence:integer)=('' || current_row.substanceusedisorders_currentphencyclidinedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastphencyclidinedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastphencyclidinedependence:integer)=('' || current_row.substanceusedisorders_pastphencyclidinedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentphencyclidineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentphencyclidineabuse:integer)=('' || current_row.substanceusedisorders_currentphencyclidineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastphencyclidineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastphencyclidineabuse:integer)=('' || current_row.substanceusedisorders_pastphencyclidineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentsedativehypnoticanxiolyticdependen IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentsedativehypnoticanxiolyticdependen:integer)=('' || current_row.substanceusedisorders_currentsedativehypnoticanxiolyticdependen || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastsedativehypnoticanxiolyticdependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastsedativehypnoticanxiolyticdependence:integer)=('' || current_row.substanceusedisorders_pastsedativehypnoticanxiolyticdependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentsedativehypnoticanxiolyticabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentsedativehypnoticanxiolyticabuse:integer)=('' || current_row.substanceusedisorders_currentsedativehypnoticanxiolyticabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastsedativehypnoticanxiolyticabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastsedativehypnoticanxiolyticabuse:integer)=('' || current_row.substanceusedisorders_pastsedativehypnoticanxiolyticabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentpolysubstancedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentpolysubstancedependence:integer)=('' || current_row.substanceusedisorders_currentpolysubstancedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastpolysubstancedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastpolysubstancedependence:integer)=('' || current_row.substanceusedisorders_pastpolysubstancedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentotherorunknowndependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentotherorunknowndependence:integer)=('' || current_row.substanceusedisorders_currentotherorunknowndependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastotherorunknowndependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastotherorunknowndependence:integer)=('' || current_row.substanceusedisorders_pastotherorunknowndependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentotherorunknownabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentotherorunknownabuse:integer)=('' || current_row.substanceusedisorders_currentotherorunknownabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastotherorunknownabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastotherorunknownabuse:integer)=('' || current_row.substanceusedisorders_pastotherorunknownabuse || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentpanicwithagoraphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentpanicwithagoraphobia:integer)=('' || current_row.anxietydisorders_currentpanicwithagoraphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastpanicwithagoraphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastpanicwithagoraphobia:integer)=('' || current_row.anxietydisorders_pastpanicwithagoraphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentpanicwithoutagoraphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentpanicwithoutagoraphobia:integer)=('' || current_row.anxietydisorders_currentpanicwithoutagoraphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastpanicwithoutagoraphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastpanicwithoutagoraphobia:integer)=('' || current_row.anxietydisorders_pastpanicwithoutagoraphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentagoraphobiawithoutpanichx IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentagoraphobiawithoutpanichx:integer)=('' || current_row.anxietydisorders_currentagoraphobiawithoutpanichx || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastagoraphobiawithoutpanichx IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastagoraphobiawithoutpanichx:integer)=('' || current_row.anxietydisorders_pastagoraphobiawithoutpanichx || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentsocialphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentsocialphobia:integer)=('' || current_row.anxietydisorders_currentsocialphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastsocialphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastsocialphobia:integer)=('' || current_row.anxietydisorders_pastsocialphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentspecificphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentspecificphobia:integer)=('' || current_row.anxietydisorders_currentspecificphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastspecificphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastspecificphobia:integer)=('' || current_row.anxietydisorders_pastspecificphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentocd IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentocd:integer)=('' || current_row.anxietydisorders_currentocd || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastocd IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastocd:integer)=('' || current_row.anxietydisorders_pastocd || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentptsd IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentptsd:integer)=('' || current_row.anxietydisorders_currentptsd || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastptsd IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastptsd:integer)=('' || current_row.anxietydisorders_pastptsd || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentgeneralizedanxietydisorder IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentgeneralizedanxietydisorder:integer)=('' || current_row.anxietydisorders_currentgeneralizedanxietydisorder || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentanxietyduetomedicalcondition IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentanxietyduetomedicalcondition:integer)=('' || current_row.anxietydisorders_currentanxietyduetomedicalcondition || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastanxietyduetomedicalcondition IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastanxietyduetomedicalcondition:integer)=('' || current_row.anxietydisorders_pastanxietyduetomedicalcondition || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentsubstanceinducedanxietydisorder IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentsubstanceinducedanxietydisorder:integer)=('' || current_row.anxietydisorders_currentsubstanceinducedanxietydisorder || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastsubstanceinducedanxietydisorder IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastsubstanceinducedanxietydisorder:integer)=('' || current_row.anxietydisorders_pastsubstanceinducedanxietydisorder || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentanxietydisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentanxietydisordernos:integer)=('' || current_row.anxietydisorders_currentanxietydisordernos || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastanxietydisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastanxietydisordernos:integer)=('' || current_row.anxietydisorders_pastanxietydisordernos || '')'';
          END IF;
          IF (current_row.somatoformdisorders_somatizationdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(somatoformdisorders_somatizationdisorder:integer)=('' || current_row.somatoformdisorders_somatizationdisorder || '')'';
          END IF;
          IF (current_row.somatoformdisorders_undifferentiatedsomatformdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(somatoformdisorders_undifferentiatedsomatformdisorder:integer)=('' || current_row.somatoformdisorders_undifferentiatedsomatformdisorder || '')'';
          END IF;
          IF (current_row.somatoformdisorders_paindisorder IS NOT NULL) THEN 
              fullText := fullText || ''(somatoformdisorders_paindisorder:integer)=('' || current_row.somatoformdisorders_paindisorder || '')'';
          END IF;
          IF (current_row.somatoformdisorders_hypochondriasis IS NOT NULL) THEN 
              fullText := fullText || ''(somatoformdisorders_hypochondriasis:integer)=('' || current_row.somatoformdisorders_hypochondriasis || '')'';
          END IF;
          IF (current_row.somatoformdisorders_bodydysmorphicdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(somatoformdisorders_bodydysmorphicdisorder:integer)=('' || current_row.somatoformdisorders_bodydysmorphicdisorder || '')'';
          END IF;
          IF (current_row.eatingdisorders_currentanorexianervosa IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_currentanorexianervosa:integer)=('' || current_row.eatingdisorders_currentanorexianervosa || '')'';
          END IF;
          IF (current_row.eatingdisorders_pastanorexianervosa IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_pastanorexianervosa:integer)=('' || current_row.eatingdisorders_pastanorexianervosa || '')'';
          END IF;
          IF (current_row.eatingdisorders_currentbulimianervosa IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_currentbulimianervosa:integer)=('' || current_row.eatingdisorders_currentbulimianervosa || '')'';
          END IF;
          IF (current_row.eatingdisorders_pastbulimianervosa IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_pastbulimianervosa:integer)=('' || current_row.eatingdisorders_pastbulimianervosa || '')'';
          END IF;
          IF (current_row.eatingdisorders_currentbingeeatingdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_currentbingeeatingdisorder:integer)=('' || current_row.eatingdisorders_currentbingeeatingdisorder || '')'';
          END IF;
          IF (current_row.eatingdisorders_pastbingeeatingdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_pastbingeeatingdisorder:integer)=('' || current_row.eatingdisorders_pastbingeeatingdisorder || '')'';
          END IF;
          IF (current_row.adjustmentdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(adjustmentdisorder:integer)=('' || current_row.adjustmentdisorder || '')'';
          END IF;
          IF (current_row.optional_currentacutestressdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_currentacutestressdisorder:integer)=('' || current_row.optional_currentacutestressdisorder || '')'';
          END IF;
          IF (current_row.optional_pastacutestressdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_pastacutestressdisorder:integer)=('' || current_row.optional_pastacutestressdisorder || '')'';
          END IF;
          IF (current_row.optional_currentminordepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_currentminordepressivedisorder:integer)=('' || current_row.optional_currentminordepressivedisorder || '')'';
          END IF;
          IF (current_row.optional_pastminordepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_pastminordepressivedisorder:integer)=('' || current_row.optional_pastminordepressivedisorder || '')'';
          END IF;
          IF (current_row.optional_currentmixedanxietydepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_currentmixedanxietydepressivedisorder:integer)=('' || current_row.optional_currentmixedanxietydepressivedisorder || '')'';
          END IF;
          IF (current_row.optional_pastmixedanxietydepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_pastmixedanxietydepressivedisorder:integer)=('' || current_row.optional_pastmixedanxietydepressivedisorder || '')'';
          END IF;
          IF (current_row.optional_pastsympomaticdetails IS NOT NULL) THEN 
              fullText := fullText || ''(optional_pastsympomaticdetails:string)=('' || REPLACE(REPLACE(current_row.optional_pastsympomaticdetails,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.scidResearchData_info IS NOT NULL)) THEN
            fullText := fullText || ''(scidresearchdata_info:integer)=('' || current_row.scidresearchdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_a_scidResearchData_meta_data(current_row.scidResearchData_info, child_count,$3,false,false);
              fullText := fullText || ''(scidresearchdata_info_scidresearchdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_scidResearchData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:scidResearchData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_a_scidResearchData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_ybocsData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:ybocsData_history)('';
      FOR current_row IN SELECT * FROM xnat_a_ybocsData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_subjectAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.currentorworstever IS NOT NULL) THEN 
              fullText := fullText || ''(currentorworstever:string)=('' || REPLACE(REPLACE(current_row.currentorworstever,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.timeoccupiedwiththoughts IS NOT NULL) THEN 
              fullText := fullText || ''(timeoccupiedwiththoughts:integer)=('' || current_row.timeoccupiedwiththoughts || '')'';
          END IF;
          IF (current_row.thoughtsinterferefunctioning IS NOT NULL) THEN 
              fullText := fullText || ''(thoughtsinterferefunctioning:integer)=('' || current_row.thoughtsinterferefunctioning || '')'';
          END IF;
          IF (current_row.distresscaused IS NOT NULL) THEN 
              fullText := fullText || ''(distresscaused:integer)=('' || current_row.distresscaused || '')'';
          END IF;
          IF (current_row.efforttoresistthoughts IS NOT NULL) THEN 
              fullText := fullText || ''(efforttoresistthoughts:integer)=('' || current_row.efforttoresistthoughts || '')'';
          END IF;
          IF (current_row.controloverthoughts IS NOT NULL) THEN 
              fullText := fullText || ''(controloverthoughts:integer)=('' || current_row.controloverthoughts || '')'';
          END IF;
          IF (current_row.timeperforming IS NOT NULL) THEN 
              fullText := fullText || ''(timeperforming:integer)=('' || current_row.timeperforming || '')'';
          END IF;
          IF (current_row.behaviorsinterferefunctioning IS NOT NULL) THEN 
              fullText := fullText || ''(behaviorsinterferefunctioning:integer)=('' || current_row.behaviorsinterferefunctioning || '')'';
          END IF;
          IF (current_row.feelingifprevented IS NOT NULL) THEN 
              fullText := fullText || ''(feelingifprevented:integer)=('' || current_row.feelingifprevented || '')'';
          END IF;
          IF (current_row.efforttoresistbehaviors IS NOT NULL) THEN 
              fullText := fullText || ''(efforttoresistbehaviors:integer)=('' || current_row.efforttoresistbehaviors || '')'';
          END IF;
          IF (current_row.behaviordrivestrength IS NOT NULL) THEN 
              fullText := fullText || ''(behaviordrivestrength:integer)=('' || current_row.behaviordrivestrength || '')'';
          END IF;
          IF (current_row.untiljustright IS NOT NULL) THEN 
              fullText := fullText || ''(untiljustright:integer)=('' || current_row.untiljustright || '')'';
          END IF;
          IF (current_row.untiljustrightawareness IS NOT NULL) THEN 
              fullText := fullText || ''(untiljustrightawareness:string)=('' || REPLACE(REPLACE(current_row.untiljustrightawareness,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.untiljustrightperceptions IS NOT NULL) THEN 
              fullText := fullText || ''(untiljustrightperceptions:string)=('' || REPLACE(REPLACE(current_row.untiljustrightperceptions,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.whenstartuntiljustright IS NOT NULL) THEN 
              fullText := fullText || ''(whenstartuntiljustright:string)=('' || REPLACE(REPLACE(current_row.whenstartuntiljustright,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.frequencyuntiljustright IS NOT NULL) THEN 
              fullText := fullText || ''(frequencyuntiljustright:string)=('' || REPLACE(REPLACE(current_row.frequencyuntiljustright,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.firstuntiljustrightage IS NOT NULL) THEN 
              fullText := fullText || ''(firstuntiljustrightage:float)=('' || current_row.firstuntiljustrightage || '')'';
          END IF;
        IF ((current_row.ybocsData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ybocsdata_info:integer)=('' || current_row.ybocsdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_a_ybocsData_meta_data(current_row.ybocsData_info, child_count,$3,false,false);
              fullText := fullText || ''(ybocsdata_info_ybocsdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_updrs3Data_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:updrs3Data_history)('';
      FOR current_row IN SELECT * FROM xnat_a_updrs3Data_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_subjectAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.inscanner IS NOT NULL) THEN 
              fullText := fullText || ''(inscanner:integer)=('' || current_row.inscanner || '')'';
          END IF;
          IF (current_row.clicker_right IS NOT NULL) THEN 
              fullText := fullText || ''(clicker_right:integer)=('' || current_row.clicker_right || '')'';
          END IF;
          IF (current_row.clicker_left IS NOT NULL) THEN 
              fullText := fullText || ''(clicker_left:integer)=('' || current_row.clicker_left || '')'';
          END IF;
          IF (current_row.clicker_interval IS NOT NULL) THEN 
              fullText := fullText || ''(clicker_interval:integer)=('' || current_row.clicker_interval || '')'';
          END IF;
          IF (current_row.tremorrest_face IS NOT NULL) THEN 
              fullText := fullText || ''(tremorrest_face:string)=('' || REPLACE(REPLACE(current_row.tremorrest_face,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tremorrest_rue IS NOT NULL) THEN 
              fullText := fullText || ''(tremorrest_rue:string)=('' || REPLACE(REPLACE(current_row.tremorrest_rue,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tremorrest_lue IS NOT NULL) THEN 
              fullText := fullText || ''(tremorrest_lue:string)=('' || REPLACE(REPLACE(current_row.tremorrest_lue,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tremorrest_rle IS NOT NULL) THEN 
              fullText := fullText || ''(tremorrest_rle:string)=('' || REPLACE(REPLACE(current_row.tremorrest_rle,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tremorrest_lle IS NOT NULL) THEN 
              fullText := fullText || ''(tremorrest_lle:string)=('' || REPLACE(REPLACE(current_row.tremorrest_lle,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rigidity_neck IS NOT NULL) THEN 
              fullText := fullText || ''(rigidity_neck:string)=('' || REPLACE(REPLACE(current_row.rigidity_neck,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rigidity_rue IS NOT NULL) THEN 
              fullText := fullText || ''(rigidity_rue:string)=('' || REPLACE(REPLACE(current_row.rigidity_rue,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rigidity_lue IS NOT NULL) THEN 
              fullText := fullText || ''(rigidity_lue:string)=('' || REPLACE(REPLACE(current_row.rigidity_lue,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rigidity_rle IS NOT NULL) THEN 
              fullText := fullText || ''(rigidity_rle:string)=('' || REPLACE(REPLACE(current_row.rigidity_rle,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rigidity_lle IS NOT NULL) THEN 
              fullText := fullText || ''(rigidity_lle:string)=('' || REPLACE(REPLACE(current_row.rigidity_lle,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.handmovementsgrip_right IS NOT NULL) THEN 
              fullText := fullText || ''(handmovementsgrip_right:integer)=('' || current_row.handmovementsgrip_right || '')'';
          END IF;
          IF (current_row.handmovementsgrip_left IS NOT NULL) THEN 
              fullText := fullText || ''(handmovementsgrip_left:integer)=('' || current_row.handmovementsgrip_left || '')'';
          END IF;
          IF (current_row.facialexpression IS NOT NULL) THEN 
              fullText := fullText || ''(facialexpression:integer)=('' || current_row.facialexpression || '')'';
          END IF;
          IF (current_row.gait IS NOT NULL) THEN 
              fullText := fullText || ''(gait:integer)=('' || current_row.gait || '')'';
          END IF;
          IF (current_row.speech IS NOT NULL) THEN 
              fullText := fullText || ''(speech:integer)=('' || current_row.speech || '')'';
          END IF;
          IF (current_row.writing IS NOT NULL) THEN 
              fullText := fullText || ''(writing:integer)=('' || current_row.writing || '')'';
          END IF;
          IF (current_row.arisefromchair IS NOT NULL) THEN 
              fullText := fullText || ''(arisefromchair:integer)=('' || current_row.arisefromchair || '')'';
          END IF;
          IF (current_row.actionposturaltremor_right IS NOT NULL) THEN 
              fullText := fullText || ''(actionposturaltremor_right:integer)=('' || current_row.actionposturaltremor_right || '')'';
          END IF;
          IF (current_row.actionposturaltremor_left IS NOT NULL) THEN 
              fullText := fullText || ''(actionposturaltremor_left:integer)=('' || current_row.actionposturaltremor_left || '')'';
          END IF;
          IF (current_row.handsram_right IS NOT NULL) THEN 
              fullText := fullText || ''(handsram_right:integer)=('' || current_row.handsram_right || '')'';
          END IF;
          IF (current_row.handsram_left IS NOT NULL) THEN 
              fullText := fullText || ''(handsram_left:integer)=('' || current_row.handsram_left || '')'';
          END IF;
          IF (current_row.fingertaps_right IS NOT NULL) THEN 
              fullText := fullText || ''(fingertaps_right:integer)=('' || current_row.fingertaps_right || '')'';
          END IF;
          IF (current_row.fingertaps_left IS NOT NULL) THEN 
              fullText := fullText || ''(fingertaps_left:integer)=('' || current_row.fingertaps_left || '')'';
          END IF;
          IF (current_row.posture IS NOT NULL) THEN 
              fullText := fullText || ''(posture:integer)=('' || current_row.posture || '')'';
          END IF;
          IF (current_row.posturalstability IS NOT NULL) THEN 
              fullText := fullText || ''(posturalstability:integer)=('' || current_row.posturalstability || '')'';
          END IF;
          IF (current_row.foottaps_right IS NOT NULL) THEN 
              fullText := fullText || ''(foottaps_right:integer)=('' || current_row.foottaps_right || '')'';
          END IF;
          IF (current_row.foottaps_left IS NOT NULL) THEN 
              fullText := fullText || ''(foottaps_left:integer)=('' || current_row.foottaps_left || '')'';
          END IF;
          IF (current_row.bodybradykinesiahypokinesia IS NOT NULL) THEN 
              fullText := fullText || ''(bodybradykinesiahypokinesia:integer)=('' || current_row.bodybradykinesiahypokinesia || '')'';
          END IF;
          IF (current_row.problem IS NOT NULL) THEN 
              fullText := fullText || ''(problem:integer)=('' || current_row.problem || '')'';
          END IF;
        IF ((current_row.updrs3Data_info IS NOT NULL)) THEN
            fullText := fullText || ''(updrs3data_info:integer)=('' || current_row.updrs3data_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_a_updrs3Data_meta_data(current_row.updrs3Data_info, child_count,$3,false,false);
              fullText := fullText || ''(updrs3data_info_updrs3data_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_updrs3Data_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:updrs3Data_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_a_updrs3Data_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_ygtssData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:ygtssData_history)('';
      FOR current_row IN SELECT * FROM xnat_a_ygtssData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_subjectAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.filledoutby IS NOT NULL) THEN 
              fullText := fullText || ''(filledoutby:string)=('' || REPLACE(REPLACE(current_row.filledoutby,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.period IS NOT NULL) THEN 
              fullText := fullText || ''(period:string)=('' || REPLACE(REPLACE(current_row.period,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.worsteverage IS NOT NULL) THEN 
              fullText := fullText || ''(worsteverage:float)=('' || current_row.worsteverage || '')'';
          END IF;
          IF (current_row.motor_number IS NOT NULL) THEN 
              fullText := fullText || ''(motor_number:integer)=('' || current_row.motor_number || '')'';
          END IF;
          IF (current_row.motor_frequency IS NOT NULL) THEN 
              fullText := fullText || ''(motor_frequency:integer)=('' || current_row.motor_frequency || '')'';
          END IF;
          IF (current_row.motor_intensity IS NOT NULL) THEN 
              fullText := fullText || ''(motor_intensity:integer)=('' || current_row.motor_intensity || '')'';
          END IF;
          IF (current_row.motor_complexity IS NOT NULL) THEN 
              fullText := fullText || ''(motor_complexity:integer)=('' || current_row.motor_complexity || '')'';
          END IF;
          IF (current_row.motor_interference IS NOT NULL) THEN 
              fullText := fullText || ''(motor_interference:integer)=('' || current_row.motor_interference || '')'';
          END IF;
          IF (current_row.motor_inventory IS NOT NULL) THEN 
              fullText := fullText || ''(motor_inventory:string)=('' || REPLACE(REPLACE(current_row.motor_inventory,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.phonic_number IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_number:integer)=('' || current_row.phonic_number || '')'';
          END IF;
          IF (current_row.phonic_frequency IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_frequency:integer)=('' || current_row.phonic_frequency || '')'';
          END IF;
          IF (current_row.phonic_intensity IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_intensity:integer)=('' || current_row.phonic_intensity || '')'';
          END IF;
          IF (current_row.phonic_complexity IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_complexity:integer)=('' || current_row.phonic_complexity || '')'';
          END IF;
          IF (current_row.phonic_interference IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_interference:integer)=('' || current_row.phonic_interference || '')'';
          END IF;
          IF (current_row.phonic_inventory IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_inventory:string)=('' || REPLACE(REPLACE(current_row.phonic_inventory,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.impairment IS NOT NULL) THEN 
              fullText := fullText || ''(impairment:integer)=('' || current_row.impairment || '')'';
          END IF;
        IF ((current_row.ygtssData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ygtssdata_info:integer)=('' || current_row.ygtssdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_a_ygtssData_meta_data(current_row.ygtssData_info, child_count,$3,false,false);
              fullText := fullText || ''(ygtssdata_info_ygtssdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_ybocsData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:ybocsData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_a_ybocsData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectVariablesData_variable_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectVariablesData_variable_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_subjectVariablesData_variable_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectVariablesData_variable( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectVariablesData_variable)('';
      FOR current_row IN SELECT * FROM xnat_subjectVariablesData_variable WHERE  xnat_subjectvariablesdata_variable_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.variable IS NOT NULL) THEN 
              fullText := fullText || ''(variable:string)=('' || REPLACE(REPLACE(current_row.variable,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.subjectVariablesData_variable_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectvariablesdata_variable_info:integer)=('' || current_row.subjectvariablesdata_variable_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectVariablesData_variable_meta_data(current_row.subjectVariablesData_variable_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectvariablesdata_variable_info_subjectvariablesdata_variable_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.variables_variable_xnat_subject_id IS NOT NULL)) THEN
            fullText := fullText || ''(variables_variable_xnat_subject_id:string)=('' || current_row.variables_variable_xnat_subject_id || '')'';
        END IF;
          IF (current_row.xnat_subjectvariablesdata_variable_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_subjectvariablesdata_variable_id:integer)=('' || current_row.xnat_subjectvariablesdata_variable_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_subjectVariablesData_variable( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectVariablesData_variable.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_subjectVariablesData_variable LEFT JOIN xnat_subjectVariablesData_variable_meta_data meta ON xnat_subjectVariablesData_variable.subjectVariablesData_variable_info=meta.meta_data_id WHERE  xnat_subjectvariablesdata_variable_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_subjectVariablesData_variable_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_subjectVariablesData_variable( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectVariablesData_variable.*, meta.meta_data_id FROM xnat_subjectVariablesData_variable LEFT JOIN xnat_subjectVariablesData_variable_meta_data meta ON xnat_subjectVariablesData_variable.subjectVariablesData_variable_info=meta.meta_data_id WHERE  xnat_subjectvariablesdata_variable_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:subjectVariablesData/variables/variable
        IF ((current_row.variables_variable_xnat_subject_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_subjectVariablesData(current_row.variables_variable_xnat_subject_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_subjectVariablesData_variable()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_subjectVariablesData_variable( OLD.xnat_subjectvariablesdata_variable_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_subjectVariablesData_variable','CREATE TRIGGER a_u_xnat_subjectVariablesData_variable  AFTER UPDATE OR DELETE ON xnat_subjectVariablesData_variable FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_subjectVariablesData_variable()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_experimentData_share_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:experimentData_share_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_experimentData_share_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_experimentData_share( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:experimentData_share)('';
      FOR current_row IN SELECT * FROM xnat_experimentData_share WHERE  xnat_experimentdata_share_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.share IS NOT NULL) THEN 
              fullText := fullText || ''(share:string)=('' || REPLACE(REPLACE(current_row.share,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visit IS NOT NULL) THEN 
              fullText := fullText || ''(visit:string)=('' || REPLACE(REPLACE(current_row.visit,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.protocol IS NOT NULL) THEN 
              fullText := fullText || ''(protocol:string)=('' || REPLACE(REPLACE(current_row.protocol,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.experimentData_share_info IS NOT NULL)) THEN
            fullText := fullText || ''(experimentdata_share_info:integer)=('' || current_row.experimentdata_share_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_experimentData_share_meta_data(current_row.experimentData_share_info, child_count,$3,false,false);
              fullText := fullText || ''(experimentdata_share_info_experimentdata_share_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.sharing_share_xnat_experimentDa_id IS NOT NULL)) THEN
            fullText := fullText || ''(sharing_share_xnat_experimentda_id:string)=('' || current_row.sharing_share_xnat_experimentda_id || '')'';
        END IF;
          IF (current_row.xnat_experimentdata_share_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_experimentdata_share_id:integer)=('' || current_row.xnat_experimentdata_share_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_experimentData_share( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_experimentData_share.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_experimentData_share LEFT JOIN xnat_experimentData_share_meta_data meta ON xnat_experimentData_share.experimentData_share_info=meta.meta_data_id WHERE  xnat_experimentdata_share_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_experimentData_share_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_experimentData_share( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_experimentData_share.*, meta.meta_data_id FROM xnat_experimentData_share LEFT JOIN xnat_experimentData_share_meta_data meta ON xnat_experimentData_share.experimentData_share_info=meta.meta_data_id WHERE  xnat_experimentdata_share_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:experimentData/sharing/share
        IF ((current_row.sharing_share_xnat_experimentDa_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_experimentData(current_row.sharing_share_xnat_experimentDa_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_experimentData_share()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_experimentData_share( OLD.xnat_experimentdata_share_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_experimentData_share','CREATE TRIGGER a_u_xnat_experimentData_share  AFTER UPDATE OR DELETE ON xnat_experimentData_share FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_experimentData_share()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractResource_tag_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractResource_tag_history)('';
      FOR current_row IN SELECT * FROM xnat_abstractResource_tag_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.tag IS NOT NULL) THEN 
              fullText := fullText || ''(tag:string)=('' || REPLACE(REPLACE(current_row.tag,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.abstractResource_tag_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractresource_tag_info:integer)=('' || current_row.abstractresource_tag_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_tag_meta_data(current_row.abstractResource_tag_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractresource_tag_info_abstractresource_tag_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.tags_tag_xnat_abstractResource_xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(tags_tag_xnat_abstractresource_xnat_abstractresource_id:integer)=('' || current_row.tags_tag_xnat_abstractresource_xnat_abstractresource_id || '')'';
        END IF;
          IF (current_row.xnat_abstractresource_tag_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractresource_tag_id:integer)=('' || current_row.xnat_abstractresource_tag_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_statisticsData_addField_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:statisticsData_addField_history)('';
      FOR current_row IN SELECT * FROM xnat_statisticsData_addField_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.addfield IS NOT NULL) THEN 
              fullText := fullText || ''(addfield:string)=('' || REPLACE(REPLACE(current_row.addfield,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.statisticsData_addField_info IS NOT NULL)) THEN
            fullText := fullText || ''(statisticsdata_addfield_info:integer)=('' || current_row.statisticsdata_addfield_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_statisticsData_addField_meta_data(current_row.statisticsData_addField_info, child_count,$3,false,false);
              fullText := fullText || ''(statisticsdata_addfield_info_statisticsdata_addfield_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xnat_statisticsData_xnat_abstractstatistics_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_statisticsdata_xnat_abstractstatistics_id:integer)=('' || current_row.xnat_statisticsdata_xnat_abstractstatistics_id || '')'';
        END IF;
          IF (current_row.xnat_statisticsdata_addfield_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_statisticsdata_addfield_id:integer)=('' || current_row.xnat_statisticsdata_addfield_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_epsSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:epsSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_epsSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xaSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xaSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_xaSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.xaSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xasessiondata_info:integer)=('' || current_row.xasessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xaSessionData_meta_data(current_row.xaSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(xasessiondata_info_xasessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_regionResource_label_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:regionResource_label_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_regionResource_label_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_regionResource_label( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:regionResource_label)('';
      FOR current_row IN SELECT * FROM xnat_regionResource_label WHERE  xnat_regionresource_label_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:integer)=('' || current_row.id || '')'';
          END IF;
          IF (current_row.hemisphere IS NOT NULL) THEN 
              fullText := fullText || ''(hemisphere:string)=('' || REPLACE(REPLACE(current_row.hemisphere,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.regionResource_label_info IS NOT NULL)) THEN
            fullText := fullText || ''(regionresource_label_info:integer)=('' || current_row.regionresource_label_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_regionResource_label_meta_data(current_row.regionResource_label_info, child_count,$3,false,false);
              fullText := fullText || ''(regionresource_label_info_regionresource_label_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.subregionlabels_label_xnat_regi_xnat_regionresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(subregionlabels_label_xnat_regi_xnat_regionresource_id:integer)=('' || current_row.subregionlabels_label_xnat_regi_xnat_regionresource_id || '')'';
        END IF;
          IF (current_row.xnat_regionresource_label_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_regionresource_label_id:integer)=('' || current_row.xnat_regionresource_label_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_regionResource_label( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_regionResource_label.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_regionResource_label LEFT JOIN xnat_regionResource_label_meta_data meta ON xnat_regionResource_label.regionResource_label_info=meta.meta_data_id WHERE  xnat_regionresource_label_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_regionResource_label_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_regionResource_label( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_regionResource_label.*, meta.meta_data_id FROM xnat_regionResource_label LEFT JOIN xnat_regionResource_label_meta_data meta ON xnat_regionResource_label.regionResource_label_info=meta.meta_data_id WHERE  xnat_regionresource_label_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:regionResource/subregionlabels/label
        IF ((current_row.subregionlabels_label_xnat_regi_xnat_regionresource_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_regionResource(current_row.subregionlabels_label_xnat_regi_xnat_regionresource_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_regionResource_label()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_regionResource_label( OLD.xnat_regionresource_label_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_regionResource_label','CREATE TRIGGER a_u_xnat_regionResource_label  AFTER UPDATE OR DELETE ON xnat_regionResource_label FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_regionResource_label()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectData_history)('';
      FOR current_row IN SELECT * FROM xnat_subjectData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_projectParticipant_history WHERE subject_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_projectparticipant_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectParticipant_history( parent_row.xnat_projectparticipant_id, child_count,$3,false,false);
              fullText := fullText || ''(subject_id_projectparticipant'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_subjectData_resource_history WHERE  xnat_subjectData_id=current_row.id AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_history( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(resources_resource_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF ((current_row.investigator_xnat_investigatordata_id IS NOT NULL)) THEN
            fullText := fullText || ''(investigator_xnat_investigatordata_id:integer)=('' || current_row.investigator_xnat_investigatordata_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_investigatorData_history WHERE  xnat_investigatordata_id=current_row.investigator_xnat_investigatordata_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_investigatorData_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(investigator_investigatordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF ((current_row.demographics_xnat_abstractdemographicdata_id IS NOT NULL)) THEN
            fullText := fullText || ''(demographics_xnat_abstractdemographicdata_id:integer)=('' || current_row.demographics_xnat_abstractdemographicdata_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_abstractDemographicData_history WHERE  xnat_abstractdemographicdata_id=current_row.demographics_xnat_abstractdemographicdata_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractDemographicData_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(demographics_abstractdemographicdata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF ((current_row.metadata_xnat_abstractsubjectmetadata_id IS NOT NULL)) THEN
            fullText := fullText || ''(metadata_xnat_abstractsubjectmetadata_id:integer)=('' || current_row.metadata_xnat_abstractsubjectmetadata_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_abstractSubjectMetadata_history WHERE  xnat_abstractsubjectmetadata_id=current_row.metadata_xnat_abstractsubjectmetadata_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractSubjectMetadata_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(metadata_abstractsubjectmetadata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectData_addID_history WHERE xnat_subjectData_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_subjectdata_addid_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectData_addID_history( parent_row.xnat_subjectdata_addid_id, child_count,$3,false,false);
              fullText := fullText || ''(addid_subjectdata_addid'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectData_field_history WHERE fields_field_xnat_subjectData_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_subjectdata_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectData_field_history( parent_row.xnat_subjectdata_field_id, child_count,$3,false,false);
              fullText := fullText || ''(fields_field_subjectdata_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE subject_ID=current_row.id AND xft_version=current_row.xft_version ORDER BY id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectAssessorData_history( parent_row.id, child_count,$3,false,false);
              fullText := fullText || ''(subject_id_subjectassessordata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row._group IS NOT NULL) THEN 
              fullText := fullText || ''(_group:string)=('' || REPLACE(REPLACE(current_row._group,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.src IS NOT NULL) THEN 
              fullText := fullText || ''(src:string)=('' || REPLACE(REPLACE(current_row.src,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.initials IS NOT NULL) THEN 
              fullText := fullText || ''(initials:string)=('' || REPLACE(REPLACE(current_row.initials,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.subjectData_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectdata_info:integer)=('' || current_row.subjectdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectData_meta_data(current_row.subjectData_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectdata_info_subjectdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcAssessmentData_scan_slice_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcAssessmentData_scan_slice_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_qcAssessmentData_scan_slice_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_optSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:optSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_optSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_reconstructedImageData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:reconstructedImageData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_reconstructedImageData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_experimentData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:experimentData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_experimentData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_esvSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esvSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_esvSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_condition_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_condition_history)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_condition_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.studyProtocol_condition_info IS NOT NULL)) THEN
            fullText := fullText || ''(studyprotocol_condition_info:integer)=('' || current_row.studyprotocol_condition_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_condition_meta_data(current_row.studyProtocol_condition_info, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_condition_info_studyprotocol_condition_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.acqconditions_condition_xnat_st_xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(acqconditions_condition_xnat_st_xnat_abstractprotocol_id:integer)=('' || current_row.acqconditions_condition_xnat_st_xnat_abstractprotocol_id || '')'';
        END IF;
          IF (current_row.xnat_studyprotocol_condition_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_studyprotocol_condition_id:integer)=('' || current_row.xnat_studyprotocol_condition_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_datatypeProtocol_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:datatypeProtocol_history)('';
      FOR current_row IN SELECT * FROM xnat_datatypeProtocol_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractprotocol_id:integer)=('' || current_row.xnat_abstractprotocol_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractProtocol_history WHERE xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_abstractProtocol_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(abstractprotocol_abstractprotocol:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_datatypeProtocol_fieldGroups_history WHERE  xnat_datatypeProtocol_xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_history( mapping_row.xnat_fieldDefinitionGroup_xnat_fielddefinitiongroup_id, child_count,$3,false,false);
              fullText := fullText || ''(definitions_definition_fielddefinitiongroup'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF ((current_row.datatypeProtocol_info IS NOT NULL)) THEN
            fullText := fullText || ''(datatypeprotocol_info:integer)=('' || current_row.datatypeprotocol_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_datatypeProtocol_meta_data(current_row.datatypeProtocol_info, child_count,$3,false,false);
              fullText := fullText || ''(datatypeprotocol_info_datatypeprotocol_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractProtocol_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractprotocol_abstractprotocol:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_statisticsData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:statisticsData_history)('';
      FOR current_row IN SELECT * FROM xnat_statisticsData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractstatistics_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractstatistics_id:integer)=('' || current_row.xnat_abstractstatistics_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractStatistics_history WHERE xnat_abstractstatistics_id=current_row.xnat_abstractstatistics_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_abstractStatistics_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(abstractstatistics_abstractstatistics:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.mean IS NOT NULL) THEN 
              fullText := fullText || ''(mean:float)=('' || current_row.mean || '')'';
          END IF;
          IF (current_row.snr IS NOT NULL) THEN 
              fullText := fullText || ''(snr:float)=('' || current_row.snr || '')'';
          END IF;
          IF (current_row.min IS NOT NULL) THEN 
              fullText := fullText || ''(min:float)=('' || current_row.min || '')'';
          END IF;
          IF (current_row.max IS NOT NULL) THEN 
              fullText := fullText || ''(max:float)=('' || current_row.max || '')'';
          END IF;
          IF (current_row.stddev IS NOT NULL) THEN 
              fullText := fullText || ''(stddev:float)=('' || current_row.stddev || '')'';
          END IF;
          IF (current_row.no_of_voxels IS NOT NULL) THEN 
              fullText := fullText || ''(no_of_voxels:integer)=('' || current_row.no_of_voxels || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_statisticsData_additionalStatistics_history WHERE xnat_statisticsData_xnat_abstractstatistics_id=current_row.xnat_abstractstatistics_id AND xft_version=current_row.xft_version ORDER BY xnat_statisticsdata_additionalstatistics_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_statisticsData_additionalStatistics_history( parent_row.xnat_statisticsdata_additionalstatistics_id, child_count,$3,false,false);
              fullText := fullText || ''(additionalstatistics_statisticsdata_additionalstatistics'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_statisticsData_addField_history WHERE xnat_statisticsData_xnat_abstractstatistics_id=current_row.xnat_abstractstatistics_id AND xft_version=current_row.xft_version ORDER BY xnat_statisticsdata_addfield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_statisticsData_addField_history( parent_row.xnat_statisticsdata_addfield_id, child_count,$3,false,false);
              fullText := fullText || ''(addfield_statisticsdata_addfield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.statisticsData_info IS NOT NULL)) THEN
            fullText := fullText || ''(statisticsdata_info:integer)=('' || current_row.statisticsdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_statisticsData_meta_data(current_row.statisticsData_info, child_count,$3,false,false);
              fullText := fullText || ''(statisticsdata_info_statisticsdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractStatistics_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractstatistics_abstractstatistics:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_smScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:smScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_smScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.smScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(smscandata_info:integer)=('' || current_row.smscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_smScanData_meta_data(current_row.smScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(smscandata_info_smscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectMetadata_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectMetadata_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_subjectMetadata_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectData_addID_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectData_addID_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_subjectData_addID_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectData_addID( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectData_addID)('';
      FOR current_row IN SELECT * FROM xnat_subjectData_addID WHERE  xnat_subjectdata_addid_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.addid IS NOT NULL) THEN 
              fullText := fullText || ''(addid:string)=('' || REPLACE(REPLACE(current_row.addid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.subjectData_addID_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectdata_addid_info:integer)=('' || current_row.subjectdata_addid_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectData_addID_meta_data(current_row.subjectData_addID_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectdata_addid_info_subjectdata_addid_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xnat_subjectData_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_subjectdata_id:string)=('' || current_row.xnat_subjectdata_id || '')'';
        END IF;
          IF (current_row.xnat_subjectdata_addid_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_subjectdata_addid_id:integer)=('' || current_row.xnat_subjectdata_addid_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_subjectData_addID( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectData_addID.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_subjectData_addID LEFT JOIN xnat_subjectData_addID_meta_data meta ON xnat_subjectData_addID.subjectData_addID_info=meta.meta_data_id WHERE  xnat_subjectdata_addid_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_subjectData_addID_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_subjectData_addID( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectData_addID.*, meta.meta_data_id FROM xnat_subjectData_addID LEFT JOIN xnat_subjectData_addID_meta_data meta ON xnat_subjectData_addID.subjectData_addID_info=meta.meta_data_id WHERE  xnat_subjectdata_addid_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:subjectData/addID
        IF ((current_row.xnat_subjectData_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_subjectData(current_row.xnat_subjectData_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_subjectData_addID()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_subjectData_addID( OLD.xnat_subjectdata_addid_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_subjectData_addID','CREATE TRIGGER a_u_xnat_subjectData_addID  AFTER UPDATE OR DELETE ON xnat_subjectData_addID FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_subjectData_addID()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_petScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_petScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.parameters_orientation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_orientation:integer)=('' || current_row.parameters_orientation || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField_history WHERE parameters_addparam_xnat_petSca_xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version ORDER BY xnat_addfield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_addField_history( parent_row.xnat_addfield_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_addparam_addfield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.parameters_originalfilename IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_originalfilename:string)=('' || REPLACE(REPLACE(current_row.parameters_originalfilename,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_systemtype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_systemtype:integer)=('' || current_row.parameters_systemtype || '')'';
          END IF;
          IF (current_row.parameters_filetype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_filetype:integer)=('' || current_row.parameters_filetype || '')'';
          END IF;
          IF (current_row.parameters_transaxialfov IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_transaxialfov:float)=('' || current_row.parameters_transaxialfov || '')'';
          END IF;
          IF (current_row.parameters_acqtype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_acqtype:integer)=('' || current_row.parameters_acqtype || '')'';
          END IF;
          IF (current_row.parameters_facility IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_facility:string)=('' || REPLACE(REPLACE(current_row.parameters_facility,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_numplanes IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_numplanes:integer)=('' || current_row.parameters_numplanes || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_petScanData_frame_history WHERE parameters_frames_frame_xnat_pe_xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version ORDER BY xnat_petscandata_frame_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petScanData_frame_history( parent_row.xnat_petscandata_frame_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_frames_frame_petscandata_frame'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.parameters_frames_numframes IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_frames_numframes:integer)=('' || current_row.parameters_frames_numframes || '')'';
          END IF;
          IF (current_row.parameters_numgates IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_numgates:integer)=('' || current_row.parameters_numgates || '')'';
          END IF;
          IF (current_row.parameters_planeseparation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_planeseparation:float)=('' || current_row.parameters_planeseparation || '')'';
          END IF;
          IF (current_row.parameters_binsize IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_binsize:float)=('' || current_row.parameters_binsize || '')'';
          END IF;
          IF (current_row.parameters_datatype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_datatype:integer)=('' || current_row.parameters_datatype || '')'';
          END IF;
          IF (current_row.parameters_dimensions_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_dimensions_x:integer)=('' || current_row.parameters_dimensions_x || '')'';
          END IF;
          IF (current_row.parameters_dimensions_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_dimensions_y:integer)=('' || current_row.parameters_dimensions_y || '')'';
          END IF;
          IF (current_row.parameters_dimensions_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_dimensions_z:integer)=('' || current_row.parameters_dimensions_z || '')'';
          END IF;
          IF (current_row.parameters_dimensions_num IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_dimensions_num:integer)=('' || current_row.parameters_dimensions_num || '')'';
          END IF;
          IF (current_row.parameters_offset_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_offset_x:float)=('' || current_row.parameters_offset_x || '')'';
          END IF;
          IF (current_row.parameters_offset_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_offset_y:float)=('' || current_row.parameters_offset_y || '')'';
          END IF;
          IF (current_row.parameters_offset_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_offset_z:float)=('' || current_row.parameters_offset_z || '')'';
          END IF;
          IF (current_row.parameters_reconzoom IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_reconzoom:float)=('' || current_row.parameters_reconzoom || '')'';
          END IF;
          IF (current_row.parameters_pixelsize_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelsize_x:float)=('' || current_row.parameters_pixelsize_x || '')'';
          END IF;
          IF (current_row.parameters_pixelsize_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelsize_y:float)=('' || current_row.parameters_pixelsize_y || '')'';
          END IF;
          IF (current_row.parameters_pixelsize_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelsize_z:float)=('' || current_row.parameters_pixelsize_z || '')'';
          END IF;
          IF (current_row.parameters_filtercode IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_filtercode:integer)=('' || current_row.parameters_filtercode || '')'';
          END IF;
          IF (current_row.parameters_resolution_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_resolution_x:float)=('' || current_row.parameters_resolution_x || '')'';
          END IF;
          IF (current_row.parameters_resolution_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_resolution_y:float)=('' || current_row.parameters_resolution_y || '')'';
          END IF;
          IF (current_row.parameters_resolution_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_resolution_z:float)=('' || current_row.parameters_resolution_z || '')'';
          END IF;
          IF (current_row.parameters_numrelements IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_numrelements:float)=('' || current_row.parameters_numrelements || '')'';
          END IF;
          IF (current_row.parameters_numangles IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_numangles:float)=('' || current_row.parameters_numangles || '')'';
          END IF;
          IF (current_row.parameters_zrotationangle IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_zrotationangle:float)=('' || current_row.parameters_zrotationangle || '')'';
          END IF;
          IF (current_row.parameters_processingcode IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_processingcode:integer)=('' || current_row.parameters_processingcode || '')'';
          END IF;
          IF (current_row.parameters_gateduration IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_gateduration:integer)=('' || current_row.parameters_gateduration || '')'';
          END IF;
          IF (current_row.parameters_rwaveoffset IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rwaveoffset:integer)=('' || current_row.parameters_rwaveoffset || '')'';
          END IF;
          IF (current_row.parameters_numacceptedbeats IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_numacceptedbeats:integer)=('' || current_row.parameters_numacceptedbeats || '')'';
          END IF;
          IF (current_row.parameters_filter_cutoff IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_filter_cutoff:float)=('' || current_row.parameters_filter_cutoff || '')'';
          END IF;
          IF (current_row.parameters_annotation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_annotation:string)=('' || REPLACE(REPLACE(current_row.parameters_annotation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_mt_1_1 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_1_1:float)=('' || current_row.parameters_mt_1_1 || '')'';
          END IF;
          IF (current_row.parameters_mt_1_2 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_1_2:float)=('' || current_row.parameters_mt_1_2 || '')'';
          END IF;
          IF (current_row.parameters_mt_1_3 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_1_3:float)=('' || current_row.parameters_mt_1_3 || '')'';
          END IF;
          IF (current_row.parameters_mt_1_4 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_1_4:float)=('' || current_row.parameters_mt_1_4 || '')'';
          END IF;
          IF (current_row.parameters_mt_2_1 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_2_1:float)=('' || current_row.parameters_mt_2_1 || '')'';
          END IF;
          IF (current_row.parameters_mt_2_2 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_2_2:float)=('' || current_row.parameters_mt_2_2 || '')'';
          END IF;
          IF (current_row.parameters_mt_2_3 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_2_3:float)=('' || current_row.parameters_mt_2_3 || '')'';
          END IF;
          IF (current_row.parameters_mt_2_4 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_2_4:float)=('' || current_row.parameters_mt_2_4 || '')'';
          END IF;
          IF (current_row.parameters_mt_3_1 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_3_1:float)=('' || current_row.parameters_mt_3_1 || '')'';
          END IF;
          IF (current_row.parameters_mt_3_2 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_3_2:float)=('' || current_row.parameters_mt_3_2 || '')'';
          END IF;
          IF (current_row.parameters_mt_3_3 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_3_3:float)=('' || current_row.parameters_mt_3_3 || '')'';
          END IF;
          IF (current_row.parameters_mt_3_4 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_3_4:float)=('' || current_row.parameters_mt_3_4 || '')'';
          END IF;
          IF (current_row.parameters_rfilter_cutoff IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rfilter_cutoff:float)=('' || current_row.parameters_rfilter_cutoff || '')'';
          END IF;
          IF (current_row.parameters_rfilter_resolution IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rfilter_resolution:float)=('' || current_row.parameters_rfilter_resolution || '')'';
          END IF;
          IF (current_row.parameters_rfilter_code IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rfilter_code:integer)=('' || current_row.parameters_rfilter_code || '')'';
          END IF;
          IF (current_row.parameters_rfilter_order IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rfilter_order:integer)=('' || current_row.parameters_rfilter_order || '')'';
          END IF;
          IF (current_row.parameters_zfilter_cutoff IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_zfilter_cutoff:float)=('' || current_row.parameters_zfilter_cutoff || '')'';
          END IF;
          IF (current_row.parameters_zfilter_resolution IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_zfilter_resolution:float)=('' || current_row.parameters_zfilter_resolution || '')'';
          END IF;
          IF (current_row.parameters_zfilter_code IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_zfilter_code:integer)=('' || current_row.parameters_zfilter_code || '')'';
          END IF;
          IF (current_row.parameters_zfilter_order IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_zfilter_order:integer)=('' || current_row.parameters_zfilter_order || '')'';
          END IF;
          IF (current_row.parameters_scattertype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_scattertype:integer)=('' || current_row.parameters_scattertype || '')'';
          END IF;
          IF (current_row.parameters_recontype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_recontype:integer)=('' || current_row.parameters_recontype || '')'';
          END IF;
          IF (current_row.parameters_reconviews IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_reconviews:integer)=('' || current_row.parameters_reconviews || '')'';
          END IF;
          IF (current_row.parameters_bedposition IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_bedposition:float)=('' || current_row.parameters_bedposition || '')'';
          END IF;
          IF (current_row.parameters_ecatcalibrationfactor IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_ecatcalibrationfactor:float)=('' || current_row.parameters_ecatcalibrationfactor || '')'';
          END IF;
          IF (current_row.ecatvalidation IS NOT NULL) THEN 
              fullText := fullText || ''(ecatvalidation:string)=('' || REPLACE(REPLACE(current_row.ecatvalidation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.ecatvalidation_status IS NOT NULL) THEN 
              fullText := fullText || ''(ecatvalidation_status:integer)=('' || current_row.ecatvalidation_status || '')'';
          END IF;
        IF ((current_row.petScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(petscandata_info:integer)=('' || current_row.petscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petScanData_meta_data(current_row.petScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(petscandata_info_petscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractResource_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractResource_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_abstractResource_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_mrScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.coil IS NOT NULL) THEN 
              fullText := fullText || ''(coil:string)=('' || REPLACE(REPLACE(current_row.coil,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.fieldstrength IS NOT NULL) THEN 
              fullText := fullText || ''(fieldstrength:string)=('' || REPLACE(REPLACE(current_row.fieldstrength,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.marker IS NOT NULL) THEN 
              fullText := fullText || ''(marker:string)=('' || REPLACE(REPLACE(current_row.marker,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.stabilization IS NOT NULL) THEN 
              fullText := fullText || ''(stabilization:string)=('' || REPLACE(REPLACE(current_row.stabilization,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_units:string)=('' || REPLACE(REPLACE(current_row.parameters_voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_x:float)=('' || current_row.parameters_voxelres_x || '')'';
          END IF;
          IF (current_row.parameters_voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_y:float)=('' || current_row.parameters_voxelres_y || '')'';
          END IF;
          IF (current_row.parameters_voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_z:float)=('' || current_row.parameters_voxelres_z || '')'';
          END IF;
          IF (current_row.parameters_orientation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_orientation:string)=('' || REPLACE(REPLACE(current_row.parameters_orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_fov_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_x:integer)=('' || current_row.parameters_fov_x || '')'';
          END IF;
          IF (current_row.parameters_fov_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_y:integer)=('' || current_row.parameters_fov_y || '')'';
          END IF;
          IF (current_row.parameters_matrix_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_matrix_x:integer)=('' || current_row.parameters_matrix_x || '')'';
          END IF;
          IF (current_row.parameters_matrix_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_matrix_y:integer)=('' || current_row.parameters_matrix_y || '')'';
          END IF;
          IF (current_row.parameters_partitions IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_partitions:integer)=('' || current_row.parameters_partitions || '')'';
          END IF;
          IF (current_row.parameters_tr IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_tr:float)=('' || current_row.parameters_tr || '')'';
          END IF;
          IF (current_row.parameters_te IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_te:float)=('' || current_row.parameters_te || '')'';
          END IF;
          IF (current_row.parameters_ti IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_ti:float)=('' || current_row.parameters_ti || '')'';
          END IF;
          IF (current_row.parameters_flip IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_flip:integer)=('' || current_row.parameters_flip || '')'';
          END IF;
          IF (current_row.parameters_sequence IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_sequence:string)=('' || REPLACE(REPLACE(current_row.parameters_sequence,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_origin IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_origin:string)=('' || REPLACE(REPLACE(current_row.parameters_origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_imagetype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_imagetype:string)=('' || REPLACE(REPLACE(current_row.parameters_imagetype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_scansequence IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_scansequence:string)=('' || REPLACE(REPLACE(current_row.parameters_scansequence,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_seqvariant IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_seqvariant:string)=('' || REPLACE(REPLACE(current_row.parameters_seqvariant,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_scanoptions IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_scanoptions:string)=('' || REPLACE(REPLACE(current_row.parameters_scanoptions,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_acqtype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_acqtype:string)=('' || REPLACE(REPLACE(current_row.parameters_acqtype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_coil IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_coil:string)=('' || REPLACE(REPLACE(current_row.parameters_coil,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_dtiacqcount IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_dtiacqcount:integer)=('' || current_row.parameters_dtiacqcount || '')'';
          END IF;
          IF (current_row.parameters_pixelbandwidth IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelbandwidth:float)=('' || current_row.parameters_pixelbandwidth || '')'';
          END IF;
          IF (current_row.parameters_diffusion_bvalues IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_diffusion_bvalues:string)=('' || REPLACE(REPLACE(current_row.parameters_diffusion_bvalues,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_diffusion_directionality IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_diffusion_directionality:string)=('' || REPLACE(REPLACE(current_row.parameters_diffusion_directionality,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_diffusion_orientations IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_diffusion_orientations:string)=('' || REPLACE(REPLACE(current_row.parameters_diffusion_orientations,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_diffusion_anisotropytype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_diffusion_anisotropytype:string)=('' || REPLACE(REPLACE(current_row.parameters_diffusion_anisotropytype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField_history WHERE parameters_addparam_xnat_mrScan_xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version ORDER BY xnat_addfield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_addField_history( parent_row.xnat_addfield_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_addparam_addfield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.dcmvalidation IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation:string)=('' || REPLACE(REPLACE(current_row.dcmvalidation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmvalidation_status IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation_status:integer)=('' || current_row.dcmvalidation_status || '')'';
          END IF;
        IF ((current_row.mrScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mrscandata_info:integer)=('' || current_row.mrscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mrScanData_meta_data(current_row.mrScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(mrscandata_info_mrscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_reconstructedImageData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:reconstructedImageData_history)('';
      FOR current_row IN SELECT * FROM xnat_reconstructedImageData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.image_session_id IS NOT NULL) THEN 
              fullText := fullText || ''(image_session_id:string)=('' || REPLACE(REPLACE(current_row.image_session_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_reconstructedImageData_scanID_history WHERE inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id AND xft_version=current_row.xft_version ORDER BY xnat_reconstructedimagedata_scanid_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_reconstructedImageData_scanID_history( parent_row.xnat_reconstructedimagedata_scanid_id, child_count,$3,false,false);
              fullText := fullText || ''(inscans_scanid_reconstructedimagedata_scanid'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM recon_in_resource_history WHERE  xnat_reconstructedImageData_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_history( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(in_file_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM recon_out_resource_history WHERE  xnat_reconstructedImageData_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_history( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(out_file_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF ((current_row.provenance_prov_process_id IS NOT NULL)) THEN
            fullText := fullText || ''(provenance_prov_process_id:integer)=('' || current_row.provenance_prov_process_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM prov_process_history WHERE  prov_process_id=current_row.provenance_prov_process_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_process_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(provenance_process:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField_history WHERE parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id AND xft_version=current_row.xft_version ORDER BY xnat_addfield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_addField_history( parent_row.xnat_addfield_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_addparam_addfield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_computationData_history WHERE computations_datum_xnat_reconst_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id AND xft_version=current_row.xft_version ORDER BY xnat_computationdata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_computationData_history( parent_row.xnat_computationdata_id, child_count,$3,false,false);
              fullText := fullText || ''(computations_datum_computationdata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.basescantype IS NOT NULL) THEN 
              fullText := fullText || ''(basescantype:string)=('' || REPLACE(REPLACE(current_row.basescantype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.reconstructedImageData_info IS NOT NULL)) THEN
            fullText := fullText || ''(reconstructedimagedata_info:integer)=('' || current_row.reconstructedimagedata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_reconstructedImageData_meta_data(current_row.reconstructedImageData_info, child_count,$3,false,false);
              fullText := fullText || ''(reconstructedimagedata_info_reconstructedimagedata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_reconstructedimagedata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_reconstructedimagedata_id:integer)=('' || current_row.xnat_reconstructedimagedata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ecgSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ecgSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_ecgSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.ecgSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ecgsessiondata_info:integer)=('' || current_row.ecgsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ecgSessionData_meta_data(current_row.ecgSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(ecgsessiondata_info_ecgsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectData_history)('';
      FOR current_row IN SELECT * FROM xnat_projectData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.keywords IS NOT NULL) THEN 
              fullText := fullText || ''(keywords:string)=('' || REPLACE(REPLACE(current_row.keywords,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_projectData_alias_history WHERE aliases_alias_xnat_projectData_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_projectdata_alias_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectData_alias_history( parent_row.xnat_projectdata_alias_id, child_count,$3,false,false);
              fullText := fullText || ''(aliases_alias_projectdata_alias'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_publicationResource_history WHERE publications_publication_xnat_p_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_abstractresource_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_publicationResource_history( parent_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(publications_publication_publicationresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_projectData_resource_history WHERE  xnat_projectData_id=current_row.id AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_history( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(resources_resource_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractProtocol_history WHERE xnat_projectData_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_abstractprotocol_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractProtocol_history( parent_row.xnat_abstractprotocol_id, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_abstractprotocol'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.pi_xnat_investigatordata_id IS NOT NULL)) THEN
            fullText := fullText || ''(pi_xnat_investigatordata_id:integer)=('' || current_row.pi_xnat_investigatordata_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_investigatorData_history WHERE  xnat_investigatordata_id=current_row.pi_xnat_investigatordata_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_investigatorData_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(pi_investigatordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_projectData_investigator_history WHERE  xnat_projectData_id=current_row.id AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_investigatorData_history( mapping_row.xnat_investigatorData_xnat_investigatordata_id, child_count,$3,false,false);
              fullText := fullText || ''(investigators_investigator_investigatordata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_projectData_field_history WHERE fields_field_xnat_projectData_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_projectdata_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectData_field_history( parent_row.xnat_projectdata_field_id, child_count,$3,false,false);
              fullText := fullText || ''(fields_field_projectdata_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.secondary_id IS NOT NULL) THEN 
              fullText := fullText || ''(secondary_id:string)=('' || REPLACE(REPLACE(current_row.secondary_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.projectData_info IS NOT NULL)) THEN
            fullText := fullText || ''(projectdata_info:integer)=('' || current_row.projectdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectData_meta_data(current_row.projectData_info, child_count,$3,false,false);
              fullText := fullText || ''(projectdata_info_projectdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_pVisitData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:pVisitData_history)('';
      FOR current_row IN SELECT * FROM xnat_pVisitData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_genericData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_genericData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(genericdata_genericdata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.subject_id IS NOT NULL) THEN 
              fullText := fullText || ''(subject_id:string)=('' || REPLACE(REPLACE(current_row.subject_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visit_type IS NOT NULL) THEN 
              fullText := fullText || ''(visit_type:string)=('' || REPLACE(REPLACE(current_row.visit_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visit_name IS NOT NULL) THEN 
              fullText := fullText || ''(visit_name:string)=('' || REPLACE(REPLACE(current_row.visit_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.notes IS NOT NULL) THEN 
              fullText := fullText || ''(notes:string)=('' || REPLACE(REPLACE(current_row.notes,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.start_date IS NOT NULL) THEN 
              fullText := fullText || ''(start_date:dateTime)=('' || current_row.start_date || '')'';
          END IF;
          IF (current_row.end_date IS NOT NULL) THEN 
              fullText := fullText || ''(end_date:dateTime)=('' || current_row.end_date || '')'';
          END IF;
          IF (current_row.closed IS NOT NULL) THEN 
              fullText := fullText || ''(closed:integer)=('' || current_row.closed || '')'';
          END IF;
          IF (current_row.terminal IS NOT NULL) THEN 
              fullText := fullText || ''(terminal:integer)=('' || current_row.terminal || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.protocolversion IS NOT NULL) THEN 
              fullText := fullText || ''(protocolversion:integer)=('' || current_row.protocolversion || '')'';
          END IF;
          IF (current_row.protocolid IS NOT NULL) THEN 
              fullText := fullText || ''(protocolid:string)=('' || REPLACE(REPLACE(current_row.protocolid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.pVisitData_info IS NOT NULL)) THEN
            fullText := fullText || ''(pvisitdata_info:integer)=('' || current_row.pvisitdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_pVisitData_meta_data(current_row.pVisitData_info, child_count,$3,false,false);
              fullText := fullText || ''(pvisitdata_info_pvisitdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_genericData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(genericdata_genericdata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_crScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:crScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_crScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.crScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(crscandata_info:integer)=('' || current_row.crscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_crScanData_meta_data(current_row.crScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(crscandata_info_crscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_petSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectParticipant_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectParticipant_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_projectParticipant_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectParticipant( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectParticipant)('';
      FOR current_row IN SELECT * FROM xnat_projectParticipant WHERE  xnat_projectparticipant_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.subject_id IS NOT NULL) THEN 
              fullText := fullText || ''(subject_id:string)=('' || REPLACE(REPLACE(current_row.subject_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row._group IS NOT NULL) THEN 
              fullText := fullText || ''(_group:string)=('' || REPLACE(REPLACE(current_row._group,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.projectParticipant_info IS NOT NULL)) THEN
            fullText := fullText || ''(projectparticipant_info:integer)=('' || current_row.projectparticipant_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectParticipant_meta_data(current_row.projectParticipant_info, child_count,$3,false,false);
              fullText := fullText || ''(projectparticipant_info_projectparticipant_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_projectparticipant_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_projectparticipant_id:integer)=('' || current_row.xnat_projectparticipant_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_projectParticipant( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_projectParticipant.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_projectParticipant LEFT JOIN xnat_projectParticipant_meta_data meta ON xnat_projectParticipant.projectParticipant_info=meta.meta_data_id WHERE  xnat_projectparticipant_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_projectParticipant_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_projectParticipant( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_projectParticipant.*, meta.meta_data_id FROM xnat_projectParticipant LEFT JOIN xnat_projectParticipant_meta_data meta ON xnat_projectParticipant.projectParticipant_info=meta.meta_data_id WHERE  xnat_projectparticipant_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:subjectData/sharing/share
        IF ((current_row.subject_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_subjectData(current_row.subject_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_projectParticipant()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_projectParticipant( OLD.xnat_projectparticipant_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_projectParticipant','CREATE TRIGGER a_u_xnat_projectParticipant  AFTER UPDATE OR DELETE ON xnat_projectParticipant FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_projectParticipant()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_nmSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:nmSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_nmSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcAssessmentData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcAssessmentData_history)('';
      FOR current_row IN SELECT * FROM xnat_qcAssessmentData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_mrAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_mrAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcAssessmentData_scan_history WHERE scans_scan_xnat_qcAssessmentDat_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_qcassessmentdata_scan_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcAssessmentData_scan_history( parent_row.xnat_qcassessmentdata_scan_id, child_count,$3,false,false);
              fullText := fullText || ''(scans_scan_qcassessmentdata_scan'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.qcAssessmentData_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcassessmentdata_info:integer)=('' || current_row.qcassessmentdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcAssessmentData_meta_data(current_row.qcAssessmentData_info, child_count,$3,false,false);
              fullText := fullText || ''(qcassessmentdata_info_qcassessmentdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_mrAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_mrSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.coil IS NOT NULL) THEN 
              fullText := fullText || ''(coil:string)=('' || REPLACE(REPLACE(current_row.coil,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.fieldstrength IS NOT NULL) THEN 
              fullText := fullText || ''(fieldstrength:string)=('' || REPLACE(REPLACE(current_row.fieldstrength,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.marker IS NOT NULL) THEN 
              fullText := fullText || ''(marker:string)=('' || REPLACE(REPLACE(current_row.marker,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.stabilization IS NOT NULL) THEN 
              fullText := fullText || ''(stabilization:string)=('' || REPLACE(REPLACE(current_row.stabilization,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.mrSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mrsessiondata_info:integer)=('' || current_row.mrsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mrSessionData_meta_data(current_row.mrSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(mrsessiondata_info_mrsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_rtSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rtSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_rtSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.rtSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(rtsessiondata_info:integer)=('' || current_row.rtsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_rtSessionData_meta_data(current_row.rtSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(rtsessiondata_info_rtsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectData_addID_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectData_addID_history)('';
      FOR current_row IN SELECT * FROM xnat_subjectData_addID_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.addid IS NOT NULL) THEN 
              fullText := fullText || ''(addid:string)=('' || REPLACE(REPLACE(current_row.addid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.subjectData_addID_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectdata_addid_info:integer)=('' || current_row.subjectdata_addid_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectData_addID_meta_data(current_row.subjectData_addID_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectdata_addid_info_subjectdata_addid_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xnat_subjectData_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_subjectdata_id:string)=('' || current_row.xnat_subjectdata_id || '')'';
        END IF;
          IF (current_row.xnat_subjectdata_addid_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_subjectdata_addid_id:integer)=('' || current_row.xnat_subjectdata_addid_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmvScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmvScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_gmvScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.gmvScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(gmvscandata_info:integer)=('' || current_row.gmvscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_gmvScanData_meta_data(current_row.gmvScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(gmvscandata_info_gmvscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_experimentData_field_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:experimentData_field_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_experimentData_field_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_experimentData_field( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:experimentData_field)('';
      FOR current_row IN SELECT * FROM xnat_experimentData_field WHERE  xnat_experimentdata_field_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.field IS NOT NULL) THEN 
              fullText := fullText || ''(field:string)=('' || REPLACE(REPLACE(current_row.field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.experimentData_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(experimentdata_field_info:integer)=('' || current_row.experimentdata_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_experimentData_field_meta_data(current_row.experimentData_field_info, child_count,$3,false,false);
              fullText := fullText || ''(experimentdata_field_info_experimentdata_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fields_field_xnat_experimentDat_id IS NOT NULL)) THEN
            fullText := fullText || ''(fields_field_xnat_experimentdat_id:string)=('' || current_row.fields_field_xnat_experimentdat_id || '')'';
        END IF;
          IF (current_row.xnat_experimentdata_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_experimentdata_field_id:integer)=('' || current_row.xnat_experimentdata_field_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_experimentData_field( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_experimentData_field.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_experimentData_field LEFT JOIN xnat_experimentData_field_meta_data meta ON xnat_experimentData_field.experimentData_field_info=meta.meta_data_id WHERE  xnat_experimentdata_field_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_experimentData_field_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_experimentData_field( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_experimentData_field.*, meta.meta_data_id FROM xnat_experimentData_field LEFT JOIN xnat_experimentData_field_meta_data meta ON xnat_experimentData_field.experimentData_field_info=meta.meta_data_id WHERE  xnat_experimentdata_field_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:experimentData/fields/field
        IF ((current_row.fields_field_xnat_experimentDat_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_experimentData(current_row.fields_field_xnat_experimentDat_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_experimentData_field()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_experimentData_field( OLD.xnat_experimentdata_field_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_experimentData_field','CREATE TRIGGER a_u_xnat_experimentData_field  AFTER UPDATE OR DELETE ON xnat_experimentData_field FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_experimentData_field()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_hdSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:hdSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_hdSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petAssessorData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petAssessorData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_petAssessorData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mgScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mgScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_mgScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_contrastBolus_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:contrastBolus_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_contrastBolus_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_contrastBolus( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:contrastBolus)('';
      FOR current_row IN SELECT * FROM xnat_contrastBolus WHERE  xnat_contrastbolus_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.agent IS NOT NULL) THEN 
              fullText := fullText || ''(agent:string)=('' || REPLACE(REPLACE(current_row.agent,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.route IS NOT NULL) THEN 
              fullText := fullText || ''(route:string)=('' || REPLACE(REPLACE(current_row.route,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.volume IS NOT NULL) THEN 
              fullText := fullText || ''(volume:float)=('' || current_row.volume || '')'';
          END IF;
          IF (current_row.totaldose IS NOT NULL) THEN 
              fullText := fullText || ''(totaldose:float)=('' || current_row.totaldose || '')'';
          END IF;
          IF (current_row.flowrate IS NOT NULL) THEN 
              fullText := fullText || ''(flowrate:float)=('' || current_row.flowrate || '')'';
          END IF;
          IF (current_row.flowduration IS NOT NULL) THEN 
              fullText := fullText || ''(flowduration:float)=('' || current_row.flowduration || '')'';
          END IF;
          IF (current_row.activeingredient IS NOT NULL) THEN 
              fullText := fullText || ''(activeingredient:string)=('' || REPLACE(REPLACE(current_row.activeingredient,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.concentration IS NOT NULL) THEN 
              fullText := fullText || ''(concentration:float)=('' || current_row.concentration || '')'';
          END IF;
        IF ((current_row.contrastBolus_info IS NOT NULL)) THEN
            fullText := fullText || ''(contrastbolus_info:integer)=('' || current_row.contrastbolus_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_contrastBolus_meta_data(current_row.contrastBolus_info, child_count,$3,false,false);
              fullText := fullText || ''(contrastbolus_info_contrastbolus_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_contrastbolus_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_contrastbolus_id:integer)=('' || current_row.xnat_contrastbolus_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_contrastBolus( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_contrastBolus.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_contrastBolus LEFT JOIN xnat_contrastBolus_meta_data meta ON xnat_contrastBolus.contrastBolus_info=meta.meta_data_id WHERE  xnat_contrastbolus_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_contrastBolus_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_contrastBolus( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_contrastBolus.*, meta.meta_data_id FROM xnat_contrastBolus LEFT JOIN xnat_contrastBolus_meta_data meta ON xnat_contrastBolus.contrastBolus_info=meta.meta_data_id WHERE  xnat_contrastbolus_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION xnat:ctScanData/parameters/contrastBolus
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_ctScanData WHERE parameters_contrastbolus_xnat_contrastbolus_id=current_row.xnat_contrastbolus_id
        LOOP
        PERFORM update_ls_xnat_ctScanData( parent_row.xnat_imagescandata_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:xaScanData/parameters/contrastBolus
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_xaScanData WHERE parameters_contrastbolus_xnat_contrastbolus_id=current_row.xnat_contrastbolus_id
        LOOP
        PERFORM update_ls_xnat_xaScanData( parent_row.xnat_imagescandata_id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_contrastBolus()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_contrastBolus( OLD.xnat_contrastbolus_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_contrastBolus','CREATE TRIGGER a_u_xnat_contrastBolus  AFTER UPDATE OR DELETE ON xnat_contrastBolus FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_contrastBolus()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageScanData_share_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageScanData_share_history)('';
      FOR current_row IN SELECT * FROM xnat_imageScanData_share_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.share IS NOT NULL) THEN 
              fullText := fullText || ''(share:string)=('' || REPLACE(REPLACE(current_row.share,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.imageScanData_share_info IS NOT NULL)) THEN
            fullText := fullText || ''(imagescandata_share_info:integer)=('' || current_row.imagescandata_share_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageScanData_share_meta_data(current_row.imageScanData_share_info, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_share_info_imagescandata_share_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.sharing_share_xnat_imageScanDat_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(sharing_share_xnat_imagescandat_xnat_imagescandata_id:integer)=('' || current_row.sharing_share_xnat_imagescandat_xnat_imagescandata_id || '')'';
        END IF;
          IF (current_row.xnat_imagescandata_share_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_imagescandata_share_id:integer)=('' || current_row.xnat_imagescandata_share_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_experimentData_share_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:experimentData_share_history)('';
      FOR current_row IN SELECT * FROM xnat_experimentData_share_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.share IS NOT NULL) THEN 
              fullText := fullText || ''(share:string)=('' || REPLACE(REPLACE(current_row.share,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visit IS NOT NULL) THEN 
              fullText := fullText || ''(visit:string)=('' || REPLACE(REPLACE(current_row.visit,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.protocol IS NOT NULL) THEN 
              fullText := fullText || ''(protocol:string)=('' || REPLACE(REPLACE(current_row.protocol,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.experimentData_share_info IS NOT NULL)) THEN
            fullText := fullText || ''(experimentdata_share_info:integer)=('' || current_row.experimentdata_share_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_experimentData_share_meta_data(current_row.experimentData_share_info, child_count,$3,false,false);
              fullText := fullText || ''(experimentdata_share_info_experimentdata_share_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.sharing_share_xnat_experimentDa_id IS NOT NULL)) THEN
            fullText := fullText || ''(sharing_share_xnat_experimentda_id:string)=('' || current_row.sharing_share_xnat_experimentda_id || '')'';
        END IF;
          IF (current_row.xnat_experimentdata_share_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_experimentdata_share_id:integer)=('' || current_row.xnat_experimentdata_share_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_addField_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:addField_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_addField_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_addField( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:addField)('';
      FOR current_row IN SELECT * FROM xnat_addField WHERE  xnat_addfield_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.addfield IS NOT NULL) THEN 
              fullText := fullText || ''(addfield:string)=('' || REPLACE(REPLACE(current_row.addfield,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.addField_info IS NOT NULL)) THEN
            fullText := fullText || ''(addfield_info:integer)=('' || current_row.addfield_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_addField_meta_data(current_row.addField_info, child_count,$3,false,false);
              fullText := fullText || ''(addfield_info_addfield_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_addparam_xnat_mrScan_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_addparam_xnat_mrscan_xnat_imagescandata_id:integer)=('' || current_row.parameters_addparam_xnat_mrscan_xnat_imagescandata_id || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id:integer)=('' || current_row.parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_addparam_xnat_petSca_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_addparam_xnat_petsca_xnat_imagescandata_id:integer)=('' || current_row.parameters_addparam_xnat_petsca_xnat_imagescandata_id || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_addparam_xnat_imageA_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_addparam_xnat_imagea_id:string)=('' || current_row.parameters_addparam_xnat_imagea_id || '')'';
        END IF;
          IF (current_row.xnat_addfield_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_addfield_id:integer)=('' || current_row.xnat_addfield_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_addField( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_addField.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_addField LEFT JOIN xnat_addField_meta_data meta ON xnat_addField.addField_info=meta.meta_data_id WHERE  xnat_addfield_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_addField_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_addField( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_addField.*, meta.meta_data_id FROM xnat_addField LEFT JOIN xnat_addField_meta_data meta ON xnat_addField.addField_info=meta.meta_data_id WHERE  xnat_addfield_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:mrScanData/parameters/addParam
        IF ((current_row.parameters_addparam_xnat_mrScan_xnat_imagescandata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_mrScanData(current_row.parameters_addparam_xnat_mrScan_xnat_imagescandata_id, $2);
        END IF;

        --PROCESS SUBORDINATE RELATION xnat:reconstructedImageData/parameters/addParam
        IF ((current_row.parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_reconstructedImageData(current_row.parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id, $2);
        END IF;

        --PROCESS SUBORDINATE RELATION xnat:petScanData/parameters/addParam
        IF ((current_row.parameters_addparam_xnat_petSca_xnat_imagescandata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_petScanData(current_row.parameters_addparam_xnat_petSca_xnat_imagescandata_id, $2);
        END IF;

        --PROCESS SUBORDINATE RELATION xnat:imageAssessorData/parameters/addParam
        IF ((current_row.parameters_addparam_xnat_imageA_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_imageAssessorData(current_row.parameters_addparam_xnat_imageA_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_addField()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_addField( OLD.xnat_addfield_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_addField','CREATE TRIGGER a_u_xnat_addField  AFTER UPDATE OR DELETE ON xnat_addField FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_addField()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_mgSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mgSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_mgSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.mgSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mgsessiondata_info:integer)=('' || current_row.mgsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mgSessionData_meta_data(current_row.mgSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(mgsessiondata_info_mgsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_mrAssessorData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrAssessorData_history)('';
      FOR current_row IN SELECT * FROM xnat_mrAssessorData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.mrAssessorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mrassessordata_info:integer)=('' || current_row.mrassessordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mrAssessorData_meta_data(current_row.mrAssessorData_info, child_count,$3,false,false);
              fullText := fullText || ''(mrassessordata_info_mrassessordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrAssessorData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      FOR current_row IN SELECT * FROM xnat_mrAssessorData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
           	   tempText := i_xnat_imageAssessorData_history(ext_row.history_id, child_count,$3,false,false);
 RETURN tempText;
           	END LOOP;
           END;
        END IF;
      END LOOP;
      fullText:= ie_xnat_mrAssessorData_history( $1, $2,$3,$4,$5);
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_fieldDefinitionGroup_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:fieldDefinitionGroup_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_fieldDefinitionGroup_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_derivedData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:derivedData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_derivedData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_derivedData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:derivedData_history)('';
      FOR current_row IN SELECT * FROM xnat_derivedData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_experimentData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_experimentData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(experimentdata_experimentdata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.provenance_prov_process_id IS NOT NULL)) THEN
            fullText := fullText || ''(provenance_prov_process_id:integer)=('' || current_row.provenance_prov_process_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM prov_process_history WHERE  prov_process_id=current_row.provenance_prov_process_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_process_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(provenance_process:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF ((current_row.derivedData_info IS NOT NULL)) THEN
            fullText := fullText || ''(deriveddata_info:integer)=('' || current_row.deriveddata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_derivedData_meta_data(current_row.derivedData_info, child_count,$3,false,false);
              fullText := fullText || ''(deriveddata_info_deriveddata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_experimentData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(experimentdata_experimentdata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_derivedData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      FOR current_row IN SELECT * FROM xnat_derivedData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_experimentData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
           	   tempText := i_xnat_experimentData_history(ext_row.history_id, child_count,$3,false,false);
 RETURN tempText;
           	END LOOP;
           END;
        END IF;
      END LOOP;
      fullText:= ie_xnat_derivedData_history( $1, $2,$3,$4,$5);
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectData_alias_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectData_alias_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_projectData_alias_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectData_alias( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectData_alias)('';
      FOR current_row IN SELECT * FROM xnat_projectData_alias WHERE  xnat_projectdata_alias_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.alias IS NOT NULL) THEN 
              fullText := fullText || ''(alias:string)=('' || REPLACE(REPLACE(current_row.alias,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.source IS NOT NULL) THEN 
              fullText := fullText || ''(source:string)=('' || REPLACE(REPLACE(current_row.source,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.projectData_alias_info IS NOT NULL)) THEN
            fullText := fullText || ''(projectdata_alias_info:integer)=('' || current_row.projectdata_alias_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectData_alias_meta_data(current_row.projectData_alias_info, child_count,$3,false,false);
              fullText := fullText || ''(projectdata_alias_info_projectdata_alias_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.aliases_alias_xnat_projectData_id IS NOT NULL)) THEN
            fullText := fullText || ''(aliases_alias_xnat_projectdata_id:string)=('' || current_row.aliases_alias_xnat_projectdata_id || '')'';
        END IF;
          IF (current_row.xnat_projectdata_alias_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_projectdata_alias_id:integer)=('' || current_row.xnat_projectdata_alias_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_projectData_alias( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_projectData_alias.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_projectData_alias LEFT JOIN xnat_projectData_alias_meta_data meta ON xnat_projectData_alias.projectData_alias_info=meta.meta_data_id WHERE  xnat_projectdata_alias_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_projectData_alias_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_projectData_alias( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_projectData_alias.*, meta.meta_data_id FROM xnat_projectData_alias LEFT JOIN xnat_projectData_alias_meta_data meta ON xnat_projectData_alias.projectData_alias_info=meta.meta_data_id WHERE  xnat_projectdata_alias_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:projectData/aliases/alias
        IF ((current_row.aliases_alias_xnat_projectData_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_projectData(current_row.aliases_alias_xnat_projectData_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_projectData_alias()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_projectData_alias( OLD.xnat_projectdata_alias_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_projectData_alias','CREATE TRIGGER a_u_xnat_projectData_alias  AFTER UPDATE OR DELETE ON xnat_projectData_alias FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_projectData_alias()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_petSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_petSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.stabilization IS NOT NULL) THEN 
              fullText := fullText || ''(stabilization:string)=('' || REPLACE(REPLACE(current_row.stabilization,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.studytype IS NOT NULL) THEN 
              fullText := fullText || ''(studytype:string)=('' || REPLACE(REPLACE(current_row.studytype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.patientid IS NOT NULL) THEN 
              fullText := fullText || ''(patientid:string)=('' || REPLACE(REPLACE(current_row.patientid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.patientname IS NOT NULL) THEN 
              fullText := fullText || ''(patientname:string)=('' || REPLACE(REPLACE(current_row.patientname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_dose_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_dose_units:string)=('' || REPLACE(REPLACE(current_row.tracer_dose_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_dose IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_dose:float)=('' || current_row.tracer_dose || '')'';
          END IF;
          IF (current_row.tracer_specificactivity IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_specificactivity:float)=('' || current_row.tracer_specificactivity || '')'';
          END IF;
          IF (current_row.tracer_totalmass_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_totalmass_units:string)=('' || REPLACE(REPLACE(current_row.tracer_totalmass_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_totalmass IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_totalmass:float)=('' || current_row.tracer_totalmass || '')'';
          END IF;
          IF (current_row.tracer_intermediate_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_intermediate_units:string)=('' || REPLACE(REPLACE(current_row.tracer_intermediate_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_intermediate IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_intermediate:float)=('' || current_row.tracer_intermediate || '')'';
          END IF;
          IF (current_row.tracer_isotope_half_life IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_isotope_half_life:float)=('' || current_row.tracer_isotope_half_life || '')'';
          END IF;
          IF (current_row.tracer_isotope IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_isotope:string)=('' || REPLACE(REPLACE(current_row.tracer_isotope,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_transmissions IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_transmissions:integer)=('' || current_row.tracer_transmissions || '')'';
          END IF;
          IF (current_row.tracer_transmissions_starttime IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_transmissions_starttime:dateTime)=('' || current_row.tracer_transmissions_starttime || '')'';
          END IF;
          IF (current_row.tracer_name IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_name:string)=('' || REPLACE(REPLACE(current_row.tracer_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_starttime IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_starttime:dateTime)=('' || current_row.tracer_starttime || '')'';
          END IF;
          IF (current_row.start_time IS NOT NULL) THEN 
              fullText := fullText || ''(start_time:dateTime)=('' || current_row.start_time || '')'';
          END IF;
          IF (current_row.start_time_scan IS NOT NULL) THEN 
              fullText := fullText || ''(start_time_scan:dateTime)=('' || current_row.start_time_scan || '')'';
          END IF;
          IF (current_row.start_time_injection IS NOT NULL) THEN 
              fullText := fullText || ''(start_time_injection:dateTime)=('' || current_row.start_time_injection || '')'';
          END IF;
          IF (current_row.blood_glucose IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose:float)=('' || current_row.blood_glucose || '')'';
          END IF;
          IF (current_row.blood_glucose_units IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose_units:string)=('' || REPLACE(REPLACE(current_row.blood_glucose_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.blood_glucose_time IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose_time:dateTime)=('' || current_row.blood_glucose_time || '')'';
          END IF;
        IF ((current_row.petSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(petsessiondata_info:integer)=('' || current_row.petsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petSessionData_meta_data(current_row.petSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(petsessiondata_info_petsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_resourceSeries_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:resourceSeries_history)('';
      FOR current_row IN SELECT * FROM xnat_resourceSeries_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractResource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_abstractResource_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(abstractresource_abstractresource:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.path IS NOT NULL) THEN 
              fullText := fullText || ''(path:string)=('' || REPLACE(REPLACE(current_row.path,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pattern IS NOT NULL) THEN 
              fullText := fullText || ''(pattern:string)=('' || REPLACE(REPLACE(current_row.pattern,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.count IS NOT NULL) THEN 
              fullText := fullText || ''(count:integer)=('' || current_row.count || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.format IS NOT NULL) THEN 
              fullText := fullText || ''(format:string)=('' || REPLACE(REPLACE(current_row.format,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.content IS NOT NULL) THEN 
              fullText := fullText || ''(content:string)=('' || REPLACE(REPLACE(current_row.content,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.cachepath IS NOT NULL) THEN 
              fullText := fullText || ''(cachepath:string)=('' || REPLACE(REPLACE(current_row.cachepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.resourceSeries_info IS NOT NULL)) THEN
            fullText := fullText || ''(resourceseries_info:integer)=('' || current_row.resourceseries_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_resourceSeries_meta_data(current_row.resourceSeries_info, child_count,$3,false,false);
              fullText := fullText || ''(resourceseries_info_resourceseries_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_resourceSeries_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      FOR current_row IN SELECT * FROM xnat_resourceSeries_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractResource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version
           	LOOP
           	   tempText := i_xnat_abstractResource_history(ext_row.history_id, child_count,$3,false,false);
 RETURN tempText;
           	END LOOP;
           END;
        END IF;
      END LOOP;
      fullText:= ie_xnat_resourceSeries_history( $1, $2,$3,$4,$5);
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_rtImageScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rtImageScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_rtImageScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.rtImageScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(rtimagescandata_info:integer)=('' || current_row.rtimagescandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_rtImageScanData_meta_data(current_row.rtImageScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(rtimagescandata_info_rtimagescandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_fieldDefinitionGroup_field_possibleValue_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:fieldDefinitionGroup_field_possibleValue_history)('';
      FOR current_row IN SELECT * FROM xnat_fieldDefinitionGroup_field_possibleValue_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.possiblevalue IS NOT NULL) THEN 
              fullText := fullText || ''(possiblevalue:string)=('' || REPLACE(REPLACE(current_row.possiblevalue,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.display IS NOT NULL) THEN 
              fullText := fullText || ''(display:string)=('' || REPLACE(REPLACE(current_row.display,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.fieldDefinitionGroup_field_possibleValue_info IS NOT NULL)) THEN
            fullText := fullText || ''(fielddefinitiongroup_field_possiblevalue_info:integer)=('' || current_row.fielddefinitiongroup_field_possiblevalue_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_field_possibleValue_meta_data(current_row.fieldDefinitionGroup_field_possibleValue_info, child_count,$3,false,false);
              fullText := fullText || ''(fielddefinitiongroup_field_possiblevalue_info_fielddefinitiongroup_field_possiblevalue_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field IS NOT NULL)) THEN
            fullText := fullText || ''(possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field:integer)=('' || current_row.possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field || '')'';
        END IF;
          IF (current_row.xnat_fielddefinitiongroup_field_possiblevalue_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_fielddefinitiongroup_field_possiblevalue_id:integer)=('' || current_row.xnat_fielddefinitiongroup_field_possiblevalue_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_rtImageScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rtImageScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_rtImageScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xaScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xaScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_xaScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.parameters_pixelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelres_units:string)=('' || REPLACE(REPLACE(current_row.parameters_pixelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_pixelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelres_x:integer)=('' || current_row.parameters_pixelres_x || '')'';
          END IF;
          IF (current_row.parameters_pixelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelres_y:integer)=('' || current_row.parameters_pixelres_y || '')'';
          END IF;
          IF (current_row.parameters_orientation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_orientation:string)=('' || REPLACE(REPLACE(current_row.parameters_orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_fov_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_x:integer)=('' || current_row.parameters_fov_x || '')'';
          END IF;
          IF (current_row.parameters_fov_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_y:integer)=('' || current_row.parameters_fov_y || '')'';
          END IF;
          IF (current_row.parameters_imagetype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_imagetype:string)=('' || REPLACE(REPLACE(current_row.parameters_imagetype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_options IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_options:string)=('' || REPLACE(REPLACE(current_row.parameters_options,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_derivation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_derivation:string)=('' || REPLACE(REPLACE(current_row.parameters_derivation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.parameters_contrastbolus_xnat_contrastbolus_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_contrastbolus_xnat_contrastbolus_id:integer)=('' || current_row.parameters_contrastbolus_xnat_contrastbolus_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_contrastBolus_history WHERE  xnat_contrastbolus_id=current_row.parameters_contrastbolus_xnat_contrastbolus_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_contrastBolus_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_contrastbolus_contrastbolus:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF ((current_row.xaScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xascandata_info:integer)=('' || current_row.xascandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xaScanData_meta_data(current_row.xaScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(xascandata_info_xascandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_session_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_session_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_session_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_session( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_session)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_session WHERE  xnat_studyprotocol_session_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.studyProtocol_session_info IS NOT NULL)) THEN
            fullText := fullText || ''(studyprotocol_session_info:integer)=('' || current_row.studyprotocol_session_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_session_meta_data(current_row.studyProtocol_session_info, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_session_info_studyprotocol_session_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.imagesessiontypes_session_xnat__xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(imagesessiontypes_session_xnat__xnat_abstractprotocol_id:integer)=('' || current_row.imagesessiontypes_session_xnat__xnat_abstractprotocol_id || '')'';
        END IF;
          IF (current_row.xnat_studyprotocol_session_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_studyprotocol_session_id:integer)=('' || current_row.xnat_studyprotocol_session_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_studyProtocol_session( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_studyProtocol_session.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_studyProtocol_session LEFT JOIN xnat_studyProtocol_session_meta_data meta ON xnat_studyProtocol_session.studyProtocol_session_info=meta.meta_data_id WHERE  xnat_studyprotocol_session_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_studyProtocol_session_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_studyProtocol_session( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_studyProtocol_session.*, meta.meta_data_id FROM xnat_studyProtocol_session LEFT JOIN xnat_studyProtocol_session_meta_data meta ON xnat_studyProtocol_session.studyProtocol_session_info=meta.meta_data_id WHERE  xnat_studyprotocol_session_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:studyProtocol/imageSessionTypes/session
        IF ((current_row.imagesessiontypes_session_xnat__xnat_abstractprotocol_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_studyProtocol(current_row.imagesessiontypes_session_xnat__xnat_abstractprotocol_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_studyProtocol_session()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_studyProtocol_session( OLD.xnat_studyprotocol_session_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_studyProtocol_session','CREATE TRIGGER a_u_xnat_studyProtocol_session  AFTER UPDATE OR DELETE ON xnat_studyProtocol_session FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_studyProtocol_session()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_imageSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_imageSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_subjectAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_regionResource_history WHERE session_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_regionresource_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_regionResource_history( parent_row.xnat_regionresource_id, child_count,$3,false,false);
              fullText := fullText || ''(session_id_regionresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.scanner IS NOT NULL) THEN 
              fullText := fullText || ''(scanner:string)=('' || REPLACE(REPLACE(current_row.scanner,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.scanner_manufacturer IS NOT NULL) THEN 
              fullText := fullText || ''(scanner_manufacturer:string)=('' || REPLACE(REPLACE(current_row.scanner_manufacturer,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.scanner_model IS NOT NULL) THEN 
              fullText := fullText || ''(scanner_model:string)=('' || REPLACE(REPLACE(current_row.scanner_model,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.operator IS NOT NULL) THEN 
              fullText := fullText || ''(operator:string)=('' || REPLACE(REPLACE(current_row.operator,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.prearchivepath IS NOT NULL) THEN 
              fullText := fullText || ''(prearchivepath:string)=('' || REPLACE(REPLACE(current_row.prearchivepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageScanData_history WHERE image_session_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_imagescandata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageScanData_history( parent_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(image_session_id_imagescandata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_reconstructedImageData_history WHERE image_session_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_reconstructedimagedata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_reconstructedImageData_history( parent_row.xnat_reconstructedimagedata_id, child_count,$3,false,false);
              fullText := fullText || ''(image_session_id_reconstructedimagedata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageAssessorData_history WHERE imageSession_ID=current_row.id AND xft_version=current_row.xft_version ORDER BY id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageAssessorData_history( parent_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesession_id_imageassessordata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.dcmaccessionnumber IS NOT NULL) THEN 
              fullText := fullText || ''(dcmaccessionnumber:string)=('' || REPLACE(REPLACE(current_row.dcmaccessionnumber,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmpatientid IS NOT NULL) THEN 
              fullText := fullText || ''(dcmpatientid:string)=('' || REPLACE(REPLACE(current_row.dcmpatientid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmpatientname IS NOT NULL) THEN 
              fullText := fullText || ''(dcmpatientname:string)=('' || REPLACE(REPLACE(current_row.dcmpatientname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmpatientbirthdate IS NOT NULL) THEN 
              fullText := fullText || ''(dcmpatientbirthdate:date)=('' || current_row.dcmpatientbirthdate || '')'';
          END IF;
          IF (current_row.session_type IS NOT NULL) THEN 
              fullText := fullText || ''(session_type:string)=('' || REPLACE(REPLACE(current_row.session_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modality IS NOT NULL) THEN 
              fullText := fullText || ''(modality:string)=('' || REPLACE(REPLACE(current_row.modality,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.uid IS NOT NULL) THEN 
              fullText := fullText || ''(uid:string)=('' || REPLACE(REPLACE(current_row.uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.imageSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(imagesessiondata_info:integer)=('' || current_row.imagesessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageSessionData_meta_data(current_row.imageSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_info_imagesessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      FOR current_row IN SELECT * FROM xnat_imageSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
           	   tempText := i_xnat_subjectAssessorData_history(ext_row.history_id, child_count,$3,false,false);
 RETURN tempText;
           	END LOOP;
           END;
        END IF;
      END LOOP;
      fullText:= ie_xnat_imageSessionData_history( $1, $2,$3,$4,$5);
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_segScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:segScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_segScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.segScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(segscandata_info:integer)=('' || current_row.segscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_segScanData_meta_data(current_row.segScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(segscandata_info_segscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ecgScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ecgScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_ecgScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.ecgScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ecgscandata_info:integer)=('' || current_row.ecgscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ecgScanData_meta_data(current_row.ecgScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(ecgscandata_info_ecgscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_gmSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.gmSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(gmsessiondata_info:integer)=('' || current_row.gmsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_gmSessionData_meta_data(current_row.gmSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(gmsessiondata_info_gmsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_srScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:srScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_srScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.srScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(srscandata_info:integer)=('' || current_row.srscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_srScanData_meta_data(current_row.srScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(srscandata_info_srscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_rfScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rfScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_rfScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.rfScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(rfscandata_info:integer)=('' || current_row.rfscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_rfScanData_meta_data(current_row.rfScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(rfscandata_info_rfscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmvSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmvSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_gmvSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_resource_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:resource_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_resource_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xaSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xaSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_xaSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_qcScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_rfScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rfScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_rfScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmvScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmvScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_gmvScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_rfSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rfSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_rfSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectParticipant_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectParticipant_history)('';
      FOR current_row IN SELECT * FROM xnat_projectParticipant_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.subject_id IS NOT NULL) THEN 
              fullText := fullText || ''(subject_id:string)=('' || REPLACE(REPLACE(current_row.subject_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row._group IS NOT NULL) THEN 
              fullText := fullText || ''(_group:string)=('' || REPLACE(REPLACE(current_row._group,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.projectParticipant_info IS NOT NULL)) THEN
            fullText := fullText || ''(projectparticipant_info:integer)=('' || current_row.projectparticipant_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectParticipant_meta_data(current_row.projectParticipant_info, child_count,$3,false,false);
              fullText := fullText || ''(projectparticipant_info_projectparticipant_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_projectparticipant_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_projectparticipant_id:integer)=('' || current_row.xnat_projectparticipant_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_experimentData_field_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:experimentData_field_history)('';
      FOR current_row IN SELECT * FROM xnat_experimentData_field_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.field IS NOT NULL) THEN 
              fullText := fullText || ''(field:string)=('' || REPLACE(REPLACE(current_row.field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.experimentData_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(experimentdata_field_info:integer)=('' || current_row.experimentdata_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_experimentData_field_meta_data(current_row.experimentData_field_info, child_count,$3,false,false);
              fullText := fullText || ''(experimentdata_field_info_experimentdata_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fields_field_xnat_experimentDat_id IS NOT NULL)) THEN
            fullText := fullText || ''(fields_field_xnat_experimentdat_id:string)=('' || current_row.fields_field_xnat_experimentdat_id || '')'';
        END IF;
          IF (current_row.xnat_experimentdata_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_experimentdata_field_id:integer)=('' || current_row.xnat_experimentdata_field_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_rtSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rtSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_rtSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_epsScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:epsScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_epsScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.epsScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(epsscandata_info:integer)=('' || current_row.epsscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_epsScanData_meta_data(current_row.epsScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(epsscandata_info_epsscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_pVisitData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:pVisitData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_pVisitData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_investigatorData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:investigatorData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_investigatorData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_investigatorData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:investigatorData)('';
      FOR current_row IN SELECT * FROM xnat_investigatorData WHERE  xnat_investigatordata_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.title IS NOT NULL) THEN 
              fullText := fullText || ''(title:string)=('' || REPLACE(REPLACE(current_row.title,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.firstname IS NOT NULL) THEN 
              fullText := fullText || ''(firstname:string)=('' || REPLACE(REPLACE(current_row.firstname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.lastname IS NOT NULL) THEN 
              fullText := fullText || ''(lastname:string)=('' || REPLACE(REPLACE(current_row.lastname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.institution IS NOT NULL) THEN 
              fullText := fullText || ''(institution:string)=('' || REPLACE(REPLACE(current_row.institution,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.department IS NOT NULL) THEN 
              fullText := fullText || ''(department:string)=('' || REPLACE(REPLACE(current_row.department,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.email IS NOT NULL) THEN 
              fullText := fullText || ''(email:string)=('' || REPLACE(REPLACE(current_row.email,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.phone IS NOT NULL) THEN 
              fullText := fullText || ''(phone:string)=('' || REPLACE(REPLACE(current_row.phone,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.investigatorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(investigatordata_info:integer)=('' || current_row.investigatordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_investigatorData_meta_data(current_row.investigatorData_info, child_count,$3,false,false);
              fullText := fullText || ''(investigatordata_info_investigatordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_investigatordata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_investigatordata_id:integer)=('' || current_row.xnat_investigatordata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_investigatorData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_investigatorData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_investigatorData LEFT JOIN xnat_investigatorData_meta_data meta ON xnat_investigatorData.investigatorData_info=meta.meta_data_id WHERE  xnat_investigatordata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_investigatorData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_investigatorData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:investigatorData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_investigatorData.*, meta.meta_data_id FROM xnat_investigatorData LEFT JOIN xnat_investigatorData_meta_data meta ON xnat_investigatorData.investigatorData_info=meta.meta_data_id WHERE  xnat_investigatordata_id=$1
      LOOP
         UPDATE xnat_investigatorData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION xnat:projectData/PI
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_projectData WHERE pi_xnat_investigatordata_id=current_row.xnat_investigatordata_id
        LOOP
        PERFORM update_ls_xnat_projectData( parent_row.id, $2);
        END LOOP;
        END;

        --PROCESS MAPPING TABLE RELATION xnat:projectData/investigators/investigator
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_projectData_investigator WHERE  xnat_investigatorData_xnat_investigatordata_id=current_row.xnat_investigatordata_id
           LOOP 
               PERFORM update_ls_xnat_projectData( mapping_row.xnat_projectData_id, $2);
           END LOOP; 
        END; 

        --PROCESS SUPERIOR RELATION xnat:subjectData/investigator
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectData WHERE investigator_xnat_investigatordata_id=current_row.xnat_investigatordata_id
        LOOP
        PERFORM update_ls_xnat_subjectData( parent_row.id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:experimentData/investigator
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_experimentData WHERE investigator_xnat_investigatordata_id=current_row.xnat_investigatordata_id
        LOOP
        PERFORM update_ls_xnat_experimentData( parent_row.id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_investigatorData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_investigatorData( OLD.xnat_investigatordata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_investigatorData','CREATE TRIGGER a_u_xnat_investigatorData  AFTER UPDATE OR DELETE ON xnat_investigatorData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_investigatorData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_crScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:crScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_crScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcvScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcvScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_xcvScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.xcvScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xcvscandata_info:integer)=('' || current_row.xcvscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xcvScanData_meta_data(current_row.xcvScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(xcvscandata_info_xcvscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_regionResource_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:regionResource_history)('';
      FOR current_row IN SELECT * FROM xnat_regionResource_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.file_xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(file_xnat_abstractresource_id:integer)=('' || current_row.file_xnat_abstractresource_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_abstractResource_history WHERE  xnat_abstractresource_id=current_row.file_xnat_abstractresource_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(file_abstractresource:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF ((current_row.baseimage_xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(baseimage_xnat_abstractresource_id:integer)=('' || current_row.baseimage_xnat_abstractresource_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_abstractResource_history WHERE  xnat_abstractresource_id=current_row.baseimage_xnat_abstractresource_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(baseimage_abstractresource:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.creator_firstname IS NOT NULL) THEN 
              fullText := fullText || ''(creator_firstname:string)=('' || REPLACE(REPLACE(current_row.creator_firstname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.creator_lastname IS NOT NULL) THEN 
              fullText := fullText || ''(creator_lastname:string)=('' || REPLACE(REPLACE(current_row.creator_lastname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_regionResource_label_history WHERE subregionlabels_label_xnat_regi_xnat_regionresource_id=current_row.xnat_regionresource_id AND xft_version=current_row.xft_version ORDER BY xnat_regionresource_label_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_regionResource_label_history( parent_row.xnat_regionresource_label_id, child_count,$3,false,false);
              fullText := fullText || ''(subregionlabels_label_regionresource_label'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.hemisphere IS NOT NULL) THEN 
              fullText := fullText || ''(hemisphere:string)=('' || REPLACE(REPLACE(current_row.hemisphere,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.session_id IS NOT NULL) THEN 
              fullText := fullText || ''(session_id:string)=('' || REPLACE(REPLACE(current_row.session_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.regionResource_info IS NOT NULL)) THEN
            fullText := fullText || ''(regionresource_info:integer)=('' || current_row.regionresource_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_regionResource_meta_data(current_row.regionResource_info, child_count,$3,false,false);
              fullText := fullText || ''(regionresource_info_regionresource_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_regionresource_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_regionresource_id:integer)=('' || current_row.xnat_regionresource_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_dicomSeries_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dicomSeries_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_dicomSeries_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_resource_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:resource_history)('';
      FOR current_row IN SELECT * FROM xnat_resource_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractResource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_abstractResource_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(abstractresource_abstractresource:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.provenance_prov_process_id IS NOT NULL)) THEN
            fullText := fullText || ''(provenance_prov_process_id:integer)=('' || current_row.provenance_prov_process_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM prov_process_history WHERE  prov_process_id=current_row.provenance_prov_process_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_process_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(provenance_process:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.uri IS NOT NULL) THEN 
              fullText := fullText || ''(uri:string)=('' || REPLACE(REPLACE(current_row.uri,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.format IS NOT NULL) THEN 
              fullText := fullText || ''(format:string)=('' || REPLACE(REPLACE(current_row.format,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.content IS NOT NULL) THEN 
              fullText := fullText || ''(content:string)=('' || REPLACE(REPLACE(current_row.content,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.cachepath IS NOT NULL) THEN 
              fullText := fullText || ''(cachepath:string)=('' || REPLACE(REPLACE(current_row.cachepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.resource_info IS NOT NULL)) THEN
            fullText := fullText || ''(resource_info:integer)=('' || current_row.resource_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_resource_meta_data(current_row.resource_info, child_count,$3,false,false);
              fullText := fullText || ''(resource_info_resource_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_resource_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      FOR current_row IN SELECT * FROM xnat_resource_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractResource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version
           	LOOP
           	   tempText := i_xnat_abstractResource_history(ext_row.history_id, child_count,$3,false,false);
 RETURN tempText;
           	END LOOP;
           END;
        END IF;
      END LOOP;
      fullText:= ie_xnat_resource_history( $1, $2,$3,$4,$5);
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xa3DSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xa3DSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_xa3DSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_addField_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:addField_history)('';
      FOR current_row IN SELECT * FROM xnat_addField_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.addfield IS NOT NULL) THEN 
              fullText := fullText || ''(addfield:string)=('' || REPLACE(REPLACE(current_row.addfield,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.addField_info IS NOT NULL)) THEN
            fullText := fullText || ''(addfield_info:integer)=('' || current_row.addfield_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_addField_meta_data(current_row.addField_info, child_count,$3,false,false);
              fullText := fullText || ''(addfield_info_addfield_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_addparam_xnat_mrScan_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_addparam_xnat_mrscan_xnat_imagescandata_id:integer)=('' || current_row.parameters_addparam_xnat_mrscan_xnat_imagescandata_id || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id:integer)=('' || current_row.parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_addparam_xnat_petSca_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_addparam_xnat_petsca_xnat_imagescandata_id:integer)=('' || current_row.parameters_addparam_xnat_petsca_xnat_imagescandata_id || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_addparam_xnat_imageA_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_addparam_xnat_imagea_id:string)=('' || current_row.parameters_addparam_xnat_imagea_id || '')'';
        END IF;
          IF (current_row.xnat_addfield_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_addfield_id:integer)=('' || current_row.xnat_addfield_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_nmSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:nmSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_nmSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.nmSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(nmsessiondata_info:integer)=('' || current_row.nmsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_nmSessionData_meta_data(current_row.nmSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(nmsessiondata_info_nmsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mgSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mgSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_mgSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmvSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmvSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_gmvSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.gmvSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(gmvsessiondata_info:integer)=('' || current_row.gmvsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_gmvSessionData_meta_data(current_row.gmvSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(gmvsessiondata_info_gmvsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_segScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:segScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_segScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_epsSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:epsSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_epsSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.epsSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(epssessiondata_info:integer)=('' || current_row.epssessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_epsSessionData_meta_data(current_row.epsSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(epssessiondata_info_epssessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_dx3DCraniofacialScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dx3DCraniofacialScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_dx3DCraniofacialScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.dx3DCraniofacialScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(dx3dcraniofacialscandata_info:integer)=('' || current_row.dx3dcraniofacialscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dx3DCraniofacialScanData_meta_data(current_row.dx3DCraniofacialScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(dx3dcraniofacialscandata_info_dx3dcraniofacialscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_optScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:optScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_optScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_srScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:srScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_srScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageScanData_share_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageScanData_share_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_imageScanData_share_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageScanData_share( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageScanData_share)('';
      FOR current_row IN SELECT * FROM xnat_imageScanData_share WHERE  xnat_imagescandata_share_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.share IS NOT NULL) THEN 
              fullText := fullText || ''(share:string)=('' || REPLACE(REPLACE(current_row.share,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.imageScanData_share_info IS NOT NULL)) THEN
            fullText := fullText || ''(imagescandata_share_info:integer)=('' || current_row.imagescandata_share_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageScanData_share_meta_data(current_row.imageScanData_share_info, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_share_info_imagescandata_share_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.sharing_share_xnat_imageScanDat_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(sharing_share_xnat_imagescandat_xnat_imagescandata_id:integer)=('' || current_row.sharing_share_xnat_imagescandat_xnat_imagescandata_id || '')'';
        END IF;
          IF (current_row.xnat_imagescandata_share_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_imagescandata_share_id:integer)=('' || current_row.xnat_imagescandata_share_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_imageScanData_share( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageScanData_share.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_imageScanData_share LEFT JOIN xnat_imageScanData_share_meta_data meta ON xnat_imageScanData_share.imageScanData_share_info=meta.meta_data_id WHERE  xnat_imagescandata_share_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_imageScanData_share_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_imageScanData_share( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageScanData_share.*, meta.meta_data_id FROM xnat_imageScanData_share LEFT JOIN xnat_imageScanData_share_meta_data meta ON xnat_imageScanData_share.imageScanData_share_info=meta.meta_data_id WHERE  xnat_imagescandata_share_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:imageScanData/sharing/share
        IF ((current_row.sharing_share_xnat_imageScanDat_xnat_imagescandata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_imageScanData(current_row.sharing_share_xnat_imageScanDat_xnat_imagescandata_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_imageScanData_share()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_imageScanData_share( OLD.xnat_imagescandata_share_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_imageScanData_share','CREATE TRIGGER a_u_xnat_imageScanData_share  AFTER UPDATE OR DELETE ON xnat_imageScanData_share FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_imageScanData_share()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_demographicData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:demographicData_history)('';
      FOR current_row IN SELECT * FROM xnat_demographicData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractdemographicdata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractdemographicdata_id:integer)=('' || current_row.xnat_abstractdemographicdata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractDemographicData_history WHERE xnat_abstractdemographicdata_id=current_row.xnat_abstractdemographicdata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_abstractDemographicData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(abstractdemographicdata_abstractdemographicdata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.dob IS NOT NULL) THEN 
              fullText := fullText || ''(dob:date)=('' || current_row.dob || '')'';
          END IF;
          IF (current_row.yob IS NOT NULL) THEN 
              fullText := fullText || ''(yob:integer)=('' || current_row.yob || '')'';
          END IF;
          IF (current_row.age IS NOT NULL) THEN 
              fullText := fullText || ''(age:integer)=('' || current_row.age || '')'';
          END IF;
          IF (current_row.gender IS NOT NULL) THEN 
              fullText := fullText || ''(gender:string)=('' || REPLACE(REPLACE(current_row.gender,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.handedness IS NOT NULL) THEN 
              fullText := fullText || ''(handedness:string)=('' || REPLACE(REPLACE(current_row.handedness,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.ses IS NOT NULL) THEN 
              fullText := fullText || ''(ses:integer)=('' || current_row.ses || '')'';
          END IF;
          IF (current_row.employment IS NOT NULL) THEN 
              fullText := fullText || ''(employment:integer)=('' || current_row.employment || '')'';
          END IF;
          IF (current_row.education IS NOT NULL) THEN 
              fullText := fullText || ''(education:integer)=('' || current_row.education || '')'';
          END IF;
          IF (current_row.educationdesc IS NOT NULL) THEN 
              fullText := fullText || ''(educationdesc:string)=('' || REPLACE(REPLACE(current_row.educationdesc,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race IS NOT NULL) THEN 
              fullText := fullText || ''(race:string)=('' || REPLACE(REPLACE(current_row.race,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race2 IS NOT NULL) THEN 
              fullText := fullText || ''(race2:string)=('' || REPLACE(REPLACE(current_row.race2,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race3 IS NOT NULL) THEN 
              fullText := fullText || ''(race3:string)=('' || REPLACE(REPLACE(current_row.race3,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race4 IS NOT NULL) THEN 
              fullText := fullText || ''(race4:string)=('' || REPLACE(REPLACE(current_row.race4,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race5 IS NOT NULL) THEN 
              fullText := fullText || ''(race5:string)=('' || REPLACE(REPLACE(current_row.race5,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race6 IS NOT NULL) THEN 
              fullText := fullText || ''(race6:string)=('' || REPLACE(REPLACE(current_row.race6,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.ethnicity IS NOT NULL) THEN 
              fullText := fullText || ''(ethnicity:string)=('' || REPLACE(REPLACE(current_row.ethnicity,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.weight IS NOT NULL) THEN 
              fullText := fullText || ''(weight:float)=('' || current_row.weight || '')'';
          END IF;
          IF (current_row.weight_units IS NOT NULL) THEN 
              fullText := fullText || ''(weight_units:string)=('' || REPLACE(REPLACE(current_row.weight_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.height IS NOT NULL) THEN 
              fullText := fullText || ''(height:float)=('' || current_row.height || '')'';
          END IF;
          IF (current_row.height_units IS NOT NULL) THEN 
              fullText := fullText || ''(height_units:string)=('' || REPLACE(REPLACE(current_row.height_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.gestational_age IS NOT NULL) THEN 
              fullText := fullText || ''(gestational_age:float)=('' || current_row.gestational_age || '')'';
          END IF;
          IF (current_row.post_menstrual_age IS NOT NULL) THEN 
              fullText := fullText || ''(post_menstrual_age:float)=('' || current_row.post_menstrual_age || '')'';
          END IF;
          IF (current_row.birth_weight IS NOT NULL) THEN 
              fullText := fullText || ''(birth_weight:float)=('' || current_row.birth_weight || '')'';
          END IF;
        IF ((current_row.demographicData_info IS NOT NULL)) THEN
            fullText := fullText || ''(demographicdata_info:integer)=('' || current_row.demographicdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_demographicData_meta_data(current_row.demographicData_info, child_count,$3,false,false);
              fullText := fullText || ''(demographicdata_info_demographicdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractDemographicData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractdemographicdata_abstractdemographicdata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_esSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_esSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcAssessmentData_scan_slice_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcAssessmentData_scan_slice_history)('';
      FOR current_row IN SELECT * FROM xnat_qcAssessmentData_scan_slice_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.slicestatistics_xnat_abstractstatistics_id IS NOT NULL)) THEN
            fullText := fullText || ''(slicestatistics_xnat_abstractstatistics_id:integer)=('' || current_row.slicestatistics_xnat_abstractstatistics_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_abstractStatistics_history WHERE  xnat_abstractstatistics_id=current_row.slicestatistics_xnat_abstractstatistics_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractStatistics_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(slicestatistics_abstractstatistics:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.number IS NOT NULL) THEN 
              fullText := fullText || ''(number:string)=('' || REPLACE(REPLACE(current_row.number,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.qcAssessmentData_scan_slice_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcassessmentdata_scan_slice_info:integer)=('' || current_row.qcassessmentdata_scan_slice_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcAssessmentData_scan_slice_meta_data(current_row.qcAssessmentData_scan_slice_info, child_count,$3,false,false);
              fullText := fullText || ''(qcassessmentdata_scan_slice_info_qcassessmentdata_scan_slice_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.sliceqc_slice_xnat_qcAssessment_xnat_qcassessmentdata_scan_id IS NOT NULL)) THEN
            fullText := fullText || ''(sliceqc_slice_xnat_qcassessment_xnat_qcassessmentdata_scan_id:integer)=('' || current_row.sliceqc_slice_xnat_qcassessment_xnat_qcassessmentdata_scan_id || '')'';
        END IF;
          IF (current_row.xnat_qcassessmentdata_scan_slice_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_qcassessmentdata_scan_slice_id:integer)=('' || current_row.xnat_qcassessmentdata_scan_slice_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petmrSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petmrSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_petmrSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_otherDicomScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:otherDicomScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_otherDicomScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectVariablesData_variable_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectVariablesData_variable_history)('';
      FOR current_row IN SELECT * FROM xnat_subjectVariablesData_variable_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.variable IS NOT NULL) THEN 
              fullText := fullText || ''(variable:string)=('' || REPLACE(REPLACE(current_row.variable,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.subjectVariablesData_variable_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectvariablesdata_variable_info:integer)=('' || current_row.subjectvariablesdata_variable_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectVariablesData_variable_meta_data(current_row.subjectVariablesData_variable_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectvariablesdata_variable_info_subjectvariablesdata_variable_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.variables_variable_xnat_subject_id IS NOT NULL)) THEN
            fullText := fullText || ''(variables_variable_xnat_subject_id:string)=('' || current_row.variables_variable_xnat_subject_id || '')'';
        END IF;
          IF (current_row.xnat_subjectvariablesdata_variable_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_subjectvariablesdata_variable_id:integer)=('' || current_row.xnat_subjectvariablesdata_variable_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_eegSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:eegSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_eegSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.eegSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(eegsessiondata_info:integer)=('' || current_row.eegsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_eegSessionData_meta_data(current_row.eegSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(eegsessiondata_info_eegsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_condition_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_condition_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_condition_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_condition( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_condition)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_condition WHERE  xnat_studyprotocol_condition_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.studyProtocol_condition_info IS NOT NULL)) THEN
            fullText := fullText || ''(studyprotocol_condition_info:integer)=('' || current_row.studyprotocol_condition_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_condition_meta_data(current_row.studyProtocol_condition_info, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_condition_info_studyprotocol_condition_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.acqconditions_condition_xnat_st_xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(acqconditions_condition_xnat_st_xnat_abstractprotocol_id:integer)=('' || current_row.acqconditions_condition_xnat_st_xnat_abstractprotocol_id || '')'';
        END IF;
          IF (current_row.xnat_studyprotocol_condition_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_studyprotocol_condition_id:integer)=('' || current_row.xnat_studyprotocol_condition_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_studyProtocol_condition( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_studyProtocol_condition.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_studyProtocol_condition LEFT JOIN xnat_studyProtocol_condition_meta_data meta ON xnat_studyProtocol_condition.studyProtocol_condition_info=meta.meta_data_id WHERE  xnat_studyprotocol_condition_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_studyProtocol_condition_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_studyProtocol_condition( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_studyProtocol_condition.*, meta.meta_data_id FROM xnat_studyProtocol_condition LEFT JOIN xnat_studyProtocol_condition_meta_data meta ON xnat_studyProtocol_condition.studyProtocol_condition_info=meta.meta_data_id WHERE  xnat_studyprotocol_condition_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:studyProtocol/acqConditions/condition
        IF ((current_row.acqconditions_condition_xnat_st_xnat_abstractprotocol_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_studyProtocol(current_row.acqconditions_condition_xnat_st_xnat_abstractprotocol_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_studyProtocol_condition()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_studyProtocol_condition( OLD.xnat_studyprotocol_condition_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_studyProtocol_condition','CREATE TRIGGER a_u_xnat_studyProtocol_condition  AFTER UPDATE OR DELETE ON xnat_studyProtocol_condition FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_studyProtocol_condition()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_smSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:smSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_smSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_voiceAudioScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:voiceAudioScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_voiceAudioScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.voiceAudioScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(voiceaudioscandata_info:integer)=('' || current_row.voiceaudioscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_voiceAudioScanData_meta_data(current_row.voiceAudioScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(voiceaudioscandata_info_voiceaudioscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petAssessorData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petAssessorData_history)('';
      FOR current_row IN SELECT * FROM xnat_petAssessorData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.petAssessorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(petassessordata_info:integer)=('' || current_row.petassessordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petAssessorData_meta_data(current_row.petAssessorData_info, child_count,$3,false,false);
              fullText := fullText || ''(petassessordata_info_petassessordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xa3DScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xa3DScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_xa3DScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.xa3DScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xa3dscandata_info:integer)=('' || current_row.xa3dscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xa3DScanData_meta_data(current_row.xa3DScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(xa3dscandata_info_xa3dscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_petScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_usSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:usSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_usSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_nmScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:nmScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_nmScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_publicationResource_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:publicationResource_history)('';
      FOR current_row IN SELECT * FROM xnat_publicationResource_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractResource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_abstractResource_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(abstractresource_abstractresource:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.title IS NOT NULL) THEN 
              fullText := fullText || ''(title:string)=('' || REPLACE(REPLACE(current_row.title,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.citation IS NOT NULL) THEN 
              fullText := fullText || ''(citation:string)=('' || REPLACE(REPLACE(current_row.citation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.abstract IS NOT NULL) THEN 
              fullText := fullText || ''(abstract:string)=('' || REPLACE(REPLACE(current_row.abstract,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.commentary IS NOT NULL) THEN 
              fullText := fullText || ''(commentary:string)=('' || REPLACE(REPLACE(current_row.commentary,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.isprimary IS NOT NULL) THEN 
              fullText := fullText || ''(isprimary:integer)=('' || current_row.isprimary || '')'';
          END IF;
          IF (current_row.doi IS NOT NULL) THEN 
              fullText := fullText || ''(doi:string)=('' || REPLACE(REPLACE(current_row.doi,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pubmed IS NOT NULL) THEN 
              fullText := fullText || ''(pubmed:string)=('' || REPLACE(REPLACE(current_row.pubmed,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.medline IS NOT NULL) THEN 
              fullText := fullText || ''(medline:string)=('' || REPLACE(REPLACE(current_row.medline,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.uri IS NOT NULL) THEN 
              fullText := fullText || ''(uri:string)=('' || REPLACE(REPLACE(current_row.uri,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.other IS NOT NULL) THEN 
              fullText := fullText || ''(other:string)=('' || REPLACE(REPLACE(current_row.other,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.publicationResource_info IS NOT NULL)) THEN
            fullText := fullText || ''(publicationresource_info:integer)=('' || current_row.publicationresource_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_publicationResource_meta_data(current_row.publicationResource_info, child_count,$3,false,false);
              fullText := fullText || ''(publicationresource_info_publicationresource_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.publications_publication_xnat_p_id IS NOT NULL)) THEN
            fullText := fullText || ''(publications_publication_xnat_p_id:string)=('' || current_row.publications_publication_xnat_p_id || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_mrSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrAssessorData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrAssessorData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_mrAssessorData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_resourceCatalog_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:resourceCatalog_history)('';
      FOR current_row IN SELECT * FROM xnat_resourceCatalog_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_resource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_resource_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(resource_resource:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.resourceCatalog_info IS NOT NULL)) THEN
            fullText := fullText || ''(resourcecatalog_info:integer)=('' || current_row.resourcecatalog_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_resourceCatalog_meta_data(current_row.resourceCatalog_info, child_count,$3,false,false);
              fullText := fullText || ''(resourcecatalog_info_resourcecatalog_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_resource_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(resource_resource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_volumetricRegion_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:volumetricRegion_history)('';
      FOR current_row IN SELECT * FROM xnat_volumetricRegion_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_volumetricRegion_subregion_history WHERE subregions_subregion_xnat_volum_xnat_volumetricregion_id=current_row.xnat_volumetricregion_id AND xft_version=current_row.xft_version ORDER BY xnat_volumetricregion_subregion_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_volumetricRegion_subregion_history( parent_row.xnat_volumetricregion_subregion_id, child_count,$3,false,false);
              fullText := fullText || ''(subregions_subregion_volumetricregion_subregion'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.units IS NOT NULL) THEN 
              fullText := fullText || ''(units:string)=('' || REPLACE(REPLACE(current_row.units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.voxels IS NOT NULL) THEN 
              fullText := fullText || ''(voxels:integer)=('' || current_row.voxels || '')'';
          END IF;
          IF (current_row.hemisphere IS NOT NULL) THEN 
              fullText := fullText || ''(hemisphere:string)=('' || REPLACE(REPLACE(current_row.hemisphere,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.volumetricRegion_info IS NOT NULL)) THEN
            fullText := fullText || ''(volumetricregion_info:integer)=('' || current_row.volumetricregion_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_volumetricRegion_meta_data(current_row.volumetricRegion_info, child_count,$3,false,false);
              fullText := fullText || ''(volumetricregion_info_volumetricregion_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_volumetricregion_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_volumetricregion_id:integer)=('' || current_row.xnat_volumetricregion_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_hdSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:hdSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_hdSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.hdSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(hdsessiondata_info:integer)=('' || current_row.hdsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_hdSessionData_meta_data(current_row.hdSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(hdsessiondata_info_hdsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageResource_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageResource_history)('';
      FOR current_row IN SELECT * FROM xnat_imageResource_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_resource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_resource_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(resource_resource:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.dimensions_x IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_x:integer)=('' || current_row.dimensions_x || '')'';
          END IF;
          IF (current_row.dimensions_y IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_y:integer)=('' || current_row.dimensions_y || '')'';
          END IF;
          IF (current_row.dimensions_z IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_z:integer)=('' || current_row.dimensions_z || '')'';
          END IF;
          IF (current_row.dimensions_volumes IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_volumes:integer)=('' || current_row.dimensions_volumes || '')'';
          END IF;
          IF (current_row.voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_x:float)=('' || current_row.voxelres_x || '')'';
          END IF;
          IF (current_row.voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_y:float)=('' || current_row.voxelres_y || '')'';
          END IF;
          IF (current_row.voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_z:float)=('' || current_row.voxelres_z || '')'';
          END IF;
          IF (current_row.voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_units:string)=('' || REPLACE(REPLACE(current_row.voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.orientation IS NOT NULL) THEN 
              fullText := fullText || ''(orientation:string)=('' || REPLACE(REPLACE(current_row.orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.imageResource_info IS NOT NULL)) THEN
            fullText := fullText || ''(imageresource_info:integer)=('' || current_row.imageresource_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageResource_meta_data(current_row.imageResource_info, child_count,$3,false,false);
              fullText := fullText || ''(imageresource_info_imageresource_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_resource_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(resource_resource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_optScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:optScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_optScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.parameters_voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_units:string)=('' || REPLACE(REPLACE(current_row.parameters_voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_x:float)=('' || current_row.parameters_voxelres_x || '')'';
          END IF;
          IF (current_row.parameters_voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_y:float)=('' || current_row.parameters_voxelres_y || '')'';
          END IF;
          IF (current_row.parameters_voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_z:float)=('' || current_row.parameters_voxelres_z || '')'';
          END IF;
          IF (current_row.parameters_fov_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_x:integer)=('' || current_row.parameters_fov_x || '')'';
          END IF;
          IF (current_row.parameters_fov_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_y:integer)=('' || current_row.parameters_fov_y || '')'';
          END IF;
          IF (current_row.parameters_laterality IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_laterality:string)=('' || REPLACE(REPLACE(current_row.parameters_laterality,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_illumination_wavelength IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_illumination_wavelength:string)=('' || REPLACE(REPLACE(current_row.parameters_illumination_wavelength,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_illumination_power IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_illumination_power:string)=('' || REPLACE(REPLACE(current_row.parameters_illumination_power,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_imagetype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_imagetype:string)=('' || REPLACE(REPLACE(current_row.parameters_imagetype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmvalidation IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation:string)=('' || REPLACE(REPLACE(current_row.dcmvalidation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmvalidation_status IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation_status:integer)=('' || current_row.dcmvalidation_status || '')'';
          END IF;
        IF ((current_row.optScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(optscandata_info:integer)=('' || current_row.optscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_optScanData_meta_data(current_row.optScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(optscandata_info_optscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_regionResource_label_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:regionResource_label_history)('';
      FOR current_row IN SELECT * FROM xnat_regionResource_label_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:integer)=('' || current_row.id || '')'';
          END IF;
          IF (current_row.hemisphere IS NOT NULL) THEN 
              fullText := fullText || ''(hemisphere:string)=('' || REPLACE(REPLACE(current_row.hemisphere,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.regionResource_label_info IS NOT NULL)) THEN
            fullText := fullText || ''(regionresource_label_info:integer)=('' || current_row.regionresource_label_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_regionResource_label_meta_data(current_row.regionResource_label_info, child_count,$3,false,false);
              fullText := fullText || ''(regionresource_label_info_regionresource_label_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.subregionlabels_label_xnat_regi_xnat_regionresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(subregionlabels_label_xnat_regi_xnat_regionresource_id:integer)=('' || current_row.subregionlabels_label_xnat_regi_xnat_regionresource_id || '')'';
        END IF;
          IF (current_row.xnat_regionresource_label_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_regionresource_label_id:integer)=('' || current_row.xnat_regionresource_label_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_variable_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_variable_history)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_variable_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.studyProtocol_variable_info IS NOT NULL)) THEN
            fullText := fullText || ''(studyprotocol_variable_info:integer)=('' || current_row.studyprotocol_variable_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_variable_meta_data(current_row.studyProtocol_variable_info, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_variable_info_studyprotocol_variable_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.subjectvariables_variable_xnat__xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(subjectvariables_variable_xnat__xnat_abstractprotocol_id:integer)=('' || current_row.subjectvariables_variable_xnat__xnat_abstractprotocol_id || '')'';
        END IF;
          IF (current_row.xnat_studyprotocol_variable_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_studyprotocol_variable_id:integer)=('' || current_row.xnat_studyprotocol_variable_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_computationData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:computationData_history)('';
      FOR current_row IN SELECT * FROM xnat_computationData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.value IS NOT NULL) THEN 
              fullText := fullText || ''(value:string)=('' || REPLACE(REPLACE(current_row.value,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.source IS NOT NULL) THEN 
              fullText := fullText || ''(source:string)=('' || REPLACE(REPLACE(current_row.source,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.units IS NOT NULL) THEN 
              fullText := fullText || ''(units:string)=('' || REPLACE(REPLACE(current_row.units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.computationData_info IS NOT NULL)) THEN
            fullText := fullText || ''(computationdata_info:integer)=('' || current_row.computationdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_computationData_meta_data(current_row.computationData_info, child_count,$3,false,false);
              fullText := fullText || ''(computationdata_info_computationdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.computations_datum_xnat_reconst_xnat_reconstructedimagedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(computations_datum_xnat_reconst_xnat_reconstructedimagedata_id:integer)=('' || current_row.computations_datum_xnat_reconst_xnat_reconstructedimagedata_id || '')'';
        END IF;
          IF (current_row.xnat_computationdata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_computationdata_id:integer)=('' || current_row.xnat_computationdata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_crSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:crSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_crSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.crSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(crsessiondata_info:integer)=('' || current_row.crsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_crSessionData_meta_data(current_row.crSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(crsessiondata_info_crsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ioSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ioSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_ioSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_resourceCatalog_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:resourceCatalog_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_resourceCatalog_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petQcScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petQcScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_petQcScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_xcScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.xcScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xcscandata_info:integer)=('' || current_row.xcscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xcScanData_meta_data(current_row.xcScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(xcscandata_info_xcscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_imageSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectVariablesData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectVariablesData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_subjectVariablesData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_eegScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:eegScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_eegScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ctSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ctSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_ctSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_smScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:smScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_smScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_mrScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractDemographicData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractDemographicData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_abstractDemographicData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_abstractDemographicData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractDemographicData)('';
      FOR current_row IN SELECT * FROM xnat_abstractDemographicData WHERE  xnat_abstractdemographicdata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractDemographicData_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractdemographicdata_info:integer)=('' || current_row.abstractdemographicdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractDemographicData_meta_data(current_row.abstractDemographicData_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractdemographicdata_info_abstractdemographicdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_abstractdemographicdata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractdemographicdata_id:integer)=('' || current_row.xnat_abstractdemographicdata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractDemographicData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractDemographicData.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData2, table1.element_name AS xdat_meta_element3, table2.insert_date AS xnat_abstractDemographicData_meta_data10 FROM xnat_abstractDemographicData xnat_abstractDemographicData   LEFT JOIN xdat_meta_element table1 ON xnat_abstractDemographicData.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractDemographicData_meta_data table2 ON xnat_abstractDemographicData.abstractDemographicData_info=table2.meta_data_id) SEARCH  WHERE 
 ( (xnat_abstractDemographicData2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
             fullText:= ie_xnat_abstractDemographicData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''xnat:demographicData'') THEN
                fullText:= i_xnat_demographicData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_abstractDemographicData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_abstractDemographicData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractDemographicData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_abstractDemographicData LEFT JOIN xnat_abstractDemographicData_meta_data meta ON xnat_abstractDemographicData.abstractDemographicData_info=meta.meta_data_id WHERE  xnat_abstractdemographicdata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_abstractDemographicData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_abstractDemographicData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractDemographicData.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData2, table1.element_name AS xdat_meta_element3, table2.insert_date AS xnat_abstractDemographicData_meta_data10 FROM xnat_abstractDemographicData xnat_abstractDemographicData   LEFT JOIN xdat_meta_element table1 ON xnat_abstractDemographicData.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractDemographicData_meta_data table2 ON xnat_abstractDemographicData.abstractDemographicData_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_abstractDemographicData2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
            PERFORM  ae_xnat_abstractDemographicData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''xnat:demographicData'') THEN
            PERFORM  a_xnat_demographicData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_abstractDemographicData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_abstractDemographicData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractDemographicData.*, meta.meta_data_id FROM xnat_abstractDemographicData LEFT JOIN xnat_abstractDemographicData_meta_data meta ON xnat_abstractDemographicData.abstractDemographicData_info=meta.meta_data_id WHERE  xnat_abstractdemographicdata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION xnat:subjectData/demographics
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectData WHERE demographics_xnat_abstractdemographicdata_id=current_row.xnat_abstractdemographicdata_id
        LOOP
        PERFORM update_ls_xnat_subjectData( parent_row.id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_abstractDemographicData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractDemographicData.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData2, table1.element_name AS xdat_meta_element3, table2.insert_date AS xnat_abstractDemographicData_meta_data10 FROM xnat_abstractDemographicData xnat_abstractDemographicData   LEFT JOIN xdat_meta_element table1 ON xnat_abstractDemographicData.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractDemographicData_meta_data table2 ON xnat_abstractDemographicData.abstractDemographicData_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_abstractDemographicData2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_abstractDemographicData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''xnat:demographicData'') THEN
                PERFORM update_ls_xnat_demographicData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element3;
                    PERFORM update_ls_ext_xnat_abstractDemographicData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_abstractDemographicData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_abstractDemographicData( OLD.xnat_abstractdemographicdata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_abstractDemographicData','CREATE TRIGGER a_u_xnat_abstractDemographicData  AFTER UPDATE OR DELETE ON xnat_abstractDemographicData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_abstractDemographicData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcScanData_field_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcScanData_field_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_qcScanData_field_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcScanData_field( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcScanData_field)('';
      FOR current_row IN SELECT * FROM xnat_qcScanData_field WHERE  xnat_qcscandata_field_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.field IS NOT NULL) THEN 
              fullText := fullText || ''(field:string)=('' || REPLACE(REPLACE(current_row.field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.qcScanData_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcscandata_field_info:integer)=('' || current_row.qcscandata_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcScanData_field_meta_data(current_row.qcScanData_field_info, child_count,$3,false,false);
              fullText := fullText || ''(qcscandata_field_info_qcscandata_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fields_field_xnat_qcScanData_xnat_qcscandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(fields_field_xnat_qcscandata_xnat_qcscandata_id:integer)=('' || current_row.fields_field_xnat_qcscandata_xnat_qcscandata_id || '')'';
        END IF;
          IF (current_row.xnat_qcscandata_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_qcscandata_field_id:integer)=('' || current_row.xnat_qcscandata_field_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_qcScanData_field( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcScanData_field.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_qcScanData_field LEFT JOIN xnat_qcScanData_field_meta_data meta ON xnat_qcScanData_field.qcScanData_field_info=meta.meta_data_id WHERE  xnat_qcscandata_field_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_qcScanData_field_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_qcScanData_field( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcScanData_field.*, meta.meta_data_id FROM xnat_qcScanData_field LEFT JOIN xnat_qcScanData_field_meta_data meta ON xnat_qcScanData_field.qcScanData_field_info=meta.meta_data_id WHERE  xnat_qcscandata_field_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:qcScanData/fields/field
        IF ((current_row.fields_field_xnat_qcScanData_xnat_qcscandata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_qcScanData(current_row.fields_field_xnat_qcScanData_xnat_qcscandata_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_qcScanData_field()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_qcScanData_field( OLD.xnat_qcscandata_field_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_qcScanData_field','CREATE TRIGGER a_u_xnat_qcScanData_field  AFTER UPDATE OR DELETE ON xnat_qcScanData_field FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_qcScanData_field()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_qcScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcScanData)('';
      FOR current_row IN SELECT * FROM xnat_qcScanData WHERE  xnat_qcscandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.imagescan_id IS NOT NULL) THEN 
              fullText := fullText || ''(imagescan_id:string)=('' || REPLACE(REPLACE(current_row.imagescan_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rater IS NOT NULL) THEN 
              fullText := fullText || ''(rater:string)=('' || REPLACE(REPLACE(current_row.rater,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.coverage IS NOT NULL) THEN 
              fullText := fullText || ''(coverage:string)=('' || REPLACE(REPLACE(current_row.coverage,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.motion IS NOT NULL) THEN 
              fullText := fullText || ''(motion:string)=('' || REPLACE(REPLACE(current_row.motion,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.otherimageartifacts IS NOT NULL) THEN 
              fullText := fullText || ''(otherimageartifacts:string)=('' || REPLACE(REPLACE(current_row.otherimageartifacts,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.comments IS NOT NULL) THEN 
              fullText := fullText || ''(comments:string)=('' || REPLACE(REPLACE(current_row.comments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pass IS NOT NULL) THEN 
              fullText := fullText || ''(pass:string)=('' || REPLACE(REPLACE(current_row.pass,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rating IS NOT NULL) THEN 
              fullText := fullText || ''(rating:string)=('' || REPLACE(REPLACE(current_row.rating,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rating_scale IS NOT NULL) THEN 
              fullText := fullText || ''(rating_scale:string)=('' || REPLACE(REPLACE(current_row.rating_scale,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcScanData_field WHERE fields_field_xnat_qcScanData_xnat_qcscandata_id=current_row.xnat_qcscandata_id ORDER BY xnat_qcscandata_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcScanData_field( parent_row.xnat_qcscandata_field_id, child_count,$3,false,false);
              fullText := fullText || ''(fields_field_qcscandata_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.qcScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcscandata_info:integer)=('' || current_row.qcscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcScanData_meta_data(current_row.qcScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(qcscandata_info_qcscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.scans_scan_xnat_qcManualAssesso_id IS NOT NULL)) THEN
            fullText := fullText || ''(scans_scan_xnat_qcmanualassesso_id:string)=('' || current_row.scans_scan_xnat_qcmanualassesso_id || '')'';
        END IF;
          IF (current_row.xnat_qcscandata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_qcscandata_id:integer)=('' || current_row.xnat_qcscandata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_qcScanData.xnat_qcscandata_id AS xnat_qcScanData11, table1.element_name AS xdat_meta_element30, table2.insert_date AS xnat_qcScanData_meta_data37 FROM xnat_qcScanData xnat_qcScanData   LEFT JOIN xdat_meta_element table1 ON xnat_qcScanData.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_qcScanData_meta_data table2 ON xnat_qcScanData.qcScanData_info=table2.meta_data_id) SEARCH  WHERE 
 ( (xnat_qcScanData11=$1))
      LOOP
         IF (current_row.xdat_meta_element30 IS NULL) THEN 
             fullText:= ie_xnat_qcScanData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element30=''xnat:mrQcScanData'') THEN
                fullText:= i_xnat_mrQcScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element30=''xnat:petQcScanData'') THEN
                fullText:= i_xnat_petQcScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element30=''xnat:otherQcScanData'') THEN
                fullText:= i_xnat_otherQcScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_qcScanData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_qcScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_qcScanData LEFT JOIN xnat_qcScanData_meta_data meta ON xnat_qcScanData.qcScanData_info=meta.meta_data_id WHERE  xnat_qcscandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_qcScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcScanData_field WHERE fields_field_xnat_qcScanData_xnat_qcscandata_id=current_row.xnat_qcscandata_id
        LOOP
          PERFORM  a_xnat_qcScanData_field( parent_row.xnat_qcscandata_field_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_qcScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_qcScanData.xnat_qcscandata_id AS xnat_qcScanData11, table1.element_name AS xdat_meta_element30, table2.insert_date AS xnat_qcScanData_meta_data37 FROM xnat_qcScanData xnat_qcScanData   LEFT JOIN xdat_meta_element table1 ON xnat_qcScanData.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_qcScanData_meta_data table2 ON xnat_qcScanData.qcScanData_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_qcScanData11=$1))
      LOOP
         IF (current_row.xdat_meta_element30 IS NULL) THEN 
            PERFORM  ae_xnat_qcScanData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element30=''xnat:mrQcScanData'') THEN
            PERFORM  a_xnat_mrQcScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element30=''xnat:petQcScanData'') THEN
            PERFORM  a_xnat_petQcScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element30=''xnat:otherQcScanData'') THEN
            PERFORM  a_xnat_otherQcScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_qcScanData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_qcScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcScanData.*, meta.meta_data_id FROM xnat_qcScanData LEFT JOIN xnat_qcScanData_meta_data meta ON xnat_qcScanData.qcScanData_info=meta.meta_data_id WHERE  xnat_qcscandata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:qcManualAssessorData/scans/scan
        IF ((current_row.scans_scan_xnat_qcManualAssesso_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_qcManualAssessorData(current_row.scans_scan_xnat_qcManualAssesso_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_qcScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_qcScanData.xnat_qcscandata_id AS xnat_qcScanData11, table1.element_name AS xdat_meta_element30, table2.insert_date AS xnat_qcScanData_meta_data37 FROM xnat_qcScanData xnat_qcScanData   LEFT JOIN xdat_meta_element table1 ON xnat_qcScanData.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_qcScanData_meta_data table2 ON xnat_qcScanData.qcScanData_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_qcScanData11=$1))
      LOOP
         IF (current_row.xdat_meta_element30 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_qcScanData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element30=''xnat:mrQcScanData'') THEN
                PERFORM update_ls_xnat_mrQcScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element30=''xnat:petQcScanData'') THEN
                PERFORM update_ls_xnat_petQcScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element30=''xnat:otherQcScanData'') THEN
                PERFORM update_ls_xnat_otherQcScanData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element30;
                    PERFORM update_ls_ext_xnat_qcScanData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_qcScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_qcScanData( OLD.xnat_qcscandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_qcScanData','CREATE TRIGGER a_u_xnat_qcScanData  AFTER UPDATE OR DELETE ON xnat_qcScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_qcScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_datatypeProtocol_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:datatypeProtocol_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_datatypeProtocol_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ctScanData_focalSpot_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ctScanData_focalSpot_history)('';
      FOR current_row IN SELECT * FROM xnat_ctScanData_focalSpot_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.focalspot IS NOT NULL) THEN 
              fullText := fullText || ''(focalspot:float)=('' || current_row.focalspot || '')'';
          END IF;
        IF ((current_row.ctScanData_focalSpot_info IS NOT NULL)) THEN
            fullText := fullText || ''(ctscandata_focalspot_info:integer)=('' || current_row.ctscandata_focalspot_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ctScanData_focalSpot_meta_data(current_row.ctScanData_focalSpot_info, child_count,$3,false,false);
              fullText := fullText || ''(ctscandata_focalspot_info_ctscandata_focalspot_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_focalspots_focalspot_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_focalspots_focalspot_xnat_imagescandata_id:integer)=('' || current_row.parameters_focalspots_focalspot_xnat_imagescandata_id || '')'';
        END IF;
          IF (current_row.xnat_ctscandata_focalspot_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_ctscandata_focalspot_id:integer)=('' || current_row.xnat_ctscandata_focalspot_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_esvSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esvSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_esvSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.esvSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(esvsessiondata_info:integer)=('' || current_row.esvsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_esvSessionData_meta_data(current_row.esvSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(esvsessiondata_info_esvsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_history)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractprotocol_id:integer)=('' || current_row.xnat_abstractprotocol_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractProtocol_history WHERE xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_abstractProtocol_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(abstractprotocol_abstractprotocol:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_condition_history WHERE acqconditions_condition_xnat_st_xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id AND xft_version=current_row.xft_version ORDER BY xnat_studyprotocol_condition_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_condition_history( parent_row.xnat_studyprotocol_condition_id, child_count,$3,false,false);
              fullText := fullText || ''(acqconditions_condition_studyprotocol_condition'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_group_history WHERE subjectgroups_group_xnat_studyP_xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id AND xft_version=current_row.xft_version ORDER BY xnat_studyprotocol_group_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_group_history( parent_row.xnat_studyprotocol_group_id, child_count,$3,false,false);
              fullText := fullText || ''(subjectgroups_group_studyprotocol_group'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_variable_history WHERE subjectvariables_variable_xnat__xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id AND xft_version=current_row.xft_version ORDER BY xnat_studyprotocol_variable_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_variable_history( parent_row.xnat_studyprotocol_variable_id, child_count,$3,false,false);
              fullText := fullText || ''(subjectvariables_variable_studyprotocol_variable'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_session_history WHERE imagesessiontypes_session_xnat__xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id AND xft_version=current_row.xft_version ORDER BY xnat_studyprotocol_session_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_session_history( parent_row.xnat_studyprotocol_session_id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiontypes_session_studyprotocol_session'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.studyProtocol_info IS NOT NULL)) THEN
            fullText := fullText || ''(studyprotocol_info:integer)=('' || current_row.studyprotocol_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_meta_data(current_row.studyProtocol_info, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_info_studyprotocol_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractProtocol_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractprotocol_abstractprotocol:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_smSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:smSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_smSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.smSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(smsessiondata_info:integer)=('' || current_row.smsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_smSessionData_meta_data(current_row.smSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(smsessiondata_info_smsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_statisticsData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:statisticsData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_statisticsData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractResource_tag_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractResource_tag_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_abstractResource_tag_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractResource_tag( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractResource_tag)('';
      FOR current_row IN SELECT * FROM xnat_abstractResource_tag WHERE  xnat_abstractresource_tag_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.tag IS NOT NULL) THEN 
              fullText := fullText || ''(tag:string)=('' || REPLACE(REPLACE(current_row.tag,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.abstractResource_tag_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractresource_tag_info:integer)=('' || current_row.abstractresource_tag_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_tag_meta_data(current_row.abstractResource_tag_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractresource_tag_info_abstractresource_tag_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.tags_tag_xnat_abstractResource_xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(tags_tag_xnat_abstractresource_xnat_abstractresource_id:integer)=('' || current_row.tags_tag_xnat_abstractresource_xnat_abstractresource_id || '')'';
        END IF;
          IF (current_row.xnat_abstractresource_tag_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractresource_tag_id:integer)=('' || current_row.xnat_abstractresource_tag_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_abstractResource_tag( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractResource_tag.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_abstractResource_tag LEFT JOIN xnat_abstractResource_tag_meta_data meta ON xnat_abstractResource_tag.abstractResource_tag_info=meta.meta_data_id WHERE  xnat_abstractresource_tag_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_abstractResource_tag_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_abstractResource_tag( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractResource_tag.*, meta.meta_data_id FROM xnat_abstractResource_tag LEFT JOIN xnat_abstractResource_tag_meta_data meta ON xnat_abstractResource_tag.abstractResource_tag_info=meta.meta_data_id WHERE  xnat_abstractresource_tag_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:abstractResource/tags/tag
        IF ((current_row.tags_tag_xnat_abstractResource_xnat_abstractresource_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_abstractResource(current_row.tags_tag_xnat_abstractResource_xnat_abstractresource_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_abstractResource_tag()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_abstractResource_tag( OLD.xnat_abstractresource_tag_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_abstractResource_tag','CREATE TRIGGER a_u_xnat_abstractResource_tag  AFTER UPDATE OR DELETE ON xnat_abstractResource_tag FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_abstractResource_tag()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_abstractResource( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractResource)('';
      FOR current_row IN SELECT * FROM xnat_abstractResource WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.note IS NOT NULL) THEN 
              fullText := fullText || ''(note:string)=('' || REPLACE(REPLACE(current_row.note,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractResource_tag WHERE tags_tag_xnat_abstractResource_xnat_abstractresource_id=current_row.xnat_abstractresource_id ORDER BY xnat_abstractresource_tag_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_tag( parent_row.xnat_abstractresource_tag_id, child_count,$3,false,false);
              fullText := fullText || ''(tags_tag_abstractresource_tag'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.file_count IS NOT NULL) THEN 
              fullText := fullText || ''(file_count:integer)=('' || current_row.file_count || '')'';
          END IF;
          IF (current_row.file_size IS NOT NULL) THEN 
              fullText := fullText || ''(file_size:long)=('' || current_row.file_size || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractResource_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractresource_info:integer)=('' || current_row.abstractresource_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_meta_data(current_row.abstractResource_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractresource_info_abstractresource_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xnat_imageScanData_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_xnat_imagescandata_id || '')'';
        END IF;
          IF (current_row.xnat_abstractresource_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractResource( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractResource.xnat_abstractresource_id AS xnat_abstractResource6, table1.element_name AS xdat_meta_element25, table2.insert_date AS xnat_abstractResource_meta_data32 FROM xnat_abstractResource xnat_abstractResource   LEFT JOIN xdat_meta_element table1 ON xnat_abstractResource.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractResource_meta_data table2 ON xnat_abstractResource.abstractResource_info=table2.meta_data_id) SEARCH  WHERE 
 ( (xnat_abstractResource6=$1))
      LOOP
         IF (current_row.xdat_meta_element25 IS NULL) THEN 
             fullText:= ie_xnat_abstractResource( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element25=''xnat:resource'') THEN
                fullText:= ie_xnat_resource( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:imageResource'') THEN
                fullText:= i_xnat_imageResource( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:resourceSeries'') THEN
                fullText:= ie_xnat_resourceSeries( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:imageResourceSeries'') THEN
                fullText:= i_xnat_imageResourceSeries( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:dicomSeries'') THEN
                fullText:= i_xnat_dicomSeries( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:publicationResource'') THEN
                fullText:= i_xnat_publicationResource( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:resourceCatalog'') THEN
                fullText:= i_xnat_resourceCatalog( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_abstractResource( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_abstractResource( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractResource.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_abstractResource LEFT JOIN xnat_abstractResource_meta_data meta ON xnat_abstractResource.abstractResource_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_abstractResource_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractResource_tag WHERE tags_tag_xnat_abstractResource_xnat_abstractresource_id=current_row.xnat_abstractresource_id
        LOOP
          PERFORM  a_xnat_abstractResource_tag( parent_row.xnat_abstractresource_tag_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_abstractResource( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractResource.xnat_abstractresource_id AS xnat_abstractResource6, table1.element_name AS xdat_meta_element25, table2.insert_date AS xnat_abstractResource_meta_data32 FROM xnat_abstractResource xnat_abstractResource   LEFT JOIN xdat_meta_element table1 ON xnat_abstractResource.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractResource_meta_data table2 ON xnat_abstractResource.abstractResource_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_abstractResource6=$1))
      LOOP
         IF (current_row.xdat_meta_element25 IS NULL) THEN 
            PERFORM  ae_xnat_abstractResource( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element25=''xnat:resource'') THEN
            PERFORM  ae_xnat_resource( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:imageResource'') THEN
            PERFORM  a_xnat_imageResource( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:resourceSeries'') THEN
            PERFORM  ae_xnat_resourceSeries( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:imageResourceSeries'') THEN
            PERFORM  a_xnat_imageResourceSeries( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:dicomSeries'') THEN
            PERFORM  a_xnat_dicomSeries( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:publicationResource'') THEN
            PERFORM  a_xnat_publicationResource( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:resourceCatalog'') THEN
            PERFORM  a_xnat_resourceCatalog( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_abstractResource( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_abstractResource( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractResource.*, meta.meta_data_id FROM xnat_abstractResource LEFT JOIN xnat_abstractResource_meta_data meta ON xnat_abstractResource.abstractResource_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS MAPPING TABLE RELATION xnat:projectData/resources/resource
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_projectData_resource WHERE  xnat_abstractResource_xnat_abstractresource_id=current_row.xnat_abstractresource_id
           LOOP 
               PERFORM update_ls_xnat_projectData( mapping_row.xnat_projectData_id, $2);
           END LOOP; 
        END; 

        --PROCESS MAPPING TABLE RELATION xnat:subjectData/resources/resource
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_subjectData_resource WHERE  xnat_abstractResource_xnat_abstractresource_id=current_row.xnat_abstractresource_id
           LOOP 
               PERFORM update_ls_xnat_subjectData( mapping_row.xnat_subjectData_id, $2);
           END LOOP; 
        END; 

        --PROCESS MAPPING TABLE RELATION xnat:experimentData/resources/resource
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_experimentData_resource WHERE  xnat_abstractResource_xnat_abstractresource_id=current_row.xnat_abstractresource_id
           LOOP 
               PERFORM update_ls_xnat_experimentData( mapping_row.xnat_experimentData_id, $2);
           END LOOP; 
        END; 

        --PROCESS MAPPING TABLE RELATION xnat:reconstructedImageData/in/file
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM recon_in_resource WHERE  xnat_abstractResource_xnat_abstractresource_id=current_row.xnat_abstractresource_id
           LOOP 
               PERFORM update_ls_xnat_reconstructedImageData( mapping_row.xnat_reconstructedImageData_xnat_reconstructedimagedata_id, $2);
           END LOOP; 
        END; 

        --PROCESS MAPPING TABLE RELATION xnat:reconstructedImageData/out/file
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM recon_out_resource WHERE  xnat_abstractResource_xnat_abstractresource_id=current_row.xnat_abstractresource_id
           LOOP 
               PERFORM update_ls_xnat_reconstructedImageData( mapping_row.xnat_reconstructedImageData_xnat_reconstructedimagedata_id, $2);
           END LOOP; 
        END; 

        --PROCESS SUPERIOR RELATION xnat:regionResource/file
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_regionResource WHERE file_xnat_abstractresource_id=current_row.xnat_abstractresource_id
        LOOP
        PERFORM update_ls_xnat_regionResource( parent_row.xnat_regionresource_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:regionResource/baseimage
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_regionResource WHERE baseimage_xnat_abstractresource_id=current_row.xnat_abstractresource_id
        LOOP
        PERFORM update_ls_xnat_regionResource( parent_row.xnat_regionresource_id, $2);
        END LOOP;
        END;

        --PROCESS MAPPING TABLE RELATION xnat:imageAssessorData/in/file
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM img_assessor_in_resource WHERE  xnat_abstractResource_xnat_abstractresource_id=current_row.xnat_abstractresource_id
           LOOP 
               PERFORM update_ls_xnat_imageAssessorData( mapping_row.xnat_imageAssessorData_id, $2);
           END LOOP; 
        END; 

        --PROCESS MAPPING TABLE RELATION xnat:imageAssessorData/out/file
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM img_assessor_out_resource WHERE  xnat_abstractResource_xnat_abstractresource_id=current_row.xnat_abstractresource_id
           LOOP 
               PERFORM update_ls_xnat_imageAssessorData( mapping_row.xnat_imageAssessorData_id, $2);
           END LOOP; 
        END; 

        --PROCESS SUBORDINATE RELATION xnat:imageScanData/file
        IF ((current_row.xnat_imageScanData_xnat_imagescandata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_imageScanData(current_row.xnat_imageScanData_xnat_imagescandata_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_abstractResource( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractResource.xnat_abstractresource_id AS xnat_abstractResource6, table1.element_name AS xdat_meta_element25, table2.insert_date AS xnat_abstractResource_meta_data32 FROM xnat_abstractResource xnat_abstractResource   LEFT JOIN xdat_meta_element table1 ON xnat_abstractResource.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractResource_meta_data table2 ON xnat_abstractResource.abstractResource_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_abstractResource6=$1))
      LOOP
         IF (current_row.xdat_meta_element25 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_abstractResource( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element25=''xnat:resource'') THEN
                PERFORM update_ls_ext_xnat_resource( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:imageResource'') THEN
                PERFORM update_ls_xnat_imageResource( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:resourceSeries'') THEN
                PERFORM update_ls_ext_xnat_resourceSeries( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:imageResourceSeries'') THEN
                PERFORM update_ls_xnat_imageResourceSeries( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:dicomSeries'') THEN
                PERFORM update_ls_xnat_dicomSeries( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:publicationResource'') THEN
                PERFORM update_ls_xnat_publicationResource( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element25=''xnat:resourceCatalog'') THEN
                PERFORM update_ls_xnat_resourceCatalog( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element25;
                    PERFORM update_ls_ext_xnat_abstractResource( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_abstractResource()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_abstractResource( OLD.xnat_abstractresource_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_abstractResource','CREATE TRIGGER a_u_xnat_abstractResource  AFTER UPDATE OR DELETE ON xnat_abstractResource FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_abstractResource()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_resource( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:resource)('';
      FOR current_row IN SELECT * FROM xnat_resource WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource(current_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.provenance_prov_process_id IS NOT NULL)) THEN
            fullText := fullText || ''(provenance_prov_process_id:integer)=('' || current_row.provenance_prov_process_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_process(current_row.provenance_prov_process_id, child_count,$3,false,false);
              fullText := fullText || ''(provenance_process:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.uri IS NOT NULL) THEN 
              fullText := fullText || ''(uri:string)=('' || REPLACE(REPLACE(current_row.uri,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.format IS NOT NULL) THEN 
              fullText := fullText || ''(format:string)=('' || REPLACE(REPLACE(current_row.format,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.content IS NOT NULL) THEN 
              fullText := fullText || ''(content:string)=('' || REPLACE(REPLACE(current_row.content,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.cachepath IS NOT NULL) THEN 
              fullText := fullText || ''(cachepath:string)=('' || REPLACE(REPLACE(current_row.cachepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.resource_info IS NOT NULL)) THEN
            fullText := fullText || ''(resource_info:integer)=('' || current_row.resource_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_resource_meta_data(current_row.resource_info, child_count,$3,false,false);
              fullText := fullText || ''(resource_info_resource_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_resource( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.xnat_abstractresource_id AS xnat_resource0, table2.element_name AS xdat_meta_element33, table4.insert_date AS xnat_resource_meta_data109 FROM xnat_resource xnat_resource   LEFT JOIN xnat_abstractResource table0 ON xnat_resource.xnat_abstractresource_id=table0.xnat_abstractresource_id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id   LEFT JOIN xnat_resource_meta_data table4 ON xnat_resource.resource_info=table4.meta_data_id) SEARCH  WHERE 
 ( (xnat_resource0=$1))
      LOOP
         IF (current_row.xdat_meta_element33 IS NULL) THEN 
             fullText:= ie_xnat_resource( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element33=''xnat:imageResource'') THEN
                fullText:= i_xnat_imageResource( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element33=''xnat:resourceCatalog'') THEN
                fullText:= i_xnat_resourceCatalog( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_resource( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_resource( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_resource.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_resource LEFT JOIN xnat_resource_meta_data meta ON xnat_resource.resource_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_resource_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_abstractResource(current_row.xnat_abstractresource_id, $2,$3,false);
        END IF;
        IF ((current_row.provenance_prov_process_id IS NOT NULL)) THEN
          PERFORM  a_prov_process(current_row.provenance_prov_process_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_abstractResource( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_resource( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.xnat_abstractresource_id AS xnat_resource0, table2.element_name AS xdat_meta_element33, table4.insert_date AS xnat_resource_meta_data109 FROM xnat_resource xnat_resource   LEFT JOIN xnat_abstractResource table0 ON xnat_resource.xnat_abstractresource_id=table0.xnat_abstractresource_id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id   LEFT JOIN xnat_resource_meta_data table4 ON xnat_resource.resource_info=table4.meta_data_id) SEARCH WHERE 
 ( (xnat_resource0=$1))
      LOOP
         IF (current_row.xdat_meta_element33 IS NULL) THEN 
            PERFORM  ae_xnat_resource( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element33=''xnat:imageResource'') THEN
            PERFORM  a_xnat_imageResource( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element33=''xnat:resourceCatalog'') THEN
            PERFORM  a_xnat_resourceCatalog( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_resource( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_resource( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_resource.*, meta.meta_data_id FROM xnat_resource LEFT JOIN xnat_resource_meta_data meta ON xnat_resource.resource_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_abstractResource( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_resource( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.xnat_abstractresource_id AS xnat_resource0, table2.element_name AS xdat_meta_element33, table4.insert_date AS xnat_resource_meta_data109 FROM xnat_resource xnat_resource   LEFT JOIN xnat_abstractResource table0 ON xnat_resource.xnat_abstractresource_id=table0.xnat_abstractresource_id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id   LEFT JOIN xnat_resource_meta_data table4 ON xnat_resource.resource_info=table4.meta_data_id) SEARCH WHERE 
 ( (xnat_resource0=$1))
      LOOP
         IF (current_row.xdat_meta_element33 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_resource( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element33=''xnat:imageResource'') THEN
                PERFORM update_ls_xnat_imageResource( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element33=''xnat:resourceCatalog'') THEN
                PERFORM update_ls_xnat_resourceCatalog( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element33;
                    PERFORM update_ls_ext_xnat_resource( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_resource()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_resource( OLD.xnat_abstractresource_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_resource','CREATE TRIGGER a_u_xnat_resource  AFTER UPDATE OR DELETE ON xnat_resource FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_resource()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_resourceCatalog( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:resourceCatalog)('';
      FOR current_row IN SELECT * FROM xnat_resourceCatalog WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_resource(current_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(resource_resource:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.resourceCatalog_info IS NOT NULL)) THEN
            fullText := fullText || ''(resourcecatalog_info:integer)=('' || current_row.resourcecatalog_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_resourceCatalog_meta_data(current_row.resourceCatalog_info, child_count,$3,false,false);
              fullText := fullText || ''(resourcecatalog_info_resourcecatalog_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_resource( $1, child_count,$3,$4,false);
              fullText := fullText || ''(resource_resource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_resourceCatalog( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_resourceCatalog.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_resourceCatalog LEFT JOIN xnat_resourceCatalog_meta_data meta ON xnat_resourceCatalog.resourceCatalog_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_resourceCatalog_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_resource(current_row.xnat_abstractresource_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_resource( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_resourceCatalog( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:resourceCatalog'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_resourceCatalog.*, meta.meta_data_id FROM xnat_resourceCatalog LEFT JOIN xnat_resourceCatalog_meta_data meta ON xnat_resourceCatalog.resourceCatalog_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
         UPDATE xnat_resourceCatalog_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_resource( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_resourceCatalog()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_resourceCatalog( OLD.xnat_abstractresource_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_resourceCatalog','CREATE TRIGGER a_u_xnat_resourceCatalog  AFTER UPDATE OR DELETE ON xnat_resourceCatalog FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_resourceCatalog()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_volumetricRegion_subregion_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:volumetricRegion_subregion_history)('';
      FOR current_row IN SELECT * FROM xnat_volumetricRegion_subregion_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.voxels IS NOT NULL) THEN 
              fullText := fullText || ''(voxels:float)=('' || current_row.voxels || '')'';
          END IF;
        IF ((current_row.volumetricRegion_subregion_info IS NOT NULL)) THEN
            fullText := fullText || ''(volumetricregion_subregion_info:integer)=('' || current_row.volumetricregion_subregion_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_volumetricRegion_subregion_meta_data(current_row.volumetricRegion_subregion_info, child_count,$3,false,false);
              fullText := fullText || ''(volumetricregion_subregion_info_volumetricregion_subregion_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.subregions_subregion_xnat_volum_xnat_volumetricregion_id IS NOT NULL)) THEN
            fullText := fullText || ''(subregions_subregion_xnat_volum_xnat_volumetricregion_id:integer)=('' || current_row.subregions_subregion_xnat_volum_xnat_volumetricregion_id || '')'';
        END IF;
          IF (current_row.xnat_volumetricregion_subregion_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_volumetricregion_subregion_id:integer)=('' || current_row.xnat_volumetricregion_subregion_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petQcScanData_processingError_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petQcScanData_processingError_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_petQcScanData_processingError_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petQcScanData_processingError( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petQcScanData_processingError)('';
      FOR current_row IN SELECT * FROM xnat_petQcScanData_processingError WHERE  xnat_petqcscandata_processingerror_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.processingerror IS NOT NULL) THEN 
              fullText := fullText || ''(processingerror:string)=('' || REPLACE(REPLACE(current_row.processingerror,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.petQcScanData_processingError_info IS NOT NULL)) THEN
            fullText := fullText || ''(petqcscandata_processingerror_info:integer)=('' || current_row.petqcscandata_processingerror_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petQcScanData_processingError_meta_data(current_row.petQcScanData_processingError_info, child_count,$3,false,false);
              fullText := fullText || ''(petqcscandata_processingerror_info_petqcscandata_processingerror_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.processingerrors_processingerro_xnat_qcscandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(processingerrors_processingerro_xnat_qcscandata_id:integer)=('' || current_row.processingerrors_processingerro_xnat_qcscandata_id || '')'';
        END IF;
          IF (current_row.xnat_petqcscandata_processingerror_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_petqcscandata_processingerror_id:integer)=('' || current_row.xnat_petqcscandata_processingerror_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_petQcScanData_processingError( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petQcScanData_processingError.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_petQcScanData_processingError LEFT JOIN xnat_petQcScanData_processingError_meta_data meta ON xnat_petQcScanData_processingError.petQcScanData_processingError_info=meta.meta_data_id WHERE  xnat_petqcscandata_processingerror_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_petQcScanData_processingError_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_petQcScanData_processingError( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petQcScanData_processingError.*, meta.meta_data_id FROM xnat_petQcScanData_processingError LEFT JOIN xnat_petQcScanData_processingError_meta_data meta ON xnat_petQcScanData_processingError.petQcScanData_processingError_info=meta.meta_data_id WHERE  xnat_petqcscandata_processingerror_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:petQcScanData/processingErrors/processingError
        IF ((current_row.processingerrors_processingerro_xnat_qcscandata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_petQcScanData(current_row.processingerrors_processingerro_xnat_qcscandata_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_petQcScanData_processingError()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_petQcScanData_processingError( OLD.xnat_petqcscandata_processingerror_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_petQcScanData_processingError','CREATE TRIGGER a_u_xnat_petQcScanData_processingError  AFTER UPDATE OR DELETE ON xnat_petQcScanData_processingError FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_petQcScanData_processingError()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_petQcScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petQcScanData)('';
      FOR current_row IN SELECT * FROM xnat_petQcScanData WHERE  xnat_qcscandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_qcscandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_qcscandata_id:integer)=('' || current_row.xnat_qcscandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_qcScanData(current_row.xnat_qcscandata_id, child_count,$3,false,false);
              fullText := fullText || ''(qcscandata_qcscandata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.acquisition IS NOT NULL) THEN 
              fullText := fullText || ''(acquisition:string)=('' || REPLACE(REPLACE(current_row.acquisition,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.correctreconstructionalgorithm IS NOT NULL) THEN 
              fullText := fullText || ''(correctreconstructionalgorithm:string)=('' || REPLACE(REPLACE(current_row.correctreconstructionalgorithm,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.reconstructionalgorithmused IS NOT NULL) THEN 
              fullText := fullText || ''(reconstructionalgorithmused:string)=('' || REPLACE(REPLACE(current_row.reconstructionalgorithmused,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.correctiterationsandsubsets IS NOT NULL) THEN 
              fullText := fullText || ''(correctiterationsandsubsets:string)=('' || REPLACE(REPLACE(current_row.correctiterationsandsubsets,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.correctfilters IS NOT NULL) THEN 
              fullText := fullText || ''(correctfilters:string)=('' || REPLACE(REPLACE(current_row.correctfilters,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.correctslicethickness IS NOT NULL) THEN 
              fullText := fullText || ''(correctslicethickness:string)=('' || REPLACE(REPLACE(current_row.correctslicethickness,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.acceptablevoxelsize IS NOT NULL) THEN 
              fullText := fullText || ''(acceptablevoxelsize:string)=('' || REPLACE(REPLACE(current_row.acceptablevoxelsize,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.unacceptableframes IS NOT NULL) THEN 
              fullText := fullText || ''(unacceptableframes:string)=('' || REPLACE(REPLACE(current_row.unacceptableframes,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.reasonframesunacceptable IS NOT NULL) THEN 
              fullText := fullText || ''(reasonframesunacceptable:string)=('' || REPLACE(REPLACE(current_row.reasonframesunacceptable,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_petQcScanData_processingError WHERE processingerrors_processingerro_xnat_qcscandata_id=current_row.xnat_qcscandata_id ORDER BY xnat_petqcscandata_processingerror_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petQcScanData_processingError( parent_row.xnat_petqcscandata_processingerror_id, child_count,$3,false,false);
              fullText := fullText || ''(processingerrors_processingerror_petqcscandata_processingerror'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.qcoutcome IS NOT NULL) THEN 
              fullText := fullText || ''(qcoutcome:string)=('' || REPLACE(REPLACE(current_row.qcoutcome,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.qcoutcomereason IS NOT NULL) THEN 
              fullText := fullText || ''(qcoutcomereason:string)=('' || REPLACE(REPLACE(current_row.qcoutcomereason,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.topcutoff IS NOT NULL) THEN 
              fullText := fullText || ''(topcutoff:string)=('' || REPLACE(REPLACE(current_row.topcutoff,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.bottomcutoff IS NOT NULL) THEN 
              fullText := fullText || ''(bottomcutoff:string)=('' || REPLACE(REPLACE(current_row.bottomcutoff,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.petQcScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(petqcscandata_info:integer)=('' || current_row.petqcscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petQcScanData_meta_data(current_row.petQcScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(petqcscandata_info_petqcscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_qcScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(qcscandata_qcscandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_petQcScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petQcScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_petQcScanData LEFT JOIN xnat_petQcScanData_meta_data meta ON xnat_petQcScanData.petQcScanData_info=meta.meta_data_id WHERE  xnat_qcscandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_petQcScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_qcscandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_qcScanData(current_row.xnat_qcscandata_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_petQcScanData_processingError WHERE processingerrors_processingerro_xnat_qcscandata_id=current_row.xnat_qcscandata_id
        LOOP
          PERFORM  a_xnat_petQcScanData_processingError( parent_row.xnat_petqcscandata_processingerror_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_qcScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_petQcScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petQcScanData.*, meta.meta_data_id FROM xnat_petQcScanData LEFT JOIN xnat_petQcScanData_meta_data meta ON xnat_petQcScanData.petQcScanData_info=meta.meta_data_id WHERE  xnat_qcscandata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_qcScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_petQcScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_petQcScanData( OLD.xnat_qcscandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_petQcScanData','CREATE TRIGGER a_u_xnat_petQcScanData  AFTER UPDATE OR DELETE ON xnat_petQcScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_petQcScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_variable_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_variable_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_variable_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_variable( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_variable)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_variable WHERE  xnat_studyprotocol_variable_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.studyProtocol_variable_info IS NOT NULL)) THEN
            fullText := fullText || ''(studyprotocol_variable_info:integer)=('' || current_row.studyprotocol_variable_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_variable_meta_data(current_row.studyProtocol_variable_info, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_variable_info_studyprotocol_variable_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.subjectvariables_variable_xnat__xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(subjectvariables_variable_xnat__xnat_abstractprotocol_id:integer)=('' || current_row.subjectvariables_variable_xnat__xnat_abstractprotocol_id || '')'';
        END IF;
          IF (current_row.xnat_studyprotocol_variable_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_studyprotocol_variable_id:integer)=('' || current_row.xnat_studyprotocol_variable_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_studyProtocol_variable( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_studyProtocol_variable.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_studyProtocol_variable LEFT JOIN xnat_studyProtocol_variable_meta_data meta ON xnat_studyProtocol_variable.studyProtocol_variable_info=meta.meta_data_id WHERE  xnat_studyprotocol_variable_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_studyProtocol_variable_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_studyProtocol_variable( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_studyProtocol_variable.*, meta.meta_data_id FROM xnat_studyProtocol_variable LEFT JOIN xnat_studyProtocol_variable_meta_data meta ON xnat_studyProtocol_variable.studyProtocol_variable_info=meta.meta_data_id WHERE  xnat_studyprotocol_variable_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:studyProtocol/subjectVariables/variable
        IF ((current_row.subjectvariables_variable_xnat__xnat_abstractprotocol_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_studyProtocol(current_row.subjectvariables_variable_xnat__xnat_abstractprotocol_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_studyProtocol_variable()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_studyProtocol_variable( OLD.xnat_studyprotocol_variable_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_studyProtocol_variable','CREATE TRIGGER a_u_xnat_studyProtocol_variable  AFTER UPDATE OR DELETE ON xnat_studyProtocol_variable FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_studyProtocol_variable()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_genericData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:genericData_history)('';
      FOR current_row IN SELECT * FROM xnat_genericData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_experimentData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_experimentData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(experimentdata_experimentdata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.genericData_info IS NOT NULL)) THEN
            fullText := fullText || ''(genericdata_info:integer)=('' || current_row.genericdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_genericData_meta_data(current_row.genericData_info, child_count,$3,false,false);
              fullText := fullText || ''(genericdata_info_genericdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_experimentData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(experimentdata_experimentdata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_genericData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      FOR current_row IN SELECT * FROM xnat_genericData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_experimentData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
           	   tempText := i_xnat_experimentData_history(ext_row.history_id, child_count,$3,false,false);
 RETURN tempText;
           	END LOOP;
           END;
        END IF;
      END LOOP;
      fullText:= ie_xnat_genericData_history( $1, $2,$3,$4,$5);
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_publicationResource_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:publicationResource_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_publicationResource_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_publicationResource( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:publicationResource)('';
      FOR current_row IN SELECT * FROM xnat_publicationResource WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource(current_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.title IS NOT NULL) THEN 
              fullText := fullText || ''(title:string)=('' || REPLACE(REPLACE(current_row.title,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.citation IS NOT NULL) THEN 
              fullText := fullText || ''(citation:string)=('' || REPLACE(REPLACE(current_row.citation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.abstract IS NOT NULL) THEN 
              fullText := fullText || ''(abstract:string)=('' || REPLACE(REPLACE(current_row.abstract,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.commentary IS NOT NULL) THEN 
              fullText := fullText || ''(commentary:string)=('' || REPLACE(REPLACE(current_row.commentary,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.isprimary IS NOT NULL) THEN 
              fullText := fullText || ''(isprimary:integer)=('' || current_row.isprimary || '')'';
          END IF;
          IF (current_row.doi IS NOT NULL) THEN 
              fullText := fullText || ''(doi:string)=('' || REPLACE(REPLACE(current_row.doi,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pubmed IS NOT NULL) THEN 
              fullText := fullText || ''(pubmed:string)=('' || REPLACE(REPLACE(current_row.pubmed,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.medline IS NOT NULL) THEN 
              fullText := fullText || ''(medline:string)=('' || REPLACE(REPLACE(current_row.medline,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.uri IS NOT NULL) THEN 
              fullText := fullText || ''(uri:string)=('' || REPLACE(REPLACE(current_row.uri,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.other IS NOT NULL) THEN 
              fullText := fullText || ''(other:string)=('' || REPLACE(REPLACE(current_row.other,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.publicationResource_info IS NOT NULL)) THEN
            fullText := fullText || ''(publicationresource_info:integer)=('' || current_row.publicationresource_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_publicationResource_meta_data(current_row.publicationResource_info, child_count,$3,false,false);
              fullText := fullText || ''(publicationresource_info_publicationresource_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.publications_publication_xnat_p_id IS NOT NULL)) THEN
            fullText := fullText || ''(publications_publication_xnat_p_id:string)=('' || current_row.publications_publication_xnat_p_id || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_publicationResource( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_publicationResource.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_publicationResource LEFT JOIN xnat_publicationResource_meta_data meta ON xnat_publicationResource.publicationResource_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_publicationResource_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_abstractResource(current_row.xnat_abstractresource_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_abstractResource( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_publicationResource( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_publicationResource.*, meta.meta_data_id FROM xnat_publicationResource LEFT JOIN xnat_publicationResource_meta_data meta ON xnat_publicationResource.publicationResource_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:projectData/publications/publication
        IF ((current_row.publications_publication_xnat_p_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_projectData(current_row.publications_publication_xnat_p_id, $2);
        END IF;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_abstractResource( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_publicationResource()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_publicationResource( OLD.xnat_abstractresource_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_publicationResource','CREATE TRIGGER a_u_xnat_publicationResource  AFTER UPDATE OR DELETE ON xnat_publicationResource FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_publicationResource()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_mgScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mgScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_mgScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.mgScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mgscandata_info:integer)=('' || current_row.mgscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mgScanData_meta_data(current_row.mgScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(mgscandata_info_mgscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_dx3DCraniofacialSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dx3DCraniofacialSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_dx3DCraniofacialSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.dx3DCraniofacialSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(dx3dcraniofacialsessiondata_info:integer)=('' || current_row.dx3dcraniofacialsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dx3DCraniofacialSessionData_meta_data(current_row.dx3DCraniofacialSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(dx3dcraniofacialsessiondata_info_dx3dcraniofacialsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_esvScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esvScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_esvScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xa3DScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xa3DScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_xa3DScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrQcScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrQcScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_mrQcScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrQcScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrQcScanData)('';
      FOR current_row IN SELECT * FROM xnat_mrQcScanData WHERE  xnat_qcscandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_qcscandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_qcscandata_id:integer)=('' || current_row.xnat_qcscandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_qcScanData(current_row.xnat_qcscandata_id, child_count,$3,false,false);
              fullText := fullText || ''(qcscandata_qcscandata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.blurring IS NOT NULL) THEN 
              fullText := fullText || ''(blurring:string)=('' || REPLACE(REPLACE(current_row.blurring,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.flow IS NOT NULL) THEN 
              fullText := fullText || ''(flow:string)=('' || REPLACE(REPLACE(current_row.flow,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.imagecontrast IS NOT NULL) THEN 
              fullText := fullText || ''(imagecontrast:string)=('' || REPLACE(REPLACE(current_row.imagecontrast,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.inhomogeneity IS NOT NULL) THEN 
              fullText := fullText || ''(inhomogeneity:string)=('' || REPLACE(REPLACE(current_row.inhomogeneity,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.wrap IS NOT NULL) THEN 
              fullText := fullText || ''(wrap:string)=('' || REPLACE(REPLACE(current_row.wrap,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.susceptibility IS NOT NULL) THEN 
              fullText := fullText || ''(susceptibility:string)=('' || REPLACE(REPLACE(current_row.susceptibility,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.interpacmotion IS NOT NULL) THEN 
              fullText := fullText || ''(interpacmotion:string)=('' || REPLACE(REPLACE(current_row.interpacmotion,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.mrQcScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mrqcscandata_info:integer)=('' || current_row.mrqcscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mrQcScanData_meta_data(current_row.mrQcScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(mrqcscandata_info_mrqcscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_qcScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(qcscandata_qcscandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_mrQcScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mrQcScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_mrQcScanData LEFT JOIN xnat_mrQcScanData_meta_data meta ON xnat_mrQcScanData.mrQcScanData_info=meta.meta_data_id WHERE  xnat_qcscandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_mrQcScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_qcscandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_qcScanData(current_row.xnat_qcscandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_qcScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_mrQcScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mrQcScanData.*, meta.meta_data_id FROM xnat_mrQcScanData LEFT JOIN xnat_mrQcScanData_meta_data meta ON xnat_mrQcScanData.mrQcScanData_info=meta.meta_data_id WHERE  xnat_qcscandata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_qcScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_mrQcScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_mrQcScanData( OLD.xnat_qcscandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_mrQcScanData','CREATE TRIGGER a_u_xnat_mrQcScanData  AFTER UPDATE OR DELETE ON xnat_mrQcScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_mrQcScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcvScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcvScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_xcvScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_reconstructedImageData_scanID_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:reconstructedImageData_scanID_history)('';
      FOR current_row IN SELECT * FROM xnat_reconstructedImageData_scanID_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.scanid IS NOT NULL) THEN 
              fullText := fullText || ''(scanid:string)=('' || REPLACE(REPLACE(current_row.scanid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.reconstructedImageData_scanID_info IS NOT NULL)) THEN
            fullText := fullText || ''(reconstructedimagedata_scanid_info:integer)=('' || current_row.reconstructedimagedata_scanid_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_reconstructedImageData_scanID_meta_data(current_row.reconstructedImageData_scanID_info, child_count,$3,false,false);
              fullText := fullText || ''(reconstructedimagedata_scanid_info_reconstructedimagedata_scanid_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id:integer)=('' || current_row.inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id || '')'';
        END IF;
          IF (current_row.xnat_reconstructedimagedata_scanid_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_reconstructedimagedata_scanid_id:integer)=('' || current_row.xnat_reconstructedimagedata_scanid_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xaScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xaScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_xaScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_imageAssessorData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageAssessorData_history)('';
      FOR current_row IN SELECT * FROM xnat_imageAssessorData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_derivedData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_derivedData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(deriveddata_deriveddata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM img_assessor_in_resource_history WHERE  xnat_imageAssessorData_id=current_row.id AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_history( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(in_file_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM img_assessor_out_resource_history WHERE  xnat_imageAssessorData_id=current_row.id AND xft_version=current_row.xft_version
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource_history( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(out_file_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
          IF (current_row.imagesession_id IS NOT NULL) THEN 
              fullText := fullText || ''(imagesession_id:string)=('' || REPLACE(REPLACE(current_row.imagesession_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField_history WHERE parameters_addparam_xnat_imageA_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_addfield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_addField_history( parent_row.xnat_addfield_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_addparam_addfield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.imageAssessorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(imageassessordata_info:integer)=('' || current_row.imageassessordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageAssessorData_meta_data(current_row.imageAssessorData_info, child_count,$3,false,false);
              fullText := fullText || ''(imageassessordata_info_imageassessordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_derivedData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(deriveddata_deriveddata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageAssessorData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      FOR current_row IN SELECT * FROM xnat_imageAssessorData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_derivedData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
           	   tempText := i_xnat_derivedData_history(ext_row.history_id, child_count,$3,false,false);
 RETURN tempText;
           	END LOOP;
           END;
        END IF;
      END LOOP;
      fullText:= ie_xnat_imageAssessorData_history( $1, $2,$3,$4,$5);
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcvSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcvSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_xcvSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.xcvSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xcvsessiondata_info:integer)=('' || current_row.xcvsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xcvSessionData_meta_data(current_row.xcvSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(xcvsessiondata_info_xcvsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_dxSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dxSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_dxSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.dxSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(dxsessiondata_info:integer)=('' || current_row.dxsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dxSessionData_meta_data(current_row.dxSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(dxsessiondata_info_dxsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_genericData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:genericData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_genericData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_srSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:srSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_srSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.srSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(srsessiondata_info:integer)=('' || current_row.srsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_srSessionData_meta_data(current_row.srSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(srsessiondata_info_srsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrsScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrsScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_mrsScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_rfSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rfSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_rfSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.rfSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(rfsessiondata_info:integer)=('' || current_row.rfsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_rfSessionData_meta_data(current_row.rfSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(rfsessiondata_info_rfsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_subjectAssessorData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectAssessorData_history)('';
      FOR current_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_experimentData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_experimentData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(experimentdata_experimentdata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.subject_id IS NOT NULL) THEN 
              fullText := fullText || ''(subject_id:string)=('' || REPLACE(REPLACE(current_row.subject_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.age IS NOT NULL) THEN 
              fullText := fullText || ''(age:float)=('' || current_row.age || '')'';
          END IF;
        IF ((current_row.subjectAssessorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectassessordata_info:integer)=('' || current_row.subjectassessordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectAssessorData_meta_data(current_row.subjectAssessorData_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectassessordata_info_subjectassessordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_experimentData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(experimentdata_experimentdata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectAssessorData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      FOR current_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_experimentData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
           	   tempText := i_xnat_experimentData_history(ext_row.history_id, child_count,$3,false,false);
 RETURN tempText;
           	END LOOP;
           END;
        END IF;
      END LOOP;
      fullText:= ie_xnat_subjectAssessorData_history( $1, $2,$3,$4,$5);
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petScanData_frame_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petScanData_frame_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_petScanData_frame_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petScanData_frame( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petScanData_frame)('';
      FOR current_row IN SELECT * FROM xnat_petScanData_frame WHERE  xnat_petscandata_frame_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.number IS NOT NULL) THEN 
              fullText := fullText || ''(number:integer)=('' || current_row.number || '')'';
          END IF;
          IF (current_row.starttime IS NOT NULL) THEN 
              fullText := fullText || ''(starttime:float)=('' || current_row.starttime || '')'';
          END IF;
          IF (current_row.length IS NOT NULL) THEN 
              fullText := fullText || ''(length:float)=('' || current_row.length || '')'';
          END IF;
          IF (current_row.units IS NOT NULL) THEN 
              fullText := fullText || ''(units:string)=('' || REPLACE(REPLACE(current_row.units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.petScanData_frame_info IS NOT NULL)) THEN
            fullText := fullText || ''(petscandata_frame_info:integer)=('' || current_row.petscandata_frame_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petScanData_frame_meta_data(current_row.petScanData_frame_info, child_count,$3,false,false);
              fullText := fullText || ''(petscandata_frame_info_petscandata_frame_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_frames_frame_xnat_pe_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_frames_frame_xnat_pe_xnat_imagescandata_id:integer)=('' || current_row.parameters_frames_frame_xnat_pe_xnat_imagescandata_id || '')'';
        END IF;
          IF (current_row.xnat_petscandata_frame_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_petscandata_frame_id:integer)=('' || current_row.xnat_petscandata_frame_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_petScanData_frame( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petScanData_frame.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_petScanData_frame LEFT JOIN xnat_petScanData_frame_meta_data meta ON xnat_petScanData_frame.petScanData_frame_info=meta.meta_data_id WHERE  xnat_petscandata_frame_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_petScanData_frame_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_petScanData_frame( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petScanData_frame.*, meta.meta_data_id FROM xnat_petScanData_frame LEFT JOIN xnat_petScanData_frame_meta_data meta ON xnat_petScanData_frame.petScanData_frame_info=meta.meta_data_id WHERE  xnat_petscandata_frame_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:petScanData/parameters/frames/frame
        IF ((current_row.parameters_frames_frame_xnat_pe_xnat_imagescandata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_petScanData(current_row.parameters_frames_frame_xnat_pe_xnat_imagescandata_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_petScanData_frame()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_petScanData_frame( OLD.xnat_petscandata_frame_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_petScanData_frame','CREATE TRIGGER a_u_xnat_petScanData_frame  AFTER UPDATE OR DELETE ON xnat_petScanData_frame FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_petScanData_frame()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcScanData_field_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcScanData_field_history)('';
      FOR current_row IN SELECT * FROM xnat_qcScanData_field_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.field IS NOT NULL) THEN 
              fullText := fullText || ''(field:string)=('' || REPLACE(REPLACE(current_row.field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.qcScanData_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcscandata_field_info:integer)=('' || current_row.qcscandata_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcScanData_field_meta_data(current_row.qcScanData_field_info, child_count,$3,false,false);
              fullText := fullText || ''(qcscandata_field_info_qcscandata_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fields_field_xnat_qcScanData_xnat_qcscandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(fields_field_xnat_qcscandata_xnat_qcscandata_id:integer)=('' || current_row.fields_field_xnat_qcscandata_xnat_qcscandata_id || '')'';
        END IF;
          IF (current_row.xnat_qcscandata_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_qcscandata_field_id:integer)=('' || current_row.xnat_qcscandata_field_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ioScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ioScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_ioScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.ioScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ioscandata_info:integer)=('' || current_row.ioscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ioScanData_meta_data(current_row.ioScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(ioscandata_info_ioscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageResourceSeries_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageResourceSeries_history)('';
      FOR current_row IN SELECT * FROM xnat_imageResourceSeries_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_resourceSeries_history WHERE xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_resourceSeries_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(resourceseries_resourceseries:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.dimensions_x IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_x:integer)=('' || current_row.dimensions_x || '')'';
          END IF;
          IF (current_row.dimensions_y IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_y:integer)=('' || current_row.dimensions_y || '')'';
          END IF;
          IF (current_row.dimensions_z IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_z:integer)=('' || current_row.dimensions_z || '')'';
          END IF;
          IF (current_row.dimensions_volumes IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_volumes:integer)=('' || current_row.dimensions_volumes || '')'';
          END IF;
          IF (current_row.voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_x:float)=('' || current_row.voxelres_x || '')'';
          END IF;
          IF (current_row.voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_y:float)=('' || current_row.voxelres_y || '')'';
          END IF;
          IF (current_row.voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_z:float)=('' || current_row.voxelres_z || '')'';
          END IF;
          IF (current_row.voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_units:string)=('' || REPLACE(REPLACE(current_row.voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.orientation IS NOT NULL) THEN 
              fullText := fullText || ''(orientation:string)=('' || REPLACE(REPLACE(current_row.orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.imageResourceSeries_info IS NOT NULL)) THEN
            fullText := fullText || ''(imageresourceseries_info:integer)=('' || current_row.imageresourceseries_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageResourceSeries_meta_data(current_row.imageResourceSeries_info, child_count,$3,false,false);
              fullText := fullText || ''(imageresourceseries_info_imageresourceseries_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_resourceSeries_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(resourceseries_resourceseries:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectData_alias_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectData_alias_history)('';
      FOR current_row IN SELECT * FROM xnat_projectData_alias_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.alias IS NOT NULL) THEN 
              fullText := fullText || ''(alias:string)=('' || REPLACE(REPLACE(current_row.alias,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.source IS NOT NULL) THEN 
              fullText := fullText || ''(source:string)=('' || REPLACE(REPLACE(current_row.source,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.projectData_alias_info IS NOT NULL)) THEN
            fullText := fullText || ''(projectdata_alias_info:integer)=('' || current_row.projectdata_alias_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectData_alias_meta_data(current_row.projectData_alias_info, child_count,$3,false,false);
              fullText := fullText || ''(projectdata_alias_info_projectdata_alias_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.aliases_alias_xnat_projectData_id IS NOT NULL)) THEN
            fullText := fullText || ''(aliases_alias_xnat_projectdata_id:string)=('' || current_row.aliases_alias_xnat_projectdata_id || '')'';
        END IF;
          IF (current_row.xnat_projectdata_alias_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_projectdata_alias_id:integer)=('' || current_row.xnat_projectdata_alias_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_statisticsData_additionalStatistics_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:statisticsData_additionalStatistics_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_statisticsData_additionalStatistics_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_statisticsData_additionalStatistics( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:statisticsData_additionalStatistics)('';
      FOR current_row IN SELECT * FROM xnat_statisticsData_additionalStatistics WHERE  xnat_statisticsdata_additionalstatistics_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.additionalstatistics IS NOT NULL) THEN 
              fullText := fullText || ''(additionalstatistics:float)=('' || current_row.additionalstatistics || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.statisticsData_additionalStatistics_info IS NOT NULL)) THEN
            fullText := fullText || ''(statisticsdata_additionalstatistics_info:integer)=('' || current_row.statisticsdata_additionalstatistics_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_statisticsData_additionalStatistics_meta_data(current_row.statisticsData_additionalStatistics_info, child_count,$3,false,false);
              fullText := fullText || ''(statisticsdata_additionalstatistics_info_statisticsdata_additionalstatistics_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xnat_statisticsData_xnat_abstractstatistics_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_statisticsdata_xnat_abstractstatistics_id:integer)=('' || current_row.xnat_statisticsdata_xnat_abstractstatistics_id || '')'';
        END IF;
          IF (current_row.xnat_statisticsdata_additionalstatistics_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_statisticsdata_additionalstatistics_id:integer)=('' || current_row.xnat_statisticsdata_additionalstatistics_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_statisticsData_additionalStatistics( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_statisticsData_additionalStatistics.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_statisticsData_additionalStatistics LEFT JOIN xnat_statisticsData_additionalStatistics_meta_data meta ON xnat_statisticsData_additionalStatistics.statisticsData_additionalStatistics_info=meta.meta_data_id WHERE  xnat_statisticsdata_additionalstatistics_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_statisticsData_additionalStatistics_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_statisticsData_additionalStatistics( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_statisticsData_additionalStatistics.*, meta.meta_data_id FROM xnat_statisticsData_additionalStatistics LEFT JOIN xnat_statisticsData_additionalStatistics_meta_data meta ON xnat_statisticsData_additionalStatistics.statisticsData_additionalStatistics_info=meta.meta_data_id WHERE  xnat_statisticsdata_additionalstatistics_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:statisticsData/additionalStatistics
        IF ((current_row.xnat_statisticsData_xnat_abstractstatistics_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_statisticsData(current_row.xnat_statisticsData_xnat_abstractstatistics_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_statisticsData_additionalStatistics()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_statisticsData_additionalStatistics( OLD.xnat_statisticsdata_additionalstatistics_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_statisticsData_additionalStatistics','CREATE TRIGGER a_u_xnat_statisticsData_additionalStatistics  AFTER UPDATE OR DELETE ON xnat_statisticsData_additionalStatistics FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_statisticsData_additionalStatistics()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_scScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:scScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_scScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.scScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(scscandata_info:integer)=('' || current_row.scscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_scScanData_meta_data(current_row.scScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(scscandata_info_scscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_projectData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_eegScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:eegScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_eegScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.eegScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(eegscandata_info:integer)=('' || current_row.eegscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_eegScanData_meta_data(current_row.eegScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(eegscandata_info_eegscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ctScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ctScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_ctScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.parameters_voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_units:string)=('' || REPLACE(REPLACE(current_row.parameters_voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_x:float)=('' || current_row.parameters_voxelres_x || '')'';
          END IF;
          IF (current_row.parameters_voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_y:float)=('' || current_row.parameters_voxelres_y || '')'';
          END IF;
          IF (current_row.parameters_voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_z:float)=('' || current_row.parameters_voxelres_z || '')'';
          END IF;
          IF (current_row.parameters_orientation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_orientation:string)=('' || REPLACE(REPLACE(current_row.parameters_orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_fov_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_x:integer)=('' || current_row.parameters_fov_x || '')'';
          END IF;
          IF (current_row.parameters_fov_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_y:integer)=('' || current_row.parameters_fov_y || '')'';
          END IF;
          IF (current_row.parameters_rescale_intercept IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rescale_intercept:string)=('' || REPLACE(REPLACE(current_row.parameters_rescale_intercept,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_rescale_slope IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rescale_slope:string)=('' || REPLACE(REPLACE(current_row.parameters_rescale_slope,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_kvp IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_kvp:float)=('' || current_row.parameters_kvp || '')'';
          END IF;
          IF (current_row.parameters_acquisitionnumber IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_acquisitionnumber:integer)=('' || current_row.parameters_acquisitionnumber || '')'';
          END IF;
          IF (current_row.parameters_imagetype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_imagetype:string)=('' || REPLACE(REPLACE(current_row.parameters_imagetype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_options IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_options:string)=('' || REPLACE(REPLACE(current_row.parameters_options,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_collectiondiameter IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_collectiondiameter:float)=('' || current_row.parameters_collectiondiameter || '')'';
          END IF;
          IF (current_row.parameters_distancesourcetodetector IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_distancesourcetodetector:float)=('' || current_row.parameters_distancesourcetodetector || '')'';
          END IF;
          IF (current_row.parameters_distancesourcetopatient IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_distancesourcetopatient:float)=('' || current_row.parameters_distancesourcetopatient || '')'';
          END IF;
          IF (current_row.parameters_gantrytilt IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_gantrytilt:float)=('' || current_row.parameters_gantrytilt || '')'';
          END IF;
          IF (current_row.parameters_tableheight IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_tableheight:float)=('' || current_row.parameters_tableheight || '')'';
          END IF;
          IF (current_row.parameters_rotationdirection IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rotationdirection:string)=('' || REPLACE(REPLACE(current_row.parameters_rotationdirection,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_exposuretime IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_exposuretime:float)=('' || current_row.parameters_exposuretime || '')'';
          END IF;
          IF (current_row.parameters_xraytubecurrent IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_xraytubecurrent:float)=('' || current_row.parameters_xraytubecurrent || '')'';
          END IF;
          IF (current_row.parameters_exposure IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_exposure:float)=('' || current_row.parameters_exposure || '')'';
          END IF;
          IF (current_row.parameters_filter IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_filter:string)=('' || REPLACE(REPLACE(current_row.parameters_filter,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_generatorpower IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_generatorpower:float)=('' || current_row.parameters_generatorpower || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_ctScanData_focalSpot_history WHERE parameters_focalspots_focalspot_xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version ORDER BY xnat_ctscandata_focalspot_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ctScanData_focalSpot_history( parent_row.xnat_ctscandata_focalspot_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_focalspots_focalspot_ctscandata_focalspot'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.parameters_convolutionkernel IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_convolutionkernel:string)=('' || REPLACE(REPLACE(current_row.parameters_convolutionkernel,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_collimationwidth_single IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_collimationwidth_single:float)=('' || current_row.parameters_collimationwidth_single || '')'';
          END IF;
          IF (current_row.parameters_collimationwidth_total IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_collimationwidth_total:float)=('' || current_row.parameters_collimationwidth_total || '')'';
          END IF;
          IF (current_row.parameters_tablespeed IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_tablespeed:float)=('' || current_row.parameters_tablespeed || '')'';
          END IF;
          IF (current_row.parameters_tablefeedperrotation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_tablefeedperrotation:float)=('' || current_row.parameters_tablefeedperrotation || '')'';
          END IF;
          IF (current_row.parameters_pitchfactor IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pitchfactor:float)=('' || current_row.parameters_pitchfactor || '')'';
          END IF;
          IF (current_row.parameters_estimateddosesaving_modulation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_estimateddosesaving_modulation:string)=('' || REPLACE(REPLACE(current_row.parameters_estimateddosesaving_modulation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_estimateddosesaving IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_estimateddosesaving:float)=('' || current_row.parameters_estimateddosesaving || '')'';
          END IF;
          IF (current_row.parameters_ctdivol IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_ctdivol:float)=('' || current_row.parameters_ctdivol || '')'';
          END IF;
          IF (current_row.parameters_derivation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_derivation:string)=('' || REPLACE(REPLACE(current_row.parameters_derivation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.parameters_contrastbolus_xnat_contrastbolus_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_contrastbolus_xnat_contrastbolus_id:integer)=('' || current_row.parameters_contrastbolus_xnat_contrastbolus_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_contrastBolus_history WHERE  xnat_contrastbolus_id=current_row.parameters_contrastbolus_xnat_contrastbolus_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_contrastBolus_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_contrastbolus_contrastbolus:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.dcmvalidation IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation:string)=('' || REPLACE(REPLACE(current_row.dcmvalidation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmvalidation_status IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation_status:integer)=('' || current_row.dcmvalidation_status || '')'';
          END IF;
        IF ((current_row.ctScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ctscandata_info:integer)=('' || current_row.ctscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ctScanData_meta_data(current_row.ctScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(ctscandata_info_ctscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_validationData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:validationData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_validationData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_validationData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:validationData)('';
      FOR current_row IN SELECT * FROM xnat_validationData WHERE  xnat_validationdata_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.method IS NOT NULL) THEN 
              fullText := fullText || ''(method:string)=('' || REPLACE(REPLACE(current_row.method,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.date IS NOT NULL) THEN 
              fullText := fullText || ''(date:date)=('' || current_row.date || '')'';
          END IF;
          IF (current_row.notes IS NOT NULL) THEN 
              fullText := fullText || ''(notes:string)=('' || REPLACE(REPLACE(current_row.notes,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.validated_by IS NOT NULL) THEN 
              fullText := fullText || ''(validated_by:string)=('' || REPLACE(REPLACE(current_row.validated_by,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.validationData_info IS NOT NULL)) THEN
            fullText := fullText || ''(validationdata_info:integer)=('' || current_row.validationdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_validationData_meta_data(current_row.validationData_info, child_count,$3,false,false);
              fullText := fullText || ''(validationdata_info_validationdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_validationdata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_validationdata_id:integer)=('' || current_row.xnat_validationdata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_validationData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_validationData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_validationData LEFT JOIN xnat_validationData_meta_data meta ON xnat_validationData.validationData_info=meta.meta_data_id WHERE  xnat_validationdata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_validationData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_validationData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_validationData.*, meta.meta_data_id FROM xnat_validationData LEFT JOIN xnat_validationData_meta_data meta ON xnat_validationData.validationData_info=meta.meta_data_id WHERE  xnat_validationdata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION xnat:experimentData/validation
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_experimentData WHERE validation_xnat_validationdata_id=current_row.xnat_validationdata_id
        LOOP
        PERFORM update_ls_xnat_experimentData( parent_row.id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:imageScanData/validation
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageScanData WHERE validation_xnat_validationdata_id=current_row.xnat_validationdata_id
        LOOP
        PERFORM update_ls_xnat_imageScanData( parent_row.xnat_imagescandata_id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_validationData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_validationData( OLD.xnat_validationdata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_validationData','CREATE TRIGGER a_u_xnat_validationData  AFTER UPDATE OR DELETE ON xnat_validationData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_validationData()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_experimentData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:experimentData)('';
      FOR current_row IN SELECT * FROM xnat_experimentData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_experimentData_share WHERE sharing_share_xnat_experimentDa_id=current_row.id ORDER BY xnat_experimentdata_share_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_experimentData_share( parent_row.xnat_experimentdata_share_id, child_count,$3,false,false);
              fullText := fullText || ''(sharing_share_experimentdata_share'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.date IS NOT NULL) THEN 
              fullText := fullText || ''(date:date)=('' || current_row.date || '')'';
          END IF;
          IF (current_row.time IS NOT NULL) THEN 
              fullText := fullText || ''(time:time)=('' || current_row.time || '')'';
          END IF;
          IF (current_row.duration IS NOT NULL) THEN 
              fullText := fullText || ''(duration:string)=('' || current_row.duration || '')'';
          END IF;
          IF (current_row.delay IS NOT NULL) THEN 
              fullText := fullText || ''(delay:integer)=('' || current_row.delay || '')'';
          END IF;
          IF (current_row.delay_ref_expt_id IS NOT NULL) THEN 
              fullText := fullText || ''(delay_ref_expt_id:string)=('' || REPLACE(REPLACE(current_row.delay_ref_expt_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.note IS NOT NULL) THEN 
              fullText := fullText || ''(note:string)=('' || REPLACE(REPLACE(current_row.note,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.investigator_xnat_investigatordata_id IS NOT NULL)) THEN
            fullText := fullText || ''(investigator_xnat_investigatordata_id:integer)=('' || current_row.investigator_xnat_investigatordata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_investigatorData(current_row.investigator_xnat_investigatordata_id, child_count,$3,false,false);
              fullText := fullText || ''(investigator_investigatordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.validation_xnat_validationdata_id IS NOT NULL)) THEN
            fullText := fullText || ''(validation_xnat_validationdata_id:integer)=('' || current_row.validation_xnat_validationdata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_validationData(current_row.validation_xnat_validationdata_id, child_count,$3,false,false);
              fullText := fullText || ''(validation_validationdata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_experimentData_resource WHERE  xnat_experimentData_id=current_row.id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(resources_resource_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_experimentData_field WHERE fields_field_xnat_experimentDat_id=current_row.id ORDER BY xnat_experimentdata_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_experimentData_field( parent_row.xnat_experimentdata_field_id, child_count,$3,false,false);
              fullText := fullText || ''(fields_field_experimentdata_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.acquisition_site IS NOT NULL) THEN 
              fullText := fullText || ''(acquisition_site:string)=('' || REPLACE(REPLACE(current_row.acquisition_site,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visit_id IS NOT NULL) THEN 
              fullText := fullText || ''(visit_id:string)=('' || REPLACE(REPLACE(current_row.visit_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visit IS NOT NULL) THEN 
              fullText := fullText || ''(visit:string)=('' || REPLACE(REPLACE(current_row.visit,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.version IS NOT NULL) THEN 
              fullText := fullText || ''(version:integer)=('' || current_row.version || '')'';
          END IF;
          IF (current_row.original IS NOT NULL) THEN 
              fullText := fullText || ''(original:string)=('' || REPLACE(REPLACE(current_row.original,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.protocol IS NOT NULL) THEN 
              fullText := fullText || ''(protocol:string)=('' || REPLACE(REPLACE(current_row.protocol,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.experimentData_info IS NOT NULL)) THEN
            fullText := fullText || ''(experimentdata_info:integer)=('' || current_row.experimentdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_experimentData_meta_data(current_row.experimentData_info, child_count,$3,false,false);
              fullText := fullText || ''(experimentdata_info_experimentdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_experimentData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_experimentData.id AS xnat_experimentData9, table1.element_name AS xdat_meta_element136, xnat_experimentData.date AS xnat_experimentData0 FROM xnat_experimentData xnat_experimentData   LEFT JOIN xdat_meta_element table1 ON xnat_experimentData.extension=table1.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_experimentData9=$1))
      LOOP
         IF (current_row.xdat_meta_element136 IS NULL) THEN 
             fullText:= ie_xnat_experimentData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element136=''scr:screeningAssessment'') THEN
                fullText:= i_scr_screeningAssessment( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''ext:atlasScalingFactorData'') THEN
                fullText:= i_ext_atlasScalingFactorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''ext:clinicalAssessmentData'') THEN
                fullText:= i_ext_clinicalAssessmentData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''ext:segmentationFastData'') THEN
                fullText:= i_ext_segmentationFastData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''val:protocolData'') THEN
                fullText:= i_val_protocolData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:genericData'') THEN
                fullText:= ie_xnat_genericData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:pVisitData'') THEN
                fullText:= i_xnat_pVisitData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:subjectAssessorData'') THEN
                fullText:= ie_xnat_subjectAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:subjectVariablesData'') THEN
                fullText:= i_xnat_subjectVariablesData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:imageSessionData'') THEN
                fullText:= ie_xnat_imageSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:mrSessionData'') THEN
                fullText:= i_xnat_mrSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:mrAssessorData'') THEN
                fullText:= ie_xnat_mrAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:derivedData'') THEN
                fullText:= ie_xnat_derivedData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:petAssessorData'') THEN
                fullText:= i_xnat_petAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:petSessionData'') THEN
                fullText:= i_xnat_petSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:petmrSessionData'') THEN
                fullText:= i_xnat_petmrSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:qcAssessmentData'') THEN
                fullText:= i_xnat_qcAssessmentData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:imageAssessorData'') THEN
                fullText:= ie_xnat_imageAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:ctSessionData'') THEN
                fullText:= i_xnat_ctSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:crSessionData'') THEN
                fullText:= i_xnat_crSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:dxSessionData'') THEN
                fullText:= i_xnat_dxSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:mgSessionData'') THEN
                fullText:= i_xnat_mgSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:ioSessionData'') THEN
                fullText:= i_xnat_ioSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:usSessionData'') THEN
                fullText:= i_xnat_usSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:ecgSessionData'') THEN
                fullText:= i_xnat_ecgSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:hdSessionData'') THEN
                fullText:= i_xnat_hdSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:epsSessionData'') THEN
                fullText:= i_xnat_epsSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xaSessionData'') THEN
                fullText:= i_xnat_xaSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:rfSessionData'') THEN
                fullText:= i_xnat_rfSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xa3DSessionData'') THEN
                fullText:= i_xnat_xa3DSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:dx3DCraniofacialSessionData'') THEN
                fullText:= i_xnat_dx3DCraniofacialSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:nmSessionData'') THEN
                fullText:= i_xnat_nmSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:srSessionData'') THEN
                fullText:= i_xnat_srSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:esSessionData'') THEN
                fullText:= i_xnat_esSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:esvSessionData'') THEN
                fullText:= i_xnat_esvSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:gmSessionData'') THEN
                fullText:= i_xnat_gmSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:gmvSessionData'') THEN
                fullText:= i_xnat_gmvSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:smSessionData'') THEN
                fullText:= i_xnat_smSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xcSessionData'') THEN
                fullText:= i_xnat_xcSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xcvSessionData'') THEN
                fullText:= i_xnat_xcvSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:opSessionData'') THEN
                fullText:= i_xnat_opSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:optSessionData'') THEN
                fullText:= i_xnat_optSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:rtSessionData'') THEN
                fullText:= i_xnat_rtSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:otherDicomSessionData'') THEN
                fullText:= i_xnat_otherDicomSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:qcManualAssessorData'') THEN
                fullText:= i_xnat_qcManualAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:megSessionData'') THEN
                fullText:= i_xnat_megSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:eegSessionData'') THEN
                fullText:= i_xnat_eegSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:sideEffectsPittsburghData'') THEN
                fullText:= i_xnat_a_sideEffectsPittsburghData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:ybocsData'') THEN
                fullText:= i_xnat_a_ybocsData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:ygtssData'') THEN
                fullText:= i_xnat_a_ygtssData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:updrs3Data'') THEN
                fullText:= i_xnat_a_updrs3Data( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:scidResearchData'') THEN
                fullText:= i_xnat_a_scidResearchData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_experimentData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_experimentData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_experimentData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_experimentData LEFT JOIN xnat_experimentData_meta_data meta ON xnat_experimentData.experimentData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_experimentData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_experimentData_share WHERE sharing_share_xnat_experimentDa_id=current_row.id
        LOOP
          PERFORM  a_xnat_experimentData_share( parent_row.xnat_experimentdata_share_id, $2,$3,false);
        END LOOP;
        END;
        IF ((current_row.investigator_xnat_investigatordata_id IS NOT NULL)) THEN
          PERFORM  a_xnat_investigatorData(current_row.investigator_xnat_investigatordata_id, $2,$3,false);
        END IF;
        IF ((current_row.validation_xnat_validationdata_id IS NOT NULL)) THEN
          PERFORM  a_xnat_validationData(current_row.validation_xnat_validationdata_id, $2,$3,false);
        END IF;
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_experimentData_resource WHERE  xnat_experimentData_id=current_row.id
        LOOP
          PERFORM  a_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, $2,$3,false);
        END LOOP;
        END; 
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_experimentData_field WHERE fields_field_xnat_experimentDat_id=current_row.id
        LOOP
          PERFORM  a_xnat_experimentData_field( parent_row.xnat_experimentdata_field_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_experimentData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_experimentData.id AS xnat_experimentData9, table1.element_name AS xdat_meta_element136, xnat_experimentData.date AS xnat_experimentData0 FROM xnat_experimentData xnat_experimentData   LEFT JOIN xdat_meta_element table1 ON xnat_experimentData.extension=table1.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_experimentData9=$1))
      LOOP
         IF (current_row.xdat_meta_element136 IS NULL) THEN 
            PERFORM  ae_xnat_experimentData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element136=''scr:screeningAssessment'') THEN
            PERFORM  a_scr_screeningAssessment( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''ext:atlasScalingFactorData'') THEN
            PERFORM  a_ext_atlasScalingFactorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''ext:clinicalAssessmentData'') THEN
            PERFORM  a_ext_clinicalAssessmentData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''ext:segmentationFastData'') THEN
            PERFORM  a_ext_segmentationFastData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''val:protocolData'') THEN
            PERFORM  a_val_protocolData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:genericData'') THEN
            PERFORM  ae_xnat_genericData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:pVisitData'') THEN
            PERFORM  a_xnat_pVisitData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:subjectAssessorData'') THEN
            PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:subjectVariablesData'') THEN
            PERFORM  a_xnat_subjectVariablesData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:imageSessionData'') THEN
            PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:mrSessionData'') THEN
            PERFORM  a_xnat_mrSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:mrAssessorData'') THEN
            PERFORM  ae_xnat_mrAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:derivedData'') THEN
            PERFORM  ae_xnat_derivedData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:petAssessorData'') THEN
            PERFORM  a_xnat_petAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:petSessionData'') THEN
            PERFORM  a_xnat_petSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:petmrSessionData'') THEN
            PERFORM  a_xnat_petmrSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:qcAssessmentData'') THEN
            PERFORM  a_xnat_qcAssessmentData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:imageAssessorData'') THEN
            PERFORM  ae_xnat_imageAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:ctSessionData'') THEN
            PERFORM  a_xnat_ctSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:crSessionData'') THEN
            PERFORM  a_xnat_crSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:dxSessionData'') THEN
            PERFORM  a_xnat_dxSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:mgSessionData'') THEN
            PERFORM  a_xnat_mgSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:ioSessionData'') THEN
            PERFORM  a_xnat_ioSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:usSessionData'') THEN
            PERFORM  a_xnat_usSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:ecgSessionData'') THEN
            PERFORM  a_xnat_ecgSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:hdSessionData'') THEN
            PERFORM  a_xnat_hdSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:epsSessionData'') THEN
            PERFORM  a_xnat_epsSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xaSessionData'') THEN
            PERFORM  a_xnat_xaSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:rfSessionData'') THEN
            PERFORM  a_xnat_rfSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xa3DSessionData'') THEN
            PERFORM  a_xnat_xa3DSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:dx3DCraniofacialSessionData'') THEN
            PERFORM  a_xnat_dx3DCraniofacialSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:nmSessionData'') THEN
            PERFORM  a_xnat_nmSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:srSessionData'') THEN
            PERFORM  a_xnat_srSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:esSessionData'') THEN
            PERFORM  a_xnat_esSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:esvSessionData'') THEN
            PERFORM  a_xnat_esvSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:gmSessionData'') THEN
            PERFORM  a_xnat_gmSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:gmvSessionData'') THEN
            PERFORM  a_xnat_gmvSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:smSessionData'') THEN
            PERFORM  a_xnat_smSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xcSessionData'') THEN
            PERFORM  a_xnat_xcSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xcvSessionData'') THEN
            PERFORM  a_xnat_xcvSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:opSessionData'') THEN
            PERFORM  a_xnat_opSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:optSessionData'') THEN
            PERFORM  a_xnat_optSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:rtSessionData'') THEN
            PERFORM  a_xnat_rtSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:otherDicomSessionData'') THEN
            PERFORM  a_xnat_otherDicomSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:qcManualAssessorData'') THEN
            PERFORM  a_xnat_qcManualAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:megSessionData'') THEN
            PERFORM  a_xnat_megSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:eegSessionData'') THEN
            PERFORM  a_xnat_eegSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:sideEffectsPittsburghData'') THEN
            PERFORM  a_xnat_a_sideEffectsPittsburghData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:ybocsData'') THEN
            PERFORM  a_xnat_a_ybocsData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:ygtssData'') THEN
            PERFORM  a_xnat_a_ygtssData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:updrs3Data'') THEN
            PERFORM  a_xnat_a_updrs3Data( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:scidResearchData'') THEN
            PERFORM  a_xnat_a_scidResearchData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_experimentData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_experimentData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_experimentData.*, meta.meta_data_id FROM xnat_experimentData LEFT JOIN xnat_experimentData_meta_data meta ON xnat_experimentData.experimentData_info=meta.meta_data_id WHERE  id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_experimentData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_experimentData.id AS xnat_experimentData9, table1.element_name AS xdat_meta_element136, xnat_experimentData.date AS xnat_experimentData0 FROM xnat_experimentData xnat_experimentData   LEFT JOIN xdat_meta_element table1 ON xnat_experimentData.extension=table1.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_experimentData9=$1))
      LOOP
         IF (current_row.xdat_meta_element136 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_experimentData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element136=''scr:screeningAssessment'') THEN
                PERFORM update_ls_scr_screeningAssessment( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''ext:atlasScalingFactorData'') THEN
                PERFORM update_ls_ext_atlasScalingFactorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''ext:clinicalAssessmentData'') THEN
                PERFORM update_ls_ext_clinicalAssessmentData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''ext:segmentationFastData'') THEN
                PERFORM update_ls_ext_segmentationFastData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''val:protocolData'') THEN
                PERFORM update_ls_val_protocolData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:genericData'') THEN
                PERFORM update_ls_ext_xnat_genericData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:pVisitData'') THEN
                PERFORM update_ls_xnat_pVisitData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:subjectAssessorData'') THEN
                PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:subjectVariablesData'') THEN
                PERFORM update_ls_xnat_subjectVariablesData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:imageSessionData'') THEN
                PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:mrSessionData'') THEN
                PERFORM update_ls_xnat_mrSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:mrAssessorData'') THEN
                PERFORM update_ls_ext_xnat_mrAssessorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:derivedData'') THEN
                PERFORM update_ls_ext_xnat_derivedData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:petAssessorData'') THEN
                PERFORM update_ls_xnat_petAssessorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:petSessionData'') THEN
                PERFORM update_ls_xnat_petSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:petmrSessionData'') THEN
                PERFORM update_ls_xnat_petmrSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:qcAssessmentData'') THEN
                PERFORM update_ls_xnat_qcAssessmentData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:imageAssessorData'') THEN
                PERFORM update_ls_ext_xnat_imageAssessorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:ctSessionData'') THEN
                PERFORM update_ls_xnat_ctSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:crSessionData'') THEN
                PERFORM update_ls_xnat_crSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:dxSessionData'') THEN
                PERFORM update_ls_xnat_dxSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:mgSessionData'') THEN
                PERFORM update_ls_xnat_mgSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:ioSessionData'') THEN
                PERFORM update_ls_xnat_ioSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:usSessionData'') THEN
                PERFORM update_ls_xnat_usSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:ecgSessionData'') THEN
                PERFORM update_ls_xnat_ecgSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:hdSessionData'') THEN
                PERFORM update_ls_xnat_hdSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:epsSessionData'') THEN
                PERFORM update_ls_xnat_epsSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xaSessionData'') THEN
                PERFORM update_ls_xnat_xaSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:rfSessionData'') THEN
                PERFORM update_ls_xnat_rfSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xa3DSessionData'') THEN
                PERFORM update_ls_xnat_xa3DSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:dx3DCraniofacialSessionData'') THEN
                PERFORM update_ls_xnat_dx3DCraniofacialSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:nmSessionData'') THEN
                PERFORM update_ls_xnat_nmSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:srSessionData'') THEN
                PERFORM update_ls_xnat_srSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:esSessionData'') THEN
                PERFORM update_ls_xnat_esSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:esvSessionData'') THEN
                PERFORM update_ls_xnat_esvSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:gmSessionData'') THEN
                PERFORM update_ls_xnat_gmSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:gmvSessionData'') THEN
                PERFORM update_ls_xnat_gmvSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:smSessionData'') THEN
                PERFORM update_ls_xnat_smSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xcSessionData'') THEN
                PERFORM update_ls_xnat_xcSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:xcvSessionData'') THEN
                PERFORM update_ls_xnat_xcvSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:opSessionData'') THEN
                PERFORM update_ls_xnat_opSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:optSessionData'') THEN
                PERFORM update_ls_xnat_optSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:rtSessionData'') THEN
                PERFORM update_ls_xnat_rtSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:otherDicomSessionData'') THEN
                PERFORM update_ls_xnat_otherDicomSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:qcManualAssessorData'') THEN
                PERFORM update_ls_xnat_qcManualAssessorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:megSessionData'') THEN
                PERFORM update_ls_xnat_megSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat:eegSessionData'') THEN
                PERFORM update_ls_xnat_eegSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:sideEffectsPittsburghData'') THEN
                PERFORM update_ls_xnat_a_sideEffectsPittsburghData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:ybocsData'') THEN
                PERFORM update_ls_xnat_a_ybocsData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:ygtssData'') THEN
                PERFORM update_ls_xnat_a_ygtssData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:updrs3Data'') THEN
                PERFORM update_ls_xnat_a_updrs3Data( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element136=''xnat_a:scidResearchData'') THEN
                PERFORM update_ls_xnat_a_scidResearchData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element136;
                    PERFORM update_ls_ext_xnat_experimentData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_experimentData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_experimentData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_experimentData','CREATE TRIGGER a_u_xnat_experimentData  AFTER UPDATE OR DELETE ON xnat_experimentData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_experimentData()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_derivedData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:derivedData)('';
      FOR current_row IN SELECT * FROM xnat_derivedData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_experimentData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(experimentdata_experimentdata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.provenance_prov_process_id IS NOT NULL)) THEN
            fullText := fullText || ''(provenance_prov_process_id:integer)=('' || current_row.provenance_prov_process_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_process(current_row.provenance_prov_process_id, child_count,$3,false,false);
              fullText := fullText || ''(provenance_process:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.derivedData_info IS NOT NULL)) THEN
            fullText := fullText || ''(deriveddata_info:integer)=('' || current_row.deriveddata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_derivedData_meta_data(current_row.derivedData_info, child_count,$3,false,false);
              fullText := fullText || ''(deriveddata_info_deriveddata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_experimentData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(experimentdata_experimentdata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_derivedData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.id AS xnat_derivedData0, table2.element_name AS xdat_meta_element139, table0.date AS xnat_experimentData3 FROM xnat_derivedData xnat_derivedData   LEFT JOIN xnat_experimentData table0 ON xnat_derivedData.id=table0.id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_derivedData0=$1))
      LOOP
         IF (current_row.xdat_meta_element139 IS NULL) THEN 
             fullText:= ie_xnat_derivedData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element139=''scr:screeningAssessment'') THEN
                fullText:= i_scr_screeningAssessment( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''ext:atlasScalingFactorData'') THEN
                fullText:= i_ext_atlasScalingFactorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''ext:segmentationFastData'') THEN
                fullText:= i_ext_segmentationFastData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''val:protocolData'') THEN
                fullText:= i_val_protocolData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:mrAssessorData'') THEN
                fullText:= ie_xnat_mrAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:petAssessorData'') THEN
                fullText:= i_xnat_petAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:qcAssessmentData'') THEN
                fullText:= i_xnat_qcAssessmentData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:imageAssessorData'') THEN
                fullText:= ie_xnat_imageAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:qcManualAssessorData'') THEN
                fullText:= i_xnat_qcManualAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_derivedData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_derivedData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_derivedData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_derivedData LEFT JOIN xnat_derivedData_meta_data meta ON xnat_derivedData.derivedData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_derivedData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_experimentData(current_row.id, $2,$3,false);
        END IF;
        IF ((current_row.provenance_prov_process_id IS NOT NULL)) THEN
          PERFORM  a_prov_process(current_row.provenance_prov_process_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_experimentData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_derivedData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.id AS xnat_derivedData0, table2.element_name AS xdat_meta_element139, table0.date AS xnat_experimentData3 FROM xnat_derivedData xnat_derivedData   LEFT JOIN xnat_experimentData table0 ON xnat_derivedData.id=table0.id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_derivedData0=$1))
      LOOP
         IF (current_row.xdat_meta_element139 IS NULL) THEN 
            PERFORM  ae_xnat_derivedData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element139=''scr:screeningAssessment'') THEN
            PERFORM  a_scr_screeningAssessment( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''ext:atlasScalingFactorData'') THEN
            PERFORM  a_ext_atlasScalingFactorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''ext:segmentationFastData'') THEN
            PERFORM  a_ext_segmentationFastData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''val:protocolData'') THEN
            PERFORM  a_val_protocolData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:mrAssessorData'') THEN
            PERFORM  ae_xnat_mrAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:petAssessorData'') THEN
            PERFORM  a_xnat_petAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:qcAssessmentData'') THEN
            PERFORM  a_xnat_qcAssessmentData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:imageAssessorData'') THEN
            PERFORM  ae_xnat_imageAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:qcManualAssessorData'') THEN
            PERFORM  a_xnat_qcManualAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_derivedData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_derivedData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_derivedData.*, meta.meta_data_id FROM xnat_derivedData LEFT JOIN xnat_derivedData_meta_data meta ON xnat_derivedData.derivedData_info=meta.meta_data_id WHERE  id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_experimentData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_derivedData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.id AS xnat_derivedData0, table2.element_name AS xdat_meta_element139, table0.date AS xnat_experimentData3 FROM xnat_derivedData xnat_derivedData   LEFT JOIN xnat_experimentData table0 ON xnat_derivedData.id=table0.id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_derivedData0=$1))
      LOOP
         IF (current_row.xdat_meta_element139 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_derivedData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element139=''scr:screeningAssessment'') THEN
                PERFORM update_ls_scr_screeningAssessment( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''ext:atlasScalingFactorData'') THEN
                PERFORM update_ls_ext_atlasScalingFactorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''ext:segmentationFastData'') THEN
                PERFORM update_ls_ext_segmentationFastData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''val:protocolData'') THEN
                PERFORM update_ls_val_protocolData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:mrAssessorData'') THEN
                PERFORM update_ls_ext_xnat_mrAssessorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:petAssessorData'') THEN
                PERFORM update_ls_xnat_petAssessorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:qcAssessmentData'') THEN
                PERFORM update_ls_xnat_qcAssessmentData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:imageAssessorData'') THEN
                PERFORM update_ls_ext_xnat_imageAssessorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element139=''xnat:qcManualAssessorData'') THEN
                PERFORM update_ls_xnat_qcManualAssessorData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element139;
                    PERFORM update_ls_ext_xnat_derivedData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_derivedData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_derivedData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_derivedData','CREATE TRIGGER a_u_xnat_derivedData  AFTER UPDATE OR DELETE ON xnat_derivedData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_derivedData()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_genericData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:genericData)('';
      FOR current_row IN SELECT * FROM xnat_genericData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_experimentData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(experimentdata_experimentdata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.genericData_info IS NOT NULL)) THEN
            fullText := fullText || ''(genericdata_info:integer)=('' || current_row.genericdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_genericData_meta_data(current_row.genericData_info, child_count,$3,false,false);
              fullText := fullText || ''(genericdata_info_genericdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_experimentData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(experimentdata_experimentdata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_genericData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.id AS xnat_genericData0, table2.element_name AS xdat_meta_element138, table0.date AS xnat_experimentData2 FROM xnat_genericData xnat_genericData   LEFT JOIN xnat_experimentData table0 ON xnat_genericData.id=table0.id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_genericData0=$1))
      LOOP
         IF (current_row.xdat_meta_element138 IS NULL) THEN 
             fullText:= ie_xnat_genericData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element138=''xnat:pVisitData'') THEN
                fullText:= i_xnat_pVisitData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_genericData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_genericData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_genericData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_genericData LEFT JOIN xnat_genericData_meta_data meta ON xnat_genericData.genericData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_genericData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_experimentData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_experimentData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_genericData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.id AS xnat_genericData0, table2.element_name AS xdat_meta_element138, table0.date AS xnat_experimentData2 FROM xnat_genericData xnat_genericData   LEFT JOIN xnat_experimentData table0 ON xnat_genericData.id=table0.id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_genericData0=$1))
      LOOP
         IF (current_row.xdat_meta_element138 IS NULL) THEN 
            PERFORM  ae_xnat_genericData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element138=''xnat:pVisitData'') THEN
            PERFORM  a_xnat_pVisitData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_genericData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_genericData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:genericData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_genericData.*, meta.meta_data_id FROM xnat_genericData LEFT JOIN xnat_genericData_meta_data meta ON xnat_genericData.genericData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_genericData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_experimentData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_genericData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.id AS xnat_genericData0, table2.element_name AS xdat_meta_element138, table0.date AS xnat_experimentData2 FROM xnat_genericData xnat_genericData   LEFT JOIN xnat_experimentData table0 ON xnat_genericData.id=table0.id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_genericData0=$1))
      LOOP
         IF (current_row.xdat_meta_element138 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_genericData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element138=''xnat:pVisitData'') THEN
                PERFORM update_ls_xnat_pVisitData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element138;
                    PERFORM update_ls_ext_xnat_genericData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_genericData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_genericData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_genericData','CREATE TRIGGER a_u_xnat_genericData  AFTER UPDATE OR DELETE ON xnat_genericData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_genericData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_pVisitData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:pVisitData)('';
      FOR current_row IN SELECT * FROM xnat_pVisitData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_genericData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(genericdata_genericdata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.subject_id IS NOT NULL) THEN 
              fullText := fullText || ''(subject_id:string)=('' || REPLACE(REPLACE(current_row.subject_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visit_type IS NOT NULL) THEN 
              fullText := fullText || ''(visit_type:string)=('' || REPLACE(REPLACE(current_row.visit_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.visit_name IS NOT NULL) THEN 
              fullText := fullText || ''(visit_name:string)=('' || REPLACE(REPLACE(current_row.visit_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.notes IS NOT NULL) THEN 
              fullText := fullText || ''(notes:string)=('' || REPLACE(REPLACE(current_row.notes,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.start_date IS NOT NULL) THEN 
              fullText := fullText || ''(start_date:dateTime)=('' || current_row.start_date || '')'';
          END IF;
          IF (current_row.end_date IS NOT NULL) THEN 
              fullText := fullText || ''(end_date:dateTime)=('' || current_row.end_date || '')'';
          END IF;
          IF (current_row.closed IS NOT NULL) THEN 
              fullText := fullText || ''(closed:integer)=('' || current_row.closed || '')'';
          END IF;
          IF (current_row.terminal IS NOT NULL) THEN 
              fullText := fullText || ''(terminal:integer)=('' || current_row.terminal || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.protocolversion IS NOT NULL) THEN 
              fullText := fullText || ''(protocolversion:integer)=('' || current_row.protocolversion || '')'';
          END IF;
          IF (current_row.protocolid IS NOT NULL) THEN 
              fullText := fullText || ''(protocolid:string)=('' || REPLACE(REPLACE(current_row.protocolid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.pVisitData_info IS NOT NULL)) THEN
            fullText := fullText || ''(pvisitdata_info:integer)=('' || current_row.pvisitdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_pVisitData_meta_data(current_row.pVisitData_info, child_count,$3,false,false);
              fullText := fullText || ''(pvisitdata_info_pvisitdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_genericData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(genericdata_genericdata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_pVisitData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_pVisitData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_pVisitData LEFT JOIN xnat_pVisitData_meta_data meta ON xnat_pVisitData.pVisitData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_pVisitData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_genericData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_genericData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_pVisitData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:pVisitData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_pVisitData.*, meta.meta_data_id FROM xnat_pVisitData LEFT JOIN xnat_pVisitData_meta_data meta ON xnat_pVisitData.pVisitData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_pVisitData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_genericData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_pVisitData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_pVisitData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_pVisitData','CREATE TRIGGER a_u_xnat_pVisitData  AFTER UPDATE OR DELETE ON xnat_pVisitData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_pVisitData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_dxSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dxSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_dxSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ecgSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ecgSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_ecgSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ioSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ioSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_ioSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.ioSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(iosessiondata_info:integer)=('' || current_row.iosessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ioSessionData_meta_data(current_row.ioSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(iosessiondata_info_iosessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xa3DSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xa3DSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_xa3DSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.xa3DSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xa3dsessiondata_info:integer)=('' || current_row.xa3dsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xa3DSessionData_meta_data(current_row.xa3DSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(xa3dsessiondata_info_xa3dsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_resourceSeries_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:resourceSeries_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_resourceSeries_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_resourceSeries( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:resourceSeries)('';
      FOR current_row IN SELECT * FROM xnat_resourceSeries WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource(current_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.path IS NOT NULL) THEN 
              fullText := fullText || ''(path:string)=('' || REPLACE(REPLACE(current_row.path,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pattern IS NOT NULL) THEN 
              fullText := fullText || ''(pattern:string)=('' || REPLACE(REPLACE(current_row.pattern,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.count IS NOT NULL) THEN 
              fullText := fullText || ''(count:integer)=('' || current_row.count || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.format IS NOT NULL) THEN 
              fullText := fullText || ''(format:string)=('' || REPLACE(REPLACE(current_row.format,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.content IS NOT NULL) THEN 
              fullText := fullText || ''(content:string)=('' || REPLACE(REPLACE(current_row.content,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.cachepath IS NOT NULL) THEN 
              fullText := fullText || ''(cachepath:string)=('' || REPLACE(REPLACE(current_row.cachepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.resourceSeries_info IS NOT NULL)) THEN
            fullText := fullText || ''(resourceseries_info:integer)=('' || current_row.resourceseries_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_resourceSeries_meta_data(current_row.resourceSeries_info, child_count,$3,false,false);
              fullText := fullText || ''(resourceseries_info_resourceseries_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_resourceSeries( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.xnat_abstractresource_id AS xnat_resourceSeries0, table2.element_name AS xdat_meta_element35, table4.insert_date AS xnat_resourceSeries_meta_data54 FROM xnat_resourceSeries xnat_resourceSeries   LEFT JOIN xnat_abstractResource table0 ON xnat_resourceSeries.xnat_abstractresource_id=table0.xnat_abstractresource_id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id   LEFT JOIN xnat_resourceSeries_meta_data table4 ON xnat_resourceSeries.resourceSeries_info=table4.meta_data_id) SEARCH  WHERE 
 ( (xnat_resourceSeries0=$1))
      LOOP
         IF (current_row.xdat_meta_element35 IS NULL) THEN 
             fullText:= ie_xnat_resourceSeries( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element35=''xnat:imageResourceSeries'') THEN
                fullText:= i_xnat_imageResourceSeries( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_resourceSeries( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_resourceSeries( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_resourceSeries.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_resourceSeries LEFT JOIN xnat_resourceSeries_meta_data meta ON xnat_resourceSeries.resourceSeries_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_resourceSeries_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_abstractResource(current_row.xnat_abstractresource_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_abstractResource( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_resourceSeries( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.xnat_abstractresource_id AS xnat_resourceSeries0, table2.element_name AS xdat_meta_element35, table4.insert_date AS xnat_resourceSeries_meta_data54 FROM xnat_resourceSeries xnat_resourceSeries   LEFT JOIN xnat_abstractResource table0 ON xnat_resourceSeries.xnat_abstractresource_id=table0.xnat_abstractresource_id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id   LEFT JOIN xnat_resourceSeries_meta_data table4 ON xnat_resourceSeries.resourceSeries_info=table4.meta_data_id) SEARCH WHERE 
 ( (xnat_resourceSeries0=$1))
      LOOP
         IF (current_row.xdat_meta_element35 IS NULL) THEN 
            PERFORM  ae_xnat_resourceSeries( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element35=''xnat:imageResourceSeries'') THEN
            PERFORM  a_xnat_imageResourceSeries( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_resourceSeries( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_resourceSeries( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_resourceSeries.*, meta.meta_data_id FROM xnat_resourceSeries LEFT JOIN xnat_resourceSeries_meta_data meta ON xnat_resourceSeries.resourceSeries_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_abstractResource( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_resourceSeries( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.xnat_abstractresource_id AS xnat_resourceSeries0, table2.element_name AS xdat_meta_element35, table4.insert_date AS xnat_resourceSeries_meta_data54 FROM xnat_resourceSeries xnat_resourceSeries   LEFT JOIN xnat_abstractResource table0 ON xnat_resourceSeries.xnat_abstractresource_id=table0.xnat_abstractresource_id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id   LEFT JOIN xnat_resourceSeries_meta_data table4 ON xnat_resourceSeries.resourceSeries_info=table4.meta_data_id) SEARCH WHERE 
 ( (xnat_resourceSeries0=$1))
      LOOP
         IF (current_row.xdat_meta_element35 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_resourceSeries( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element35=''xnat:imageResourceSeries'') THEN
                PERFORM update_ls_xnat_imageResourceSeries( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element35;
                    PERFORM update_ls_ext_xnat_resourceSeries( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_resourceSeries()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_resourceSeries( OLD.xnat_abstractresource_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_resourceSeries','CREATE TRIGGER a_u_xnat_resourceSeries  AFTER UPDATE OR DELETE ON xnat_resourceSeries FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_resourceSeries()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectAssessorData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectAssessorData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_subjectAssessorData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_subjectAssessorData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectAssessorData)('';
      FOR current_row IN SELECT * FROM xnat_subjectAssessorData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_experimentData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(experimentdata_experimentdata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.subject_id IS NOT NULL) THEN 
              fullText := fullText || ''(subject_id:string)=('' || REPLACE(REPLACE(current_row.subject_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.age IS NOT NULL) THEN 
              fullText := fullText || ''(age:float)=('' || current_row.age || '')'';
          END IF;
        IF ((current_row.subjectAssessorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectassessordata_info:integer)=('' || current_row.subjectassessordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectAssessorData_meta_data(current_row.subjectAssessorData_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectassessordata_info_subjectassessordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_experimentData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(experimentdata_experimentdata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectAssessorData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.id AS xnat_subjectAssessorData0, table2.element_name AS xdat_meta_element140, table0.date AS xnat_experimentData4 FROM xnat_subjectAssessorData xnat_subjectAssessorData   LEFT JOIN xnat_experimentData table0 ON xnat_subjectAssessorData.id=table0.id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_subjectAssessorData0=$1))
      LOOP
         IF (current_row.xdat_meta_element140 IS NULL) THEN 
             fullText:= ie_xnat_subjectAssessorData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element140=''ext:clinicalAssessmentData'') THEN
                fullText:= i_ext_clinicalAssessmentData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:subjectVariablesData'') THEN
                fullText:= i_xnat_subjectVariablesData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:imageSessionData'') THEN
                fullText:= ie_xnat_imageSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:mrSessionData'') THEN
                fullText:= i_xnat_mrSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:petSessionData'') THEN
                fullText:= i_xnat_petSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:petmrSessionData'') THEN
                fullText:= i_xnat_petmrSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:ctSessionData'') THEN
                fullText:= i_xnat_ctSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:crSessionData'') THEN
                fullText:= i_xnat_crSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:dxSessionData'') THEN
                fullText:= i_xnat_dxSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:mgSessionData'') THEN
                fullText:= i_xnat_mgSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:ioSessionData'') THEN
                fullText:= i_xnat_ioSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:usSessionData'') THEN
                fullText:= i_xnat_usSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:ecgSessionData'') THEN
                fullText:= i_xnat_ecgSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:hdSessionData'') THEN
                fullText:= i_xnat_hdSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:epsSessionData'') THEN
                fullText:= i_xnat_epsSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xaSessionData'') THEN
                fullText:= i_xnat_xaSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:rfSessionData'') THEN
                fullText:= i_xnat_rfSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xa3DSessionData'') THEN
                fullText:= i_xnat_xa3DSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:dx3DCraniofacialSessionData'') THEN
                fullText:= i_xnat_dx3DCraniofacialSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:nmSessionData'') THEN
                fullText:= i_xnat_nmSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:srSessionData'') THEN
                fullText:= i_xnat_srSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:esSessionData'') THEN
                fullText:= i_xnat_esSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:esvSessionData'') THEN
                fullText:= i_xnat_esvSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:gmSessionData'') THEN
                fullText:= i_xnat_gmSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:gmvSessionData'') THEN
                fullText:= i_xnat_gmvSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:smSessionData'') THEN
                fullText:= i_xnat_smSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xcSessionData'') THEN
                fullText:= i_xnat_xcSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xcvSessionData'') THEN
                fullText:= i_xnat_xcvSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:opSessionData'') THEN
                fullText:= i_xnat_opSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:optSessionData'') THEN
                fullText:= i_xnat_optSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:rtSessionData'') THEN
                fullText:= i_xnat_rtSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:otherDicomSessionData'') THEN
                fullText:= i_xnat_otherDicomSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:megSessionData'') THEN
                fullText:= i_xnat_megSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:eegSessionData'') THEN
                fullText:= i_xnat_eegSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:sideEffectsPittsburghData'') THEN
                fullText:= i_xnat_a_sideEffectsPittsburghData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:ybocsData'') THEN
                fullText:= i_xnat_a_ybocsData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:ygtssData'') THEN
                fullText:= i_xnat_a_ygtssData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:updrs3Data'') THEN
                fullText:= i_xnat_a_updrs3Data( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:scidResearchData'') THEN
                fullText:= i_xnat_a_scidResearchData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_subjectAssessorData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_subjectAssessorData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectAssessorData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_subjectAssessorData LEFT JOIN xnat_subjectAssessorData_meta_data meta ON xnat_subjectAssessorData.subjectAssessorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_subjectAssessorData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_experimentData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_experimentData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_subjectAssessorData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.id AS xnat_subjectAssessorData0, table2.element_name AS xdat_meta_element140, table0.date AS xnat_experimentData4 FROM xnat_subjectAssessorData xnat_subjectAssessorData   LEFT JOIN xnat_experimentData table0 ON xnat_subjectAssessorData.id=table0.id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_subjectAssessorData0=$1))
      LOOP
         IF (current_row.xdat_meta_element140 IS NULL) THEN 
            PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element140=''ext:clinicalAssessmentData'') THEN
            PERFORM  a_ext_clinicalAssessmentData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:subjectVariablesData'') THEN
            PERFORM  a_xnat_subjectVariablesData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:imageSessionData'') THEN
            PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:mrSessionData'') THEN
            PERFORM  a_xnat_mrSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:petSessionData'') THEN
            PERFORM  a_xnat_petSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:petmrSessionData'') THEN
            PERFORM  a_xnat_petmrSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:ctSessionData'') THEN
            PERFORM  a_xnat_ctSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:crSessionData'') THEN
            PERFORM  a_xnat_crSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:dxSessionData'') THEN
            PERFORM  a_xnat_dxSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:mgSessionData'') THEN
            PERFORM  a_xnat_mgSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:ioSessionData'') THEN
            PERFORM  a_xnat_ioSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:usSessionData'') THEN
            PERFORM  a_xnat_usSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:ecgSessionData'') THEN
            PERFORM  a_xnat_ecgSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:hdSessionData'') THEN
            PERFORM  a_xnat_hdSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:epsSessionData'') THEN
            PERFORM  a_xnat_epsSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xaSessionData'') THEN
            PERFORM  a_xnat_xaSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:rfSessionData'') THEN
            PERFORM  a_xnat_rfSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xa3DSessionData'') THEN
            PERFORM  a_xnat_xa3DSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:dx3DCraniofacialSessionData'') THEN
            PERFORM  a_xnat_dx3DCraniofacialSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:nmSessionData'') THEN
            PERFORM  a_xnat_nmSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:srSessionData'') THEN
            PERFORM  a_xnat_srSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:esSessionData'') THEN
            PERFORM  a_xnat_esSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:esvSessionData'') THEN
            PERFORM  a_xnat_esvSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:gmSessionData'') THEN
            PERFORM  a_xnat_gmSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:gmvSessionData'') THEN
            PERFORM  a_xnat_gmvSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:smSessionData'') THEN
            PERFORM  a_xnat_smSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xcSessionData'') THEN
            PERFORM  a_xnat_xcSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xcvSessionData'') THEN
            PERFORM  a_xnat_xcvSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:opSessionData'') THEN
            PERFORM  a_xnat_opSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:optSessionData'') THEN
            PERFORM  a_xnat_optSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:rtSessionData'') THEN
            PERFORM  a_xnat_rtSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:otherDicomSessionData'') THEN
            PERFORM  a_xnat_otherDicomSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:megSessionData'') THEN
            PERFORM  a_xnat_megSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:eegSessionData'') THEN
            PERFORM  a_xnat_eegSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:sideEffectsPittsburghData'') THEN
            PERFORM  a_xnat_a_sideEffectsPittsburghData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:ybocsData'') THEN
            PERFORM  a_xnat_a_ybocsData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:ygtssData'') THEN
            PERFORM  a_xnat_a_ygtssData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:updrs3Data'') THEN
            PERFORM  a_xnat_a_updrs3Data( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:scidResearchData'') THEN
            PERFORM  a_xnat_a_scidResearchData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_subjectAssessorData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectAssessorData.*, meta.meta_data_id FROM xnat_subjectAssessorData LEFT JOIN xnat_subjectAssessorData_meta_data meta ON xnat_subjectAssessorData.subjectAssessorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:subjectData/experiments/experiment
        IF ((current_row.subject_ID IS NOT NULL)) THEN
        PERFORM update_ls_xnat_subjectData(current_row.subject_ID, $2);
        END IF;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_experimentData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_subjectAssessorData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table0.id AS xnat_subjectAssessorData0, table2.element_name AS xdat_meta_element140, table0.date AS xnat_experimentData4 FROM xnat_subjectAssessorData xnat_subjectAssessorData   LEFT JOIN xnat_experimentData table0 ON xnat_subjectAssessorData.id=table0.id   LEFT JOIN xdat_meta_element table2 ON table0.extension=table2.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_subjectAssessorData0=$1))
      LOOP
         IF (current_row.xdat_meta_element140 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element140=''ext:clinicalAssessmentData'') THEN
                PERFORM update_ls_ext_clinicalAssessmentData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:subjectVariablesData'') THEN
                PERFORM update_ls_xnat_subjectVariablesData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:imageSessionData'') THEN
                PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:mrSessionData'') THEN
                PERFORM update_ls_xnat_mrSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:petSessionData'') THEN
                PERFORM update_ls_xnat_petSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:petmrSessionData'') THEN
                PERFORM update_ls_xnat_petmrSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:ctSessionData'') THEN
                PERFORM update_ls_xnat_ctSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:crSessionData'') THEN
                PERFORM update_ls_xnat_crSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:dxSessionData'') THEN
                PERFORM update_ls_xnat_dxSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:mgSessionData'') THEN
                PERFORM update_ls_xnat_mgSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:ioSessionData'') THEN
                PERFORM update_ls_xnat_ioSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:usSessionData'') THEN
                PERFORM update_ls_xnat_usSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:ecgSessionData'') THEN
                PERFORM update_ls_xnat_ecgSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:hdSessionData'') THEN
                PERFORM update_ls_xnat_hdSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:epsSessionData'') THEN
                PERFORM update_ls_xnat_epsSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xaSessionData'') THEN
                PERFORM update_ls_xnat_xaSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:rfSessionData'') THEN
                PERFORM update_ls_xnat_rfSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xa3DSessionData'') THEN
                PERFORM update_ls_xnat_xa3DSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:dx3DCraniofacialSessionData'') THEN
                PERFORM update_ls_xnat_dx3DCraniofacialSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:nmSessionData'') THEN
                PERFORM update_ls_xnat_nmSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:srSessionData'') THEN
                PERFORM update_ls_xnat_srSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:esSessionData'') THEN
                PERFORM update_ls_xnat_esSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:esvSessionData'') THEN
                PERFORM update_ls_xnat_esvSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:gmSessionData'') THEN
                PERFORM update_ls_xnat_gmSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:gmvSessionData'') THEN
                PERFORM update_ls_xnat_gmvSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:smSessionData'') THEN
                PERFORM update_ls_xnat_smSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xcSessionData'') THEN
                PERFORM update_ls_xnat_xcSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:xcvSessionData'') THEN
                PERFORM update_ls_xnat_xcvSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:opSessionData'') THEN
                PERFORM update_ls_xnat_opSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:optSessionData'') THEN
                PERFORM update_ls_xnat_optSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:rtSessionData'') THEN
                PERFORM update_ls_xnat_rtSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:otherDicomSessionData'') THEN
                PERFORM update_ls_xnat_otherDicomSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:megSessionData'') THEN
                PERFORM update_ls_xnat_megSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat:eegSessionData'') THEN
                PERFORM update_ls_xnat_eegSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:sideEffectsPittsburghData'') THEN
                PERFORM update_ls_xnat_a_sideEffectsPittsburghData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:ybocsData'') THEN
                PERFORM update_ls_xnat_a_ybocsData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:ygtssData'') THEN
                PERFORM update_ls_xnat_a_ygtssData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:updrs3Data'') THEN
                PERFORM update_ls_xnat_a_updrs3Data( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element140=''xnat_a:scidResearchData'') THEN
                PERFORM update_ls_xnat_a_scidResearchData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element140;
                    PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_subjectAssessorData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_subjectAssessorData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_subjectAssessorData','CREATE TRIGGER a_u_xnat_subjectAssessorData  AFTER UPDATE OR DELETE ON xnat_subjectAssessorData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_subjectAssessorData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_scidResearchData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:scidResearchData)('';
      FOR current_row IN SELECT * FROM xnat_a_scidResearchData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.administrator IS NOT NULL) THEN 
              fullText := fullText || ''(administrator:string)=('' || REPLACE(REPLACE(current_row.administrator,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.moodepisodes_currentmajordepressiveepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currentmajordepressiveepisode:integer)=('' || current_row.moodepisodes_currentmajordepressiveepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_pastmajordepressiveepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_pastmajordepressiveepisode:integer)=('' || current_row.moodepisodes_pastmajordepressiveepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_currentmanicepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currentmanicepisode:integer)=('' || current_row.moodepisodes_currentmanicepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_pastmanicepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_pastmanicepisode:integer)=('' || current_row.moodepisodes_pastmanicepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_currenthypomanicepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currenthypomanicepisode:integer)=('' || current_row.moodepisodes_currenthypomanicepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_pasthypomanicepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_pasthypomanicepisode:integer)=('' || current_row.moodepisodes_pasthypomanicepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_currentdysthmicepisode IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currentdysthmicepisode:integer)=('' || current_row.moodepisodes_currentdysthmicepisode || '')'';
          END IF;
          IF (current_row.moodepisodes_currentmooddisorderduetomedicalcondition IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currentmooddisorderduetomedicalcondition:integer)=('' || current_row.moodepisodes_currentmooddisorderduetomedicalcondition || '')'';
          END IF;
          IF (current_row.moodepisodes_pastmooddisorderduetomedicalcondition IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_pastmooddisorderduetomedicalcondition:integer)=('' || current_row.moodepisodes_pastmooddisorderduetomedicalcondition || '')'';
          END IF;
          IF (current_row.moodepisodes_currentsubstanceinducedmooddisorder IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_currentsubstanceinducedmooddisorder:integer)=('' || current_row.moodepisodes_currentsubstanceinducedmooddisorder || '')'';
          END IF;
          IF (current_row.moodepisodes_pastsubstanceinducedmooddisorder IS NOT NULL) THEN 
              fullText := fullText || ''(moodepisodes_pastsubstanceinducedmooddisorder:integer)=('' || current_row.moodepisodes_pastsubstanceinducedmooddisorder || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_currentdelusions IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_currentdelusions:integer)=('' || current_row.psychoticsymptoms_currentdelusions || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_pastdelusions IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_pastdelusions:integer)=('' || current_row.psychoticsymptoms_pastdelusions || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_currenthallucinations IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_currenthallucinations:integer)=('' || current_row.psychoticsymptoms_currenthallucinations || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_pasthallucinations IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_pasthallucinations:integer)=('' || current_row.psychoticsymptoms_pasthallucinations || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_currentdisorganizedspeechbehavior IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_currentdisorganizedspeechbehavior:integer)=('' || current_row.psychoticsymptoms_currentdisorganizedspeechbehavior || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_pastdisorganizedspeechbehavior IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_pastdisorganizedspeechbehavior:integer)=('' || current_row.psychoticsymptoms_pastdisorganizedspeechbehavior || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_currentcatatonicbehavior IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_currentcatatonicbehavior:integer)=('' || current_row.psychoticsymptoms_currentcatatonicbehavior || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_pastcatatonicbehavior IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_pastcatatonicbehavior:integer)=('' || current_row.psychoticsymptoms_pastcatatonicbehavior || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_currentnegativesymptoms IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_currentnegativesymptoms:integer)=('' || current_row.psychoticsymptoms_currentnegativesymptoms || '')'';
          END IF;
          IF (current_row.psychoticsymptoms_pastnegativesymptoms IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticsymptoms_pastnegativesymptoms:integer)=('' || current_row.psychoticsymptoms_pastnegativesymptoms || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentschizophrenia IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentschizophrenia:integer)=('' || current_row.psychoticdisorders_currentschizophrenia || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastschizophrenia IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastschizophrenia:integer)=('' || current_row.psychoticdisorders_pastschizophrenia || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentparanoidtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentparanoidtype:integer)=('' || current_row.psychoticdisorders_currentparanoidtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastparanoidtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastparanoidtype:integer)=('' || current_row.psychoticdisorders_pastparanoidtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentcatatonictype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentcatatonictype:integer)=('' || current_row.psychoticdisorders_currentcatatonictype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastcatatonictype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastcatatonictype:integer)=('' || current_row.psychoticdisorders_pastcatatonictype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentdisorganizedtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentdisorganizedtype:integer)=('' || current_row.psychoticdisorders_currentdisorganizedtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastdisorganizedtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastdisorganizedtype:integer)=('' || current_row.psychoticdisorders_pastdisorganizedtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentundifferentiatedtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentundifferentiatedtype:integer)=('' || current_row.psychoticdisorders_currentundifferentiatedtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastundifferentiatedtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastundifferentiatedtype:integer)=('' || current_row.psychoticdisorders_pastundifferentiatedtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentresidualtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentresidualtype:integer)=('' || current_row.psychoticdisorders_currentresidualtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastresidualtype IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastresidualtype:integer)=('' || current_row.psychoticdisorders_pastresidualtype || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentschizophreniformdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentschizophreniformdisorder:integer)=('' || current_row.psychoticdisorders_currentschizophreniformdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastschizophreniformdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastschizophreniformdisorder:integer)=('' || current_row.psychoticdisorders_pastschizophreniformdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentschizoaffectivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentschizoaffectivedisorder:integer)=('' || current_row.psychoticdisorders_currentschizoaffectivedisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastschizoaffectivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastschizoaffectivedisorder:integer)=('' || current_row.psychoticdisorders_pastschizoaffectivedisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentdelusionaldisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentdelusionaldisorder:integer)=('' || current_row.psychoticdisorders_currentdelusionaldisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastdelusionaldisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastdelusionaldisorder:integer)=('' || current_row.psychoticdisorders_pastdelusionaldisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentbriefpsychoticdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentbriefpsychoticdisorder:integer)=('' || current_row.psychoticdisorders_currentbriefpsychoticdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastbriefpsychoticdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastbriefpsychoticdisorder:integer)=('' || current_row.psychoticdisorders_pastbriefpsychoticdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentpsychoticdisorderduetomedicalconditio IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentpsychoticdisorderduetomedicalconditio:integer)=('' || current_row.psychoticdisorders_currentpsychoticdisorderduetomedicalconditio || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastpsychoticdisorderduetomedicalcondition IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastpsychoticdisorderduetomedicalcondition:integer)=('' || current_row.psychoticdisorders_pastpsychoticdisorderduetomedicalcondition || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentsubstanceinducedpsychoticdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentsubstanceinducedpsychoticdisorder:integer)=('' || current_row.psychoticdisorders_currentsubstanceinducedpsychoticdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastsubstanceinducedpsychoticdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastsubstanceinducedpsychoticdisorder:integer)=('' || current_row.psychoticdisorders_pastsubstanceinducedpsychoticdisorder || '')'';
          END IF;
          IF (current_row.psychoticdisorders_currentpsychoticdisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_currentpsychoticdisordernos:integer)=('' || current_row.psychoticdisorders_currentpsychoticdisordernos || '')'';
          END IF;
          IF (current_row.psychoticdisorders_pastpsychoticdisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(psychoticdisorders_pastpsychoticdisordernos:integer)=('' || current_row.psychoticdisorders_pastpsychoticdisordernos || '')'';
          END IF;
          IF (current_row.mooddisorders_currentbipolar1disorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_currentbipolar1disorder:integer)=('' || current_row.mooddisorders_currentbipolar1disorder || '')'';
          END IF;
          IF (current_row.mooddisorders_pastbipolar1disorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_pastbipolar1disorder:integer)=('' || current_row.mooddisorders_pastbipolar1disorder || '')'';
          END IF;
          IF (current_row.mooddisorders_currentbipolar2disorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_currentbipolar2disorder:integer)=('' || current_row.mooddisorders_currentbipolar2disorder || '')'';
          END IF;
          IF (current_row.mooddisorders_pastbipolar2disorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_pastbipolar2disorder:integer)=('' || current_row.mooddisorders_pastbipolar2disorder || '')'';
          END IF;
          IF (current_row.mooddisorders_currentotherbipolardisorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_currentotherbipolardisorder:integer)=('' || current_row.mooddisorders_currentotherbipolardisorder || '')'';
          END IF;
          IF (current_row.mooddisorders_pastotherbipolardisorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_pastotherbipolardisorder:integer)=('' || current_row.mooddisorders_pastotherbipolardisorder || '')'';
          END IF;
          IF (current_row.mooddisorders_currentmajordepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_currentmajordepressivedisorder:integer)=('' || current_row.mooddisorders_currentmajordepressivedisorder || '')'';
          END IF;
          IF (current_row.mooddisorders_pastmajordepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_pastmajordepressivedisorder:integer)=('' || current_row.mooddisorders_pastmajordepressivedisorder || '')'';
          END IF;
          IF (current_row.mooddisorders_currentdepressivedisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_currentdepressivedisordernos:integer)=('' || current_row.mooddisorders_currentdepressivedisordernos || '')'';
          END IF;
          IF (current_row.mooddisorders_pastdepressivedisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(mooddisorders_pastdepressivedisordernos:integer)=('' || current_row.mooddisorders_pastdepressivedisordernos || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentalcoholdependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentalcoholdependence:integer)=('' || current_row.substanceusedisorders_currentalcoholdependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastalcoholdependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastalcoholdependence:integer)=('' || current_row.substanceusedisorders_pastalcoholdependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentalcoholabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentalcoholabuse:integer)=('' || current_row.substanceusedisorders_currentalcoholabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastalcoholabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastalcoholabuse:integer)=('' || current_row.substanceusedisorders_pastalcoholabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentamphetaminedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentamphetaminedependence:integer)=('' || current_row.substanceusedisorders_currentamphetaminedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastamphetaminedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastamphetaminedependence:integer)=('' || current_row.substanceusedisorders_pastamphetaminedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentamphetamineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentamphetamineabuse:integer)=('' || current_row.substanceusedisorders_currentamphetamineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastamphetamineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastamphetamineabuse:integer)=('' || current_row.substanceusedisorders_pastamphetamineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentcannabisdependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentcannabisdependence:integer)=('' || current_row.substanceusedisorders_currentcannabisdependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastcannabisdependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastcannabisdependence:integer)=('' || current_row.substanceusedisorders_pastcannabisdependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentcannabisabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentcannabisabuse:integer)=('' || current_row.substanceusedisorders_currentcannabisabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastcannabisabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastcannabisabuse:integer)=('' || current_row.substanceusedisorders_pastcannabisabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentcocainedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentcocainedependence:integer)=('' || current_row.substanceusedisorders_currentcocainedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastcocainedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastcocainedependence:integer)=('' || current_row.substanceusedisorders_pastcocainedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentcocaineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentcocaineabuse:integer)=('' || current_row.substanceusedisorders_currentcocaineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastcocaineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastcocaineabuse:integer)=('' || current_row.substanceusedisorders_pastcocaineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currenthallucinogendependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currenthallucinogendependence:integer)=('' || current_row.substanceusedisorders_currenthallucinogendependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pasthallucinogendependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pasthallucinogendependence:integer)=('' || current_row.substanceusedisorders_pasthallucinogendependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currenthallucinogenabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currenthallucinogenabuse:integer)=('' || current_row.substanceusedisorders_currenthallucinogenabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pasthallucinogenabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pasthallucinogenabuse:integer)=('' || current_row.substanceusedisorders_pasthallucinogenabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentopioiddependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentopioiddependence:integer)=('' || current_row.substanceusedisorders_currentopioiddependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastopioiddependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastopioiddependence:integer)=('' || current_row.substanceusedisorders_pastopioiddependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentopioidabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentopioidabuse:integer)=('' || current_row.substanceusedisorders_currentopioidabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastopioidabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastopioidabuse:integer)=('' || current_row.substanceusedisorders_pastopioidabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentphencyclidinedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentphencyclidinedependence:integer)=('' || current_row.substanceusedisorders_currentphencyclidinedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastphencyclidinedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastphencyclidinedependence:integer)=('' || current_row.substanceusedisorders_pastphencyclidinedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentphencyclidineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentphencyclidineabuse:integer)=('' || current_row.substanceusedisorders_currentphencyclidineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastphencyclidineabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastphencyclidineabuse:integer)=('' || current_row.substanceusedisorders_pastphencyclidineabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentsedativehypnoticanxiolyticdependen IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentsedativehypnoticanxiolyticdependen:integer)=('' || current_row.substanceusedisorders_currentsedativehypnoticanxiolyticdependen || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastsedativehypnoticanxiolyticdependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastsedativehypnoticanxiolyticdependence:integer)=('' || current_row.substanceusedisorders_pastsedativehypnoticanxiolyticdependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentsedativehypnoticanxiolyticabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentsedativehypnoticanxiolyticabuse:integer)=('' || current_row.substanceusedisorders_currentsedativehypnoticanxiolyticabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastsedativehypnoticanxiolyticabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastsedativehypnoticanxiolyticabuse:integer)=('' || current_row.substanceusedisorders_pastsedativehypnoticanxiolyticabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentpolysubstancedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentpolysubstancedependence:integer)=('' || current_row.substanceusedisorders_currentpolysubstancedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastpolysubstancedependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastpolysubstancedependence:integer)=('' || current_row.substanceusedisorders_pastpolysubstancedependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentotherorunknowndependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentotherorunknowndependence:integer)=('' || current_row.substanceusedisorders_currentotherorunknowndependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastotherorunknowndependence IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastotherorunknowndependence:integer)=('' || current_row.substanceusedisorders_pastotherorunknowndependence || '')'';
          END IF;
          IF (current_row.substanceusedisorders_currentotherorunknownabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_currentotherorunknownabuse:integer)=('' || current_row.substanceusedisorders_currentotherorunknownabuse || '')'';
          END IF;
          IF (current_row.substanceusedisorders_pastotherorunknownabuse IS NOT NULL) THEN 
              fullText := fullText || ''(substanceusedisorders_pastotherorunknownabuse:integer)=('' || current_row.substanceusedisorders_pastotherorunknownabuse || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentpanicwithagoraphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentpanicwithagoraphobia:integer)=('' || current_row.anxietydisorders_currentpanicwithagoraphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastpanicwithagoraphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastpanicwithagoraphobia:integer)=('' || current_row.anxietydisorders_pastpanicwithagoraphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentpanicwithoutagoraphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentpanicwithoutagoraphobia:integer)=('' || current_row.anxietydisorders_currentpanicwithoutagoraphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastpanicwithoutagoraphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastpanicwithoutagoraphobia:integer)=('' || current_row.anxietydisorders_pastpanicwithoutagoraphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentagoraphobiawithoutpanichx IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentagoraphobiawithoutpanichx:integer)=('' || current_row.anxietydisorders_currentagoraphobiawithoutpanichx || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastagoraphobiawithoutpanichx IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastagoraphobiawithoutpanichx:integer)=('' || current_row.anxietydisorders_pastagoraphobiawithoutpanichx || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentsocialphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentsocialphobia:integer)=('' || current_row.anxietydisorders_currentsocialphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastsocialphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastsocialphobia:integer)=('' || current_row.anxietydisorders_pastsocialphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentspecificphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentspecificphobia:integer)=('' || current_row.anxietydisorders_currentspecificphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastspecificphobia IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastspecificphobia:integer)=('' || current_row.anxietydisorders_pastspecificphobia || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentocd IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentocd:integer)=('' || current_row.anxietydisorders_currentocd || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastocd IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastocd:integer)=('' || current_row.anxietydisorders_pastocd || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentptsd IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentptsd:integer)=('' || current_row.anxietydisorders_currentptsd || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastptsd IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastptsd:integer)=('' || current_row.anxietydisorders_pastptsd || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentgeneralizedanxietydisorder IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentgeneralizedanxietydisorder:integer)=('' || current_row.anxietydisorders_currentgeneralizedanxietydisorder || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentanxietyduetomedicalcondition IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentanxietyduetomedicalcondition:integer)=('' || current_row.anxietydisorders_currentanxietyduetomedicalcondition || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastanxietyduetomedicalcondition IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastanxietyduetomedicalcondition:integer)=('' || current_row.anxietydisorders_pastanxietyduetomedicalcondition || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentsubstanceinducedanxietydisorder IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentsubstanceinducedanxietydisorder:integer)=('' || current_row.anxietydisorders_currentsubstanceinducedanxietydisorder || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastsubstanceinducedanxietydisorder IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastsubstanceinducedanxietydisorder:integer)=('' || current_row.anxietydisorders_pastsubstanceinducedanxietydisorder || '')'';
          END IF;
          IF (current_row.anxietydisorders_currentanxietydisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_currentanxietydisordernos:integer)=('' || current_row.anxietydisorders_currentanxietydisordernos || '')'';
          END IF;
          IF (current_row.anxietydisorders_pastanxietydisordernos IS NOT NULL) THEN 
              fullText := fullText || ''(anxietydisorders_pastanxietydisordernos:integer)=('' || current_row.anxietydisorders_pastanxietydisordernos || '')'';
          END IF;
          IF (current_row.somatoformdisorders_somatizationdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(somatoformdisorders_somatizationdisorder:integer)=('' || current_row.somatoformdisorders_somatizationdisorder || '')'';
          END IF;
          IF (current_row.somatoformdisorders_undifferentiatedsomatformdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(somatoformdisorders_undifferentiatedsomatformdisorder:integer)=('' || current_row.somatoformdisorders_undifferentiatedsomatformdisorder || '')'';
          END IF;
          IF (current_row.somatoformdisorders_paindisorder IS NOT NULL) THEN 
              fullText := fullText || ''(somatoformdisorders_paindisorder:integer)=('' || current_row.somatoformdisorders_paindisorder || '')'';
          END IF;
          IF (current_row.somatoformdisorders_hypochondriasis IS NOT NULL) THEN 
              fullText := fullText || ''(somatoformdisorders_hypochondriasis:integer)=('' || current_row.somatoformdisorders_hypochondriasis || '')'';
          END IF;
          IF (current_row.somatoformdisorders_bodydysmorphicdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(somatoformdisorders_bodydysmorphicdisorder:integer)=('' || current_row.somatoformdisorders_bodydysmorphicdisorder || '')'';
          END IF;
          IF (current_row.eatingdisorders_currentanorexianervosa IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_currentanorexianervosa:integer)=('' || current_row.eatingdisorders_currentanorexianervosa || '')'';
          END IF;
          IF (current_row.eatingdisorders_pastanorexianervosa IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_pastanorexianervosa:integer)=('' || current_row.eatingdisorders_pastanorexianervosa || '')'';
          END IF;
          IF (current_row.eatingdisorders_currentbulimianervosa IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_currentbulimianervosa:integer)=('' || current_row.eatingdisorders_currentbulimianervosa || '')'';
          END IF;
          IF (current_row.eatingdisorders_pastbulimianervosa IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_pastbulimianervosa:integer)=('' || current_row.eatingdisorders_pastbulimianervosa || '')'';
          END IF;
          IF (current_row.eatingdisorders_currentbingeeatingdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_currentbingeeatingdisorder:integer)=('' || current_row.eatingdisorders_currentbingeeatingdisorder || '')'';
          END IF;
          IF (current_row.eatingdisorders_pastbingeeatingdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(eatingdisorders_pastbingeeatingdisorder:integer)=('' || current_row.eatingdisorders_pastbingeeatingdisorder || '')'';
          END IF;
          IF (current_row.adjustmentdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(adjustmentdisorder:integer)=('' || current_row.adjustmentdisorder || '')'';
          END IF;
          IF (current_row.optional_currentacutestressdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_currentacutestressdisorder:integer)=('' || current_row.optional_currentacutestressdisorder || '')'';
          END IF;
          IF (current_row.optional_pastacutestressdisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_pastacutestressdisorder:integer)=('' || current_row.optional_pastacutestressdisorder || '')'';
          END IF;
          IF (current_row.optional_currentminordepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_currentminordepressivedisorder:integer)=('' || current_row.optional_currentminordepressivedisorder || '')'';
          END IF;
          IF (current_row.optional_pastminordepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_pastminordepressivedisorder:integer)=('' || current_row.optional_pastminordepressivedisorder || '')'';
          END IF;
          IF (current_row.optional_currentmixedanxietydepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_currentmixedanxietydepressivedisorder:integer)=('' || current_row.optional_currentmixedanxietydepressivedisorder || '')'';
          END IF;
          IF (current_row.optional_pastmixedanxietydepressivedisorder IS NOT NULL) THEN 
              fullText := fullText || ''(optional_pastmixedanxietydepressivedisorder:integer)=('' || current_row.optional_pastmixedanxietydepressivedisorder || '')'';
          END IF;
          IF (current_row.optional_pastsympomaticdetails IS NOT NULL) THEN 
              fullText := fullText || ''(optional_pastsympomaticdetails:string)=('' || REPLACE(REPLACE(current_row.optional_pastsympomaticdetails,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.scidResearchData_info IS NOT NULL)) THEN
            fullText := fullText || ''(scidresearchdata_info:integer)=('' || current_row.scidresearchdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_a_scidResearchData_meta_data(current_row.scidResearchData_info, child_count,$3,false,false);
              fullText := fullText || ''(scidresearchdata_info_scidresearchdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_a_scidResearchData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_a_scidResearchData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_a_scidResearchData LEFT JOIN xnat_a_scidResearchData_meta_data meta ON xnat_a_scidResearchData.scidResearchData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_a_scidResearchData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_subjectAssessorData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_a_scidResearchData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat_a:scidResearchData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_a_scidResearchData.*, meta.meta_data_id FROM xnat_a_scidResearchData LEFT JOIN xnat_a_scidResearchData_meta_data meta ON xnat_a_scidResearchData.scidResearchData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_a_scidResearchData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_a_scidResearchData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_a_scidResearchData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_a_scidResearchData','CREATE TRIGGER a_u_xnat_a_scidResearchData  AFTER UPDATE OR DELETE ON xnat_a_scidResearchData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_a_scidResearchData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_updrs3Data( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:updrs3Data)('';
      FOR current_row IN SELECT * FROM xnat_a_updrs3Data WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.inscanner IS NOT NULL) THEN 
              fullText := fullText || ''(inscanner:integer)=('' || current_row.inscanner || '')'';
          END IF;
          IF (current_row.clicker_right IS NOT NULL) THEN 
              fullText := fullText || ''(clicker_right:integer)=('' || current_row.clicker_right || '')'';
          END IF;
          IF (current_row.clicker_left IS NOT NULL) THEN 
              fullText := fullText || ''(clicker_left:integer)=('' || current_row.clicker_left || '')'';
          END IF;
          IF (current_row.clicker_interval IS NOT NULL) THEN 
              fullText := fullText || ''(clicker_interval:integer)=('' || current_row.clicker_interval || '')'';
          END IF;
          IF (current_row.tremorrest_face IS NOT NULL) THEN 
              fullText := fullText || ''(tremorrest_face:string)=('' || REPLACE(REPLACE(current_row.tremorrest_face,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tremorrest_rue IS NOT NULL) THEN 
              fullText := fullText || ''(tremorrest_rue:string)=('' || REPLACE(REPLACE(current_row.tremorrest_rue,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tremorrest_lue IS NOT NULL) THEN 
              fullText := fullText || ''(tremorrest_lue:string)=('' || REPLACE(REPLACE(current_row.tremorrest_lue,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tremorrest_rle IS NOT NULL) THEN 
              fullText := fullText || ''(tremorrest_rle:string)=('' || REPLACE(REPLACE(current_row.tremorrest_rle,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tremorrest_lle IS NOT NULL) THEN 
              fullText := fullText || ''(tremorrest_lle:string)=('' || REPLACE(REPLACE(current_row.tremorrest_lle,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rigidity_neck IS NOT NULL) THEN 
              fullText := fullText || ''(rigidity_neck:string)=('' || REPLACE(REPLACE(current_row.rigidity_neck,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rigidity_rue IS NOT NULL) THEN 
              fullText := fullText || ''(rigidity_rue:string)=('' || REPLACE(REPLACE(current_row.rigidity_rue,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rigidity_lue IS NOT NULL) THEN 
              fullText := fullText || ''(rigidity_lue:string)=('' || REPLACE(REPLACE(current_row.rigidity_lue,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rigidity_rle IS NOT NULL) THEN 
              fullText := fullText || ''(rigidity_rle:string)=('' || REPLACE(REPLACE(current_row.rigidity_rle,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rigidity_lle IS NOT NULL) THEN 
              fullText := fullText || ''(rigidity_lle:string)=('' || REPLACE(REPLACE(current_row.rigidity_lle,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.handmovementsgrip_right IS NOT NULL) THEN 
              fullText := fullText || ''(handmovementsgrip_right:integer)=('' || current_row.handmovementsgrip_right || '')'';
          END IF;
          IF (current_row.handmovementsgrip_left IS NOT NULL) THEN 
              fullText := fullText || ''(handmovementsgrip_left:integer)=('' || current_row.handmovementsgrip_left || '')'';
          END IF;
          IF (current_row.facialexpression IS NOT NULL) THEN 
              fullText := fullText || ''(facialexpression:integer)=('' || current_row.facialexpression || '')'';
          END IF;
          IF (current_row.gait IS NOT NULL) THEN 
              fullText := fullText || ''(gait:integer)=('' || current_row.gait || '')'';
          END IF;
          IF (current_row.speech IS NOT NULL) THEN 
              fullText := fullText || ''(speech:integer)=('' || current_row.speech || '')'';
          END IF;
          IF (current_row.writing IS NOT NULL) THEN 
              fullText := fullText || ''(writing:integer)=('' || current_row.writing || '')'';
          END IF;
          IF (current_row.arisefromchair IS NOT NULL) THEN 
              fullText := fullText || ''(arisefromchair:integer)=('' || current_row.arisefromchair || '')'';
          END IF;
          IF (current_row.actionposturaltremor_right IS NOT NULL) THEN 
              fullText := fullText || ''(actionposturaltremor_right:integer)=('' || current_row.actionposturaltremor_right || '')'';
          END IF;
          IF (current_row.actionposturaltremor_left IS NOT NULL) THEN 
              fullText := fullText || ''(actionposturaltremor_left:integer)=('' || current_row.actionposturaltremor_left || '')'';
          END IF;
          IF (current_row.handsram_right IS NOT NULL) THEN 
              fullText := fullText || ''(handsram_right:integer)=('' || current_row.handsram_right || '')'';
          END IF;
          IF (current_row.handsram_left IS NOT NULL) THEN 
              fullText := fullText || ''(handsram_left:integer)=('' || current_row.handsram_left || '')'';
          END IF;
          IF (current_row.fingertaps_right IS NOT NULL) THEN 
              fullText := fullText || ''(fingertaps_right:integer)=('' || current_row.fingertaps_right || '')'';
          END IF;
          IF (current_row.fingertaps_left IS NOT NULL) THEN 
              fullText := fullText || ''(fingertaps_left:integer)=('' || current_row.fingertaps_left || '')'';
          END IF;
          IF (current_row.posture IS NOT NULL) THEN 
              fullText := fullText || ''(posture:integer)=('' || current_row.posture || '')'';
          END IF;
          IF (current_row.posturalstability IS NOT NULL) THEN 
              fullText := fullText || ''(posturalstability:integer)=('' || current_row.posturalstability || '')'';
          END IF;
          IF (current_row.foottaps_right IS NOT NULL) THEN 
              fullText := fullText || ''(foottaps_right:integer)=('' || current_row.foottaps_right || '')'';
          END IF;
          IF (current_row.foottaps_left IS NOT NULL) THEN 
              fullText := fullText || ''(foottaps_left:integer)=('' || current_row.foottaps_left || '')'';
          END IF;
          IF (current_row.bodybradykinesiahypokinesia IS NOT NULL) THEN 
              fullText := fullText || ''(bodybradykinesiahypokinesia:integer)=('' || current_row.bodybradykinesiahypokinesia || '')'';
          END IF;
          IF (current_row.problem IS NOT NULL) THEN 
              fullText := fullText || ''(problem:integer)=('' || current_row.problem || '')'';
          END IF;
        IF ((current_row.updrs3Data_info IS NOT NULL)) THEN
            fullText := fullText || ''(updrs3data_info:integer)=('' || current_row.updrs3data_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_a_updrs3Data_meta_data(current_row.updrs3Data_info, child_count,$3,false,false);
              fullText := fullText || ''(updrs3data_info_updrs3data_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_a_updrs3Data( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_a_updrs3Data.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_a_updrs3Data LEFT JOIN xnat_a_updrs3Data_meta_data meta ON xnat_a_updrs3Data.updrs3Data_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_a_updrs3Data_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_subjectAssessorData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_a_updrs3Data( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat_a:updrs3Data'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_a_updrs3Data.*, meta.meta_data_id FROM xnat_a_updrs3Data LEFT JOIN xnat_a_updrs3Data_meta_data meta ON xnat_a_updrs3Data.updrs3Data_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_a_updrs3Data_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_a_updrs3Data()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_a_updrs3Data( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_a_updrs3Data','CREATE TRIGGER a_u_xnat_a_updrs3Data  AFTER UPDATE OR DELETE ON xnat_a_updrs3Data FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_a_updrs3Data()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_ygtssData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:ygtssData)('';
      FOR current_row IN SELECT * FROM xnat_a_ygtssData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.filledoutby IS NOT NULL) THEN 
              fullText := fullText || ''(filledoutby:string)=('' || REPLACE(REPLACE(current_row.filledoutby,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.period IS NOT NULL) THEN 
              fullText := fullText || ''(period:string)=('' || REPLACE(REPLACE(current_row.period,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.worsteverage IS NOT NULL) THEN 
              fullText := fullText || ''(worsteverage:float)=('' || current_row.worsteverage || '')'';
          END IF;
          IF (current_row.motor_number IS NOT NULL) THEN 
              fullText := fullText || ''(motor_number:integer)=('' || current_row.motor_number || '')'';
          END IF;
          IF (current_row.motor_frequency IS NOT NULL) THEN 
              fullText := fullText || ''(motor_frequency:integer)=('' || current_row.motor_frequency || '')'';
          END IF;
          IF (current_row.motor_intensity IS NOT NULL) THEN 
              fullText := fullText || ''(motor_intensity:integer)=('' || current_row.motor_intensity || '')'';
          END IF;
          IF (current_row.motor_complexity IS NOT NULL) THEN 
              fullText := fullText || ''(motor_complexity:integer)=('' || current_row.motor_complexity || '')'';
          END IF;
          IF (current_row.motor_interference IS NOT NULL) THEN 
              fullText := fullText || ''(motor_interference:integer)=('' || current_row.motor_interference || '')'';
          END IF;
          IF (current_row.motor_inventory IS NOT NULL) THEN 
              fullText := fullText || ''(motor_inventory:string)=('' || REPLACE(REPLACE(current_row.motor_inventory,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.phonic_number IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_number:integer)=('' || current_row.phonic_number || '')'';
          END IF;
          IF (current_row.phonic_frequency IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_frequency:integer)=('' || current_row.phonic_frequency || '')'';
          END IF;
          IF (current_row.phonic_intensity IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_intensity:integer)=('' || current_row.phonic_intensity || '')'';
          END IF;
          IF (current_row.phonic_complexity IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_complexity:integer)=('' || current_row.phonic_complexity || '')'';
          END IF;
          IF (current_row.phonic_interference IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_interference:integer)=('' || current_row.phonic_interference || '')'';
          END IF;
          IF (current_row.phonic_inventory IS NOT NULL) THEN 
              fullText := fullText || ''(phonic_inventory:string)=('' || REPLACE(REPLACE(current_row.phonic_inventory,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.impairment IS NOT NULL) THEN 
              fullText := fullText || ''(impairment:integer)=('' || current_row.impairment || '')'';
          END IF;
        IF ((current_row.ygtssData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ygtssdata_info:integer)=('' || current_row.ygtssdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_a_ygtssData_meta_data(current_row.ygtssData_info, child_count,$3,false,false);
              fullText := fullText || ''(ygtssdata_info_ygtssdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_a_ygtssData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_a_ygtssData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_a_ygtssData LEFT JOIN xnat_a_ygtssData_meta_data meta ON xnat_a_ygtssData.ygtssData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_a_ygtssData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_subjectAssessorData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_a_ygtssData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat_a:ygtssData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_a_ygtssData.*, meta.meta_data_id FROM xnat_a_ygtssData LEFT JOIN xnat_a_ygtssData_meta_data meta ON xnat_a_ygtssData.ygtssData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_a_ygtssData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_a_ygtssData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_a_ygtssData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_a_ygtssData','CREATE TRIGGER a_u_xnat_a_ygtssData  AFTER UPDATE OR DELETE ON xnat_a_ygtssData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_a_ygtssData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_ybocsData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:ybocsData)('';
      FOR current_row IN SELECT * FROM xnat_a_ybocsData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.currentorworstever IS NOT NULL) THEN 
              fullText := fullText || ''(currentorworstever:string)=('' || REPLACE(REPLACE(current_row.currentorworstever,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.timeoccupiedwiththoughts IS NOT NULL) THEN 
              fullText := fullText || ''(timeoccupiedwiththoughts:integer)=('' || current_row.timeoccupiedwiththoughts || '')'';
          END IF;
          IF (current_row.thoughtsinterferefunctioning IS NOT NULL) THEN 
              fullText := fullText || ''(thoughtsinterferefunctioning:integer)=('' || current_row.thoughtsinterferefunctioning || '')'';
          END IF;
          IF (current_row.distresscaused IS NOT NULL) THEN 
              fullText := fullText || ''(distresscaused:integer)=('' || current_row.distresscaused || '')'';
          END IF;
          IF (current_row.efforttoresistthoughts IS NOT NULL) THEN 
              fullText := fullText || ''(efforttoresistthoughts:integer)=('' || current_row.efforttoresistthoughts || '')'';
          END IF;
          IF (current_row.controloverthoughts IS NOT NULL) THEN 
              fullText := fullText || ''(controloverthoughts:integer)=('' || current_row.controloverthoughts || '')'';
          END IF;
          IF (current_row.timeperforming IS NOT NULL) THEN 
              fullText := fullText || ''(timeperforming:integer)=('' || current_row.timeperforming || '')'';
          END IF;
          IF (current_row.behaviorsinterferefunctioning IS NOT NULL) THEN 
              fullText := fullText || ''(behaviorsinterferefunctioning:integer)=('' || current_row.behaviorsinterferefunctioning || '')'';
          END IF;
          IF (current_row.feelingifprevented IS NOT NULL) THEN 
              fullText := fullText || ''(feelingifprevented:integer)=('' || current_row.feelingifprevented || '')'';
          END IF;
          IF (current_row.efforttoresistbehaviors IS NOT NULL) THEN 
              fullText := fullText || ''(efforttoresistbehaviors:integer)=('' || current_row.efforttoresistbehaviors || '')'';
          END IF;
          IF (current_row.behaviordrivestrength IS NOT NULL) THEN 
              fullText := fullText || ''(behaviordrivestrength:integer)=('' || current_row.behaviordrivestrength || '')'';
          END IF;
          IF (current_row.untiljustright IS NOT NULL) THEN 
              fullText := fullText || ''(untiljustright:integer)=('' || current_row.untiljustright || '')'';
          END IF;
          IF (current_row.untiljustrightawareness IS NOT NULL) THEN 
              fullText := fullText || ''(untiljustrightawareness:string)=('' || REPLACE(REPLACE(current_row.untiljustrightawareness,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.untiljustrightperceptions IS NOT NULL) THEN 
              fullText := fullText || ''(untiljustrightperceptions:string)=('' || REPLACE(REPLACE(current_row.untiljustrightperceptions,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.whenstartuntiljustright IS NOT NULL) THEN 
              fullText := fullText || ''(whenstartuntiljustright:string)=('' || REPLACE(REPLACE(current_row.whenstartuntiljustright,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.frequencyuntiljustright IS NOT NULL) THEN 
              fullText := fullText || ''(frequencyuntiljustright:string)=('' || REPLACE(REPLACE(current_row.frequencyuntiljustright,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.firstuntiljustrightage IS NOT NULL) THEN 
              fullText := fullText || ''(firstuntiljustrightage:float)=('' || current_row.firstuntiljustrightage || '')'';
          END IF;
        IF ((current_row.ybocsData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ybocsdata_info:integer)=('' || current_row.ybocsdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_a_ybocsData_meta_data(current_row.ybocsData_info, child_count,$3,false,false);
              fullText := fullText || ''(ybocsdata_info_ybocsdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_a_ybocsData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_a_ybocsData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_a_ybocsData LEFT JOIN xnat_a_ybocsData_meta_data meta ON xnat_a_ybocsData.ybocsData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_a_ybocsData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_subjectAssessorData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_a_ybocsData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat_a:ybocsData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_a_ybocsData.*, meta.meta_data_id FROM xnat_a_ybocsData LEFT JOIN xnat_a_ybocsData_meta_data meta ON xnat_a_ybocsData.ybocsData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_a_ybocsData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_a_ybocsData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_a_ybocsData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_a_ybocsData','CREATE TRIGGER a_u_xnat_a_ybocsData  AFTER UPDATE OR DELETE ON xnat_a_ybocsData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_a_ybocsData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_a_sideEffectsPittsburghData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat_a:sideEffectsPittsburghData)('';
      FOR current_row IN SELECT * FROM xnat_a_sideEffectsPittsburghData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.motortics IS NOT NULL) THEN 
              fullText := fullText || ''(motortics:integer)=('' || current_row.motortics || '')'';
          END IF;
          IF (current_row.buccal_lingualmovements IS NOT NULL) THEN 
              fullText := fullText || ''(buccal_lingualmovements:integer)=('' || current_row.buccal_lingualmovements || '')'';
          END IF;
          IF (current_row.picking_skin_fingers_nails_lip IS NOT NULL) THEN 
              fullText := fullText || ''(picking_skin_fingers_nails_lip:integer)=('' || current_row.picking_skin_fingers_nails_lip || '')'';
          END IF;
          IF (current_row.worried_anxious IS NOT NULL) THEN 
              fullText := fullText || ''(worried_anxious:integer)=('' || current_row.worried_anxious || '')'';
          END IF;
          IF (current_row.dull_tired_listless IS NOT NULL) THEN 
              fullText := fullText || ''(dull_tired_listless:integer)=('' || current_row.dull_tired_listless || '')'';
          END IF;
          IF (current_row.sedation IS NOT NULL) THEN 
              fullText := fullText || ''(sedation:integer)=('' || current_row.sedation || '')'';
          END IF;
          IF (current_row.stomachache IS NOT NULL) THEN 
              fullText := fullText || ''(stomachache:integer)=('' || current_row.stomachache || '')'';
          END IF;
          IF (current_row.nausea_vomiting IS NOT NULL) THEN 
              fullText := fullText || ''(nausea_vomiting:integer)=('' || current_row.nausea_vomiting || '')'';
          END IF;
          IF (current_row.crabby_irritable IS NOT NULL) THEN 
              fullText := fullText || ''(crabby_irritable:integer)=('' || current_row.crabby_irritable || '')'';
          END IF;
          IF (current_row.tearful_sad_depressed IS NOT NULL) THEN 
              fullText := fullText || ''(tearful_sad_depressed:integer)=('' || current_row.tearful_sad_depressed || '')'';
          END IF;
          IF (current_row.hallucinations IS NOT NULL) THEN 
              fullText := fullText || ''(hallucinations:integer)=('' || current_row.hallucinations || '')'';
          END IF;
          IF (current_row.troublesleeping IS NOT NULL) THEN 
              fullText := fullText || ''(troublesleeping:integer)=('' || current_row.troublesleeping || '')'';
          END IF;
          IF (current_row.lossofappetite IS NOT NULL) THEN 
              fullText := fullText || ''(lossofappetite:integer)=('' || current_row.lossofappetite || '')'';
          END IF;
          IF (current_row.troubleconcentrating_distractible IS NOT NULL) THEN 
              fullText := fullText || ''(troubleconcentrating_distractible:integer)=('' || current_row.troubleconcentrating_distractible || '')'';
          END IF;
          IF (current_row.dizziness_lightheadedness IS NOT NULL) THEN 
              fullText := fullText || ''(dizziness_lightheadedness:integer)=('' || current_row.dizziness_lightheadedness || '')'';
          END IF;
          IF (current_row.headaches IS NOT NULL) THEN 
              fullText := fullText || ''(headaches:integer)=('' || current_row.headaches || '')'';
          END IF;
          IF (current_row.socialwithdrawal IS NOT NULL) THEN 
              fullText := fullText || ''(socialwithdrawal:integer)=('' || current_row.socialwithdrawal || '')'';
          END IF;
          IF (current_row.drymouth IS NOT NULL) THEN 
              fullText := fullText || ''(drymouth:integer)=('' || current_row.drymouth || '')'';
          END IF;
          IF (current_row.palpitations IS NOT NULL) THEN 
              fullText := fullText || ''(palpitations:integer)=('' || current_row.palpitations || '')'';
          END IF;
        IF ((current_row.sideEffectsPittsburghData_info IS NOT NULL)) THEN
            fullText := fullText || ''(sideeffectspittsburghdata_info:integer)=('' || current_row.sideeffectspittsburghdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_a_sideEffectsPittsburghData_meta_data(current_row.sideEffectsPittsburghData_info, child_count,$3,false,false);
              fullText := fullText || ''(sideeffectspittsburghdata_info_sideeffectspittsburghdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_a_sideEffectsPittsburghData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_a_sideEffectsPittsburghData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_a_sideEffectsPittsburghData LEFT JOIN xnat_a_sideEffectsPittsburghData_meta_data meta ON xnat_a_sideEffectsPittsburghData.sideEffectsPittsburghData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_a_sideEffectsPittsburghData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_subjectAssessorData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_a_sideEffectsPittsburghData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat_a:sideEffectsPittsburghData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_a_sideEffectsPittsburghData.*, meta.meta_data_id FROM xnat_a_sideEffectsPittsburghData LEFT JOIN xnat_a_sideEffectsPittsburghData_meta_data meta ON xnat_a_sideEffectsPittsburghData.sideEffectsPittsburghData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_a_sideEffectsPittsburghData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_a_sideEffectsPittsburghData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_a_sideEffectsPittsburghData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_a_sideEffectsPittsburghData','CREATE TRIGGER a_u_xnat_a_sideEffectsPittsburghData  AFTER UPDATE OR DELETE ON xnat_a_sideEffectsPittsburghData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_a_sideEffectsPittsburghData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectVariablesData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectVariablesData)('';
      FOR current_row IN SELECT * FROM xnat_subjectVariablesData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectVariablesData_variable WHERE variables_variable_xnat_subject_id=current_row.id ORDER BY xnat_subjectvariablesdata_variable_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectVariablesData_variable( parent_row.xnat_subjectvariablesdata_variable_id, child_count,$3,false,false);
              fullText := fullText || ''(variables_variable_subjectvariablesdata_variable'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.subjectVariablesData_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectvariablesdata_info:integer)=('' || current_row.subjectvariablesdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectVariablesData_meta_data(current_row.subjectVariablesData_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectvariablesdata_info_subjectvariablesdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_subjectVariablesData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectVariablesData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_subjectVariablesData LEFT JOIN xnat_subjectVariablesData_meta_data meta ON xnat_subjectVariablesData.subjectVariablesData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_subjectVariablesData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_subjectAssessorData(current_row.id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectVariablesData_variable WHERE variables_variable_xnat_subject_id=current_row.id
        LOOP
          PERFORM  a_xnat_subjectVariablesData_variable( parent_row.xnat_subjectvariablesdata_variable_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_subjectVariablesData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:subjectVariablesData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectVariablesData.*, meta.meta_data_id FROM xnat_subjectVariablesData LEFT JOIN xnat_subjectVariablesData_meta_data meta ON xnat_subjectVariablesData.subjectVariablesData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_subjectVariablesData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_subjectVariablesData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_subjectVariablesData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_subjectVariablesData','CREATE TRIGGER a_u_xnat_subjectVariablesData  AFTER UPDATE OR DELETE ON xnat_subjectVariablesData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_subjectVariablesData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_gmSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_gmScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.gmScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(gmscandata_info:integer)=('' || current_row.gmscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_gmScanData_meta_data(current_row.gmScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(gmscandata_info_gmscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petQcScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petQcScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_petQcScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_qcscandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_qcscandata_id:integer)=('' || current_row.xnat_qcscandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_qcScanData_history WHERE xnat_qcscandata_id=current_row.xnat_qcscandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_qcScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(qcscandata_qcscandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.acquisition IS NOT NULL) THEN 
              fullText := fullText || ''(acquisition:string)=('' || REPLACE(REPLACE(current_row.acquisition,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.correctreconstructionalgorithm IS NOT NULL) THEN 
              fullText := fullText || ''(correctreconstructionalgorithm:string)=('' || REPLACE(REPLACE(current_row.correctreconstructionalgorithm,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.reconstructionalgorithmused IS NOT NULL) THEN 
              fullText := fullText || ''(reconstructionalgorithmused:string)=('' || REPLACE(REPLACE(current_row.reconstructionalgorithmused,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.correctiterationsandsubsets IS NOT NULL) THEN 
              fullText := fullText || ''(correctiterationsandsubsets:string)=('' || REPLACE(REPLACE(current_row.correctiterationsandsubsets,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.correctfilters IS NOT NULL) THEN 
              fullText := fullText || ''(correctfilters:string)=('' || REPLACE(REPLACE(current_row.correctfilters,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.correctslicethickness IS NOT NULL) THEN 
              fullText := fullText || ''(correctslicethickness:string)=('' || REPLACE(REPLACE(current_row.correctslicethickness,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.acceptablevoxelsize IS NOT NULL) THEN 
              fullText := fullText || ''(acceptablevoxelsize:string)=('' || REPLACE(REPLACE(current_row.acceptablevoxelsize,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.unacceptableframes IS NOT NULL) THEN 
              fullText := fullText || ''(unacceptableframes:string)=('' || REPLACE(REPLACE(current_row.unacceptableframes,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.reasonframesunacceptable IS NOT NULL) THEN 
              fullText := fullText || ''(reasonframesunacceptable:string)=('' || REPLACE(REPLACE(current_row.reasonframesunacceptable,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_petQcScanData_processingError_history WHERE processingerrors_processingerro_xnat_qcscandata_id=current_row.xnat_qcscandata_id AND xft_version=current_row.xft_version ORDER BY xnat_petqcscandata_processingerror_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petQcScanData_processingError_history( parent_row.xnat_petqcscandata_processingerror_id, child_count,$3,false,false);
              fullText := fullText || ''(processingerrors_processingerror_petqcscandata_processingerror'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.qcoutcome IS NOT NULL) THEN 
              fullText := fullText || ''(qcoutcome:string)=('' || REPLACE(REPLACE(current_row.qcoutcome,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.qcoutcomereason IS NOT NULL) THEN 
              fullText := fullText || ''(qcoutcomereason:string)=('' || REPLACE(REPLACE(current_row.qcoutcomereason,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.topcutoff IS NOT NULL) THEN 
              fullText := fullText || ''(topcutoff:string)=('' || REPLACE(REPLACE(current_row.topcutoff,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.bottomcutoff IS NOT NULL) THEN 
              fullText := fullText || ''(bottomcutoff:string)=('' || REPLACE(REPLACE(current_row.bottomcutoff,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.petQcScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(petqcscandata_info:integer)=('' || current_row.petqcscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petQcScanData_meta_data(current_row.petQcScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(petqcscandata_info_petqcscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_qcScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(qcscandata_qcscandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_fieldDefinitionGroup_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:fieldDefinitionGroup_history)('';
      FOR current_row IN SELECT * FROM xnat_fieldDefinitionGroup_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_fieldDefinitionGroup_field_history WHERE fields_field_xnat_fieldDefiniti_xnat_fielddefinitiongroup_id=current_row.xnat_fielddefinitiongroup_id AND xft_version=current_row.xft_version ORDER BY xnat_fielddefinitiongroup_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_field_history( parent_row.xnat_fielddefinitiongroup_field_id, child_count,$3,false,false);
              fullText := fullText || ''(fields_field_fielddefinitiongroup_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.data_type IS NOT NULL) THEN 
              fullText := fullText || ''(data_type:string)=('' || REPLACE(REPLACE(current_row.data_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.project_specific IS NOT NULL) THEN 
              fullText := fullText || ''(project_specific:integer)=('' || current_row.project_specific || '')'';
          END IF;
        IF ((current_row.fieldDefinitionGroup_info IS NOT NULL)) THEN
            fullText := fullText || ''(fielddefinitiongroup_info:integer)=('' || current_row.fielddefinitiongroup_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_meta_data(current_row.fieldDefinitionGroup_info, child_count,$3,false,false);
              fullText := fullText || ''(fielddefinitiongroup_info_fielddefinitiongroup_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_fielddefinitiongroup_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_fielddefinitiongroup_id:integer)=('' || current_row.xnat_fielddefinitiongroup_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_computationData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:computationData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_computationData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_computationData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:computationData)('';
      FOR current_row IN SELECT * FROM xnat_computationData WHERE  xnat_computationdata_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.value IS NOT NULL) THEN 
              fullText := fullText || ''(value:string)=('' || REPLACE(REPLACE(current_row.value,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.source IS NOT NULL) THEN 
              fullText := fullText || ''(source:string)=('' || REPLACE(REPLACE(current_row.source,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.units IS NOT NULL) THEN 
              fullText := fullText || ''(units:string)=('' || REPLACE(REPLACE(current_row.units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.computationData_info IS NOT NULL)) THEN
            fullText := fullText || ''(computationdata_info:integer)=('' || current_row.computationdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_computationData_meta_data(current_row.computationData_info, child_count,$3,false,false);
              fullText := fullText || ''(computationdata_info_computationdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.computations_datum_xnat_reconst_xnat_reconstructedimagedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(computations_datum_xnat_reconst_xnat_reconstructedimagedata_id:integer)=('' || current_row.computations_datum_xnat_reconst_xnat_reconstructedimagedata_id || '')'';
        END IF;
          IF (current_row.xnat_computationdata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_computationdata_id:integer)=('' || current_row.xnat_computationdata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_computationData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_computationData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_computationData LEFT JOIN xnat_computationData_meta_data meta ON xnat_computationData.computationData_info=meta.meta_data_id WHERE  xnat_computationdata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_computationData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_computationData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_computationData.*, meta.meta_data_id FROM xnat_computationData LEFT JOIN xnat_computationData_meta_data meta ON xnat_computationData.computationData_info=meta.meta_data_id WHERE  xnat_computationdata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:reconstructedImageData/computations/datum
        IF ((current_row.computations_datum_xnat_reconst_xnat_reconstructedimagedata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_reconstructedImageData(current_row.computations_datum_xnat_reconst_xnat_reconstructedimagedata_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_computationData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_computationData( OLD.xnat_computationdata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_computationData','CREATE TRIGGER a_u_xnat_computationData  AFTER UPDATE OR DELETE ON xnat_computationData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_computationData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectVariablesData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectVariablesData_history)('';
      FOR current_row IN SELECT * FROM xnat_subjectVariablesData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_subjectAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectVariablesData_variable_history WHERE variables_variable_xnat_subject_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_subjectvariablesdata_variable_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectVariablesData_variable_history( parent_row.xnat_subjectvariablesdata_variable_id, child_count,$3,false,false);
              fullText := fullText || ''(variables_variable_subjectvariablesdata_variable'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.subjectVariablesData_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectvariablesdata_info:integer)=('' || current_row.subjectvariablesdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectVariablesData_meta_data(current_row.subjectVariablesData_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectvariablesdata_info_subjectvariablesdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcManualAssessorData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcManualAssessorData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_qcManualAssessorData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_dicomSeries_image_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dicomSeries_image_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_dicomSeries_image_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_dicomSeries_image( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dicomSeries_image)('';
      FOR current_row IN SELECT * FROM xnat_dicomSeries_image WHERE  xnat_dicomseries_image_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.uri IS NOT NULL) THEN 
              fullText := fullText || ''(uri:string)=('' || REPLACE(REPLACE(current_row.uri,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sop_instance_uid IS NOT NULL) THEN 
              fullText := fullText || ''(sop_instance_uid:string)=('' || REPLACE(REPLACE(current_row.sop_instance_uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.instance_number IS NOT NULL) THEN 
              fullText := fullText || ''(instance_number:integer)=('' || current_row.instance_number || '')'';
          END IF;
        IF ((current_row.dicomSeries_image_info IS NOT NULL)) THEN
            fullText := fullText || ''(dicomseries_image_info:integer)=('' || current_row.dicomseries_image_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dicomSeries_image_meta_data(current_row.dicomSeries_image_info, child_count,$3,false,false);
              fullText := fullText || ''(dicomseries_image_info_dicomseries_image_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.imageset_image_xnat_dicomSeries_xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(imageset_image_xnat_dicomseries_xnat_abstractresource_id:integer)=('' || current_row.imageset_image_xnat_dicomseries_xnat_abstractresource_id || '')'';
        END IF;
          IF (current_row.xnat_dicomseries_image_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_dicomseries_image_id:integer)=('' || current_row.xnat_dicomseries_image_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_dicomSeries_image( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dicomSeries_image.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_dicomSeries_image LEFT JOIN xnat_dicomSeries_image_meta_data meta ON xnat_dicomSeries_image.dicomSeries_image_info=meta.meta_data_id WHERE  xnat_dicomseries_image_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_dicomSeries_image_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_dicomSeries_image( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dicomSeries_image.*, meta.meta_data_id FROM xnat_dicomSeries_image LEFT JOIN xnat_dicomSeries_image_meta_data meta ON xnat_dicomSeries_image.dicomSeries_image_info=meta.meta_data_id WHERE  xnat_dicomseries_image_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:dicomSeries/imageSet/image
        IF ((current_row.imageset_image_xnat_dicomSeries_xnat_abstractresource_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_dicomSeries(current_row.imageset_image_xnat_dicomSeries_xnat_abstractresource_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_dicomSeries_image()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_dicomSeries_image( OLD.xnat_dicomseries_image_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_dicomSeries_image','CREATE TRIGGER a_u_xnat_dicomSeries_image  AFTER UPDATE OR DELETE ON xnat_dicomSeries_image FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_dicomSeries_image()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_dicomSeries( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dicomSeries)('';
      FOR current_row IN SELECT * FROM xnat_dicomSeries WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource(current_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.dimensions_x IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_x:integer)=('' || current_row.dimensions_x || '')'';
          END IF;
          IF (current_row.dimensions_y IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_y:integer)=('' || current_row.dimensions_y || '')'';
          END IF;
          IF (current_row.dimensions_z IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_z:integer)=('' || current_row.dimensions_z || '')'';
          END IF;
          IF (current_row.dimensions_volumes IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_volumes:integer)=('' || current_row.dimensions_volumes || '')'';
          END IF;
          IF (current_row.voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_x:float)=('' || current_row.voxelres_x || '')'';
          END IF;
          IF (current_row.voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_y:float)=('' || current_row.voxelres_y || '')'';
          END IF;
          IF (current_row.voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_z:float)=('' || current_row.voxelres_z || '')'';
          END IF;
          IF (current_row.voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_units:string)=('' || REPLACE(REPLACE(current_row.voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.orientation IS NOT NULL) THEN 
              fullText := fullText || ''(orientation:string)=('' || REPLACE(REPLACE(current_row.orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_dicomSeries_image WHERE imageset_image_xnat_dicomSeries_xnat_abstractresource_id=current_row.xnat_abstractresource_id ORDER BY xnat_dicomseries_image_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dicomSeries_image( parent_row.xnat_dicomseries_image_id, child_count,$3,false,false);
              fullText := fullText || ''(imageset_image_dicomseries_image'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.format IS NOT NULL) THEN 
              fullText := fullText || ''(format:string)=('' || REPLACE(REPLACE(current_row.format,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.content IS NOT NULL) THEN 
              fullText := fullText || ''(content:string)=('' || REPLACE(REPLACE(current_row.content,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.cachepath IS NOT NULL) THEN 
              fullText := fullText || ''(cachepath:string)=('' || REPLACE(REPLACE(current_row.cachepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.uid IS NOT NULL) THEN 
              fullText := fullText || ''(uid:string)=('' || REPLACE(REPLACE(current_row.uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.dicomSeries_info IS NOT NULL)) THEN
            fullText := fullText || ''(dicomseries_info:integer)=('' || current_row.dicomseries_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dicomSeries_meta_data(current_row.dicomSeries_info, child_count,$3,false,false);
              fullText := fullText || ''(dicomseries_info_dicomseries_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_dicomSeries( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dicomSeries.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_dicomSeries LEFT JOIN xnat_dicomSeries_meta_data meta ON xnat_dicomSeries.dicomSeries_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_dicomSeries_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_abstractResource(current_row.xnat_abstractresource_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_dicomSeries_image WHERE imageset_image_xnat_dicomSeries_xnat_abstractresource_id=current_row.xnat_abstractresource_id
        LOOP
          PERFORM  a_xnat_dicomSeries_image( parent_row.xnat_dicomseries_image_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_abstractResource( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_dicomSeries( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dicomSeries.*, meta.meta_data_id FROM xnat_dicomSeries LEFT JOIN xnat_dicomSeries_meta_data meta ON xnat_dicomSeries.dicomSeries_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_abstractResource( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_dicomSeries()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_dicomSeries( OLD.xnat_abstractresource_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_dicomSeries','CREATE TRIGGER a_u_xnat_dicomSeries  AFTER UPDATE OR DELETE ON xnat_dicomSeries FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_dicomSeries()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_esvScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esvScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_esvScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.esvScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(esvscandata_info:integer)=('' || current_row.esvscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_esvScanData_meta_data(current_row.esvScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(esvscandata_info_esvscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petScanData_frame_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petScanData_frame_history)('';
      FOR current_row IN SELECT * FROM xnat_petScanData_frame_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.number IS NOT NULL) THEN 
              fullText := fullText || ''(number:integer)=('' || current_row.number || '')'';
          END IF;
          IF (current_row.starttime IS NOT NULL) THEN 
              fullText := fullText || ''(starttime:float)=('' || current_row.starttime || '')'';
          END IF;
          IF (current_row.length IS NOT NULL) THEN 
              fullText := fullText || ''(length:float)=('' || current_row.length || '')'';
          END IF;
          IF (current_row.units IS NOT NULL) THEN 
              fullText := fullText || ''(units:string)=('' || REPLACE(REPLACE(current_row.units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.petScanData_frame_info IS NOT NULL)) THEN
            fullText := fullText || ''(petscandata_frame_info:integer)=('' || current_row.petscandata_frame_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petScanData_frame_meta_data(current_row.petScanData_frame_info, child_count,$3,false,false);
              fullText := fullText || ''(petscandata_frame_info_petscandata_frame_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_frames_frame_xnat_pe_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_frames_frame_xnat_pe_xnat_imagescandata_id:integer)=('' || current_row.parameters_frames_frame_xnat_pe_xnat_imagescandata_id || '')'';
        END IF;
          IF (current_row.xnat_petscandata_frame_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_petscandata_frame_id:integer)=('' || current_row.xnat_petscandata_frame_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_opScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:opScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_opScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_dx3DCraniofacialScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dx3DCraniofacialScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_dx3DCraniofacialScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_epsScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:epsScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_epsScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_dx3DCraniofacialSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dx3DCraniofacialSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_dx3DCraniofacialSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcManualAssessorData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcManualAssessorData_history)('';
      FOR current_row IN SELECT * FROM xnat_qcManualAssessorData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.rater IS NOT NULL) THEN 
              fullText := fullText || ''(rater:string)=('' || REPLACE(REPLACE(current_row.rater,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.stereotacticmarker IS NOT NULL) THEN 
              fullText := fullText || ''(stereotacticmarker:string)=('' || REPLACE(REPLACE(current_row.stereotacticmarker,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.incidentalfindings IS NOT NULL) THEN 
              fullText := fullText || ''(incidentalfindings:string)=('' || REPLACE(REPLACE(current_row.incidentalfindings,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcScanData_history WHERE scans_scan_xnat_qcManualAssesso_id=current_row.id AND xft_version=current_row.xft_version ORDER BY xnat_qcscandata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcScanData_history( parent_row.xnat_qcscandata_id, child_count,$3,false,false);
              fullText := fullText || ''(scans_scan_qcscandata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.comments IS NOT NULL) THEN 
              fullText := fullText || ''(comments:string)=('' || REPLACE(REPLACE(current_row.comments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pass IS NOT NULL) THEN 
              fullText := fullText || ''(pass:string)=('' || REPLACE(REPLACE(current_row.pass,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.payable IS NOT NULL) THEN 
              fullText := fullText || ''(payable:string)=('' || REPLACE(REPLACE(current_row.payable,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rescan IS NOT NULL) THEN 
              fullText := fullText || ''(rescan:string)=('' || REPLACE(REPLACE(current_row.rescan,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.resolvable IS NOT NULL) THEN 
              fullText := fullText || ''(resolvable:string)=('' || REPLACE(REPLACE(current_row.resolvable,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.retrain IS NOT NULL) THEN 
              fullText := fullText || ''(retrain:string)=('' || REPLACE(REPLACE(current_row.retrain,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.qcManualAssessorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcmanualassessordata_info:integer)=('' || current_row.qcmanualassessordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcManualAssessorData_meta_data(current_row.qcManualAssessorData_info, child_count,$3,false,false);
              fullText := fullText || ''(qcmanualassessordata_info_qcmanualassessordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_volumetricRegion_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:volumetricRegion_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_volumetricRegion_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_otherQcScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:otherQcScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_otherQcScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_qcscandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_qcscandata_id:integer)=('' || current_row.xnat_qcscandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_qcScanData_history WHERE xnat_qcscandata_id=current_row.xnat_qcscandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_qcScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(qcscandata_qcscandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.other IS NOT NULL) THEN 
              fullText := fullText || ''(other:string)=('' || REPLACE(REPLACE(current_row.other,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.otherQcScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(otherqcscandata_info:integer)=('' || current_row.otherqcscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_otherQcScanData_meta_data(current_row.otherQcScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(otherqcscandata_info_otherqcscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_qcScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(qcscandata_qcscandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_group_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_group_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_group_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_group( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_group)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_group WHERE  xnat_studyprotocol_group_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.studyProtocol_group_info IS NOT NULL)) THEN
            fullText := fullText || ''(studyprotocol_group_info:integer)=('' || current_row.studyprotocol_group_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_group_meta_data(current_row.studyProtocol_group_info, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_group_info_studyprotocol_group_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.subjectgroups_group_xnat_studyP_xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(subjectgroups_group_xnat_studyp_xnat_abstractprotocol_id:integer)=('' || current_row.subjectgroups_group_xnat_studyp_xnat_abstractprotocol_id || '')'';
        END IF;
          IF (current_row.xnat_studyprotocol_group_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_studyprotocol_group_id:integer)=('' || current_row.xnat_studyprotocol_group_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_studyProtocol_group( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_studyProtocol_group.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_studyProtocol_group LEFT JOIN xnat_studyProtocol_group_meta_data meta ON xnat_studyProtocol_group.studyProtocol_group_info=meta.meta_data_id WHERE  xnat_studyprotocol_group_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_studyProtocol_group_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_studyProtocol_group( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_studyProtocol_group.*, meta.meta_data_id FROM xnat_studyProtocol_group LEFT JOIN xnat_studyProtocol_group_meta_data meta ON xnat_studyProtocol_group.studyProtocol_group_info=meta.meta_data_id WHERE  xnat_studyprotocol_group_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:studyProtocol/subjectGroups/group
        IF ((current_row.subjectgroups_group_xnat_studyP_xnat_abstractprotocol_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_studyProtocol(current_row.subjectgroups_group_xnat_studyP_xnat_abstractprotocol_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_studyProtocol_group()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_studyProtocol_group( OLD.xnat_studyprotocol_group_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_studyProtocol_group','CREATE TRIGGER a_u_xnat_studyProtocol_group  AFTER UPDATE OR DELETE ON xnat_studyProtocol_group FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_studyProtocol_group()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcAssessmentData_scan_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcAssessmentData_scan_history)('';
      FOR current_row IN SELECT * FROM xnat_qcAssessmentData_scan_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcAssessmentData_scan_slice_history WHERE sliceqc_slice_xnat_qcAssessment_xnat_qcassessmentdata_scan_id=current_row.xnat_qcassessmentdata_scan_id AND xft_version=current_row.xft_version ORDER BY xnat_qcassessmentdata_scan_slice_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcAssessmentData_scan_slice_history( parent_row.xnat_qcassessmentdata_scan_slice_id, child_count,$3,false,false);
              fullText := fullText || ''(sliceqc_slice_qcassessmentdata_scan_slice'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.scanstatistics_xnat_abstractstatistics_id IS NOT NULL)) THEN
            fullText := fullText || ''(scanstatistics_xnat_abstractstatistics_id:integer)=('' || current_row.scanstatistics_xnat_abstractstatistics_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_abstractStatistics_history WHERE  xnat_abstractstatistics_id=current_row.scanstatistics_xnat_abstractstatistics_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractStatistics_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(scanstatistics_abstractstatistics:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.qcAssessmentData_scan_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcassessmentdata_scan_info:integer)=('' || current_row.qcassessmentdata_scan_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcAssessmentData_scan_meta_data(current_row.qcAssessmentData_scan_info, child_count,$3,false,false);
              fullText := fullText || ''(qcassessmentdata_scan_info_qcassessmentdata_scan_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.scans_scan_xnat_qcAssessmentDat_id IS NOT NULL)) THEN
            fullText := fullText || ''(scans_scan_xnat_qcassessmentdat_id:string)=('' || current_row.scans_scan_xnat_qcassessmentdat_id || '')'';
        END IF;
          IF (current_row.xnat_qcassessmentdata_scan_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_qcassessmentdata_scan_id:integer)=('' || current_row.xnat_qcassessmentdata_scan_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectData_field_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectData_field_history)('';
      FOR current_row IN SELECT * FROM xnat_subjectData_field_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.field IS NOT NULL) THEN 
              fullText := fullText || ''(field:string)=('' || REPLACE(REPLACE(current_row.field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.subjectData_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectdata_field_info:integer)=('' || current_row.subjectdata_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectData_field_meta_data(current_row.subjectData_field_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectdata_field_info_subjectdata_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fields_field_xnat_subjectData_id IS NOT NULL)) THEN
            fullText := fullText || ''(fields_field_xnat_subjectdata_id:string)=('' || current_row.fields_field_xnat_subjectdata_id || '')'';
        END IF;
          IF (current_row.xnat_subjectdata_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_subjectdata_field_id:integer)=('' || current_row.xnat_subjectdata_field_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_validationData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:validationData_history)('';
      FOR current_row IN SELECT * FROM xnat_validationData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.method IS NOT NULL) THEN 
              fullText := fullText || ''(method:string)=('' || REPLACE(REPLACE(current_row.method,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.date IS NOT NULL) THEN 
              fullText := fullText || ''(date:date)=('' || current_row.date || '')'';
          END IF;
          IF (current_row.notes IS NOT NULL) THEN 
              fullText := fullText || ''(notes:string)=('' || REPLACE(REPLACE(current_row.notes,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.validated_by IS NOT NULL) THEN 
              fullText := fullText || ''(validated_by:string)=('' || REPLACE(REPLACE(current_row.validated_by,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.validationData_info IS NOT NULL)) THEN
            fullText := fullText || ''(validationdata_info:integer)=('' || current_row.validationdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_validationData_meta_data(current_row.validationData_info, child_count,$3,false,false);
              fullText := fullText || ''(validationdata_info_validationdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_validationdata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_validationdata_id:integer)=('' || current_row.xnat_validationdata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_petmrSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petmrSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_petmrSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.coil IS NOT NULL) THEN 
              fullText := fullText || ''(coil:string)=('' || REPLACE(REPLACE(current_row.coil,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.fieldstrength IS NOT NULL) THEN 
              fullText := fullText || ''(fieldstrength:string)=('' || REPLACE(REPLACE(current_row.fieldstrength,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.marker IS NOT NULL) THEN 
              fullText := fullText || ''(marker:string)=('' || REPLACE(REPLACE(current_row.marker,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.stabilization IS NOT NULL) THEN 
              fullText := fullText || ''(stabilization:string)=('' || REPLACE(REPLACE(current_row.stabilization,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.studytype IS NOT NULL) THEN 
              fullText := fullText || ''(studytype:string)=('' || REPLACE(REPLACE(current_row.studytype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.patientid IS NOT NULL) THEN 
              fullText := fullText || ''(patientid:string)=('' || REPLACE(REPLACE(current_row.patientid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.patientname IS NOT NULL) THEN 
              fullText := fullText || ''(patientname:string)=('' || REPLACE(REPLACE(current_row.patientname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_dose_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_dose_units:string)=('' || REPLACE(REPLACE(current_row.tracer_dose_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_dose IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_dose:float)=('' || current_row.tracer_dose || '')'';
          END IF;
          IF (current_row.tracer_specificactivity IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_specificactivity:float)=('' || current_row.tracer_specificactivity || '')'';
          END IF;
          IF (current_row.tracer_totalmass_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_totalmass_units:string)=('' || REPLACE(REPLACE(current_row.tracer_totalmass_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_totalmass IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_totalmass:float)=('' || current_row.tracer_totalmass || '')'';
          END IF;
          IF (current_row.tracer_intermediate_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_intermediate_units:string)=('' || REPLACE(REPLACE(current_row.tracer_intermediate_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_intermediate IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_intermediate:float)=('' || current_row.tracer_intermediate || '')'';
          END IF;
          IF (current_row.tracer_isotope_half_life IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_isotope_half_life:float)=('' || current_row.tracer_isotope_half_life || '')'';
          END IF;
          IF (current_row.tracer_isotope IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_isotope:string)=('' || REPLACE(REPLACE(current_row.tracer_isotope,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_transmissions IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_transmissions:integer)=('' || current_row.tracer_transmissions || '')'';
          END IF;
          IF (current_row.tracer_transmissions_starttime IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_transmissions_starttime:dateTime)=('' || current_row.tracer_transmissions_starttime || '')'';
          END IF;
          IF (current_row.tracer_name IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_name:string)=('' || REPLACE(REPLACE(current_row.tracer_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_starttime IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_starttime:dateTime)=('' || current_row.tracer_starttime || '')'';
          END IF;
          IF (current_row.start_time IS NOT NULL) THEN 
              fullText := fullText || ''(start_time:dateTime)=('' || current_row.start_time || '')'';
          END IF;
          IF (current_row.start_time_scan IS NOT NULL) THEN 
              fullText := fullText || ''(start_time_scan:dateTime)=('' || current_row.start_time_scan || '')'';
          END IF;
          IF (current_row.start_time_injection IS NOT NULL) THEN 
              fullText := fullText || ''(start_time_injection:dateTime)=('' || current_row.start_time_injection || '')'';
          END IF;
          IF (current_row.blood_glucose IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose:float)=('' || current_row.blood_glucose || '')'';
          END IF;
          IF (current_row.blood_glucose_units IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose_units:string)=('' || REPLACE(REPLACE(current_row.blood_glucose_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.blood_glucose_time IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose_time:dateTime)=('' || current_row.blood_glucose_time || '')'';
          END IF;
        IF ((current_row.petmrSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(petmrsessiondata_info:integer)=('' || current_row.petmrsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petmrSessionData_meta_data(current_row.petmrSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(petmrsessiondata_info_petmrsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_hdScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:hdScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_hdScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.hdScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(hdscandata_info:integer)=('' || current_row.hdscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_hdScanData_meta_data(current_row.hdScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(hdscandata_info_hdscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_megScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:megScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_megScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.megScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(megscandata_info:integer)=('' || current_row.megscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_megScanData_meta_data(current_row.megScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(megscandata_info_megscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_dicomSeries_image_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dicomSeries_image_history)('';
      FOR current_row IN SELECT * FROM xnat_dicomSeries_image_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.uri IS NOT NULL) THEN 
              fullText := fullText || ''(uri:string)=('' || REPLACE(REPLACE(current_row.uri,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.sop_instance_uid IS NOT NULL) THEN 
              fullText := fullText || ''(sop_instance_uid:string)=('' || REPLACE(REPLACE(current_row.sop_instance_uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.instance_number IS NOT NULL) THEN 
              fullText := fullText || ''(instance_number:integer)=('' || current_row.instance_number || '')'';
          END IF;
        IF ((current_row.dicomSeries_image_info IS NOT NULL)) THEN
            fullText := fullText || ''(dicomseries_image_info:integer)=('' || current_row.dicomseries_image_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dicomSeries_image_meta_data(current_row.dicomSeries_image_info, child_count,$3,false,false);
              fullText := fullText || ''(dicomseries_image_info_dicomseries_image_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.imageset_image_xnat_dicomSeries_xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(imageset_image_xnat_dicomseries_xnat_abstractresource_id:integer)=('' || current_row.imageset_image_xnat_dicomseries_xnat_abstractresource_id || '')'';
        END IF;
          IF (current_row.xnat_dicomseries_image_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_dicomseries_image_id:integer)=('' || current_row.xnat_dicomseries_image_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageAssessorData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageAssessorData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_imageAssessorData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_imageAssessorData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageAssessorData)('';
      FOR current_row IN SELECT * FROM xnat_imageAssessorData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_derivedData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(deriveddata_deriveddata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM img_assessor_in_resource WHERE  xnat_imageAssessorData_id=current_row.id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(in_file_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM img_assessor_out_resource WHERE  xnat_imageAssessorData_id=current_row.id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(out_file_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
          IF (current_row.imagesession_id IS NOT NULL) THEN 
              fullText := fullText || ''(imagesession_id:string)=('' || REPLACE(REPLACE(current_row.imagesession_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField WHERE parameters_addparam_xnat_imageA_id=current_row.id ORDER BY xnat_addfield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_addField( parent_row.xnat_addfield_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_addparam_addfield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.imageAssessorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(imageassessordata_info:integer)=('' || current_row.imageassessordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageAssessorData_meta_data(current_row.imageAssessorData_info, child_count,$3,false,false);
              fullText := fullText || ''(imageassessordata_info_imageassessordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_derivedData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(deriveddata_deriveddata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageAssessorData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT table1.id AS xnat_imageAssessorData0, table3.element_name AS xdat_meta_element142, table1.date AS xnat_experimentData6 FROM xnat_imageAssessorData xnat_imageAssessorData   LEFT JOIN xnat_derivedData table0 ON xnat_imageAssessorData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xdat_meta_element table3 ON table1.extension=table3.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_imageAssessorData0=$1))
      LOOP
         IF (current_row.xdat_meta_element142 IS NULL) THEN 
             fullText:= ie_xnat_imageAssessorData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element142=''scr:screeningAssessment'') THEN
                fullText:= i_scr_screeningAssessment( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''ext:atlasScalingFactorData'') THEN
                fullText:= i_ext_atlasScalingFactorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''ext:segmentationFastData'') THEN
                fullText:= i_ext_segmentationFastData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''val:protocolData'') THEN
                fullText:= i_val_protocolData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:mrAssessorData'') THEN
                fullText:= ie_xnat_mrAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:petAssessorData'') THEN
                fullText:= i_xnat_petAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:qcAssessmentData'') THEN
                fullText:= i_xnat_qcAssessmentData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:qcManualAssessorData'') THEN
                fullText:= i_xnat_qcManualAssessorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_imageAssessorData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_imageAssessorData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageAssessorData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_imageAssessorData LEFT JOIN xnat_imageAssessorData_meta_data meta ON xnat_imageAssessorData.imageAssessorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_imageAssessorData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_derivedData(current_row.id, $2,$3,false);
        END IF;
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM img_assessor_in_resource WHERE  xnat_imageAssessorData_id=current_row.id
        LOOP
          PERFORM  a_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, $2,$3,false);
        END LOOP;
        END; 
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM img_assessor_out_resource WHERE  xnat_imageAssessorData_id=current_row.id
        LOOP
          PERFORM  a_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, $2,$3,false);
        END LOOP;
        END; 
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField WHERE parameters_addparam_xnat_imageA_id=current_row.id
        LOOP
          PERFORM  a_xnat_addField( parent_row.xnat_addfield_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_derivedData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_imageAssessorData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table1.id AS xnat_imageAssessorData0, table3.element_name AS xdat_meta_element142, table1.date AS xnat_experimentData6 FROM xnat_imageAssessorData xnat_imageAssessorData   LEFT JOIN xnat_derivedData table0 ON xnat_imageAssessorData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xdat_meta_element table3 ON table1.extension=table3.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_imageAssessorData0=$1))
      LOOP
         IF (current_row.xdat_meta_element142 IS NULL) THEN 
            PERFORM  ae_xnat_imageAssessorData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element142=''scr:screeningAssessment'') THEN
            PERFORM  a_scr_screeningAssessment( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''ext:atlasScalingFactorData'') THEN
            PERFORM  a_ext_atlasScalingFactorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''ext:segmentationFastData'') THEN
            PERFORM  a_ext_segmentationFastData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''val:protocolData'') THEN
            PERFORM  a_val_protocolData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:mrAssessorData'') THEN
            PERFORM  ae_xnat_mrAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:petAssessorData'') THEN
            PERFORM  a_xnat_petAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:qcAssessmentData'') THEN
            PERFORM  a_xnat_qcAssessmentData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:qcManualAssessorData'') THEN
            PERFORM  a_xnat_qcManualAssessorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_imageAssessorData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_imageAssessorData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageAssessorData.*, meta.meta_data_id FROM xnat_imageAssessorData LEFT JOIN xnat_imageAssessorData_meta_data meta ON xnat_imageAssessorData.imageAssessorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:imageSessionData/assessors/assessor
        IF ((current_row.imageSession_ID IS NOT NULL)) THEN
        PERFORM update_ls_xnat_imageSessionData(current_row.imageSession_ID, $2);
        END IF;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_derivedData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_imageAssessorData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table1.id AS xnat_imageAssessorData0, table3.element_name AS xdat_meta_element142, table1.date AS xnat_experimentData6 FROM xnat_imageAssessorData xnat_imageAssessorData   LEFT JOIN xnat_derivedData table0 ON xnat_imageAssessorData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xdat_meta_element table3 ON table1.extension=table3.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_imageAssessorData0=$1))
      LOOP
         IF (current_row.xdat_meta_element142 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_imageAssessorData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element142=''scr:screeningAssessment'') THEN
                PERFORM update_ls_scr_screeningAssessment( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''ext:atlasScalingFactorData'') THEN
                PERFORM update_ls_ext_atlasScalingFactorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''ext:segmentationFastData'') THEN
                PERFORM update_ls_ext_segmentationFastData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''val:protocolData'') THEN
                PERFORM update_ls_val_protocolData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:mrAssessorData'') THEN
                PERFORM update_ls_ext_xnat_mrAssessorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:petAssessorData'') THEN
                PERFORM update_ls_xnat_petAssessorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:qcAssessmentData'') THEN
                PERFORM update_ls_xnat_qcAssessmentData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element142=''xnat:qcManualAssessorData'') THEN
                PERFORM update_ls_xnat_qcManualAssessorData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element142;
                    PERFORM update_ls_ext_xnat_imageAssessorData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_imageAssessorData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_imageAssessorData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_imageAssessorData','CREATE TRIGGER a_u_xnat_imageAssessorData  AFTER UPDATE OR DELETE ON xnat_imageAssessorData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_imageAssessorData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_petAssessorData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petAssessorData)('';
      FOR current_row IN SELECT * FROM xnat_petAssessorData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.petAssessorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(petassessordata_info:integer)=('' || current_row.petassessordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petAssessorData_meta_data(current_row.petAssessorData_info, child_count,$3,false,false);
              fullText := fullText || ''(petassessordata_info_petassessordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_petAssessorData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petAssessorData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_petAssessorData LEFT JOIN xnat_petAssessorData_meta_data meta ON xnat_petAssessorData.petAssessorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_petAssessorData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageAssessorData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_petAssessorData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petAssessorData.*, meta.meta_data_id FROM xnat_petAssessorData LEFT JOIN xnat_petAssessorData_meta_data meta ON xnat_petAssessorData.petAssessorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_petAssessorData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_petAssessorData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_petAssessorData','CREATE TRIGGER a_u_xnat_petAssessorData  AFTER UPDATE OR DELETE ON xnat_petAssessorData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_petAssessorData()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_mrAssessorData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrAssessorData)('';
      FOR current_row IN SELECT * FROM xnat_mrAssessorData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.mrAssessorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mrassessordata_info:integer)=('' || current_row.mrassessordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mrAssessorData_meta_data(current_row.mrAssessorData_info, child_count,$3,false,false);
              fullText := fullText || ''(mrassessordata_info_mrassessordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrAssessorData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT table2.id AS xnat_mrAssessorData0, table4.element_name AS xdat_meta_element144, table2.date AS xnat_experimentData8 FROM xnat_mrAssessorData xnat_mrAssessorData   LEFT JOIN xnat_imageAssessorData table0 ON xnat_mrAssessorData.id=table0.id   LEFT JOIN xnat_derivedData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xdat_meta_element table4 ON table2.extension=table4.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_mrAssessorData0=$1))
      LOOP
         IF (current_row.xdat_meta_element144 IS NULL) THEN 
             fullText:= ie_xnat_mrAssessorData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element144=''ext:atlasScalingFactorData'') THEN
                fullText:= i_ext_atlasScalingFactorData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element144=''ext:segmentationFastData'') THEN
                fullText:= i_ext_segmentationFastData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element144=''xnat:qcAssessmentData'') THEN
                fullText:= i_xnat_qcAssessmentData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_mrAssessorData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_mrAssessorData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mrAssessorData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_mrAssessorData LEFT JOIN xnat_mrAssessorData_meta_data meta ON xnat_mrAssessorData.mrAssessorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_mrAssessorData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageAssessorData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_mrAssessorData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table2.id AS xnat_mrAssessorData0, table4.element_name AS xdat_meta_element144, table2.date AS xnat_experimentData8 FROM xnat_mrAssessorData xnat_mrAssessorData   LEFT JOIN xnat_imageAssessorData table0 ON xnat_mrAssessorData.id=table0.id   LEFT JOIN xnat_derivedData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xdat_meta_element table4 ON table2.extension=table4.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_mrAssessorData0=$1))
      LOOP
         IF (current_row.xdat_meta_element144 IS NULL) THEN 
            PERFORM  ae_xnat_mrAssessorData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element144=''ext:atlasScalingFactorData'') THEN
            PERFORM  a_ext_atlasScalingFactorData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element144=''ext:segmentationFastData'') THEN
            PERFORM  a_ext_segmentationFastData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element144=''xnat:qcAssessmentData'') THEN
            PERFORM  a_xnat_qcAssessmentData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_mrAssessorData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_mrAssessorData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mrAssessorData.*, meta.meta_data_id FROM xnat_mrAssessorData LEFT JOIN xnat_mrAssessorData_meta_data meta ON xnat_mrAssessorData.mrAssessorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_mrAssessorData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table2.id AS xnat_mrAssessorData0, table4.element_name AS xdat_meta_element144, table2.date AS xnat_experimentData8 FROM xnat_mrAssessorData xnat_mrAssessorData   LEFT JOIN xnat_imageAssessorData table0 ON xnat_mrAssessorData.id=table0.id   LEFT JOIN xnat_derivedData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xdat_meta_element table4 ON table2.extension=table4.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_mrAssessorData0=$1))
      LOOP
         IF (current_row.xdat_meta_element144 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_mrAssessorData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element144=''ext:atlasScalingFactorData'') THEN
                PERFORM update_ls_ext_atlasScalingFactorData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element144=''ext:segmentationFastData'') THEN
                PERFORM update_ls_ext_segmentationFastData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element144=''xnat:qcAssessmentData'') THEN
                PERFORM update_ls_xnat_qcAssessmentData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element144;
                    PERFORM update_ls_ext_xnat_mrAssessorData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_mrAssessorData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_mrAssessorData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_mrAssessorData','CREATE TRIGGER a_u_xnat_mrAssessorData  AFTER UPDATE OR DELETE ON xnat_mrAssessorData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_mrAssessorData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcManualAssessorData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcManualAssessorData)('';
      FOR current_row IN SELECT * FROM xnat_qcManualAssessorData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.rater IS NOT NULL) THEN 
              fullText := fullText || ''(rater:string)=('' || REPLACE(REPLACE(current_row.rater,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.stereotacticmarker IS NOT NULL) THEN 
              fullText := fullText || ''(stereotacticmarker:string)=('' || REPLACE(REPLACE(current_row.stereotacticmarker,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.incidentalfindings IS NOT NULL) THEN 
              fullText := fullText || ''(incidentalfindings:string)=('' || REPLACE(REPLACE(current_row.incidentalfindings,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcScanData WHERE scans_scan_xnat_qcManualAssesso_id=current_row.id ORDER BY xnat_qcscandata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcScanData( parent_row.xnat_qcscandata_id, child_count,$3,false,false);
              fullText := fullText || ''(scans_scan_qcscandata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.comments IS NOT NULL) THEN 
              fullText := fullText || ''(comments:string)=('' || REPLACE(REPLACE(current_row.comments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pass IS NOT NULL) THEN 
              fullText := fullText || ''(pass:string)=('' || REPLACE(REPLACE(current_row.pass,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.payable IS NOT NULL) THEN 
              fullText := fullText || ''(payable:string)=('' || REPLACE(REPLACE(current_row.payable,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.rescan IS NOT NULL) THEN 
              fullText := fullText || ''(rescan:string)=('' || REPLACE(REPLACE(current_row.rescan,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.resolvable IS NOT NULL) THEN 
              fullText := fullText || ''(resolvable:string)=('' || REPLACE(REPLACE(current_row.resolvable,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.retrain IS NOT NULL) THEN 
              fullText := fullText || ''(retrain:string)=('' || REPLACE(REPLACE(current_row.retrain,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.qcManualAssessorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcmanualassessordata_info:integer)=('' || current_row.qcmanualassessordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcManualAssessorData_meta_data(current_row.qcManualAssessorData_info, child_count,$3,false,false);
              fullText := fullText || ''(qcmanualassessordata_info_qcmanualassessordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_qcManualAssessorData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcManualAssessorData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_qcManualAssessorData LEFT JOIN xnat_qcManualAssessorData_meta_data meta ON xnat_qcManualAssessorData.qcManualAssessorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_qcManualAssessorData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageAssessorData(current_row.id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcScanData WHERE scans_scan_xnat_qcManualAssesso_id=current_row.id
        LOOP
          PERFORM  a_xnat_qcScanData( parent_row.xnat_qcscandata_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_qcManualAssessorData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:qcManualAssessorData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcManualAssessorData.*, meta.meta_data_id FROM xnat_qcManualAssessorData LEFT JOIN xnat_qcManualAssessorData_meta_data meta ON xnat_qcManualAssessorData.qcManualAssessorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_qcManualAssessorData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_qcManualAssessorData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_qcManualAssessorData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_qcManualAssessorData','CREATE TRIGGER a_u_xnat_qcManualAssessorData  AFTER UPDATE OR DELETE ON xnat_qcManualAssessorData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_qcManualAssessorData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractStatistics_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractStatistics_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_abstractStatistics_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_abstractStatistics( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractStatistics)('';
      FOR current_row IN SELECT * FROM xnat_abstractStatistics WHERE  xnat_abstractstatistics_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractStatistics_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractstatistics_info:integer)=('' || current_row.abstractstatistics_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractStatistics_meta_data(current_row.abstractStatistics_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractstatistics_info_abstractstatistics_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_abstractstatistics_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractstatistics_id:integer)=('' || current_row.xnat_abstractstatistics_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractStatistics( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractStatistics.xnat_abstractstatistics_id AS xnat_abstractStatistics2, table1.element_name AS xdat_meta_element3, table2.insert_date AS xnat_abstractStatistics_meta_data10 FROM xnat_abstractStatistics xnat_abstractStatistics   LEFT JOIN xdat_meta_element table1 ON xnat_abstractStatistics.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractStatistics_meta_data table2 ON xnat_abstractStatistics.abstractStatistics_info=table2.meta_data_id) SEARCH  WHERE 
 ( (xnat_abstractStatistics2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
             fullText:= ie_xnat_abstractStatistics( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''xnat:statisticsData'') THEN
                fullText:= i_xnat_statisticsData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_abstractStatistics( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_abstractStatistics( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractStatistics.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_abstractStatistics LEFT JOIN xnat_abstractStatistics_meta_data meta ON xnat_abstractStatistics.abstractStatistics_info=meta.meta_data_id WHERE  xnat_abstractstatistics_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_abstractStatistics_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_abstractStatistics( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractStatistics.xnat_abstractstatistics_id AS xnat_abstractStatistics2, table1.element_name AS xdat_meta_element3, table2.insert_date AS xnat_abstractStatistics_meta_data10 FROM xnat_abstractStatistics xnat_abstractStatistics   LEFT JOIN xdat_meta_element table1 ON xnat_abstractStatistics.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractStatistics_meta_data table2 ON xnat_abstractStatistics.abstractStatistics_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_abstractStatistics2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
            PERFORM  ae_xnat_abstractStatistics( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''xnat:statisticsData'') THEN
            PERFORM  a_xnat_statisticsData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_abstractStatistics( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_abstractStatistics( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractStatistics.*, meta.meta_data_id FROM xnat_abstractStatistics LEFT JOIN xnat_abstractStatistics_meta_data meta ON xnat_abstractStatistics.abstractStatistics_info=meta.meta_data_id WHERE  xnat_abstractstatistics_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION xnat:qcAssessmentData_scan_slice/sliceStatistics
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcAssessmentData_scan_slice WHERE slicestatistics_xnat_abstractstatistics_id=current_row.xnat_abstractstatistics_id
        LOOP
        PERFORM update_ls_xnat_qcAssessmentData_scan_slice( parent_row.xnat_qcassessmentdata_scan_slice_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION xnat:qcAssessmentData_scan/scanStatistics
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcAssessmentData_scan WHERE scanstatistics_xnat_abstractstatistics_id=current_row.xnat_abstractstatistics_id
        LOOP
        PERFORM update_ls_xnat_qcAssessmentData_scan( parent_row.xnat_qcassessmentdata_scan_id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_abstractStatistics( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractStatistics.xnat_abstractstatistics_id AS xnat_abstractStatistics2, table1.element_name AS xdat_meta_element3, table2.insert_date AS xnat_abstractStatistics_meta_data10 FROM xnat_abstractStatistics xnat_abstractStatistics   LEFT JOIN xdat_meta_element table1 ON xnat_abstractStatistics.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractStatistics_meta_data table2 ON xnat_abstractStatistics.abstractStatistics_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_abstractStatistics2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_abstractStatistics( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''xnat:statisticsData'') THEN
                PERFORM update_ls_xnat_statisticsData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element3;
                    PERFORM update_ls_ext_xnat_abstractStatistics( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_abstractStatistics()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_abstractStatistics( OLD.xnat_abstractstatistics_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_abstractStatistics','CREATE TRIGGER a_u_xnat_abstractStatistics  AFTER UPDATE OR DELETE ON xnat_abstractStatistics FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_abstractStatistics()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcAssessmentData_scan_slice( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcAssessmentData_scan_slice)('';
      FOR current_row IN SELECT * FROM xnat_qcAssessmentData_scan_slice WHERE  xnat_qcassessmentdata_scan_slice_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.slicestatistics_xnat_abstractstatistics_id IS NOT NULL)) THEN
            fullText := fullText || ''(slicestatistics_xnat_abstractstatistics_id:integer)=('' || current_row.slicestatistics_xnat_abstractstatistics_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractStatistics(current_row.slicestatistics_xnat_abstractstatistics_id, child_count,$3,false,false);
              fullText := fullText || ''(slicestatistics_abstractstatistics:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.number IS NOT NULL) THEN 
              fullText := fullText || ''(number:string)=('' || REPLACE(REPLACE(current_row.number,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.qcAssessmentData_scan_slice_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcassessmentdata_scan_slice_info:integer)=('' || current_row.qcassessmentdata_scan_slice_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcAssessmentData_scan_slice_meta_data(current_row.qcAssessmentData_scan_slice_info, child_count,$3,false,false);
              fullText := fullText || ''(qcassessmentdata_scan_slice_info_qcassessmentdata_scan_slice_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.sliceqc_slice_xnat_qcAssessment_xnat_qcassessmentdata_scan_id IS NOT NULL)) THEN
            fullText := fullText || ''(sliceqc_slice_xnat_qcassessment_xnat_qcassessmentdata_scan_id:integer)=('' || current_row.sliceqc_slice_xnat_qcassessment_xnat_qcassessmentdata_scan_id || '')'';
        END IF;
          IF (current_row.xnat_qcassessmentdata_scan_slice_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_qcassessmentdata_scan_slice_id:integer)=('' || current_row.xnat_qcassessmentdata_scan_slice_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_qcAssessmentData_scan_slice( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcAssessmentData_scan_slice.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_qcAssessmentData_scan_slice LEFT JOIN xnat_qcAssessmentData_scan_slice_meta_data meta ON xnat_qcAssessmentData_scan_slice.qcAssessmentData_scan_slice_info=meta.meta_data_id WHERE  xnat_qcassessmentdata_scan_slice_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_qcAssessmentData_scan_slice_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.slicestatistics_xnat_abstractstatistics_id IS NOT NULL)) THEN
          PERFORM  a_xnat_abstractStatistics(current_row.slicestatistics_xnat_abstractstatistics_id, $2,$3,false);
        END IF;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_qcAssessmentData_scan_slice( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcAssessmentData_scan_slice.*, meta.meta_data_id FROM xnat_qcAssessmentData_scan_slice LEFT JOIN xnat_qcAssessmentData_scan_slice_meta_data meta ON xnat_qcAssessmentData_scan_slice.qcAssessmentData_scan_slice_info=meta.meta_data_id WHERE  xnat_qcassessmentdata_scan_slice_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:qcAssessmentData_scan/sliceQC/slice
        IF ((current_row.sliceqc_slice_xnat_qcAssessment_xnat_qcassessmentdata_scan_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_qcAssessmentData_scan(current_row.sliceqc_slice_xnat_qcAssessment_xnat_qcassessmentdata_scan_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_qcAssessmentData_scan_slice()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_qcAssessmentData_scan_slice( OLD.xnat_qcassessmentdata_scan_slice_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_qcAssessmentData_scan_slice','CREATE TRIGGER a_u_xnat_qcAssessmentData_scan_slice  AFTER UPDATE OR DELETE ON xnat_qcAssessmentData_scan_slice FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_qcAssessmentData_scan_slice()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractSubjectMetadata_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractSubjectMetadata_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_abstractSubjectMetadata_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_abstractSubjectMetadata( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractSubjectMetadata)('';
      FOR current_row IN SELECT * FROM xnat_abstractSubjectMetadata WHERE  xnat_abstractsubjectmetadata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractSubjectMetadata_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractsubjectmetadata_info:integer)=('' || current_row.abstractsubjectmetadata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractSubjectMetadata_meta_data(current_row.abstractSubjectMetadata_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractsubjectmetadata_info_abstractsubjectmetadata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_abstractsubjectmetadata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractsubjectmetadata_id:integer)=('' || current_row.xnat_abstractsubjectmetadata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractSubjectMetadata( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractSubjectMetadata.xnat_abstractsubjectmetadata_id AS xnat_abstractSubjectMetadata2, table1.element_name AS xdat_meta_element3, table2.insert_date AS xnat_abstractSubjectMetadata_meta_data10 FROM xnat_abstractSubjectMetadata xnat_abstractSubjectMetadata   LEFT JOIN xdat_meta_element table1 ON xnat_abstractSubjectMetadata.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractSubjectMetadata_meta_data table2 ON xnat_abstractSubjectMetadata.abstractSubjectMetadata_info=table2.meta_data_id) SEARCH  WHERE 
 ( (xnat_abstractSubjectMetadata2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
             fullText:= ie_xnat_abstractSubjectMetadata( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''xnat:subjectMetadata'') THEN
                fullText:= i_xnat_subjectMetadata( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_abstractSubjectMetadata( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_abstractSubjectMetadata( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractSubjectMetadata.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_abstractSubjectMetadata LEFT JOIN xnat_abstractSubjectMetadata_meta_data meta ON xnat_abstractSubjectMetadata.abstractSubjectMetadata_info=meta.meta_data_id WHERE  xnat_abstractsubjectmetadata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_abstractSubjectMetadata_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_abstractSubjectMetadata( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractSubjectMetadata.xnat_abstractsubjectmetadata_id AS xnat_abstractSubjectMetadata2, table1.element_name AS xdat_meta_element3, table2.insert_date AS xnat_abstractSubjectMetadata_meta_data10 FROM xnat_abstractSubjectMetadata xnat_abstractSubjectMetadata   LEFT JOIN xdat_meta_element table1 ON xnat_abstractSubjectMetadata.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractSubjectMetadata_meta_data table2 ON xnat_abstractSubjectMetadata.abstractSubjectMetadata_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_abstractSubjectMetadata2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
            PERFORM  ae_xnat_abstractSubjectMetadata( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''xnat:subjectMetadata'') THEN
            PERFORM  a_xnat_subjectMetadata( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_abstractSubjectMetadata( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_abstractSubjectMetadata( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractSubjectMetadata.*, meta.meta_data_id FROM xnat_abstractSubjectMetadata LEFT JOIN xnat_abstractSubjectMetadata_meta_data meta ON xnat_abstractSubjectMetadata.abstractSubjectMetadata_info=meta.meta_data_id WHERE  xnat_abstractsubjectmetadata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION xnat:subjectData/metadata
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectData WHERE metadata_xnat_abstractsubjectmetadata_id=current_row.xnat_abstractsubjectmetadata_id
        LOOP
        PERFORM update_ls_xnat_subjectData( parent_row.id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_abstractSubjectMetadata( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractSubjectMetadata.xnat_abstractsubjectmetadata_id AS xnat_abstractSubjectMetadata2, table1.element_name AS xdat_meta_element3, table2.insert_date AS xnat_abstractSubjectMetadata_meta_data10 FROM xnat_abstractSubjectMetadata xnat_abstractSubjectMetadata   LEFT JOIN xdat_meta_element table1 ON xnat_abstractSubjectMetadata.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractSubjectMetadata_meta_data table2 ON xnat_abstractSubjectMetadata.abstractSubjectMetadata_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_abstractSubjectMetadata2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_abstractSubjectMetadata( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''xnat:subjectMetadata'') THEN
                PERFORM update_ls_xnat_subjectMetadata( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element3;
                    PERFORM update_ls_ext_xnat_abstractSubjectMetadata( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_abstractSubjectMetadata()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_abstractSubjectMetadata( OLD.xnat_abstractsubjectmetadata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_abstractSubjectMetadata','CREATE TRIGGER a_u_xnat_abstractSubjectMetadata  AFTER UPDATE OR DELETE ON xnat_abstractSubjectMetadata FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_abstractSubjectMetadata()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectMetadata( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectMetadata)('';
      FOR current_row IN SELECT * FROM xnat_subjectMetadata WHERE  xnat_abstractsubjectmetadata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractsubjectmetadata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractsubjectmetadata_id:integer)=('' || current_row.xnat_abstractsubjectmetadata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractSubjectMetadata(current_row.xnat_abstractsubjectmetadata_id, child_count,$3,false,false);
              fullText := fullText || ''(abstractsubjectmetadata_abstractsubjectmetadata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.cohort IS NOT NULL) THEN 
              fullText := fullText || ''(cohort:string)=('' || REPLACE(REPLACE(current_row.cohort,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.subjectMetadata_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectmetadata_info:integer)=('' || current_row.subjectmetadata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectMetadata_meta_data(current_row.subjectMetadata_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectmetadata_info_subjectmetadata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractSubjectMetadata( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractsubjectmetadata_abstractsubjectmetadata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_subjectMetadata( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectMetadata.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_subjectMetadata LEFT JOIN xnat_subjectMetadata_meta_data meta ON xnat_subjectMetadata.subjectMetadata_info=meta.meta_data_id WHERE  xnat_abstractsubjectmetadata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_subjectMetadata_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractsubjectmetadata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_abstractSubjectMetadata(current_row.xnat_abstractsubjectmetadata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_abstractSubjectMetadata( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_subjectMetadata( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectMetadata.*, meta.meta_data_id FROM xnat_subjectMetadata LEFT JOIN xnat_subjectMetadata_meta_data meta ON xnat_subjectMetadata.subjectMetadata_info=meta.meta_data_id WHERE  xnat_abstractsubjectmetadata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_abstractSubjectMetadata( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_subjectMetadata()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_subjectMetadata( OLD.xnat_abstractsubjectmetadata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_subjectMetadata','CREATE TRIGGER a_u_xnat_subjectMetadata  AFTER UPDATE OR DELETE ON xnat_subjectMetadata FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_subjectMetadata()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_usScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:usScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_usScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.usScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(usscandata_info:integer)=('' || current_row.usscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_usScanData_meta_data(current_row.usScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(usscandata_info_usscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ctScanData_focalSpot_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ctScanData_focalSpot_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_ctScanData_focalSpot_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ctScanData_focalSpot( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ctScanData_focalSpot)('';
      FOR current_row IN SELECT * FROM xnat_ctScanData_focalSpot WHERE  xnat_ctscandata_focalspot_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.focalspot IS NOT NULL) THEN 
              fullText := fullText || ''(focalspot:float)=('' || current_row.focalspot || '')'';
          END IF;
        IF ((current_row.ctScanData_focalSpot_info IS NOT NULL)) THEN
            fullText := fullText || ''(ctscandata_focalspot_info:integer)=('' || current_row.ctscandata_focalspot_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ctScanData_focalSpot_meta_data(current_row.ctScanData_focalSpot_info, child_count,$3,false,false);
              fullText := fullText || ''(ctscandata_focalspot_info_ctscandata_focalspot_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_focalspots_focalspot_xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_focalspots_focalspot_xnat_imagescandata_id:integer)=('' || current_row.parameters_focalspots_focalspot_xnat_imagescandata_id || '')'';
        END IF;
          IF (current_row.xnat_ctscandata_focalspot_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_ctscandata_focalspot_id:integer)=('' || current_row.xnat_ctscandata_focalspot_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_ctScanData_focalSpot( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ctScanData_focalSpot.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_ctScanData_focalSpot LEFT JOIN xnat_ctScanData_focalSpot_meta_data meta ON xnat_ctScanData_focalSpot.ctScanData_focalSpot_info=meta.meta_data_id WHERE  xnat_ctscandata_focalspot_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_ctScanData_focalSpot_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_ctScanData_focalSpot( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ctScanData_focalSpot.*, meta.meta_data_id FROM xnat_ctScanData_focalSpot LEFT JOIN xnat_ctScanData_focalSpot_meta_data meta ON xnat_ctScanData_focalSpot.ctScanData_focalSpot_info=meta.meta_data_id WHERE  xnat_ctscandata_focalspot_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:ctScanData/parameters/focalSpots/focalSpot
        IF ((current_row.parameters_focalspots_focalspot_xnat_imagescandata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_ctScanData(current_row.parameters_focalspots_focalspot_xnat_imagescandata_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_ctScanData_focalSpot()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_ctScanData_focalSpot( OLD.xnat_ctscandata_focalspot_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_ctScanData_focalSpot','CREATE TRIGGER a_u_xnat_ctScanData_focalSpot  AFTER UPDATE OR DELETE ON xnat_ctScanData_focalSpot FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_ctScanData_focalSpot()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_dxScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dxScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_dxScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.dxScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(dxscandata_info:integer)=('' || current_row.dxscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dxScanData_meta_data(current_row.dxScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(dxscandata_info_dxscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectMetadata_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectMetadata_history)('';
      FOR current_row IN SELECT * FROM xnat_subjectMetadata_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractsubjectmetadata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractsubjectmetadata_id:integer)=('' || current_row.xnat_abstractsubjectmetadata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractSubjectMetadata_history WHERE xnat_abstractsubjectmetadata_id=current_row.xnat_abstractsubjectmetadata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_abstractSubjectMetadata_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(abstractsubjectmetadata_abstractsubjectmetadata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.cohort IS NOT NULL) THEN 
              fullText := fullText || ''(cohort:string)=('' || REPLACE(REPLACE(current_row.cohort,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.subjectMetadata_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectmetadata_info:integer)=('' || current_row.subjectmetadata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectMetadata_meta_data(current_row.subjectMetadata_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectmetadata_info_subjectmetadata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractSubjectMetadata_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractsubjectmetadata_abstractsubjectmetadata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_volumetricRegion_subregion_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:volumetricRegion_subregion_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_volumetricRegion_subregion_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_volumetricRegion_subregion( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:volumetricRegion_subregion)('';
      FOR current_row IN SELECT * FROM xnat_volumetricRegion_subregion WHERE  xnat_volumetricregion_subregion_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.voxels IS NOT NULL) THEN 
              fullText := fullText || ''(voxels:float)=('' || current_row.voxels || '')'';
          END IF;
        IF ((current_row.volumetricRegion_subregion_info IS NOT NULL)) THEN
            fullText := fullText || ''(volumetricregion_subregion_info:integer)=('' || current_row.volumetricregion_subregion_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_volumetricRegion_subregion_meta_data(current_row.volumetricRegion_subregion_info, child_count,$3,false,false);
              fullText := fullText || ''(volumetricregion_subregion_info_volumetricregion_subregion_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.subregions_subregion_xnat_volum_xnat_volumetricregion_id IS NOT NULL)) THEN
            fullText := fullText || ''(subregions_subregion_xnat_volum_xnat_volumetricregion_id:integer)=('' || current_row.subregions_subregion_xnat_volum_xnat_volumetricregion_id || '')'';
        END IF;
          IF (current_row.xnat_volumetricregion_subregion_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_volumetricregion_subregion_id:integer)=('' || current_row.xnat_volumetricregion_subregion_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_volumetricRegion_subregion( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_volumetricRegion_subregion.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_volumetricRegion_subregion LEFT JOIN xnat_volumetricRegion_subregion_meta_data meta ON xnat_volumetricRegion_subregion.volumetricRegion_subregion_info=meta.meta_data_id WHERE  xnat_volumetricregion_subregion_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_volumetricRegion_subregion_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_volumetricRegion_subregion( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_volumetricRegion_subregion.*, meta.meta_data_id FROM xnat_volumetricRegion_subregion LEFT JOIN xnat_volumetricRegion_subregion_meta_data meta ON xnat_volumetricRegion_subregion.volumetricRegion_subregion_info=meta.meta_data_id WHERE  xnat_volumetricregion_subregion_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:volumetricRegion/subregions/subregion
        IF ((current_row.subregions_subregion_xnat_volum_xnat_volumetricregion_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_volumetricRegion(current_row.subregions_subregion_xnat_volum_xnat_volumetricregion_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_volumetricRegion_subregion()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_volumetricRegion_subregion( OLD.xnat_volumetricregion_subregion_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_volumetricRegion_subregion','CREATE TRIGGER a_u_xnat_volumetricRegion_subregion  AFTER UPDATE OR DELETE ON xnat_volumetricRegion_subregion FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_volumetricRegion_subregion()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_volumetricRegion( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:volumetricRegion)('';
      FOR current_row IN SELECT * FROM xnat_volumetricRegion WHERE  xnat_volumetricregion_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_volumetricRegion_subregion WHERE subregions_subregion_xnat_volum_xnat_volumetricregion_id=current_row.xnat_volumetricregion_id ORDER BY xnat_volumetricregion_subregion_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_volumetricRegion_subregion( parent_row.xnat_volumetricregion_subregion_id, child_count,$3,false,false);
              fullText := fullText || ''(subregions_subregion_volumetricregion_subregion'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.units IS NOT NULL) THEN 
              fullText := fullText || ''(units:string)=('' || REPLACE(REPLACE(current_row.units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.voxels IS NOT NULL) THEN 
              fullText := fullText || ''(voxels:integer)=('' || current_row.voxels || '')'';
          END IF;
          IF (current_row.hemisphere IS NOT NULL) THEN 
              fullText := fullText || ''(hemisphere:string)=('' || REPLACE(REPLACE(current_row.hemisphere,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.volumetricRegion_info IS NOT NULL)) THEN
            fullText := fullText || ''(volumetricregion_info:integer)=('' || current_row.volumetricregion_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_volumetricRegion_meta_data(current_row.volumetricRegion_info, child_count,$3,false,false);
              fullText := fullText || ''(volumetricregion_info_volumetricregion_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_volumetricregion_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_volumetricregion_id:integer)=('' || current_row.xnat_volumetricregion_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_volumetricRegion( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_volumetricRegion.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_volumetricRegion LEFT JOIN xnat_volumetricRegion_meta_data meta ON xnat_volumetricRegion.volumetricRegion_info=meta.meta_data_id WHERE  xnat_volumetricregion_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_volumetricRegion_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_volumetricRegion_subregion WHERE subregions_subregion_xnat_volum_xnat_volumetricregion_id=current_row.xnat_volumetricregion_id
        LOOP
          PERFORM  a_xnat_volumetricRegion_subregion( parent_row.xnat_volumetricregion_subregion_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_volumetricRegion( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_volumetricRegion.*, meta.meta_data_id FROM xnat_volumetricRegion LEFT JOIN xnat_volumetricRegion_meta_data meta ON xnat_volumetricRegion.volumetricRegion_info=meta.meta_data_id WHERE  xnat_volumetricregion_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION ext:segmentationFastData/brainVolume
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM ext_segmentationFastData WHERE brainvolume_xnat_volumetricregion_id=current_row.xnat_volumetricregion_id
        LOOP
        PERFORM update_ls_ext_segmentationFastData( parent_row.id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_volumetricRegion()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_volumetricRegion( OLD.xnat_volumetricregion_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_volumetricRegion','CREATE TRIGGER a_u_xnat_volumetricRegion  AFTER UPDATE OR DELETE ON xnat_volumetricRegion FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_volumetricRegion()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_esScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_esScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcAssessmentData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcAssessmentData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_qcAssessmentData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageResourceSeries_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageResourceSeries_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_imageResourceSeries_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageResourceSeries( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageResourceSeries)('';
      FOR current_row IN SELECT * FROM xnat_imageResourceSeries WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_resourceSeries(current_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(resourceseries_resourceseries:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.dimensions_x IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_x:integer)=('' || current_row.dimensions_x || '')'';
          END IF;
          IF (current_row.dimensions_y IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_y:integer)=('' || current_row.dimensions_y || '')'';
          END IF;
          IF (current_row.dimensions_z IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_z:integer)=('' || current_row.dimensions_z || '')'';
          END IF;
          IF (current_row.dimensions_volumes IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_volumes:integer)=('' || current_row.dimensions_volumes || '')'';
          END IF;
          IF (current_row.voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_x:float)=('' || current_row.voxelres_x || '')'';
          END IF;
          IF (current_row.voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_y:float)=('' || current_row.voxelres_y || '')'';
          END IF;
          IF (current_row.voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_z:float)=('' || current_row.voxelres_z || '')'';
          END IF;
          IF (current_row.voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_units:string)=('' || REPLACE(REPLACE(current_row.voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.orientation IS NOT NULL) THEN 
              fullText := fullText || ''(orientation:string)=('' || REPLACE(REPLACE(current_row.orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.imageResourceSeries_info IS NOT NULL)) THEN
            fullText := fullText || ''(imageresourceseries_info:integer)=('' || current_row.imageresourceseries_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageResourceSeries_meta_data(current_row.imageResourceSeries_info, child_count,$3,false,false);
              fullText := fullText || ''(imageresourceseries_info_imageresourceseries_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_resourceSeries( $1, child_count,$3,$4,false);
              fullText := fullText || ''(resourceseries_resourceseries:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_imageResourceSeries( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageResourceSeries.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_imageResourceSeries LEFT JOIN xnat_imageResourceSeries_meta_data meta ON xnat_imageResourceSeries.imageResourceSeries_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_imageResourceSeries_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_resourceSeries(current_row.xnat_abstractresource_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_resourceSeries( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_imageResourceSeries( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageResourceSeries.*, meta.meta_data_id FROM xnat_imageResourceSeries LEFT JOIN xnat_imageResourceSeries_meta_data meta ON xnat_imageResourceSeries.imageResourceSeries_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_resourceSeries( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_imageResourceSeries()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_imageResourceSeries( OLD.xnat_abstractresource_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_imageResourceSeries','CREATE TRIGGER a_u_xnat_imageResourceSeries  AFTER UPDATE OR DELETE ON xnat_imageResourceSeries FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_imageResourceSeries()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_scScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:scScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_scScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_demographicData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:demographicData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_demographicData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_demographicData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:demographicData)('';
      FOR current_row IN SELECT * FROM xnat_demographicData WHERE  xnat_abstractdemographicdata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractdemographicdata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractdemographicdata_id:integer)=('' || current_row.xnat_abstractdemographicdata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractDemographicData(current_row.xnat_abstractdemographicdata_id, child_count,$3,false,false);
              fullText := fullText || ''(abstractdemographicdata_abstractdemographicdata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.dob IS NOT NULL) THEN 
              fullText := fullText || ''(dob:date)=('' || current_row.dob || '')'';
          END IF;
          IF (current_row.yob IS NOT NULL) THEN 
              fullText := fullText || ''(yob:integer)=('' || current_row.yob || '')'';
          END IF;
          IF (current_row.age IS NOT NULL) THEN 
              fullText := fullText || ''(age:integer)=('' || current_row.age || '')'';
          END IF;
          IF (current_row.gender IS NOT NULL) THEN 
              fullText := fullText || ''(gender:string)=('' || REPLACE(REPLACE(current_row.gender,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.handedness IS NOT NULL) THEN 
              fullText := fullText || ''(handedness:string)=('' || REPLACE(REPLACE(current_row.handedness,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.ses IS NOT NULL) THEN 
              fullText := fullText || ''(ses:integer)=('' || current_row.ses || '')'';
          END IF;
          IF (current_row.employment IS NOT NULL) THEN 
              fullText := fullText || ''(employment:integer)=('' || current_row.employment || '')'';
          END IF;
          IF (current_row.education IS NOT NULL) THEN 
              fullText := fullText || ''(education:integer)=('' || current_row.education || '')'';
          END IF;
          IF (current_row.educationdesc IS NOT NULL) THEN 
              fullText := fullText || ''(educationdesc:string)=('' || REPLACE(REPLACE(current_row.educationdesc,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race IS NOT NULL) THEN 
              fullText := fullText || ''(race:string)=('' || REPLACE(REPLACE(current_row.race,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race2 IS NOT NULL) THEN 
              fullText := fullText || ''(race2:string)=('' || REPLACE(REPLACE(current_row.race2,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race3 IS NOT NULL) THEN 
              fullText := fullText || ''(race3:string)=('' || REPLACE(REPLACE(current_row.race3,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race4 IS NOT NULL) THEN 
              fullText := fullText || ''(race4:string)=('' || REPLACE(REPLACE(current_row.race4,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race5 IS NOT NULL) THEN 
              fullText := fullText || ''(race5:string)=('' || REPLACE(REPLACE(current_row.race5,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.race6 IS NOT NULL) THEN 
              fullText := fullText || ''(race6:string)=('' || REPLACE(REPLACE(current_row.race6,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.ethnicity IS NOT NULL) THEN 
              fullText := fullText || ''(ethnicity:string)=('' || REPLACE(REPLACE(current_row.ethnicity,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.weight IS NOT NULL) THEN 
              fullText := fullText || ''(weight:float)=('' || current_row.weight || '')'';
          END IF;
          IF (current_row.weight_units IS NOT NULL) THEN 
              fullText := fullText || ''(weight_units:string)=('' || REPLACE(REPLACE(current_row.weight_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.height IS NOT NULL) THEN 
              fullText := fullText || ''(height:float)=('' || current_row.height || '')'';
          END IF;
          IF (current_row.height_units IS NOT NULL) THEN 
              fullText := fullText || ''(height_units:string)=('' || REPLACE(REPLACE(current_row.height_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.gestational_age IS NOT NULL) THEN 
              fullText := fullText || ''(gestational_age:float)=('' || current_row.gestational_age || '')'';
          END IF;
          IF (current_row.post_menstrual_age IS NOT NULL) THEN 
              fullText := fullText || ''(post_menstrual_age:float)=('' || current_row.post_menstrual_age || '')'';
          END IF;
          IF (current_row.birth_weight IS NOT NULL) THEN 
              fullText := fullText || ''(birth_weight:float)=('' || current_row.birth_weight || '')'';
          END IF;
        IF ((current_row.demographicData_info IS NOT NULL)) THEN
            fullText := fullText || ''(demographicdata_info:integer)=('' || current_row.demographicdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_demographicData_meta_data(current_row.demographicData_info, child_count,$3,false,false);
              fullText := fullText || ''(demographicdata_info_demographicdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractDemographicData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractdemographicdata_abstractdemographicdata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_demographicData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_demographicData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_demographicData LEFT JOIN xnat_demographicData_meta_data meta ON xnat_demographicData.demographicData_info=meta.meta_data_id WHERE  xnat_abstractdemographicdata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_demographicData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractdemographicdata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_abstractDemographicData(current_row.xnat_abstractdemographicdata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_abstractDemographicData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_demographicData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_demographicData.*, meta.meta_data_id FROM xnat_demographicData LEFT JOIN xnat_demographicData_meta_data meta ON xnat_demographicData.demographicData_info=meta.meta_data_id WHERE  xnat_abstractdemographicdata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_abstractDemographicData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_demographicData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_demographicData( OLD.xnat_abstractdemographicdata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_demographicData','CREATE TRIGGER a_u_xnat_demographicData  AFTER UPDATE OR DELETE ON xnat_demographicData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_demographicData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_session_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_session_history)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_session_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.studyProtocol_session_info IS NOT NULL)) THEN
            fullText := fullText || ''(studyprotocol_session_info:integer)=('' || current_row.studyprotocol_session_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_session_meta_data(current_row.studyProtocol_session_info, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_session_info_studyprotocol_session_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.imagesessiontypes_session_xnat__xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(imagesessiontypes_session_xnat__xnat_abstractprotocol_id:integer)=('' || current_row.imagesessiontypes_session_xnat__xnat_abstractprotocol_id || '')'';
        END IF;
          IF (current_row.xnat_studyprotocol_session_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_studyprotocol_session_id:integer)=('' || current_row.xnat_studyprotocol_session_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrQcScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrQcScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_mrQcScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_qcscandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_qcscandata_id:integer)=('' || current_row.xnat_qcscandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_qcScanData_history WHERE xnat_qcscandata_id=current_row.xnat_qcscandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_qcScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(qcscandata_qcscandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.blurring IS NOT NULL) THEN 
              fullText := fullText || ''(blurring:string)=('' || REPLACE(REPLACE(current_row.blurring,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.flow IS NOT NULL) THEN 
              fullText := fullText || ''(flow:string)=('' || REPLACE(REPLACE(current_row.flow,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.imagecontrast IS NOT NULL) THEN 
              fullText := fullText || ''(imagecontrast:string)=('' || REPLACE(REPLACE(current_row.imagecontrast,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.inhomogeneity IS NOT NULL) THEN 
              fullText := fullText || ''(inhomogeneity:string)=('' || REPLACE(REPLACE(current_row.inhomogeneity,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.wrap IS NOT NULL) THEN 
              fullText := fullText || ''(wrap:string)=('' || REPLACE(REPLACE(current_row.wrap,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.susceptibility IS NOT NULL) THEN 
              fullText := fullText || ''(susceptibility:string)=('' || REPLACE(REPLACE(current_row.susceptibility,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.interpacmotion IS NOT NULL) THEN 
              fullText := fullText || ''(interpacmotion:string)=('' || REPLACE(REPLACE(current_row.interpacmotion,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.mrQcScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mrqcscandata_info:integer)=('' || current_row.mrqcscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mrQcScanData_meta_data(current_row.mrQcScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(mrqcscandata_info_mrqcscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_qcScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(qcscandata_qcscandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_otherDicomSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:otherDicomSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_otherDicomSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_megSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:megSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_megSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_gmScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrsScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrsScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_mrsScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.mrsScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mrsscandata_info:integer)=('' || current_row.mrsscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mrsScanData_meta_data(current_row.mrsScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(mrsscandata_info_mrsscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_hdScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:hdScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_hdScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_esSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_esSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.esSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(essessiondata_info:integer)=('' || current_row.essessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_esSessionData_meta_data(current_row.esSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(essessiondata_info_essessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_usScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:usScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_usScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_xcSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.xcSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xcsessiondata_info:integer)=('' || current_row.xcsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xcSessionData_meta_data(current_row.xcSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(xcsessiondata_info_xcsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcvSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcvSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_xcvSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_eegSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:eegSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_eegSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_statisticsData_addField_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:statisticsData_addField_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_statisticsData_addField_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_statisticsData_addField( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:statisticsData_addField)('';
      FOR current_row IN SELECT * FROM xnat_statisticsData_addField WHERE  xnat_statisticsdata_addfield_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.addfield IS NOT NULL) THEN 
              fullText := fullText || ''(addfield:string)=('' || REPLACE(REPLACE(current_row.addfield,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.statisticsData_addField_info IS NOT NULL)) THEN
            fullText := fullText || ''(statisticsdata_addfield_info:integer)=('' || current_row.statisticsdata_addfield_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_statisticsData_addField_meta_data(current_row.statisticsData_addField_info, child_count,$3,false,false);
              fullText := fullText || ''(statisticsdata_addfield_info_statisticsdata_addfield_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xnat_statisticsData_xnat_abstractstatistics_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_statisticsdata_xnat_abstractstatistics_id:integer)=('' || current_row.xnat_statisticsdata_xnat_abstractstatistics_id || '')'';
        END IF;
          IF (current_row.xnat_statisticsdata_addfield_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_statisticsdata_addfield_id:integer)=('' || current_row.xnat_statisticsdata_addfield_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_statisticsData_addField( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_statisticsData_addField.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_statisticsData_addField LEFT JOIN xnat_statisticsData_addField_meta_data meta ON xnat_statisticsData_addField.statisticsData_addField_info=meta.meta_data_id WHERE  xnat_statisticsdata_addfield_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_statisticsData_addField_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_statisticsData_addField( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_statisticsData_addField.*, meta.meta_data_id FROM xnat_statisticsData_addField LEFT JOIN xnat_statisticsData_addField_meta_data meta ON xnat_statisticsData_addField.statisticsData_addField_info=meta.meta_data_id WHERE  xnat_statisticsdata_addfield_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:statisticsData/addField
        IF ((current_row.xnat_statisticsData_xnat_abstractstatistics_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_statisticsData(current_row.xnat_statisticsData_xnat_abstractstatistics_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_statisticsData_addField()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_statisticsData_addField( OLD.xnat_statisticsdata_addfield_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_statisticsData_addField','CREATE TRIGGER a_u_xnat_statisticsData_addField  AFTER UPDATE OR DELETE ON xnat_statisticsData_addField FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_statisticsData_addField()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_statisticsData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:statisticsData)('';
      FOR current_row IN SELECT * FROM xnat_statisticsData WHERE  xnat_abstractstatistics_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractstatistics_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractstatistics_id:integer)=('' || current_row.xnat_abstractstatistics_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractStatistics(current_row.xnat_abstractstatistics_id, child_count,$3,false,false);
              fullText := fullText || ''(abstractstatistics_abstractstatistics:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.mean IS NOT NULL) THEN 
              fullText := fullText || ''(mean:float)=('' || current_row.mean || '')'';
          END IF;
          IF (current_row.snr IS NOT NULL) THEN 
              fullText := fullText || ''(snr:float)=('' || current_row.snr || '')'';
          END IF;
          IF (current_row.min IS NOT NULL) THEN 
              fullText := fullText || ''(min:float)=('' || current_row.min || '')'';
          END IF;
          IF (current_row.max IS NOT NULL) THEN 
              fullText := fullText || ''(max:float)=('' || current_row.max || '')'';
          END IF;
          IF (current_row.stddev IS NOT NULL) THEN 
              fullText := fullText || ''(stddev:float)=('' || current_row.stddev || '')'';
          END IF;
          IF (current_row.no_of_voxels IS NOT NULL) THEN 
              fullText := fullText || ''(no_of_voxels:integer)=('' || current_row.no_of_voxels || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_statisticsData_additionalStatistics WHERE xnat_statisticsData_xnat_abstractstatistics_id=current_row.xnat_abstractstatistics_id ORDER BY xnat_statisticsdata_additionalstatistics_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_statisticsData_additionalStatistics( parent_row.xnat_statisticsdata_additionalstatistics_id, child_count,$3,false,false);
              fullText := fullText || ''(additionalstatistics_statisticsdata_additionalstatistics'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_statisticsData_addField WHERE xnat_statisticsData_xnat_abstractstatistics_id=current_row.xnat_abstractstatistics_id ORDER BY xnat_statisticsdata_addfield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_statisticsData_addField( parent_row.xnat_statisticsdata_addfield_id, child_count,$3,false,false);
              fullText := fullText || ''(addfield_statisticsdata_addfield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.statisticsData_info IS NOT NULL)) THEN
            fullText := fullText || ''(statisticsdata_info:integer)=('' || current_row.statisticsdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_statisticsData_meta_data(current_row.statisticsData_info, child_count,$3,false,false);
              fullText := fullText || ''(statisticsdata_info_statisticsdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractStatistics( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractstatistics_abstractstatistics:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_statisticsData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_statisticsData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_statisticsData LEFT JOIN xnat_statisticsData_meta_data meta ON xnat_statisticsData.statisticsData_info=meta.meta_data_id WHERE  xnat_abstractstatistics_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_statisticsData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractstatistics_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_abstractStatistics(current_row.xnat_abstractstatistics_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_statisticsData_additionalStatistics WHERE xnat_statisticsData_xnat_abstractstatistics_id=current_row.xnat_abstractstatistics_id
        LOOP
          PERFORM  a_xnat_statisticsData_additionalStatistics( parent_row.xnat_statisticsdata_additionalstatistics_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_statisticsData_addField WHERE xnat_statisticsData_xnat_abstractstatistics_id=current_row.xnat_abstractstatistics_id
        LOOP
          PERFORM  a_xnat_statisticsData_addField( parent_row.xnat_statisticsdata_addfield_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_abstractStatistics( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_statisticsData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_statisticsData.*, meta.meta_data_id FROM xnat_statisticsData LEFT JOIN xnat_statisticsData_meta_data meta ON xnat_statisticsData.statisticsData_info=meta.meta_data_id WHERE  xnat_abstractstatistics_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_abstractStatistics( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_statisticsData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_statisticsData( OLD.xnat_abstractstatistics_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_statisticsData','CREATE TRIGGER a_u_xnat_statisticsData  AFTER UPDATE OR DELETE ON xnat_statisticsData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_statisticsData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_megSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:megSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_megSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.megSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(megsessiondata_info:integer)=('' || current_row.megsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_megSessionData_meta_data(current_row.megSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(megsessiondata_info_megsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcAssessmentData_scan_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcAssessmentData_scan_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_qcAssessmentData_scan_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcAssessmentData_scan( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcAssessmentData_scan)('';
      FOR current_row IN SELECT * FROM xnat_qcAssessmentData_scan WHERE  xnat_qcassessmentdata_scan_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcAssessmentData_scan_slice WHERE sliceqc_slice_xnat_qcAssessment_xnat_qcassessmentdata_scan_id=current_row.xnat_qcassessmentdata_scan_id ORDER BY xnat_qcassessmentdata_scan_slice_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcAssessmentData_scan_slice( parent_row.xnat_qcassessmentdata_scan_slice_id, child_count,$3,false,false);
              fullText := fullText || ''(sliceqc_slice_qcassessmentdata_scan_slice'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.scanstatistics_xnat_abstractstatistics_id IS NOT NULL)) THEN
            fullText := fullText || ''(scanstatistics_xnat_abstractstatistics_id:integer)=('' || current_row.scanstatistics_xnat_abstractstatistics_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractStatistics(current_row.scanstatistics_xnat_abstractstatistics_id, child_count,$3,false,false);
              fullText := fullText || ''(scanstatistics_abstractstatistics:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.qcAssessmentData_scan_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcassessmentdata_scan_info:integer)=('' || current_row.qcassessmentdata_scan_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcAssessmentData_scan_meta_data(current_row.qcAssessmentData_scan_info, child_count,$3,false,false);
              fullText := fullText || ''(qcassessmentdata_scan_info_qcassessmentdata_scan_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.scans_scan_xnat_qcAssessmentDat_id IS NOT NULL)) THEN
            fullText := fullText || ''(scans_scan_xnat_qcassessmentdat_id:string)=('' || current_row.scans_scan_xnat_qcassessmentdat_id || '')'';
        END IF;
          IF (current_row.xnat_qcassessmentdata_scan_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_qcassessmentdata_scan_id:integer)=('' || current_row.xnat_qcassessmentdata_scan_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_qcAssessmentData_scan( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcAssessmentData_scan.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_qcAssessmentData_scan LEFT JOIN xnat_qcAssessmentData_scan_meta_data meta ON xnat_qcAssessmentData_scan.qcAssessmentData_scan_info=meta.meta_data_id WHERE  xnat_qcassessmentdata_scan_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_qcAssessmentData_scan_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcAssessmentData_scan_slice WHERE sliceqc_slice_xnat_qcAssessment_xnat_qcassessmentdata_scan_id=current_row.xnat_qcassessmentdata_scan_id
        LOOP
          PERFORM  a_xnat_qcAssessmentData_scan_slice( parent_row.xnat_qcassessmentdata_scan_slice_id, $2,$3,false);
        END LOOP;
        END;
        IF ((current_row.scanstatistics_xnat_abstractstatistics_id IS NOT NULL)) THEN
          PERFORM  a_xnat_abstractStatistics(current_row.scanstatistics_xnat_abstractstatistics_id, $2,$3,false);
        END IF;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_qcAssessmentData_scan( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcAssessmentData_scan.*, meta.meta_data_id FROM xnat_qcAssessmentData_scan LEFT JOIN xnat_qcAssessmentData_scan_meta_data meta ON xnat_qcAssessmentData_scan.qcAssessmentData_scan_info=meta.meta_data_id WHERE  xnat_qcassessmentdata_scan_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:qcAssessmentData/scans/scan
        IF ((current_row.scans_scan_xnat_qcAssessmentDat_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_qcAssessmentData(current_row.scans_scan_xnat_qcAssessmentDat_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_qcAssessmentData_scan()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_qcAssessmentData_scan( OLD.xnat_qcassessmentdata_scan_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_qcAssessmentData_scan','CREATE TRIGGER a_u_xnat_qcAssessmentData_scan  AFTER UPDATE OR DELETE ON xnat_qcAssessmentData_scan FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_qcAssessmentData_scan()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_qcAssessmentData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:qcAssessmentData)('';
      FOR current_row IN SELECT * FROM xnat_qcAssessmentData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_mrAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcAssessmentData_scan WHERE scans_scan_xnat_qcAssessmentDat_id=current_row.id ORDER BY xnat_qcassessmentdata_scan_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcAssessmentData_scan( parent_row.xnat_qcassessmentdata_scan_id, child_count,$3,false,false);
              fullText := fullText || ''(scans_scan_qcassessmentdata_scan'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.qcAssessmentData_info IS NOT NULL)) THEN
            fullText := fullText || ''(qcassessmentdata_info:integer)=('' || current_row.qcassessmentdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_qcAssessmentData_meta_data(current_row.qcAssessmentData_info, child_count,$3,false,false);
              fullText := fullText || ''(qcassessmentdata_info_qcassessmentdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_mrAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_qcAssessmentData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcAssessmentData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_qcAssessmentData LEFT JOIN xnat_qcAssessmentData_meta_data meta ON xnat_qcAssessmentData.qcAssessmentData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_qcAssessmentData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_mrAssessorData(current_row.id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_qcAssessmentData_scan WHERE scans_scan_xnat_qcAssessmentDat_id=current_row.id
        LOOP
          PERFORM  a_xnat_qcAssessmentData_scan( parent_row.xnat_qcassessmentdata_scan_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_mrAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_qcAssessmentData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:qcAssessmentData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_qcAssessmentData.*, meta.meta_data_id FROM xnat_qcAssessmentData LEFT JOIN xnat_qcAssessmentData_meta_data meta ON xnat_qcAssessmentData.qcAssessmentData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_qcAssessmentData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_mrAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_qcAssessmentData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_qcAssessmentData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_qcAssessmentData','CREATE TRIGGER a_u_xnat_qcAssessmentData  AFTER UPDATE OR DELETE ON xnat_qcAssessmentData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_qcAssessmentData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectData_field_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectData_field_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_projectData_field_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectData_field( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectData_field)('';
      FOR current_row IN SELECT * FROM xnat_projectData_field WHERE  xnat_projectdata_field_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.field IS NOT NULL) THEN 
              fullText := fullText || ''(field:string)=('' || REPLACE(REPLACE(current_row.field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.projectData_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(projectdata_field_info:integer)=('' || current_row.projectdata_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectData_field_meta_data(current_row.projectData_field_info, child_count,$3,false,false);
              fullText := fullText || ''(projectdata_field_info_projectdata_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fields_field_xnat_projectData_id IS NOT NULL)) THEN
            fullText := fullText || ''(fields_field_xnat_projectdata_id:string)=('' || current_row.fields_field_xnat_projectdata_id || '')'';
        END IF;
          IF (current_row.xnat_projectdata_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_projectdata_field_id:integer)=('' || current_row.xnat_projectdata_field_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_projectData_field( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_projectData_field.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_projectData_field LEFT JOIN xnat_projectData_field_meta_data meta ON xnat_projectData_field.projectData_field_info=meta.meta_data_id WHERE  xnat_projectdata_field_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_projectData_field_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_projectData_field( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_projectData_field.*, meta.meta_data_id FROM xnat_projectData_field LEFT JOIN xnat_projectData_field_meta_data meta ON xnat_projectData_field.projectData_field_info=meta.meta_data_id WHERE  xnat_projectdata_field_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:projectData/fields/field
        IF ((current_row.fields_field_xnat_projectData_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_projectData(current_row.fields_field_xnat_projectData_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_projectData_field()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_projectData_field( OLD.xnat_projectdata_field_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_projectData_field','CREATE TRIGGER a_u_xnat_projectData_field  AFTER UPDATE OR DELETE ON xnat_projectData_field FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_projectData_field()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_otherDicomScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:otherDicomScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_otherDicomScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.otherDicomScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(otherdicomscandata_info:integer)=('' || current_row.otherdicomscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_otherDicomScanData_meta_data(current_row.otherDicomScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(otherdicomscandata_info_otherdicomscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_voiceAudioScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:voiceAudioScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_voiceAudioScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_subjectData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_megScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:megScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_megScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_imageScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_imageScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageScanData)('';
      FOR current_row IN SELECT * FROM xnat_imageScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageScanData_share WHERE sharing_share_xnat_imageScanDat_xnat_imagescandata_id=current_row.xnat_imagescandata_id ORDER BY xnat_imagescandata_share_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageScanData_share( parent_row.xnat_imagescandata_share_id, child_count,$3,false,false);
              fullText := fullText || ''(sharing_share_imagescandata_share'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.image_session_id IS NOT NULL) THEN 
              fullText := fullText || ''(image_session_id:string)=('' || REPLACE(REPLACE(current_row.image_session_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.note IS NOT NULL) THEN 
              fullText := fullText || ''(note:string)=('' || REPLACE(REPLACE(current_row.note,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.quality IS NOT NULL) THEN 
              fullText := fullText || ''(quality:string)=('' || REPLACE(REPLACE(current_row.quality,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.condition IS NOT NULL) THEN 
              fullText := fullText || ''(condition:string)=('' || REPLACE(REPLACE(current_row.condition,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.series_description IS NOT NULL) THEN 
              fullText := fullText || ''(series_description:string)=('' || REPLACE(REPLACE(current_row.series_description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.documentation IS NOT NULL) THEN 
              fullText := fullText || ''(documentation:string)=('' || REPLACE(REPLACE(current_row.documentation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.scanner IS NOT NULL) THEN 
              fullText := fullText || ''(scanner:string)=('' || REPLACE(REPLACE(current_row.scanner,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.scanner_manufacturer IS NOT NULL) THEN 
              fullText := fullText || ''(scanner_manufacturer:string)=('' || REPLACE(REPLACE(current_row.scanner_manufacturer,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.scanner_model IS NOT NULL) THEN 
              fullText := fullText || ''(scanner_model:string)=('' || REPLACE(REPLACE(current_row.scanner_model,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modality IS NOT NULL) THEN 
              fullText := fullText || ''(modality:string)=('' || REPLACE(REPLACE(current_row.modality,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.frames IS NOT NULL) THEN 
              fullText := fullText || ''(frames:integer)=('' || current_row.frames || '')'';
          END IF;
          IF (current_row.operator IS NOT NULL) THEN 
              fullText := fullText || ''(operator:string)=('' || REPLACE(REPLACE(current_row.operator,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractResource WHERE xnat_imageScanData_xnat_imagescandata_id=current_row.xnat_imagescandata_id ORDER BY xnat_abstractresource_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource( parent_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(file_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.validation_xnat_validationdata_id IS NOT NULL)) THEN
            fullText := fullText || ''(validation_xnat_validationdata_id:integer)=('' || current_row.validation_xnat_validationdata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_validationData(current_row.validation_xnat_validationdata_id, child_count,$3,false,false);
              fullText := fullText || ''(validation_validationdata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.starttime IS NOT NULL) THEN 
              fullText := fullText || ''(starttime:time)=('' || current_row.starttime || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.uid IS NOT NULL) THEN 
              fullText := fullText || ''(uid:string)=('' || REPLACE(REPLACE(current_row.uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.imageScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(imagescandata_info:integer)=('' || current_row.imagescandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageScanData_meta_data(current_row.imageScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_info_imagescandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_imagescandata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_imageScanData.xnat_imagescandata_id AS xnat_imageScanData20, table1.element_name AS xdat_meta_element97, table2.insert_date AS xnat_imageScanData_meta_data104 FROM xnat_imageScanData xnat_imageScanData   LEFT JOIN xdat_meta_element table1 ON xnat_imageScanData.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_imageScanData_meta_data table2 ON xnat_imageScanData.imageScanData_info=table2.meta_data_id) SEARCH  WHERE 
 ( (xnat_imageScanData20=$1))
      LOOP
         IF (current_row.xdat_meta_element97 IS NULL) THEN 
             fullText:= ie_xnat_imageScanData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element97=''xnat:mrScanData'') THEN
                fullText:= i_xnat_mrScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:petScanData'') THEN
                fullText:= i_xnat_petScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:ctScanData'') THEN
                fullText:= i_xnat_ctScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:crScanData'') THEN
                fullText:= i_xnat_crScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:dxScanData'') THEN
                fullText:= i_xnat_dxScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:mgScanData'') THEN
                fullText:= i_xnat_mgScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:ioScanData'') THEN
                fullText:= i_xnat_ioScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:usScanData'') THEN
                fullText:= i_xnat_usScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:ecgScanData'') THEN
                fullText:= i_xnat_ecgScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:hdScanData'') THEN
                fullText:= i_xnat_hdScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:epsScanData'') THEN
                fullText:= i_xnat_epsScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xaScanData'') THEN
                fullText:= i_xnat_xaScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:rfScanData'') THEN
                fullText:= i_xnat_rfScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xa3DScanData'') THEN
                fullText:= i_xnat_xa3DScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:dx3DCraniofacialScanData'') THEN
                fullText:= i_xnat_dx3DCraniofacialScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:nmScanData'') THEN
                fullText:= i_xnat_nmScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:srScanData'') THEN
                fullText:= i_xnat_srScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:esScanData'') THEN
                fullText:= i_xnat_esScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:esvScanData'') THEN
                fullText:= i_xnat_esvScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:gmScanData'') THEN
                fullText:= i_xnat_gmScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:gmvScanData'') THEN
                fullText:= i_xnat_gmvScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:smScanData'') THEN
                fullText:= i_xnat_smScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xcScanData'') THEN
                fullText:= i_xnat_xcScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xcvScanData'') THEN
                fullText:= i_xnat_xcvScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:opScanData'') THEN
                fullText:= i_xnat_opScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:optScanData'') THEN
                fullText:= i_xnat_optScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:rtImageScanData'') THEN
                fullText:= i_xnat_rtImageScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:scScanData'') THEN
                fullText:= i_xnat_scScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:segScanData'') THEN
                fullText:= i_xnat_segScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:mrsScanData'') THEN
                fullText:= i_xnat_mrsScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:voiceAudioScanData'') THEN
                fullText:= i_xnat_voiceAudioScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:otherDicomScanData'') THEN
                fullText:= i_xnat_otherDicomScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:megScanData'') THEN
                fullText:= i_xnat_megScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:eegScanData'') THEN
                fullText:= i_xnat_eegScanData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_imageScanData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_imageScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_imageScanData LEFT JOIN xnat_imageScanData_meta_data meta ON xnat_imageScanData.imageScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_imageScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageScanData_share WHERE sharing_share_xnat_imageScanDat_xnat_imagescandata_id=current_row.xnat_imagescandata_id
        LOOP
          PERFORM  a_xnat_imageScanData_share( parent_row.xnat_imagescandata_share_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractResource WHERE xnat_imageScanData_xnat_imagescandata_id=current_row.xnat_imagescandata_id
        LOOP
          PERFORM  a_xnat_abstractResource( parent_row.xnat_abstractresource_id, $2,$3,false);
        END LOOP;
        END;
        IF ((current_row.validation_xnat_validationdata_id IS NOT NULL)) THEN
          PERFORM  a_xnat_validationData(current_row.validation_xnat_validationdata_id, $2,$3,false);
        END IF;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_imageScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_imageScanData.xnat_imagescandata_id AS xnat_imageScanData20, table1.element_name AS xdat_meta_element97, table2.insert_date AS xnat_imageScanData_meta_data104 FROM xnat_imageScanData xnat_imageScanData   LEFT JOIN xdat_meta_element table1 ON xnat_imageScanData.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_imageScanData_meta_data table2 ON xnat_imageScanData.imageScanData_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_imageScanData20=$1))
      LOOP
         IF (current_row.xdat_meta_element97 IS NULL) THEN 
            PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element97=''xnat:mrScanData'') THEN
            PERFORM  a_xnat_mrScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:petScanData'') THEN
            PERFORM  a_xnat_petScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:ctScanData'') THEN
            PERFORM  a_xnat_ctScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:crScanData'') THEN
            PERFORM  a_xnat_crScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:dxScanData'') THEN
            PERFORM  a_xnat_dxScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:mgScanData'') THEN
            PERFORM  a_xnat_mgScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:ioScanData'') THEN
            PERFORM  a_xnat_ioScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:usScanData'') THEN
            PERFORM  a_xnat_usScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:ecgScanData'') THEN
            PERFORM  a_xnat_ecgScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:hdScanData'') THEN
            PERFORM  a_xnat_hdScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:epsScanData'') THEN
            PERFORM  a_xnat_epsScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xaScanData'') THEN
            PERFORM  a_xnat_xaScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:rfScanData'') THEN
            PERFORM  a_xnat_rfScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xa3DScanData'') THEN
            PERFORM  a_xnat_xa3DScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:dx3DCraniofacialScanData'') THEN
            PERFORM  a_xnat_dx3DCraniofacialScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:nmScanData'') THEN
            PERFORM  a_xnat_nmScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:srScanData'') THEN
            PERFORM  a_xnat_srScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:esScanData'') THEN
            PERFORM  a_xnat_esScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:esvScanData'') THEN
            PERFORM  a_xnat_esvScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:gmScanData'') THEN
            PERFORM  a_xnat_gmScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:gmvScanData'') THEN
            PERFORM  a_xnat_gmvScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:smScanData'') THEN
            PERFORM  a_xnat_smScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xcScanData'') THEN
            PERFORM  a_xnat_xcScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xcvScanData'') THEN
            PERFORM  a_xnat_xcvScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:opScanData'') THEN
            PERFORM  a_xnat_opScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:optScanData'') THEN
            PERFORM  a_xnat_optScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:rtImageScanData'') THEN
            PERFORM  a_xnat_rtImageScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:scScanData'') THEN
            PERFORM  a_xnat_scScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:segScanData'') THEN
            PERFORM  a_xnat_segScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:mrsScanData'') THEN
            PERFORM  a_xnat_mrsScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:voiceAudioScanData'') THEN
            PERFORM  a_xnat_voiceAudioScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:otherDicomScanData'') THEN
            PERFORM  a_xnat_otherDicomScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:megScanData'') THEN
            PERFORM  a_xnat_megScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:eegScanData'') THEN
            PERFORM  a_xnat_eegScanData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_imageScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageScanData.*, meta.meta_data_id FROM xnat_imageScanData LEFT JOIN xnat_imageScanData_meta_data meta ON xnat_imageScanData.imageScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:imageSessionData/scans/scan
        IF ((current_row.image_session_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_imageSessionData(current_row.image_session_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_imageScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_imageScanData.xnat_imagescandata_id AS xnat_imageScanData20, table1.element_name AS xdat_meta_element97, table2.insert_date AS xnat_imageScanData_meta_data104 FROM xnat_imageScanData xnat_imageScanData   LEFT JOIN xdat_meta_element table1 ON xnat_imageScanData.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_imageScanData_meta_data table2 ON xnat_imageScanData.imageScanData_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_imageScanData20=$1))
      LOOP
         IF (current_row.xdat_meta_element97 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element97=''xnat:mrScanData'') THEN
                PERFORM update_ls_xnat_mrScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:petScanData'') THEN
                PERFORM update_ls_xnat_petScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:ctScanData'') THEN
                PERFORM update_ls_xnat_ctScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:crScanData'') THEN
                PERFORM update_ls_xnat_crScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:dxScanData'') THEN
                PERFORM update_ls_xnat_dxScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:mgScanData'') THEN
                PERFORM update_ls_xnat_mgScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:ioScanData'') THEN
                PERFORM update_ls_xnat_ioScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:usScanData'') THEN
                PERFORM update_ls_xnat_usScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:ecgScanData'') THEN
                PERFORM update_ls_xnat_ecgScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:hdScanData'') THEN
                PERFORM update_ls_xnat_hdScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:epsScanData'') THEN
                PERFORM update_ls_xnat_epsScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xaScanData'') THEN
                PERFORM update_ls_xnat_xaScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:rfScanData'') THEN
                PERFORM update_ls_xnat_rfScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xa3DScanData'') THEN
                PERFORM update_ls_xnat_xa3DScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:dx3DCraniofacialScanData'') THEN
                PERFORM update_ls_xnat_dx3DCraniofacialScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:nmScanData'') THEN
                PERFORM update_ls_xnat_nmScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:srScanData'') THEN
                PERFORM update_ls_xnat_srScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:esScanData'') THEN
                PERFORM update_ls_xnat_esScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:esvScanData'') THEN
                PERFORM update_ls_xnat_esvScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:gmScanData'') THEN
                PERFORM update_ls_xnat_gmScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:gmvScanData'') THEN
                PERFORM update_ls_xnat_gmvScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:smScanData'') THEN
                PERFORM update_ls_xnat_smScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xcScanData'') THEN
                PERFORM update_ls_xnat_xcScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:xcvScanData'') THEN
                PERFORM update_ls_xnat_xcvScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:opScanData'') THEN
                PERFORM update_ls_xnat_opScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:optScanData'') THEN
                PERFORM update_ls_xnat_optScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:rtImageScanData'') THEN
                PERFORM update_ls_xnat_rtImageScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:scScanData'') THEN
                PERFORM update_ls_xnat_scScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:segScanData'') THEN
                PERFORM update_ls_xnat_segScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:mrsScanData'') THEN
                PERFORM update_ls_xnat_mrsScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:voiceAudioScanData'') THEN
                PERFORM update_ls_xnat_voiceAudioScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:otherDicomScanData'') THEN
                PERFORM update_ls_xnat_otherDicomScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:megScanData'') THEN
                PERFORM update_ls_xnat_megScanData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element97=''xnat:eegScanData'') THEN
                PERFORM update_ls_xnat_eegScanData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element97;
                    PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_imageScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_imageScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_imageScanData','CREATE TRIGGER a_u_xnat_imageScanData  AFTER UPDATE OR DELETE ON xnat_imageScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_imageScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_petScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petScanData)('';
      FOR current_row IN SELECT * FROM xnat_petScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.parameters_orientation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_orientation:integer)=('' || current_row.parameters_orientation || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField WHERE parameters_addparam_xnat_petSca_xnat_imagescandata_id=current_row.xnat_imagescandata_id ORDER BY xnat_addfield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_addField( parent_row.xnat_addfield_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_addparam_addfield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.parameters_originalfilename IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_originalfilename:string)=('' || REPLACE(REPLACE(current_row.parameters_originalfilename,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_systemtype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_systemtype:integer)=('' || current_row.parameters_systemtype || '')'';
          END IF;
          IF (current_row.parameters_filetype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_filetype:integer)=('' || current_row.parameters_filetype || '')'';
          END IF;
          IF (current_row.parameters_transaxialfov IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_transaxialfov:float)=('' || current_row.parameters_transaxialfov || '')'';
          END IF;
          IF (current_row.parameters_acqtype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_acqtype:integer)=('' || current_row.parameters_acqtype || '')'';
          END IF;
          IF (current_row.parameters_facility IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_facility:string)=('' || REPLACE(REPLACE(current_row.parameters_facility,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_numplanes IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_numplanes:integer)=('' || current_row.parameters_numplanes || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_petScanData_frame WHERE parameters_frames_frame_xnat_pe_xnat_imagescandata_id=current_row.xnat_imagescandata_id ORDER BY xnat_petscandata_frame_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petScanData_frame( parent_row.xnat_petscandata_frame_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_frames_frame_petscandata_frame'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.parameters_frames_numframes IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_frames_numframes:integer)=('' || current_row.parameters_frames_numframes || '')'';
          END IF;
          IF (current_row.parameters_numgates IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_numgates:integer)=('' || current_row.parameters_numgates || '')'';
          END IF;
          IF (current_row.parameters_planeseparation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_planeseparation:float)=('' || current_row.parameters_planeseparation || '')'';
          END IF;
          IF (current_row.parameters_binsize IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_binsize:float)=('' || current_row.parameters_binsize || '')'';
          END IF;
          IF (current_row.parameters_datatype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_datatype:integer)=('' || current_row.parameters_datatype || '')'';
          END IF;
          IF (current_row.parameters_dimensions_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_dimensions_x:integer)=('' || current_row.parameters_dimensions_x || '')'';
          END IF;
          IF (current_row.parameters_dimensions_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_dimensions_y:integer)=('' || current_row.parameters_dimensions_y || '')'';
          END IF;
          IF (current_row.parameters_dimensions_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_dimensions_z:integer)=('' || current_row.parameters_dimensions_z || '')'';
          END IF;
          IF (current_row.parameters_dimensions_num IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_dimensions_num:integer)=('' || current_row.parameters_dimensions_num || '')'';
          END IF;
          IF (current_row.parameters_offset_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_offset_x:float)=('' || current_row.parameters_offset_x || '')'';
          END IF;
          IF (current_row.parameters_offset_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_offset_y:float)=('' || current_row.parameters_offset_y || '')'';
          END IF;
          IF (current_row.parameters_offset_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_offset_z:float)=('' || current_row.parameters_offset_z || '')'';
          END IF;
          IF (current_row.parameters_reconzoom IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_reconzoom:float)=('' || current_row.parameters_reconzoom || '')'';
          END IF;
          IF (current_row.parameters_pixelsize_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelsize_x:float)=('' || current_row.parameters_pixelsize_x || '')'';
          END IF;
          IF (current_row.parameters_pixelsize_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelsize_y:float)=('' || current_row.parameters_pixelsize_y || '')'';
          END IF;
          IF (current_row.parameters_pixelsize_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelsize_z:float)=('' || current_row.parameters_pixelsize_z || '')'';
          END IF;
          IF (current_row.parameters_filtercode IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_filtercode:integer)=('' || current_row.parameters_filtercode || '')'';
          END IF;
          IF (current_row.parameters_resolution_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_resolution_x:float)=('' || current_row.parameters_resolution_x || '')'';
          END IF;
          IF (current_row.parameters_resolution_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_resolution_y:float)=('' || current_row.parameters_resolution_y || '')'';
          END IF;
          IF (current_row.parameters_resolution_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_resolution_z:float)=('' || current_row.parameters_resolution_z || '')'';
          END IF;
          IF (current_row.parameters_numrelements IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_numrelements:float)=('' || current_row.parameters_numrelements || '')'';
          END IF;
          IF (current_row.parameters_numangles IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_numangles:float)=('' || current_row.parameters_numangles || '')'';
          END IF;
          IF (current_row.parameters_zrotationangle IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_zrotationangle:float)=('' || current_row.parameters_zrotationangle || '')'';
          END IF;
          IF (current_row.parameters_processingcode IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_processingcode:integer)=('' || current_row.parameters_processingcode || '')'';
          END IF;
          IF (current_row.parameters_gateduration IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_gateduration:integer)=('' || current_row.parameters_gateduration || '')'';
          END IF;
          IF (current_row.parameters_rwaveoffset IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rwaveoffset:integer)=('' || current_row.parameters_rwaveoffset || '')'';
          END IF;
          IF (current_row.parameters_numacceptedbeats IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_numacceptedbeats:integer)=('' || current_row.parameters_numacceptedbeats || '')'';
          END IF;
          IF (current_row.parameters_filter_cutoff IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_filter_cutoff:float)=('' || current_row.parameters_filter_cutoff || '')'';
          END IF;
          IF (current_row.parameters_annotation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_annotation:string)=('' || REPLACE(REPLACE(current_row.parameters_annotation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_mt_1_1 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_1_1:float)=('' || current_row.parameters_mt_1_1 || '')'';
          END IF;
          IF (current_row.parameters_mt_1_2 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_1_2:float)=('' || current_row.parameters_mt_1_2 || '')'';
          END IF;
          IF (current_row.parameters_mt_1_3 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_1_3:float)=('' || current_row.parameters_mt_1_3 || '')'';
          END IF;
          IF (current_row.parameters_mt_1_4 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_1_4:float)=('' || current_row.parameters_mt_1_4 || '')'';
          END IF;
          IF (current_row.parameters_mt_2_1 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_2_1:float)=('' || current_row.parameters_mt_2_1 || '')'';
          END IF;
          IF (current_row.parameters_mt_2_2 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_2_2:float)=('' || current_row.parameters_mt_2_2 || '')'';
          END IF;
          IF (current_row.parameters_mt_2_3 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_2_3:float)=('' || current_row.parameters_mt_2_3 || '')'';
          END IF;
          IF (current_row.parameters_mt_2_4 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_2_4:float)=('' || current_row.parameters_mt_2_4 || '')'';
          END IF;
          IF (current_row.parameters_mt_3_1 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_3_1:float)=('' || current_row.parameters_mt_3_1 || '')'';
          END IF;
          IF (current_row.parameters_mt_3_2 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_3_2:float)=('' || current_row.parameters_mt_3_2 || '')'';
          END IF;
          IF (current_row.parameters_mt_3_3 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_3_3:float)=('' || current_row.parameters_mt_3_3 || '')'';
          END IF;
          IF (current_row.parameters_mt_3_4 IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_mt_3_4:float)=('' || current_row.parameters_mt_3_4 || '')'';
          END IF;
          IF (current_row.parameters_rfilter_cutoff IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rfilter_cutoff:float)=('' || current_row.parameters_rfilter_cutoff || '')'';
          END IF;
          IF (current_row.parameters_rfilter_resolution IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rfilter_resolution:float)=('' || current_row.parameters_rfilter_resolution || '')'';
          END IF;
          IF (current_row.parameters_rfilter_code IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rfilter_code:integer)=('' || current_row.parameters_rfilter_code || '')'';
          END IF;
          IF (current_row.parameters_rfilter_order IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rfilter_order:integer)=('' || current_row.parameters_rfilter_order || '')'';
          END IF;
          IF (current_row.parameters_zfilter_cutoff IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_zfilter_cutoff:float)=('' || current_row.parameters_zfilter_cutoff || '')'';
          END IF;
          IF (current_row.parameters_zfilter_resolution IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_zfilter_resolution:float)=('' || current_row.parameters_zfilter_resolution || '')'';
          END IF;
          IF (current_row.parameters_zfilter_code IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_zfilter_code:integer)=('' || current_row.parameters_zfilter_code || '')'';
          END IF;
          IF (current_row.parameters_zfilter_order IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_zfilter_order:integer)=('' || current_row.parameters_zfilter_order || '')'';
          END IF;
          IF (current_row.parameters_scattertype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_scattertype:integer)=('' || current_row.parameters_scattertype || '')'';
          END IF;
          IF (current_row.parameters_recontype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_recontype:integer)=('' || current_row.parameters_recontype || '')'';
          END IF;
          IF (current_row.parameters_reconviews IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_reconviews:integer)=('' || current_row.parameters_reconviews || '')'';
          END IF;
          IF (current_row.parameters_bedposition IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_bedposition:float)=('' || current_row.parameters_bedposition || '')'';
          END IF;
          IF (current_row.parameters_ecatcalibrationfactor IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_ecatcalibrationfactor:float)=('' || current_row.parameters_ecatcalibrationfactor || '')'';
          END IF;
          IF (current_row.ecatvalidation IS NOT NULL) THEN 
              fullText := fullText || ''(ecatvalidation:string)=('' || REPLACE(REPLACE(current_row.ecatvalidation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.ecatvalidation_status IS NOT NULL) THEN 
              fullText := fullText || ''(ecatvalidation_status:integer)=('' || current_row.ecatvalidation_status || '')'';
          END IF;
        IF ((current_row.petScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(petscandata_info:integer)=('' || current_row.petscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petScanData_meta_data(current_row.petScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(petscandata_info_petscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_petScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_petScanData LEFT JOIN xnat_petScanData_meta_data meta ON xnat_petScanData.petScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_petScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField WHERE parameters_addparam_xnat_petSca_xnat_imagescandata_id=current_row.xnat_imagescandata_id
        LOOP
          PERFORM  a_xnat_addField( parent_row.xnat_addfield_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_petScanData_frame WHERE parameters_frames_frame_xnat_pe_xnat_imagescandata_id=current_row.xnat_imagescandata_id
        LOOP
          PERFORM  a_xnat_petScanData_frame( parent_row.xnat_petscandata_frame_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_petScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:petScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petScanData.*, meta.meta_data_id FROM xnat_petScanData LEFT JOIN xnat_petScanData_meta_data meta ON xnat_petScanData.petScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_petScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_petScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_petScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_petScanData','CREATE TRIGGER a_u_xnat_petScanData  AFTER UPDATE OR DELETE ON xnat_petScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_petScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrScanData)('';
      FOR current_row IN SELECT * FROM xnat_mrScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.coil IS NOT NULL) THEN 
              fullText := fullText || ''(coil:string)=('' || REPLACE(REPLACE(current_row.coil,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.fieldstrength IS NOT NULL) THEN 
              fullText := fullText || ''(fieldstrength:string)=('' || REPLACE(REPLACE(current_row.fieldstrength,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.marker IS NOT NULL) THEN 
              fullText := fullText || ''(marker:string)=('' || REPLACE(REPLACE(current_row.marker,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.stabilization IS NOT NULL) THEN 
              fullText := fullText || ''(stabilization:string)=('' || REPLACE(REPLACE(current_row.stabilization,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_units:string)=('' || REPLACE(REPLACE(current_row.parameters_voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_x:float)=('' || current_row.parameters_voxelres_x || '')'';
          END IF;
          IF (current_row.parameters_voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_y:float)=('' || current_row.parameters_voxelres_y || '')'';
          END IF;
          IF (current_row.parameters_voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_z:float)=('' || current_row.parameters_voxelres_z || '')'';
          END IF;
          IF (current_row.parameters_orientation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_orientation:string)=('' || REPLACE(REPLACE(current_row.parameters_orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_fov_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_x:integer)=('' || current_row.parameters_fov_x || '')'';
          END IF;
          IF (current_row.parameters_fov_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_y:integer)=('' || current_row.parameters_fov_y || '')'';
          END IF;
          IF (current_row.parameters_matrix_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_matrix_x:integer)=('' || current_row.parameters_matrix_x || '')'';
          END IF;
          IF (current_row.parameters_matrix_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_matrix_y:integer)=('' || current_row.parameters_matrix_y || '')'';
          END IF;
          IF (current_row.parameters_partitions IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_partitions:integer)=('' || current_row.parameters_partitions || '')'';
          END IF;
          IF (current_row.parameters_tr IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_tr:float)=('' || current_row.parameters_tr || '')'';
          END IF;
          IF (current_row.parameters_te IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_te:float)=('' || current_row.parameters_te || '')'';
          END IF;
          IF (current_row.parameters_ti IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_ti:float)=('' || current_row.parameters_ti || '')'';
          END IF;
          IF (current_row.parameters_flip IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_flip:integer)=('' || current_row.parameters_flip || '')'';
          END IF;
          IF (current_row.parameters_sequence IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_sequence:string)=('' || REPLACE(REPLACE(current_row.parameters_sequence,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_origin IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_origin:string)=('' || REPLACE(REPLACE(current_row.parameters_origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_imagetype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_imagetype:string)=('' || REPLACE(REPLACE(current_row.parameters_imagetype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_scansequence IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_scansequence:string)=('' || REPLACE(REPLACE(current_row.parameters_scansequence,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_seqvariant IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_seqvariant:string)=('' || REPLACE(REPLACE(current_row.parameters_seqvariant,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_scanoptions IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_scanoptions:string)=('' || REPLACE(REPLACE(current_row.parameters_scanoptions,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_acqtype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_acqtype:string)=('' || REPLACE(REPLACE(current_row.parameters_acqtype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_coil IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_coil:string)=('' || REPLACE(REPLACE(current_row.parameters_coil,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_dtiacqcount IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_dtiacqcount:integer)=('' || current_row.parameters_dtiacqcount || '')'';
          END IF;
          IF (current_row.parameters_pixelbandwidth IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelbandwidth:float)=('' || current_row.parameters_pixelbandwidth || '')'';
          END IF;
          IF (current_row.parameters_diffusion_bvalues IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_diffusion_bvalues:string)=('' || REPLACE(REPLACE(current_row.parameters_diffusion_bvalues,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_diffusion_directionality IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_diffusion_directionality:string)=('' || REPLACE(REPLACE(current_row.parameters_diffusion_directionality,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_diffusion_orientations IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_diffusion_orientations:string)=('' || REPLACE(REPLACE(current_row.parameters_diffusion_orientations,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_diffusion_anisotropytype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_diffusion_anisotropytype:string)=('' || REPLACE(REPLACE(current_row.parameters_diffusion_anisotropytype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField WHERE parameters_addparam_xnat_mrScan_xnat_imagescandata_id=current_row.xnat_imagescandata_id ORDER BY xnat_addfield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_addField( parent_row.xnat_addfield_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_addparam_addfield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.dcmvalidation IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation:string)=('' || REPLACE(REPLACE(current_row.dcmvalidation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmvalidation_status IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation_status:integer)=('' || current_row.dcmvalidation_status || '')'';
          END IF;
        IF ((current_row.mrScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mrscandata_info:integer)=('' || current_row.mrscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mrScanData_meta_data(current_row.mrScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(mrscandata_info_mrscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_mrScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mrScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_mrScanData LEFT JOIN xnat_mrScanData_meta_data meta ON xnat_mrScanData.mrScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_mrScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField WHERE parameters_addparam_xnat_mrScan_xnat_imagescandata_id=current_row.xnat_imagescandata_id
        LOOP
          PERFORM  a_xnat_addField( parent_row.xnat_addfield_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_mrScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:mrScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mrScanData.*, meta.meta_data_id FROM xnat_mrScanData LEFT JOIN xnat_mrScanData_meta_data meta ON xnat_mrScanData.mrScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_mrScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_mrScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_mrScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_mrScanData','CREATE TRIGGER a_u_xnat_mrScanData  AFTER UPDATE OR DELETE ON xnat_mrScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_mrScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_eegScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:eegScanData)('';
      FOR current_row IN SELECT * FROM xnat_eegScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.eegScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(eegscandata_info:integer)=('' || current_row.eegscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_eegScanData_meta_data(current_row.eegScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(eegscandata_info_eegscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_eegScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_eegScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_eegScanData LEFT JOIN xnat_eegScanData_meta_data meta ON xnat_eegScanData.eegScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_eegScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_eegScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:eegScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_eegScanData.*, meta.meta_data_id FROM xnat_eegScanData LEFT JOIN xnat_eegScanData_meta_data meta ON xnat_eegScanData.eegScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_eegScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_eegScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_eegScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_eegScanData','CREATE TRIGGER a_u_xnat_eegScanData  AFTER UPDATE OR DELETE ON xnat_eegScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_eegScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_megScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:megScanData)('';
      FOR current_row IN SELECT * FROM xnat_megScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.megScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(megscandata_info:integer)=('' || current_row.megscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_megScanData_meta_data(current_row.megScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(megscandata_info_megscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_megScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_megScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_megScanData LEFT JOIN xnat_megScanData_meta_data meta ON xnat_megScanData.megScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_megScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_megScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:megScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_megScanData.*, meta.meta_data_id FROM xnat_megScanData LEFT JOIN xnat_megScanData_meta_data meta ON xnat_megScanData.megScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_megScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_megScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_megScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_megScanData','CREATE TRIGGER a_u_xnat_megScanData  AFTER UPDATE OR DELETE ON xnat_megScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_megScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_otherDicomScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:otherDicomScanData)('';
      FOR current_row IN SELECT * FROM xnat_otherDicomScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.otherDicomScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(otherdicomscandata_info:integer)=('' || current_row.otherdicomscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_otherDicomScanData_meta_data(current_row.otherDicomScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(otherdicomscandata_info_otherdicomscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_otherDicomScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_otherDicomScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_otherDicomScanData LEFT JOIN xnat_otherDicomScanData_meta_data meta ON xnat_otherDicomScanData.otherDicomScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_otherDicomScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_otherDicomScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:otherDicomScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_otherDicomScanData.*, meta.meta_data_id FROM xnat_otherDicomScanData LEFT JOIN xnat_otherDicomScanData_meta_data meta ON xnat_otherDicomScanData.otherDicomScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_otherDicomScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_otherDicomScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_otherDicomScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_otherDicomScanData','CREATE TRIGGER a_u_xnat_otherDicomScanData  AFTER UPDATE OR DELETE ON xnat_otherDicomScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_otherDicomScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_voiceAudioScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:voiceAudioScanData)('';
      FOR current_row IN SELECT * FROM xnat_voiceAudioScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.voiceAudioScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(voiceaudioscandata_info:integer)=('' || current_row.voiceaudioscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_voiceAudioScanData_meta_data(current_row.voiceAudioScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(voiceaudioscandata_info_voiceaudioscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_voiceAudioScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_voiceAudioScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_voiceAudioScanData LEFT JOIN xnat_voiceAudioScanData_meta_data meta ON xnat_voiceAudioScanData.voiceAudioScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_voiceAudioScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_voiceAudioScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:voiceAudioScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_voiceAudioScanData.*, meta.meta_data_id FROM xnat_voiceAudioScanData LEFT JOIN xnat_voiceAudioScanData_meta_data meta ON xnat_voiceAudioScanData.voiceAudioScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_voiceAudioScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_voiceAudioScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_voiceAudioScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_voiceAudioScanData','CREATE TRIGGER a_u_xnat_voiceAudioScanData  AFTER UPDATE OR DELETE ON xnat_voiceAudioScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_voiceAudioScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrsScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrsScanData)('';
      FOR current_row IN SELECT * FROM xnat_mrsScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.mrsScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mrsscandata_info:integer)=('' || current_row.mrsscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mrsScanData_meta_data(current_row.mrsScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(mrsscandata_info_mrsscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_mrsScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mrsScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_mrsScanData LEFT JOIN xnat_mrsScanData_meta_data meta ON xnat_mrsScanData.mrsScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_mrsScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_mrsScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:mrsScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mrsScanData.*, meta.meta_data_id FROM xnat_mrsScanData LEFT JOIN xnat_mrsScanData_meta_data meta ON xnat_mrsScanData.mrsScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_mrsScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_mrsScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_mrsScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_mrsScanData','CREATE TRIGGER a_u_xnat_mrsScanData  AFTER UPDATE OR DELETE ON xnat_mrsScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_mrsScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_segScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:segScanData)('';
      FOR current_row IN SELECT * FROM xnat_segScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.segScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(segscandata_info:integer)=('' || current_row.segscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_segScanData_meta_data(current_row.segScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(segscandata_info_segscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_segScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_segScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_segScanData LEFT JOIN xnat_segScanData_meta_data meta ON xnat_segScanData.segScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_segScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_segScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:segScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_segScanData.*, meta.meta_data_id FROM xnat_segScanData LEFT JOIN xnat_segScanData_meta_data meta ON xnat_segScanData.segScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_segScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_segScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_segScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_segScanData','CREATE TRIGGER a_u_xnat_segScanData  AFTER UPDATE OR DELETE ON xnat_segScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_segScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_scScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:scScanData)('';
      FOR current_row IN SELECT * FROM xnat_scScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.scScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(scscandata_info:integer)=('' || current_row.scscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_scScanData_meta_data(current_row.scScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(scscandata_info_scscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_scScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_scScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_scScanData LEFT JOIN xnat_scScanData_meta_data meta ON xnat_scScanData.scScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_scScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_scScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:scScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_scScanData.*, meta.meta_data_id FROM xnat_scScanData LEFT JOIN xnat_scScanData_meta_data meta ON xnat_scScanData.scScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_scScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_scScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_scScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_scScanData','CREATE TRIGGER a_u_xnat_scScanData  AFTER UPDATE OR DELETE ON xnat_scScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_scScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_rtImageScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rtImageScanData)('';
      FOR current_row IN SELECT * FROM xnat_rtImageScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.rtImageScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(rtimagescandata_info:integer)=('' || current_row.rtimagescandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_rtImageScanData_meta_data(current_row.rtImageScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(rtimagescandata_info_rtimagescandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_rtImageScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_rtImageScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_rtImageScanData LEFT JOIN xnat_rtImageScanData_meta_data meta ON xnat_rtImageScanData.rtImageScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_rtImageScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_rtImageScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:rtImageScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_rtImageScanData.*, meta.meta_data_id FROM xnat_rtImageScanData LEFT JOIN xnat_rtImageScanData_meta_data meta ON xnat_rtImageScanData.rtImageScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_rtImageScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_rtImageScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_rtImageScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_rtImageScanData','CREATE TRIGGER a_u_xnat_rtImageScanData  AFTER UPDATE OR DELETE ON xnat_rtImageScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_rtImageScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_optScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:optScanData)('';
      FOR current_row IN SELECT * FROM xnat_optScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.parameters_voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_units:string)=('' || REPLACE(REPLACE(current_row.parameters_voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_x:float)=('' || current_row.parameters_voxelres_x || '')'';
          END IF;
          IF (current_row.parameters_voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_y:float)=('' || current_row.parameters_voxelres_y || '')'';
          END IF;
          IF (current_row.parameters_voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_z:float)=('' || current_row.parameters_voxelres_z || '')'';
          END IF;
          IF (current_row.parameters_fov_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_x:integer)=('' || current_row.parameters_fov_x || '')'';
          END IF;
          IF (current_row.parameters_fov_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_y:integer)=('' || current_row.parameters_fov_y || '')'';
          END IF;
          IF (current_row.parameters_laterality IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_laterality:string)=('' || REPLACE(REPLACE(current_row.parameters_laterality,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_illumination_wavelength IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_illumination_wavelength:string)=('' || REPLACE(REPLACE(current_row.parameters_illumination_wavelength,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_illumination_power IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_illumination_power:string)=('' || REPLACE(REPLACE(current_row.parameters_illumination_power,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_imagetype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_imagetype:string)=('' || REPLACE(REPLACE(current_row.parameters_imagetype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmvalidation IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation:string)=('' || REPLACE(REPLACE(current_row.dcmvalidation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmvalidation_status IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation_status:integer)=('' || current_row.dcmvalidation_status || '')'';
          END IF;
        IF ((current_row.optScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(optscandata_info:integer)=('' || current_row.optscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_optScanData_meta_data(current_row.optScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(optscandata_info_optscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_optScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_optScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_optScanData LEFT JOIN xnat_optScanData_meta_data meta ON xnat_optScanData.optScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_optScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_optScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:optScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_optScanData.*, meta.meta_data_id FROM xnat_optScanData LEFT JOIN xnat_optScanData_meta_data meta ON xnat_optScanData.optScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_optScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_optScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_optScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_optScanData','CREATE TRIGGER a_u_xnat_optScanData  AFTER UPDATE OR DELETE ON xnat_optScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_optScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_opScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:opScanData)('';
      FOR current_row IN SELECT * FROM xnat_opScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.opScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(opscandata_info:integer)=('' || current_row.opscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_opScanData_meta_data(current_row.opScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(opscandata_info_opscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_opScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_opScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_opScanData LEFT JOIN xnat_opScanData_meta_data meta ON xnat_opScanData.opScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_opScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_opScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:opScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_opScanData.*, meta.meta_data_id FROM xnat_opScanData LEFT JOIN xnat_opScanData_meta_data meta ON xnat_opScanData.opScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_opScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_opScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_opScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_opScanData','CREATE TRIGGER a_u_xnat_opScanData  AFTER UPDATE OR DELETE ON xnat_opScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_opScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcvScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcvScanData)('';
      FOR current_row IN SELECT * FROM xnat_xcvScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.xcvScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xcvscandata_info:integer)=('' || current_row.xcvscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xcvScanData_meta_data(current_row.xcvScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(xcvscandata_info_xcvscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_xcvScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xcvScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_xcvScanData LEFT JOIN xnat_xcvScanData_meta_data meta ON xnat_xcvScanData.xcvScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_xcvScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_xcvScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:xcvScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xcvScanData.*, meta.meta_data_id FROM xnat_xcvScanData LEFT JOIN xnat_xcvScanData_meta_data meta ON xnat_xcvScanData.xcvScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_xcvScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_xcvScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_xcvScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_xcvScanData','CREATE TRIGGER a_u_xnat_xcvScanData  AFTER UPDATE OR DELETE ON xnat_xcvScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_xcvScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_smScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:smScanData)('';
      FOR current_row IN SELECT * FROM xnat_smScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.smScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(smscandata_info:integer)=('' || current_row.smscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_smScanData_meta_data(current_row.smScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(smscandata_info_smscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_smScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_smScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_smScanData LEFT JOIN xnat_smScanData_meta_data meta ON xnat_smScanData.smScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_smScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_smScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:smScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_smScanData.*, meta.meta_data_id FROM xnat_smScanData LEFT JOIN xnat_smScanData_meta_data meta ON xnat_smScanData.smScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_smScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_smScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_smScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_smScanData','CREATE TRIGGER a_u_xnat_smScanData  AFTER UPDATE OR DELETE ON xnat_smScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_smScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmvScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmvScanData)('';
      FOR current_row IN SELECT * FROM xnat_gmvScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.gmvScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(gmvscandata_info:integer)=('' || current_row.gmvscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_gmvScanData_meta_data(current_row.gmvScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(gmvscandata_info_gmvscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_gmvScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_gmvScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_gmvScanData LEFT JOIN xnat_gmvScanData_meta_data meta ON xnat_gmvScanData.gmvScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_gmvScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_gmvScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:gmvScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_gmvScanData.*, meta.meta_data_id FROM xnat_gmvScanData LEFT JOIN xnat_gmvScanData_meta_data meta ON xnat_gmvScanData.gmvScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_gmvScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_gmvScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_gmvScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_gmvScanData','CREATE TRIGGER a_u_xnat_gmvScanData  AFTER UPDATE OR DELETE ON xnat_gmvScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_gmvScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmScanData)('';
      FOR current_row IN SELECT * FROM xnat_gmScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.gmScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(gmscandata_info:integer)=('' || current_row.gmscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_gmScanData_meta_data(current_row.gmScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(gmscandata_info_gmscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_gmScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_gmScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_gmScanData LEFT JOIN xnat_gmScanData_meta_data meta ON xnat_gmScanData.gmScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_gmScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_gmScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:gmScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_gmScanData.*, meta.meta_data_id FROM xnat_gmScanData LEFT JOIN xnat_gmScanData_meta_data meta ON xnat_gmScanData.gmScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_gmScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_gmScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_gmScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_gmScanData','CREATE TRIGGER a_u_xnat_gmScanData  AFTER UPDATE OR DELETE ON xnat_gmScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_gmScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_esvScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esvScanData)('';
      FOR current_row IN SELECT * FROM xnat_esvScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.esvScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(esvscandata_info:integer)=('' || current_row.esvscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_esvScanData_meta_data(current_row.esvScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(esvscandata_info_esvscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_esvScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_esvScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_esvScanData LEFT JOIN xnat_esvScanData_meta_data meta ON xnat_esvScanData.esvScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_esvScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_esvScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:esvScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_esvScanData.*, meta.meta_data_id FROM xnat_esvScanData LEFT JOIN xnat_esvScanData_meta_data meta ON xnat_esvScanData.esvScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_esvScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_esvScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_esvScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_esvScanData','CREATE TRIGGER a_u_xnat_esvScanData  AFTER UPDATE OR DELETE ON xnat_esvScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_esvScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_esScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esScanData)('';
      FOR current_row IN SELECT * FROM xnat_esScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.esScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(esscandata_info:integer)=('' || current_row.esscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_esScanData_meta_data(current_row.esScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(esscandata_info_esscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_esScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_esScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_esScanData LEFT JOIN xnat_esScanData_meta_data meta ON xnat_esScanData.esScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_esScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_esScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:esScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_esScanData.*, meta.meta_data_id FROM xnat_esScanData LEFT JOIN xnat_esScanData_meta_data meta ON xnat_esScanData.esScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_esScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_esScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_esScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_esScanData','CREATE TRIGGER a_u_xnat_esScanData  AFTER UPDATE OR DELETE ON xnat_esScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_esScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_srScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:srScanData)('';
      FOR current_row IN SELECT * FROM xnat_srScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.srScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(srscandata_info:integer)=('' || current_row.srscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_srScanData_meta_data(current_row.srScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(srscandata_info_srscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_srScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_srScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_srScanData LEFT JOIN xnat_srScanData_meta_data meta ON xnat_srScanData.srScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_srScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_srScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:srScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_srScanData.*, meta.meta_data_id FROM xnat_srScanData LEFT JOIN xnat_srScanData_meta_data meta ON xnat_srScanData.srScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_srScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_srScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_srScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_srScanData','CREATE TRIGGER a_u_xnat_srScanData  AFTER UPDATE OR DELETE ON xnat_srScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_srScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_nmScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:nmScanData)('';
      FOR current_row IN SELECT * FROM xnat_nmScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.nmScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(nmscandata_info:integer)=('' || current_row.nmscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_nmScanData_meta_data(current_row.nmScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(nmscandata_info_nmscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_nmScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_nmScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_nmScanData LEFT JOIN xnat_nmScanData_meta_data meta ON xnat_nmScanData.nmScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_nmScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_nmScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:nmScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_nmScanData.*, meta.meta_data_id FROM xnat_nmScanData LEFT JOIN xnat_nmScanData_meta_data meta ON xnat_nmScanData.nmScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_nmScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_nmScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_nmScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_nmScanData','CREATE TRIGGER a_u_xnat_nmScanData  AFTER UPDATE OR DELETE ON xnat_nmScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_nmScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_dx3DCraniofacialScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dx3DCraniofacialScanData)('';
      FOR current_row IN SELECT * FROM xnat_dx3DCraniofacialScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.dx3DCraniofacialScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(dx3dcraniofacialscandata_info:integer)=('' || current_row.dx3dcraniofacialscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dx3DCraniofacialScanData_meta_data(current_row.dx3DCraniofacialScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(dx3dcraniofacialscandata_info_dx3dcraniofacialscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_dx3DCraniofacialScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dx3DCraniofacialScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_dx3DCraniofacialScanData LEFT JOIN xnat_dx3DCraniofacialScanData_meta_data meta ON xnat_dx3DCraniofacialScanData.dx3DCraniofacialScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_dx3DCraniofacialScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_dx3DCraniofacialScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:dx3DCraniofacialScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dx3DCraniofacialScanData.*, meta.meta_data_id FROM xnat_dx3DCraniofacialScanData LEFT JOIN xnat_dx3DCraniofacialScanData_meta_data meta ON xnat_dx3DCraniofacialScanData.dx3DCraniofacialScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_dx3DCraniofacialScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_dx3DCraniofacialScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_dx3DCraniofacialScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_dx3DCraniofacialScanData','CREATE TRIGGER a_u_xnat_dx3DCraniofacialScanData  AFTER UPDATE OR DELETE ON xnat_dx3DCraniofacialScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_dx3DCraniofacialScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_xa3DScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xa3DScanData)('';
      FOR current_row IN SELECT * FROM xnat_xa3DScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.xa3DScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xa3dscandata_info:integer)=('' || current_row.xa3dscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xa3DScanData_meta_data(current_row.xa3DScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(xa3dscandata_info_xa3dscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_xa3DScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xa3DScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_xa3DScanData LEFT JOIN xnat_xa3DScanData_meta_data meta ON xnat_xa3DScanData.xa3DScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_xa3DScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_xa3DScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:xa3DScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xa3DScanData.*, meta.meta_data_id FROM xnat_xa3DScanData LEFT JOIN xnat_xa3DScanData_meta_data meta ON xnat_xa3DScanData.xa3DScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_xa3DScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_xa3DScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_xa3DScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_xa3DScanData','CREATE TRIGGER a_u_xnat_xa3DScanData  AFTER UPDATE OR DELETE ON xnat_xa3DScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_xa3DScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_rfScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rfScanData)('';
      FOR current_row IN SELECT * FROM xnat_rfScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.rfScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(rfscandata_info:integer)=('' || current_row.rfscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_rfScanData_meta_data(current_row.rfScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(rfscandata_info_rfscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_rfScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_rfScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_rfScanData LEFT JOIN xnat_rfScanData_meta_data meta ON xnat_rfScanData.rfScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_rfScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_rfScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:rfScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_rfScanData.*, meta.meta_data_id FROM xnat_rfScanData LEFT JOIN xnat_rfScanData_meta_data meta ON xnat_rfScanData.rfScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_rfScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_rfScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_rfScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_rfScanData','CREATE TRIGGER a_u_xnat_rfScanData  AFTER UPDATE OR DELETE ON xnat_rfScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_rfScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_xaScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xaScanData)('';
      FOR current_row IN SELECT * FROM xnat_xaScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.parameters_pixelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelres_units:string)=('' || REPLACE(REPLACE(current_row.parameters_pixelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_pixelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelres_x:integer)=('' || current_row.parameters_pixelres_x || '')'';
          END IF;
          IF (current_row.parameters_pixelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pixelres_y:integer)=('' || current_row.parameters_pixelres_y || '')'';
          END IF;
          IF (current_row.parameters_orientation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_orientation:string)=('' || REPLACE(REPLACE(current_row.parameters_orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_fov_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_x:integer)=('' || current_row.parameters_fov_x || '')'';
          END IF;
          IF (current_row.parameters_fov_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_y:integer)=('' || current_row.parameters_fov_y || '')'';
          END IF;
          IF (current_row.parameters_imagetype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_imagetype:string)=('' || REPLACE(REPLACE(current_row.parameters_imagetype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_options IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_options:string)=('' || REPLACE(REPLACE(current_row.parameters_options,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_derivation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_derivation:string)=('' || REPLACE(REPLACE(current_row.parameters_derivation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.parameters_contrastbolus_xnat_contrastbolus_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_contrastbolus_xnat_contrastbolus_id:integer)=('' || current_row.parameters_contrastbolus_xnat_contrastbolus_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_contrastBolus(current_row.parameters_contrastbolus_xnat_contrastbolus_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_contrastbolus_contrastbolus:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.xaScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xascandata_info:integer)=('' || current_row.xascandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xaScanData_meta_data(current_row.xaScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(xascandata_info_xascandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_xaScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xaScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_xaScanData LEFT JOIN xnat_xaScanData_meta_data meta ON xnat_xaScanData.xaScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_xaScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
        IF ((current_row.parameters_contrastbolus_xnat_contrastbolus_id IS NOT NULL)) THEN
          PERFORM  a_xnat_contrastBolus(current_row.parameters_contrastbolus_xnat_contrastbolus_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_xaScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:xaScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xaScanData.*, meta.meta_data_id FROM xnat_xaScanData LEFT JOIN xnat_xaScanData_meta_data meta ON xnat_xaScanData.xaScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_xaScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_xaScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_xaScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_xaScanData','CREATE TRIGGER a_u_xnat_xaScanData  AFTER UPDATE OR DELETE ON xnat_xaScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_xaScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_epsScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:epsScanData)('';
      FOR current_row IN SELECT * FROM xnat_epsScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.epsScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(epsscandata_info:integer)=('' || current_row.epsscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_epsScanData_meta_data(current_row.epsScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(epsscandata_info_epsscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_epsScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_epsScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_epsScanData LEFT JOIN xnat_epsScanData_meta_data meta ON xnat_epsScanData.epsScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_epsScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_epsScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:epsScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_epsScanData.*, meta.meta_data_id FROM xnat_epsScanData LEFT JOIN xnat_epsScanData_meta_data meta ON xnat_epsScanData.epsScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_epsScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_epsScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_epsScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_epsScanData','CREATE TRIGGER a_u_xnat_epsScanData  AFTER UPDATE OR DELETE ON xnat_epsScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_epsScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_hdScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:hdScanData)('';
      FOR current_row IN SELECT * FROM xnat_hdScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.hdScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(hdscandata_info:integer)=('' || current_row.hdscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_hdScanData_meta_data(current_row.hdScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(hdscandata_info_hdscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_hdScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_hdScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_hdScanData LEFT JOIN xnat_hdScanData_meta_data meta ON xnat_hdScanData.hdScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_hdScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_hdScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:hdScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_hdScanData.*, meta.meta_data_id FROM xnat_hdScanData LEFT JOIN xnat_hdScanData_meta_data meta ON xnat_hdScanData.hdScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_hdScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_hdScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_hdScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_hdScanData','CREATE TRIGGER a_u_xnat_hdScanData  AFTER UPDATE OR DELETE ON xnat_hdScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_hdScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_usScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:usScanData)('';
      FOR current_row IN SELECT * FROM xnat_usScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.usScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(usscandata_info:integer)=('' || current_row.usscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_usScanData_meta_data(current_row.usScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(usscandata_info_usscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_usScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_usScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_usScanData LEFT JOIN xnat_usScanData_meta_data meta ON xnat_usScanData.usScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_usScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_usScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:usScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_usScanData.*, meta.meta_data_id FROM xnat_usScanData LEFT JOIN xnat_usScanData_meta_data meta ON xnat_usScanData.usScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_usScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_usScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_usScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_usScanData','CREATE TRIGGER a_u_xnat_usScanData  AFTER UPDATE OR DELETE ON xnat_usScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_usScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_mgScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mgScanData)('';
      FOR current_row IN SELECT * FROM xnat_mgScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.mgScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mgscandata_info:integer)=('' || current_row.mgscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mgScanData_meta_data(current_row.mgScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(mgscandata_info_mgscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_mgScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mgScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_mgScanData LEFT JOIN xnat_mgScanData_meta_data meta ON xnat_mgScanData.mgScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_mgScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_mgScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:mgScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mgScanData.*, meta.meta_data_id FROM xnat_mgScanData LEFT JOIN xnat_mgScanData_meta_data meta ON xnat_mgScanData.mgScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_mgScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_mgScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_mgScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_mgScanData','CREATE TRIGGER a_u_xnat_mgScanData  AFTER UPDATE OR DELETE ON xnat_mgScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_mgScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_crScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:crScanData)('';
      FOR current_row IN SELECT * FROM xnat_crScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.crScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(crscandata_info:integer)=('' || current_row.crscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_crScanData_meta_data(current_row.crScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(crscandata_info_crscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_crScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_crScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_crScanData LEFT JOIN xnat_crScanData_meta_data meta ON xnat_crScanData.crScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_crScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_crScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:crScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_crScanData.*, meta.meta_data_id FROM xnat_crScanData LEFT JOIN xnat_crScanData_meta_data meta ON xnat_crScanData.crScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_crScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_crScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_crScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_crScanData','CREATE TRIGGER a_u_xnat_crScanData  AFTER UPDATE OR DELETE ON xnat_crScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_crScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_dicomSeries_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dicomSeries_history)('';
      FOR current_row IN SELECT * FROM xnat_dicomSeries_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_abstractResource_history WHERE xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_abstractResource_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(abstractresource_abstractresource:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.dimensions_x IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_x:integer)=('' || current_row.dimensions_x || '')'';
          END IF;
          IF (current_row.dimensions_y IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_y:integer)=('' || current_row.dimensions_y || '')'';
          END IF;
          IF (current_row.dimensions_z IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_z:integer)=('' || current_row.dimensions_z || '')'';
          END IF;
          IF (current_row.dimensions_volumes IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_volumes:integer)=('' || current_row.dimensions_volumes || '')'';
          END IF;
          IF (current_row.voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_x:float)=('' || current_row.voxelres_x || '')'';
          END IF;
          IF (current_row.voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_y:float)=('' || current_row.voxelres_y || '')'';
          END IF;
          IF (current_row.voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_z:float)=('' || current_row.voxelres_z || '')'';
          END IF;
          IF (current_row.voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_units:string)=('' || REPLACE(REPLACE(current_row.voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.orientation IS NOT NULL) THEN 
              fullText := fullText || ''(orientation:string)=('' || REPLACE(REPLACE(current_row.orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_dicomSeries_image_history WHERE imageset_image_xnat_dicomSeries_xnat_abstractresource_id=current_row.xnat_abstractresource_id AND xft_version=current_row.xft_version ORDER BY xnat_dicomseries_image_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dicomSeries_image_history( parent_row.xnat_dicomseries_image_id, child_count,$3,false,false);
              fullText := fullText || ''(imageset_image_dicomseries_image'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.format IS NOT NULL) THEN 
              fullText := fullText || ''(format:string)=('' || REPLACE(REPLACE(current_row.format,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.content IS NOT NULL) THEN 
              fullText := fullText || ''(content:string)=('' || REPLACE(REPLACE(current_row.content,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.cachepath IS NOT NULL) THEN 
              fullText := fullText || ''(cachepath:string)=('' || REPLACE(REPLACE(current_row.cachepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.uid IS NOT NULL) THEN 
              fullText := fullText || ''(uid:string)=('' || REPLACE(REPLACE(current_row.uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.dicomSeries_info IS NOT NULL)) THEN
            fullText := fullText || ''(dicomseries_info:integer)=('' || current_row.dicomseries_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dicomSeries_meta_data(current_row.dicomSeries_info, child_count,$3,false,false);
              fullText := fullText || ''(dicomseries_info_dicomseries_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractResource_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractresource_abstractresource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectData_field_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectData_field_history)('';
      FOR current_row IN SELECT * FROM xnat_projectData_field_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.field IS NOT NULL) THEN 
              fullText := fullText || ''(field:string)=('' || REPLACE(REPLACE(current_row.field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.projectData_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(projectdata_field_info:integer)=('' || current_row.projectdata_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectData_field_meta_data(current_row.projectData_field_info, child_count,$3,false,false);
              fullText := fullText || ''(projectdata_field_info_projectdata_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fields_field_xnat_projectData_id IS NOT NULL)) THEN
            fullText := fullText || ''(fields_field_xnat_projectdata_id:string)=('' || current_row.fields_field_xnat_projectdata_id || '')'';
        END IF;
          IF (current_row.xnat_projectdata_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_projectdata_field_id:integer)=('' || current_row.xnat_projectdata_field_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_optSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:optSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_optSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.optSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(optsessiondata_info:integer)=('' || current_row.optsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_optSessionData_meta_data(current_row.optSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(optsessiondata_info_optsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_crSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:crSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_crSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageResource_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageResource_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_imageResource_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageResource( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageResource)('';
      FOR current_row IN SELECT * FROM xnat_imageResource WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractresource_id:integer)=('' || current_row.xnat_abstractresource_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_resource(current_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(resource_resource:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.dimensions_x IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_x:integer)=('' || current_row.dimensions_x || '')'';
          END IF;
          IF (current_row.dimensions_y IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_y:integer)=('' || current_row.dimensions_y || '')'';
          END IF;
          IF (current_row.dimensions_z IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_z:integer)=('' || current_row.dimensions_z || '')'';
          END IF;
          IF (current_row.dimensions_volumes IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_volumes:integer)=('' || current_row.dimensions_volumes || '')'';
          END IF;
          IF (current_row.voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_x:float)=('' || current_row.voxelres_x || '')'';
          END IF;
          IF (current_row.voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_y:float)=('' || current_row.voxelres_y || '')'';
          END IF;
          IF (current_row.voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_z:float)=('' || current_row.voxelres_z || '')'';
          END IF;
          IF (current_row.voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_units:string)=('' || REPLACE(REPLACE(current_row.voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.orientation IS NOT NULL) THEN 
              fullText := fullText || ''(orientation:string)=('' || REPLACE(REPLACE(current_row.orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.imageResource_info IS NOT NULL)) THEN
            fullText := fullText || ''(imageresource_info:integer)=('' || current_row.imageresource_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageResource_meta_data(current_row.imageResource_info, child_count,$3,false,false);
              fullText := fullText || ''(imageresource_info_imageresource_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_resource( $1, child_count,$3,$4,false);
              fullText := fullText || ''(resource_resource:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_imageResource( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageResource.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_imageResource LEFT JOIN xnat_imageResource_meta_data meta ON xnat_imageResource.imageResource_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_imageResource_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractresource_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_resource(current_row.xnat_abstractresource_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_resource( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_imageResource( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageResource.*, meta.meta_data_id FROM xnat_imageResource LEFT JOIN xnat_imageResource_meta_data meta ON xnat_imageResource.imageResource_info=meta.meta_data_id WHERE  xnat_abstractresource_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_resource( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_imageResource()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_imageResource( OLD.xnat_abstractresource_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_imageResource','CREATE TRIGGER a_u_xnat_imageResource  AFTER UPDATE OR DELETE ON xnat_imageResource FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_imageResource()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_dxScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dxScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_dxScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_dxScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dxScanData)('';
      FOR current_row IN SELECT * FROM xnat_dxScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.dxScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(dxscandata_info:integer)=('' || current_row.dxscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dxScanData_meta_data(current_row.dxScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(dxscandata_info_dxscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_dxScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dxScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_dxScanData LEFT JOIN xnat_dxScanData_meta_data meta ON xnat_dxScanData.dxScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_dxScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_dxScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:dxScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dxScanData.*, meta.meta_data_id FROM xnat_dxScanData LEFT JOIN xnat_dxScanData_meta_data meta ON xnat_dxScanData.dxScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_dxScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_dxScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_dxScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_dxScanData','CREATE TRIGGER a_u_xnat_dxScanData  AFTER UPDATE OR DELETE ON xnat_dxScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_dxScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_fieldDefinitionGroup_field_possibleValue_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:fieldDefinitionGroup_field_possibleValue_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_fieldDefinitionGroup_field_possibleValue_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_fieldDefinitionGroup_field_possibleValue( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:fieldDefinitionGroup_field_possibleValue)('';
      FOR current_row IN SELECT * FROM xnat_fieldDefinitionGroup_field_possibleValue WHERE  xnat_fielddefinitiongroup_field_possiblevalue_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.possiblevalue IS NOT NULL) THEN 
              fullText := fullText || ''(possiblevalue:string)=('' || REPLACE(REPLACE(current_row.possiblevalue,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.display IS NOT NULL) THEN 
              fullText := fullText || ''(display:string)=('' || REPLACE(REPLACE(current_row.display,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.fieldDefinitionGroup_field_possibleValue_info IS NOT NULL)) THEN
            fullText := fullText || ''(fielddefinitiongroup_field_possiblevalue_info:integer)=('' || current_row.fielddefinitiongroup_field_possiblevalue_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_field_possibleValue_meta_data(current_row.fieldDefinitionGroup_field_possibleValue_info, child_count,$3,false,false);
              fullText := fullText || ''(fielddefinitiongroup_field_possiblevalue_info_fielddefinitiongroup_field_possiblevalue_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field IS NOT NULL)) THEN
            fullText := fullText || ''(possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field:integer)=('' || current_row.possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field || '')'';
        END IF;
          IF (current_row.xnat_fielddefinitiongroup_field_possiblevalue_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_fielddefinitiongroup_field_possiblevalue_id:integer)=('' || current_row.xnat_fielddefinitiongroup_field_possiblevalue_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_fieldDefinitionGroup_field_possibleValue( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_fieldDefinitionGroup_field_possibleValue.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_fieldDefinitionGroup_field_possibleValue LEFT JOIN xnat_fieldDefinitionGroup_field_possibleValue_meta_data meta ON xnat_fieldDefinitionGroup_field_possibleValue.fieldDefinitionGroup_field_possibleValue_info=meta.meta_data_id WHERE  xnat_fielddefinitiongroup_field_possiblevalue_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_fieldDefinitionGroup_field_possibleValue_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_fieldDefinitionGroup_field_possibleValue( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_fieldDefinitionGroup_field_possibleValue.*, meta.meta_data_id FROM xnat_fieldDefinitionGroup_field_possibleValue LEFT JOIN xnat_fieldDefinitionGroup_field_possibleValue_meta_data meta ON xnat_fieldDefinitionGroup_field_possibleValue.fieldDefinitionGroup_field_possibleValue_info=meta.meta_data_id WHERE  xnat_fielddefinitiongroup_field_possiblevalue_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:fieldDefinitionGroup_field/possibleValues/possibleValue
        IF ((current_row.possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field IS NOT NULL)) THEN
        PERFORM update_ls_xnat_fieldDefinitionGroup_field(current_row.possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_fieldDefinitionGroup_field_possibleValue()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_fieldDefinitionGroup_field_possibleValue( OLD.xnat_fielddefinitiongroup_field_possiblevalue_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_fieldDefinitionGroup_field_possibleValue','CREATE TRIGGER a_u_xnat_fieldDefinitionGroup_field_possibleValue  AFTER UPDATE OR DELETE ON xnat_fieldDefinitionGroup_field_possibleValue FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_fieldDefinitionGroup_field_possibleValue()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectData_field_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectData_field_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_subjectData_field_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectData_field( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectData_field)('';
      FOR current_row IN SELECT * FROM xnat_subjectData_field WHERE  xnat_subjectdata_field_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.field IS NOT NULL) THEN 
              fullText := fullText || ''(field:string)=('' || REPLACE(REPLACE(current_row.field,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.subjectData_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectdata_field_info:integer)=('' || current_row.subjectdata_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectData_field_meta_data(current_row.subjectData_field_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectdata_field_info_subjectdata_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fields_field_xnat_subjectData_id IS NOT NULL)) THEN
            fullText := fullText || ''(fields_field_xnat_subjectdata_id:string)=('' || current_row.fields_field_xnat_subjectdata_id || '')'';
        END IF;
          IF (current_row.xnat_subjectdata_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_subjectdata_field_id:integer)=('' || current_row.xnat_subjectdata_field_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_subjectData_field( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectData_field.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_subjectData_field LEFT JOIN xnat_subjectData_field_meta_data meta ON xnat_subjectData_field.subjectData_field_info=meta.meta_data_id WHERE  xnat_subjectdata_field_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_subjectData_field_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_subjectData_field( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectData_field.*, meta.meta_data_id FROM xnat_subjectData_field LEFT JOIN xnat_subjectData_field_meta_data meta ON xnat_subjectData_field.subjectData_field_info=meta.meta_data_id WHERE  xnat_subjectdata_field_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:subjectData/fields/field
        IF ((current_row.fields_field_xnat_subjectData_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_subjectData(current_row.fields_field_xnat_subjectData_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_subjectData_field()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_subjectData_field( OLD.xnat_subjectdata_field_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_subjectData_field','CREATE TRIGGER a_u_xnat_subjectData_field  AFTER UPDATE OR DELETE ON xnat_subjectData_field FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_subjectData_field()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_subjectData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:subjectData)('';
      FOR current_row IN SELECT * FROM xnat_subjectData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_projectParticipant WHERE subject_id=current_row.id ORDER BY xnat_projectparticipant_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectParticipant( parent_row.xnat_projectparticipant_id, child_count,$3,false,false);
              fullText := fullText || ''(subject_id_projectparticipant'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_subjectData_resource WHERE  xnat_subjectData_id=current_row.id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(resources_resource_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF ((current_row.investigator_xnat_investigatordata_id IS NOT NULL)) THEN
            fullText := fullText || ''(investigator_xnat_investigatordata_id:integer)=('' || current_row.investigator_xnat_investigatordata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_investigatorData(current_row.investigator_xnat_investigatordata_id, child_count,$3,false,false);
              fullText := fullText || ''(investigator_investigatordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.demographics_xnat_abstractdemographicdata_id IS NOT NULL)) THEN
            fullText := fullText || ''(demographics_xnat_abstractdemographicdata_id:integer)=('' || current_row.demographics_xnat_abstractdemographicdata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractDemographicData(current_row.demographics_xnat_abstractdemographicdata_id, child_count,$3,false,false);
              fullText := fullText || ''(demographics_abstractdemographicdata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.metadata_xnat_abstractsubjectmetadata_id IS NOT NULL)) THEN
            fullText := fullText || ''(metadata_xnat_abstractsubjectmetadata_id:integer)=('' || current_row.metadata_xnat_abstractsubjectmetadata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractSubjectMetadata(current_row.metadata_xnat_abstractsubjectmetadata_id, child_count,$3,false,false);
              fullText := fullText || ''(metadata_abstractsubjectmetadata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectData_addID WHERE xnat_subjectData_id=current_row.id ORDER BY xnat_subjectdata_addid_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectData_addID( parent_row.xnat_subjectdata_addid_id, child_count,$3,false,false);
              fullText := fullText || ''(addid_subjectdata_addid'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectData_field WHERE fields_field_xnat_subjectData_id=current_row.id ORDER BY xnat_subjectdata_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectData_field( parent_row.xnat_subjectdata_field_id, child_count,$3,false,false);
              fullText := fullText || ''(fields_field_subjectdata_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectAssessorData WHERE subject_ID=current_row.id ORDER BY id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectAssessorData( parent_row.id, child_count,$3,false,false);
              fullText := fullText || ''(subject_id_subjectassessordata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.project IS NOT NULL) THEN 
              fullText := fullText || ''(project:string)=('' || REPLACE(REPLACE(current_row.project,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row._group IS NOT NULL) THEN 
              fullText := fullText || ''(_group:string)=('' || REPLACE(REPLACE(current_row._group,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.label IS NOT NULL) THEN 
              fullText := fullText || ''(label:string)=('' || REPLACE(REPLACE(current_row.label,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.src IS NOT NULL) THEN 
              fullText := fullText || ''(src:string)=('' || REPLACE(REPLACE(current_row.src,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.initials IS NOT NULL) THEN 
              fullText := fullText || ''(initials:string)=('' || REPLACE(REPLACE(current_row.initials,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.subjectData_info IS NOT NULL)) THEN
            fullText := fullText || ''(subjectdata_info:integer)=('' || current_row.subjectdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_subjectData_meta_data(current_row.subjectData_info, child_count,$3,false,false);
              fullText := fullText || ''(subjectdata_info_subjectdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_subjectData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_subjectData LEFT JOIN xnat_subjectData_meta_data meta ON xnat_subjectData.subjectData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_subjectData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_projectParticipant WHERE subject_id=current_row.id
        LOOP
          PERFORM  a_xnat_projectParticipant( parent_row.xnat_projectparticipant_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_subjectData_resource WHERE  xnat_subjectData_id=current_row.id
        LOOP
          PERFORM  a_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, $2,$3,false);
        END LOOP;
        END; 
        IF ((current_row.investigator_xnat_investigatordata_id IS NOT NULL)) THEN
          PERFORM  a_xnat_investigatorData(current_row.investigator_xnat_investigatordata_id, $2,$3,false);
        END IF;
        IF ((current_row.demographics_xnat_abstractdemographicdata_id IS NOT NULL)) THEN
          PERFORM  a_xnat_abstractDemographicData(current_row.demographics_xnat_abstractdemographicdata_id, $2,$3,false);
        END IF;
        IF ((current_row.metadata_xnat_abstractsubjectmetadata_id IS NOT NULL)) THEN
          PERFORM  a_xnat_abstractSubjectMetadata(current_row.metadata_xnat_abstractsubjectmetadata_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectData_addID WHERE xnat_subjectData_id=current_row.id
        LOOP
          PERFORM  a_xnat_subjectData_addID( parent_row.xnat_subjectdata_addid_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectData_field WHERE fields_field_xnat_subjectData_id=current_row.id
        LOOP
          PERFORM  a_xnat_subjectData_field( parent_row.xnat_subjectdata_field_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_subjectAssessorData WHERE subject_ID=current_row.id
        LOOP
          PERFORM  a_xnat_subjectAssessorData( parent_row.id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_subjectData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:subjectData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_subjectData.*, meta.meta_data_id FROM xnat_subjectData LEFT JOIN xnat_subjectData_meta_data meta ON xnat_subjectData.subjectData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_subjectData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_subjectData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_subjectData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_subjectData','CREATE TRIGGER a_u_xnat_subjectData  AFTER UPDATE OR DELETE ON xnat_subjectData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_subjectData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_xcScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcScanData)('';
      FOR current_row IN SELECT * FROM xnat_xcScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.xcScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xcscandata_info:integer)=('' || current_row.xcscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xcScanData_meta_data(current_row.xcScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(xcscandata_info_xcscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_xcScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xcScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_xcScanData LEFT JOIN xnat_xcScanData_meta_data meta ON xnat_xcScanData.xcScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_xcScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_xcScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:xcScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xcScanData.*, meta.meta_data_id FROM xnat_xcScanData LEFT JOIN xnat_xcScanData_meta_data meta ON xnat_xcScanData.xcScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_xcScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_xcScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_xcScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_xcScanData','CREATE TRIGGER a_u_xnat_xcScanData  AFTER UPDATE OR DELETE ON xnat_xcScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_xcScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_xcSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_contrastBolus_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:contrastBolus_history)('';
      FOR current_row IN SELECT * FROM xnat_contrastBolus_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.agent IS NOT NULL) THEN 
              fullText := fullText || ''(agent:string)=('' || REPLACE(REPLACE(current_row.agent,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.route IS NOT NULL) THEN 
              fullText := fullText || ''(route:string)=('' || REPLACE(REPLACE(current_row.route,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.volume IS NOT NULL) THEN 
              fullText := fullText || ''(volume:float)=('' || current_row.volume || '')'';
          END IF;
          IF (current_row.totaldose IS NOT NULL) THEN 
              fullText := fullText || ''(totaldose:float)=('' || current_row.totaldose || '')'';
          END IF;
          IF (current_row.flowrate IS NOT NULL) THEN 
              fullText := fullText || ''(flowrate:float)=('' || current_row.flowrate || '')'';
          END IF;
          IF (current_row.flowduration IS NOT NULL) THEN 
              fullText := fullText || ''(flowduration:float)=('' || current_row.flowduration || '')'';
          END IF;
          IF (current_row.activeingredient IS NOT NULL) THEN 
              fullText := fullText || ''(activeingredient:string)=('' || REPLACE(REPLACE(current_row.activeingredient,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.concentration IS NOT NULL) THEN 
              fullText := fullText || ''(concentration:float)=('' || current_row.concentration || '')'';
          END IF;
        IF ((current_row.contrastBolus_info IS NOT NULL)) THEN
            fullText := fullText || ''(contrastbolus_info:integer)=('' || current_row.contrastbolus_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_contrastBolus_meta_data(current_row.contrastBolus_info, child_count,$3,false,false);
              fullText := fullText || ''(contrastbolus_info_contrastbolus_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_contrastbolus_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_contrastbolus_id:integer)=('' || current_row.xnat_contrastbolus_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_opSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:opSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_opSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.opSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(opsessiondata_info:integer)=('' || current_row.opsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_opSessionData_meta_data(current_row.opSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(opsessiondata_info_opsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_otherDicomSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:otherDicomSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_otherDicomSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.otherDicomSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(otherdicomsessiondata_info:integer)=('' || current_row.otherdicomsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_otherDicomSessionData_meta_data(current_row.otherDicomSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(otherdicomsessiondata_info_otherdicomsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_fieldDefinitionGroup_field_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:fieldDefinitionGroup_field_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_fieldDefinitionGroup_field_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_fieldDefinitionGroup_field( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:fieldDefinitionGroup_field)('';
      FOR current_row IN SELECT * FROM xnat_fieldDefinitionGroup_field WHERE  xnat_fielddefinitiongroup_field_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_fieldDefinitionGroup_field_possibleValue WHERE possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field=current_row.xnat_fielddefinitiongroup_field_id ORDER BY xnat_fielddefinitiongroup_field_possiblevalue_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_field_possibleValue( parent_row.xnat_fielddefinitiongroup_field_possiblevalue_id, child_count,$3,false,false);
              fullText := fullText || ''(possiblevalues_possiblevalue_fielddefinitiongroup_field_possiblevalue'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.datatype IS NOT NULL) THEN 
              fullText := fullText || ''(datatype:string)=('' || REPLACE(REPLACE(current_row.datatype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.required IS NOT NULL) THEN 
              fullText := fullText || ''(required:integer)=('' || current_row.required || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
          IF (current_row.xmlpath IS NOT NULL) THEN 
              fullText := fullText || ''(xmlpath:string)=('' || REPLACE(REPLACE(current_row.xmlpath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row._group IS NOT NULL) THEN 
              fullText := fullText || ''(_group:string)=('' || REPLACE(REPLACE(current_row._group,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.fieldDefinitionGroup_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(fielddefinitiongroup_field_info:integer)=('' || current_row.fielddefinitiongroup_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_field_meta_data(current_row.fieldDefinitionGroup_field_info, child_count,$3,false,false);
              fullText := fullText || ''(fielddefinitiongroup_field_info_fielddefinitiongroup_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fields_field_xnat_fieldDefiniti_xnat_fielddefinitiongroup_id IS NOT NULL)) THEN
            fullText := fullText || ''(fields_field_xnat_fielddefiniti_xnat_fielddefinitiongroup_id:integer)=('' || current_row.fields_field_xnat_fielddefiniti_xnat_fielddefinitiongroup_id || '')'';
        END IF;
          IF (current_row.xnat_fielddefinitiongroup_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_fielddefinitiongroup_field_id:integer)=('' || current_row.xnat_fielddefinitiongroup_field_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_fieldDefinitionGroup_field( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_fieldDefinitionGroup_field.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_fieldDefinitionGroup_field LEFT JOIN xnat_fieldDefinitionGroup_field_meta_data meta ON xnat_fieldDefinitionGroup_field.fieldDefinitionGroup_field_info=meta.meta_data_id WHERE  xnat_fielddefinitiongroup_field_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_fieldDefinitionGroup_field_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_fieldDefinitionGroup_field_possibleValue WHERE possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field=current_row.xnat_fielddefinitiongroup_field_id
        LOOP
          PERFORM  a_xnat_fieldDefinitionGroup_field_possibleValue( parent_row.xnat_fielddefinitiongroup_field_possiblevalue_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_fieldDefinitionGroup_field( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_fieldDefinitionGroup_field.*, meta.meta_data_id FROM xnat_fieldDefinitionGroup_field LEFT JOIN xnat_fieldDefinitionGroup_field_meta_data meta ON xnat_fieldDefinitionGroup_field.fieldDefinitionGroup_field_info=meta.meta_data_id WHERE  xnat_fielddefinitiongroup_field_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:fieldDefinitionGroup/fields/field
        IF ((current_row.fields_field_xnat_fieldDefiniti_xnat_fielddefinitiongroup_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_fieldDefinitionGroup(current_row.fields_field_xnat_fieldDefiniti_xnat_fielddefinitiongroup_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_fieldDefinitionGroup_field()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_fieldDefinitionGroup_field( OLD.xnat_fielddefinitiongroup_field_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_fieldDefinitionGroup_field','CREATE TRIGGER a_u_xnat_fieldDefinitionGroup_field  AFTER UPDATE OR DELETE ON xnat_fieldDefinitionGroup_field FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_fieldDefinitionGroup_field()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_fieldDefinitionGroup( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:fieldDefinitionGroup)('';
      FOR current_row IN SELECT * FROM xnat_fieldDefinitionGroup WHERE  xnat_fielddefinitiongroup_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_fieldDefinitionGroup_field WHERE fields_field_xnat_fieldDefiniti_xnat_fielddefinitiongroup_id=current_row.xnat_fielddefinitiongroup_id ORDER BY xnat_fielddefinitiongroup_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_field( parent_row.xnat_fielddefinitiongroup_field_id, child_count,$3,false,false);
              fullText := fullText || ''(fields_field_fielddefinitiongroup_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.data_type IS NOT NULL) THEN 
              fullText := fullText || ''(data_type:string)=('' || REPLACE(REPLACE(current_row.data_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.project_specific IS NOT NULL) THEN 
              fullText := fullText || ''(project_specific:integer)=('' || current_row.project_specific || '')'';
          END IF;
        IF ((current_row.fieldDefinitionGroup_info IS NOT NULL)) THEN
            fullText := fullText || ''(fielddefinitiongroup_info:integer)=('' || current_row.fielddefinitiongroup_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_meta_data(current_row.fieldDefinitionGroup_info, child_count,$3,false,false);
              fullText := fullText || ''(fielddefinitiongroup_info_fielddefinitiongroup_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_fielddefinitiongroup_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_fielddefinitiongroup_id:integer)=('' || current_row.xnat_fielddefinitiongroup_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_fieldDefinitionGroup( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_fieldDefinitionGroup.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_fieldDefinitionGroup LEFT JOIN xnat_fieldDefinitionGroup_meta_data meta ON xnat_fieldDefinitionGroup.fieldDefinitionGroup_info=meta.meta_data_id WHERE  xnat_fielddefinitiongroup_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_fieldDefinitionGroup_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_fieldDefinitionGroup_field WHERE fields_field_xnat_fieldDefiniti_xnat_fielddefinitiongroup_id=current_row.xnat_fielddefinitiongroup_id
        LOOP
          PERFORM  a_xnat_fieldDefinitionGroup_field( parent_row.xnat_fielddefinitiongroup_field_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_fieldDefinitionGroup( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:fieldDefinitionGroup'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_fieldDefinitionGroup.*, meta.meta_data_id FROM xnat_fieldDefinitionGroup LEFT JOIN xnat_fieldDefinitionGroup_meta_data meta ON xnat_fieldDefinitionGroup.fieldDefinitionGroup_info=meta.meta_data_id WHERE  xnat_fielddefinitiongroup_id=$1
      LOOP
         UPDATE xnat_fieldDefinitionGroup_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS MAPPING TABLE RELATION xnat:datatypeProtocol/definitions/definition
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_datatypeProtocol_fieldGroups WHERE  xnat_fieldDefinitionGroup_xnat_fielddefinitiongroup_id=current_row.xnat_fielddefinitiongroup_id
           LOOP 
               PERFORM update_ls_xnat_datatypeProtocol( mapping_row.xnat_datatypeProtocol_xnat_abstractprotocol_id, $2);
           END LOOP; 
        END; 
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_fieldDefinitionGroup()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_fieldDefinitionGroup( OLD.xnat_fielddefinitiongroup_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_fieldDefinitionGroup','CREATE TRIGGER a_u_xnat_fieldDefinitionGroup  AFTER UPDATE OR DELETE ON xnat_fieldDefinitionGroup FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_fieldDefinitionGroup()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_nmScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:nmScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_nmScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.nmScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(nmscandata_info:integer)=('' || current_row.nmscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_nmScanData_meta_data(current_row.nmScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(nmscandata_info_nmscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ioScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ioScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_ioScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ioScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ioScanData)('';
      FOR current_row IN SELECT * FROM xnat_ioScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.ioScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ioscandata_info:integer)=('' || current_row.ioscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ioScanData_meta_data(current_row.ioScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(ioscandata_info_ioscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_ioScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ioScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_ioScanData LEFT JOIN xnat_ioScanData_meta_data meta ON xnat_ioScanData.ioScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_ioScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_ioScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:ioScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ioScanData.*, meta.meta_data_id FROM xnat_ioScanData LEFT JOIN xnat_ioScanData_meta_data meta ON xnat_ioScanData.ioScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_ioScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_ioScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_ioScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_ioScanData','CREATE TRIGGER a_u_xnat_ioScanData  AFTER UPDATE OR DELETE ON xnat_ioScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_ioScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_investigatorData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:investigatorData_history)('';
      FOR current_row IN SELECT * FROM xnat_investigatorData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.title IS NOT NULL) THEN 
              fullText := fullText || ''(title:string)=('' || REPLACE(REPLACE(current_row.title,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.firstname IS NOT NULL) THEN 
              fullText := fullText || ''(firstname:string)=('' || REPLACE(REPLACE(current_row.firstname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.lastname IS NOT NULL) THEN 
              fullText := fullText || ''(lastname:string)=('' || REPLACE(REPLACE(current_row.lastname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.institution IS NOT NULL) THEN 
              fullText := fullText || ''(institution:string)=('' || REPLACE(REPLACE(current_row.institution,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.department IS NOT NULL) THEN 
              fullText := fullText || ''(department:string)=('' || REPLACE(REPLACE(current_row.department,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.email IS NOT NULL) THEN 
              fullText := fullText || ''(email:string)=('' || REPLACE(REPLACE(current_row.email,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.phone IS NOT NULL) THEN 
              fullText := fullText || ''(phone:string)=('' || REPLACE(REPLACE(current_row.phone,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.investigatorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(investigatordata_info:integer)=('' || current_row.investigatordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_investigatorData_meta_data(current_row.investigatorData_info, child_count,$3,false,false);
              fullText := fullText || ''(investigatordata_info_investigatordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_investigatordata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_investigatordata_id:integer)=('' || current_row.xnat_investigatordata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ctScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ctScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_ctScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ctScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ctScanData)('';
      FOR current_row IN SELECT * FROM xnat_ctScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.parameters_voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_units:string)=('' || REPLACE(REPLACE(current_row.parameters_voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_x:float)=('' || current_row.parameters_voxelres_x || '')'';
          END IF;
          IF (current_row.parameters_voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_y:float)=('' || current_row.parameters_voxelres_y || '')'';
          END IF;
          IF (current_row.parameters_voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_voxelres_z:float)=('' || current_row.parameters_voxelres_z || '')'';
          END IF;
          IF (current_row.parameters_orientation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_orientation:string)=('' || REPLACE(REPLACE(current_row.parameters_orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_fov_x IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_x:integer)=('' || current_row.parameters_fov_x || '')'';
          END IF;
          IF (current_row.parameters_fov_y IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_fov_y:integer)=('' || current_row.parameters_fov_y || '')'';
          END IF;
          IF (current_row.parameters_rescale_intercept IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rescale_intercept:string)=('' || REPLACE(REPLACE(current_row.parameters_rescale_intercept,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_rescale_slope IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rescale_slope:string)=('' || REPLACE(REPLACE(current_row.parameters_rescale_slope,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_kvp IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_kvp:float)=('' || current_row.parameters_kvp || '')'';
          END IF;
          IF (current_row.parameters_acquisitionnumber IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_acquisitionnumber:integer)=('' || current_row.parameters_acquisitionnumber || '')'';
          END IF;
          IF (current_row.parameters_imagetype IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_imagetype:string)=('' || REPLACE(REPLACE(current_row.parameters_imagetype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_options IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_options:string)=('' || REPLACE(REPLACE(current_row.parameters_options,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_collectiondiameter IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_collectiondiameter:float)=('' || current_row.parameters_collectiondiameter || '')'';
          END IF;
          IF (current_row.parameters_distancesourcetodetector IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_distancesourcetodetector:float)=('' || current_row.parameters_distancesourcetodetector || '')'';
          END IF;
          IF (current_row.parameters_distancesourcetopatient IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_distancesourcetopatient:float)=('' || current_row.parameters_distancesourcetopatient || '')'';
          END IF;
          IF (current_row.parameters_gantrytilt IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_gantrytilt:float)=('' || current_row.parameters_gantrytilt || '')'';
          END IF;
          IF (current_row.parameters_tableheight IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_tableheight:float)=('' || current_row.parameters_tableheight || '')'';
          END IF;
          IF (current_row.parameters_rotationdirection IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_rotationdirection:string)=('' || REPLACE(REPLACE(current_row.parameters_rotationdirection,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_exposuretime IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_exposuretime:float)=('' || current_row.parameters_exposuretime || '')'';
          END IF;
          IF (current_row.parameters_xraytubecurrent IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_xraytubecurrent:float)=('' || current_row.parameters_xraytubecurrent || '')'';
          END IF;
          IF (current_row.parameters_exposure IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_exposure:float)=('' || current_row.parameters_exposure || '')'';
          END IF;
          IF (current_row.parameters_filter IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_filter:string)=('' || REPLACE(REPLACE(current_row.parameters_filter,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_generatorpower IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_generatorpower:float)=('' || current_row.parameters_generatorpower || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_ctScanData_focalSpot WHERE parameters_focalspots_focalspot_xnat_imagescandata_id=current_row.xnat_imagescandata_id ORDER BY xnat_ctscandata_focalspot_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ctScanData_focalSpot( parent_row.xnat_ctscandata_focalspot_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_focalspots_focalspot_ctscandata_focalspot'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.parameters_convolutionkernel IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_convolutionkernel:string)=('' || REPLACE(REPLACE(current_row.parameters_convolutionkernel,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_collimationwidth_single IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_collimationwidth_single:float)=('' || current_row.parameters_collimationwidth_single || '')'';
          END IF;
          IF (current_row.parameters_collimationwidth_total IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_collimationwidth_total:float)=('' || current_row.parameters_collimationwidth_total || '')'';
          END IF;
          IF (current_row.parameters_tablespeed IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_tablespeed:float)=('' || current_row.parameters_tablespeed || '')'';
          END IF;
          IF (current_row.parameters_tablefeedperrotation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_tablefeedperrotation:float)=('' || current_row.parameters_tablefeedperrotation || '')'';
          END IF;
          IF (current_row.parameters_pitchfactor IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_pitchfactor:float)=('' || current_row.parameters_pitchfactor || '')'';
          END IF;
          IF (current_row.parameters_estimateddosesaving_modulation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_estimateddosesaving_modulation:string)=('' || REPLACE(REPLACE(current_row.parameters_estimateddosesaving_modulation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameters_estimateddosesaving IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_estimateddosesaving:float)=('' || current_row.parameters_estimateddosesaving || '')'';
          END IF;
          IF (current_row.parameters_ctdivol IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_ctdivol:float)=('' || current_row.parameters_ctdivol || '')'';
          END IF;
          IF (current_row.parameters_derivation IS NOT NULL) THEN 
              fullText := fullText || ''(parameters_derivation:string)=('' || REPLACE(REPLACE(current_row.parameters_derivation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.parameters_contrastbolus_xnat_contrastbolus_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_contrastbolus_xnat_contrastbolus_id:integer)=('' || current_row.parameters_contrastbolus_xnat_contrastbolus_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_contrastBolus(current_row.parameters_contrastbolus_xnat_contrastbolus_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_contrastbolus_contrastbolus:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.dcmvalidation IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation:string)=('' || REPLACE(REPLACE(current_row.dcmvalidation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmvalidation_status IS NOT NULL) THEN 
              fullText := fullText || ''(dcmvalidation_status:integer)=('' || current_row.dcmvalidation_status || '')'';
          END IF;
        IF ((current_row.ctScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ctscandata_info:integer)=('' || current_row.ctscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ctScanData_meta_data(current_row.ctScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(ctscandata_info_ctscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_ctScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ctScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_ctScanData LEFT JOIN xnat_ctScanData_meta_data meta ON xnat_ctScanData.ctScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_ctScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_ctScanData_focalSpot WHERE parameters_focalspots_focalspot_xnat_imagescandata_id=current_row.xnat_imagescandata_id
        LOOP
          PERFORM  a_xnat_ctScanData_focalSpot( parent_row.xnat_ctscandata_focalspot_id, $2,$3,false);
        END LOOP;
        END;
        IF ((current_row.parameters_contrastbolus_xnat_contrastbolus_id IS NOT NULL)) THEN
          PERFORM  a_xnat_contrastBolus(current_row.parameters_contrastbolus_xnat_contrastbolus_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_ctScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:ctScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ctScanData.*, meta.meta_data_id FROM xnat_ctScanData LEFT JOIN xnat_ctScanData_meta_data meta ON xnat_ctScanData.ctScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_ctScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_ctScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_ctScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_ctScanData','CREATE TRIGGER a_u_xnat_ctScanData  AFTER UPDATE OR DELETE ON xnat_ctScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_ctScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_esScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_esScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.esScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(esscandata_info:integer)=('' || current_row.esscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_esScanData_meta_data(current_row.esScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(esscandata_info_esscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_opScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:opScanData_history)('';
      FOR current_row IN SELECT * FROM xnat_opScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageScanData_history WHERE xnat_imagescandata_id=current_row.xnat_imagescandata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageScanData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.opScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(opscandata_info:integer)=('' || current_row.opscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_opScanData_meta_data(current_row.opScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(opscandata_info_opscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_srSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:srSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_srSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_fieldDefinitionGroup_field_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:fieldDefinitionGroup_field_history)('';
      FOR current_row IN SELECT * FROM xnat_fieldDefinitionGroup_field_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_fieldDefinitionGroup_field_possibleValue_history WHERE possiblevalues_possiblevalue_xn_xnat_fielddefinitiongroup_field=current_row.xnat_fielddefinitiongroup_field_id AND xft_version=current_row.xft_version ORDER BY xnat_fielddefinitiongroup_field_possiblevalue_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_field_possibleValue_history( parent_row.xnat_fielddefinitiongroup_field_possiblevalue_id, child_count,$3,false,false);
              fullText := fullText || ''(possiblevalues_possiblevalue_fielddefinitiongroup_field_possiblevalue'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.datatype IS NOT NULL) THEN 
              fullText := fullText || ''(datatype:string)=('' || REPLACE(REPLACE(current_row.datatype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.required IS NOT NULL) THEN 
              fullText := fullText || ''(required:integer)=('' || current_row.required || '')'';
          END IF;
          IF (current_row.sequence IS NOT NULL) THEN 
              fullText := fullText || ''(sequence:integer)=('' || current_row.sequence || '')'';
          END IF;
          IF (current_row.xmlpath IS NOT NULL) THEN 
              fullText := fullText || ''(xmlpath:string)=('' || REPLACE(REPLACE(current_row.xmlpath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row._group IS NOT NULL) THEN 
              fullText := fullText || ''(_group:string)=('' || REPLACE(REPLACE(current_row._group,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.fieldDefinitionGroup_field_info IS NOT NULL)) THEN
            fullText := fullText || ''(fielddefinitiongroup_field_info:integer)=('' || current_row.fielddefinitiongroup_field_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup_field_meta_data(current_row.fieldDefinitionGroup_field_info, child_count,$3,false,false);
              fullText := fullText || ''(fielddefinitiongroup_field_info_fielddefinitiongroup_field_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fields_field_xnat_fieldDefiniti_xnat_fielddefinitiongroup_id IS NOT NULL)) THEN
            fullText := fullText || ''(fields_field_xnat_fielddefiniti_xnat_fielddefinitiongroup_id:integer)=('' || current_row.fields_field_xnat_fielddefiniti_xnat_fielddefinitiongroup_id || '')'';
        END IF;
          IF (current_row.xnat_fielddefinitiongroup_field_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_fielddefinitiongroup_field_id:integer)=('' || current_row.xnat_fielddefinitiongroup_field_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractProtocol_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractProtocol_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_abstractProtocol_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_xnat_abstractProtocol( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:abstractProtocol)('';
      FOR current_row IN SELECT * FROM xnat_abstractProtocol WHERE  xnat_abstractprotocol_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.data_type IS NOT NULL) THEN 
              fullText := fullText || ''(data_type:string)=('' || REPLACE(REPLACE(current_row.data_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractProtocol_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractprotocol_info:integer)=('' || current_row.abstractprotocol_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractProtocol_meta_data(current_row.abstractProtocol_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractprotocol_info_abstractprotocol_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xnat_projectData_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_projectdata_id:string)=('' || current_row.xnat_projectdata_id || '')'';
        END IF;
          IF (current_row.xnat_abstractprotocol_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_abstractprotocol_id:integer)=('' || current_row.xnat_abstractprotocol_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_abstractProtocol( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractProtocol.xnat_abstractprotocol_id AS xnat_abstractProtocol6, table1.element_name AS xdat_meta_element8, table2.insert_date AS xnat_abstractProtocol_meta_data15 FROM xnat_abstractProtocol xnat_abstractProtocol   LEFT JOIN xdat_meta_element table1 ON xnat_abstractProtocol.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractProtocol_meta_data table2 ON xnat_abstractProtocol.abstractProtocol_info=table2.meta_data_id) SEARCH  WHERE 
 ( (xnat_abstractProtocol6=$1))
      LOOP
         IF (current_row.xdat_meta_element8 IS NULL) THEN 
             fullText:= ie_xnat_abstractProtocol( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element8=''xnat:studyProtocol'') THEN
                fullText:= i_xnat_studyProtocol( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element8=''xnat:datatypeProtocol'') THEN
                fullText:= i_xnat_datatypeProtocol( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_abstractProtocol( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_abstractProtocol( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractProtocol.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_abstractProtocol LEFT JOIN xnat_abstractProtocol_meta_data meta ON xnat_abstractProtocol.abstractProtocol_info=meta.meta_data_id WHERE  xnat_abstractprotocol_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_abstractProtocol_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_abstractProtocol( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractProtocol.xnat_abstractprotocol_id AS xnat_abstractProtocol6, table1.element_name AS xdat_meta_element8, table2.insert_date AS xnat_abstractProtocol_meta_data15 FROM xnat_abstractProtocol xnat_abstractProtocol   LEFT JOIN xdat_meta_element table1 ON xnat_abstractProtocol.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractProtocol_meta_data table2 ON xnat_abstractProtocol.abstractProtocol_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_abstractProtocol6=$1))
      LOOP
         IF (current_row.xdat_meta_element8 IS NULL) THEN 
            PERFORM  ae_xnat_abstractProtocol( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element8=''xnat:studyProtocol'') THEN
            PERFORM  a_xnat_studyProtocol( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element8=''xnat:datatypeProtocol'') THEN
            PERFORM  a_xnat_datatypeProtocol( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_abstractProtocol( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_abstractProtocol( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_abstractProtocol.*, meta.meta_data_id FROM xnat_abstractProtocol LEFT JOIN xnat_abstractProtocol_meta_data meta ON xnat_abstractProtocol.abstractProtocol_info=meta.meta_data_id WHERE  xnat_abstractprotocol_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:projectData/studyProtocol
        IF ((current_row.xnat_projectData_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_projectData(current_row.xnat_projectData_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_abstractProtocol( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT xnat_abstractProtocol.xnat_abstractprotocol_id AS xnat_abstractProtocol6, table1.element_name AS xdat_meta_element8, table2.insert_date AS xnat_abstractProtocol_meta_data15 FROM xnat_abstractProtocol xnat_abstractProtocol   LEFT JOIN xdat_meta_element table1 ON xnat_abstractProtocol.extension=table1.xdat_meta_element_id   LEFT JOIN xnat_abstractProtocol_meta_data table2 ON xnat_abstractProtocol.abstractProtocol_info=table2.meta_data_id) SEARCH WHERE 
 ( (xnat_abstractProtocol6=$1))
      LOOP
         IF (current_row.xdat_meta_element8 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_abstractProtocol( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element8=''xnat:studyProtocol'') THEN
                PERFORM update_ls_xnat_studyProtocol( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element8=''xnat:datatypeProtocol'') THEN
                PERFORM update_ls_xnat_datatypeProtocol( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element8;
                    PERFORM update_ls_ext_xnat_abstractProtocol( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_abstractProtocol()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_abstractProtocol( OLD.xnat_abstractprotocol_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_abstractProtocol','CREATE TRIGGER a_u_xnat_abstractProtocol  AFTER UPDATE OR DELETE ON xnat_abstractProtocol FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_abstractProtocol()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_datatypeProtocol( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:datatypeProtocol)('';
      FOR current_row IN SELECT * FROM xnat_datatypeProtocol WHERE  xnat_abstractprotocol_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractprotocol_id:integer)=('' || current_row.xnat_abstractprotocol_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractProtocol(current_row.xnat_abstractprotocol_id, child_count,$3,false,false);
              fullText := fullText || ''(abstractprotocol_abstractprotocol:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_datatypeProtocol_fieldGroups WHERE  xnat_datatypeProtocol_xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_fieldDefinitionGroup( mapping_row.xnat_fieldDefinitionGroup_xnat_fielddefinitiongroup_id, child_count,$3,false,false);
              fullText := fullText || ''(definitions_definition_fielddefinitiongroup'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF ((current_row.datatypeProtocol_info IS NOT NULL)) THEN
            fullText := fullText || ''(datatypeprotocol_info:integer)=('' || current_row.datatypeprotocol_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_datatypeProtocol_meta_data(current_row.datatypeProtocol_info, child_count,$3,false,false);
              fullText := fullText || ''(datatypeprotocol_info_datatypeprotocol_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractProtocol( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractprotocol_abstractprotocol:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_datatypeProtocol( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_datatypeProtocol.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_datatypeProtocol LEFT JOIN xnat_datatypeProtocol_meta_data meta ON xnat_datatypeProtocol.datatypeProtocol_info=meta.meta_data_id WHERE  xnat_abstractprotocol_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_datatypeProtocol_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractprotocol_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_abstractProtocol(current_row.xnat_abstractprotocol_id, $2,$3,false);
        END IF;
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_datatypeProtocol_fieldGroups WHERE  xnat_datatypeProtocol_xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id
        LOOP
          PERFORM  a_xnat_fieldDefinitionGroup( mapping_row.xnat_fieldDefinitionGroup_xnat_fielddefinitiongroup_id, $2,$3,false);
        END LOOP;
        END; 
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_abstractProtocol( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_datatypeProtocol( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_datatypeProtocol.*, meta.meta_data_id FROM xnat_datatypeProtocol LEFT JOIN xnat_datatypeProtocol_meta_data meta ON xnat_datatypeProtocol.datatypeProtocol_info=meta.meta_data_id WHERE  xnat_abstractprotocol_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_abstractProtocol( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_datatypeProtocol()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_datatypeProtocol( OLD.xnat_abstractprotocol_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_datatypeProtocol','CREATE TRIGGER a_u_xnat_datatypeProtocol  AFTER UPDATE OR DELETE ON xnat_datatypeProtocol FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_datatypeProtocol()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_projectData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:projectData)('';
      FOR current_row IN SELECT * FROM xnat_projectData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.keywords IS NOT NULL) THEN 
              fullText := fullText || ''(keywords:string)=('' || REPLACE(REPLACE(current_row.keywords,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_projectData_alias WHERE aliases_alias_xnat_projectData_id=current_row.id ORDER BY xnat_projectdata_alias_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectData_alias( parent_row.xnat_projectdata_alias_id, child_count,$3,false,false);
              fullText := fullText || ''(aliases_alias_projectdata_alias'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_publicationResource WHERE publications_publication_xnat_p_id=current_row.id ORDER BY xnat_abstractresource_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_publicationResource( parent_row.xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(publications_publication_publicationresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_projectData_resource WHERE  xnat_projectData_id=current_row.id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(resources_resource_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractProtocol WHERE xnat_projectData_id=current_row.id ORDER BY xnat_abstractprotocol_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractProtocol( parent_row.xnat_abstractprotocol_id, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_abstractprotocol'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.pi_xnat_investigatordata_id IS NOT NULL)) THEN
            fullText := fullText || ''(pi_xnat_investigatordata_id:integer)=('' || current_row.pi_xnat_investigatordata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_investigatorData(current_row.pi_xnat_investigatordata_id, child_count,$3,false,false);
              fullText := fullText || ''(pi_investigatordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_projectData_investigator WHERE  xnat_projectData_id=current_row.id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_investigatorData( mapping_row.xnat_investigatorData_xnat_investigatordata_id, child_count,$3,false,false);
              fullText := fullText || ''(investigators_investigator_investigatordata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_projectData_field WHERE fields_field_xnat_projectData_id=current_row.id ORDER BY xnat_projectdata_field_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectData_field( parent_row.xnat_projectdata_field_id, child_count,$3,false,false);
              fullText := fullText || ''(fields_field_projectdata_field'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.secondary_id IS NOT NULL) THEN 
              fullText := fullText || ''(secondary_id:string)=('' || REPLACE(REPLACE(current_row.secondary_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.projectData_info IS NOT NULL)) THEN
            fullText := fullText || ''(projectdata_info:integer)=('' || current_row.projectdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_projectData_meta_data(current_row.projectData_info, child_count,$3,false,false);
              fullText := fullText || ''(projectdata_info_projectdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_projectData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_projectData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_projectData LEFT JOIN xnat_projectData_meta_data meta ON xnat_projectData.projectData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_projectData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_projectData_alias WHERE aliases_alias_xnat_projectData_id=current_row.id
        LOOP
          PERFORM  a_xnat_projectData_alias( parent_row.xnat_projectdata_alias_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_publicationResource WHERE publications_publication_xnat_p_id=current_row.id
        LOOP
          PERFORM  a_xnat_publicationResource( parent_row.xnat_abstractresource_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_projectData_resource WHERE  xnat_projectData_id=current_row.id
        LOOP
          PERFORM  a_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, $2,$3,false);
        END LOOP;
        END; 
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_abstractProtocol WHERE xnat_projectData_id=current_row.id
        LOOP
          PERFORM  a_xnat_abstractProtocol( parent_row.xnat_abstractprotocol_id, $2,$3,false);
        END LOOP;
        END;
        IF ((current_row.pi_xnat_investigatordata_id IS NOT NULL)) THEN
          PERFORM  a_xnat_investigatorData(current_row.pi_xnat_investigatordata_id, $2,$3,false);
        END IF;
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM xnat_projectData_investigator WHERE  xnat_projectData_id=current_row.id
        LOOP
          PERFORM  a_xnat_investigatorData( mapping_row.xnat_investigatorData_xnat_investigatordata_id, $2,$3,false);
        END LOOP;
        END; 
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_projectData_field WHERE fields_field_xnat_projectData_id=current_row.id
        LOOP
          PERFORM  a_xnat_projectData_field( parent_row.xnat_projectdata_field_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_projectData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:projectData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_projectData.*, meta.meta_data_id FROM xnat_projectData LEFT JOIN xnat_projectData_meta_data meta ON xnat_projectData.projectData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_projectData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_projectData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_projectData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_projectData','CREATE TRIGGER a_u_xnat_projectData  AFTER UPDATE OR DELETE ON xnat_projectData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_projectData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol WHERE  xnat_abstractprotocol_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_abstractprotocol_id:integer)=('' || current_row.xnat_abstractprotocol_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractProtocol(current_row.xnat_abstractprotocol_id, child_count,$3,false,false);
              fullText := fullText || ''(abstractprotocol_abstractprotocol:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_condition WHERE acqconditions_condition_xnat_st_xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id ORDER BY xnat_studyprotocol_condition_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_condition( parent_row.xnat_studyprotocol_condition_id, child_count,$3,false,false);
              fullText := fullText || ''(acqconditions_condition_studyprotocol_condition'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_group WHERE subjectgroups_group_xnat_studyP_xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id ORDER BY xnat_studyprotocol_group_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_group( parent_row.xnat_studyprotocol_group_id, child_count,$3,false,false);
              fullText := fullText || ''(subjectgroups_group_studyprotocol_group'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_variable WHERE subjectvariables_variable_xnat__xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id ORDER BY xnat_studyprotocol_variable_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_variable( parent_row.xnat_studyprotocol_variable_id, child_count,$3,false,false);
              fullText := fullText || ''(subjectvariables_variable_studyprotocol_variable'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_session WHERE imagesessiontypes_session_xnat__xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id ORDER BY xnat_studyprotocol_session_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_session( parent_row.xnat_studyprotocol_session_id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiontypes_session_studyprotocol_session'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.studyProtocol_info IS NOT NULL)) THEN
            fullText := fullText || ''(studyprotocol_info:integer)=('' || current_row.studyprotocol_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_meta_data(current_row.studyProtocol_info, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_info_studyprotocol_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_abstractProtocol( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractprotocol_abstractprotocol:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_studyProtocol( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_studyProtocol.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_studyProtocol LEFT JOIN xnat_studyProtocol_meta_data meta ON xnat_studyProtocol.studyProtocol_info=meta.meta_data_id WHERE  xnat_abstractprotocol_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_studyProtocol_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_abstractprotocol_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_abstractProtocol(current_row.xnat_abstractprotocol_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_condition WHERE acqconditions_condition_xnat_st_xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id
        LOOP
          PERFORM  a_xnat_studyProtocol_condition( parent_row.xnat_studyprotocol_condition_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_group WHERE subjectgroups_group_xnat_studyP_xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id
        LOOP
          PERFORM  a_xnat_studyProtocol_group( parent_row.xnat_studyprotocol_group_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_variable WHERE subjectvariables_variable_xnat__xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id
        LOOP
          PERFORM  a_xnat_studyProtocol_variable( parent_row.xnat_studyprotocol_variable_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_studyProtocol_session WHERE imagesessiontypes_session_xnat__xnat_abstractprotocol_id=current_row.xnat_abstractprotocol_id
        LOOP
          PERFORM  a_xnat_studyProtocol_session( parent_row.xnat_studyprotocol_session_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_abstractProtocol( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_studyProtocol( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_studyProtocol.*, meta.meta_data_id FROM xnat_studyProtocol LEFT JOIN xnat_studyProtocol_meta_data meta ON xnat_studyProtocol.studyProtocol_info=meta.meta_data_id WHERE  xnat_abstractprotocol_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_abstractProtocol( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_studyProtocol()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_studyProtocol( OLD.xnat_abstractprotocol_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_studyProtocol','CREATE TRIGGER a_u_xnat_studyProtocol  AFTER UPDATE OR DELETE ON xnat_studyProtocol FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_studyProtocol()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_petQcScanData_processingError_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petQcScanData_processingError_history)('';
      FOR current_row IN SELECT * FROM xnat_petQcScanData_processingError_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.processingerror IS NOT NULL) THEN 
              fullText := fullText || ''(processingerror:string)=('' || REPLACE(REPLACE(current_row.processingerror,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.petQcScanData_processingError_info IS NOT NULL)) THEN
            fullText := fullText || ''(petqcscandata_processingerror_info:integer)=('' || current_row.petqcscandata_processingerror_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petQcScanData_processingError_meta_data(current_row.petQcScanData_processingError_info, child_count,$3,false,false);
              fullText := fullText || ''(petqcscandata_processingerror_info_petqcscandata_processingerror_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.processingerrors_processingerro_xnat_qcscandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(processingerrors_processingerro_xnat_qcscandata_id:integer)=('' || current_row.processingerrors_processingerro_xnat_qcscandata_id || '')'';
        END IF;
          IF (current_row.xnat_petqcscandata_processingerror_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_petqcscandata_processingerror_id:integer)=('' || current_row.xnat_petqcscandata_processingerror_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_otherQcScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:otherQcScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_otherQcScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_otherQcScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:otherQcScanData)('';
      FOR current_row IN SELECT * FROM xnat_otherQcScanData WHERE  xnat_qcscandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_qcscandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_qcscandata_id:integer)=('' || current_row.xnat_qcscandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_qcScanData(current_row.xnat_qcscandata_id, child_count,$3,false,false);
              fullText := fullText || ''(qcscandata_qcscandata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.other IS NOT NULL) THEN 
              fullText := fullText || ''(other:string)=('' || REPLACE(REPLACE(current_row.other,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.otherQcScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(otherqcscandata_info:integer)=('' || current_row.otherqcscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_otherQcScanData_meta_data(current_row.otherQcScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(otherqcscandata_info_otherqcscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_qcScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(qcscandata_qcscandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_otherQcScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_otherQcScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_otherQcScanData LEFT JOIN xnat_otherQcScanData_meta_data meta ON xnat_otherQcScanData.otherQcScanData_info=meta.meta_data_id WHERE  xnat_qcscandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_otherQcScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_qcscandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_qcScanData(current_row.xnat_qcscandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_qcScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_otherQcScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_otherQcScanData.*, meta.meta_data_id FROM xnat_otherQcScanData LEFT JOIN xnat_otherQcScanData_meta_data meta ON xnat_otherQcScanData.otherQcScanData_info=meta.meta_data_id WHERE  xnat_qcscandata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_qcScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_otherQcScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_otherQcScanData( OLD.xnat_qcscandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_otherQcScanData','CREATE TRIGGER a_u_xnat_otherQcScanData  AFTER UPDATE OR DELETE ON xnat_otherQcScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_otherQcScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_usSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:usSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_usSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.usSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ussessiondata_info:integer)=('' || current_row.ussessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_usSessionData_meta_data(current_row.usSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(ussessiondata_info_ussessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_studyProtocol_group_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:studyProtocol_group_history)('';
      FOR current_row IN SELECT * FROM xnat_studyProtocol_group_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.studyProtocol_group_info IS NOT NULL)) THEN
            fullText := fullText || ''(studyprotocol_group_info:integer)=('' || current_row.studyprotocol_group_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_studyProtocol_group_meta_data(current_row.studyProtocol_group_info, child_count,$3,false,false);
              fullText := fullText || ''(studyprotocol_group_info_studyprotocol_group_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.subjectgroups_group_xnat_studyP_xnat_abstractprotocol_id IS NOT NULL)) THEN
            fullText := fullText || ''(subjectgroups_group_xnat_studyp_xnat_abstractprotocol_id:integer)=('' || current_row.subjectgroups_group_xnat_studyp_xnat_abstractprotocol_id || '')'';
        END IF;
          IF (current_row.xnat_studyprotocol_group_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_studyprotocol_group_id:integer)=('' || current_row.xnat_studyprotocol_group_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ecgScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ecgScanData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_ecgScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ecgScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ecgScanData)('';
      FOR current_row IN SELECT * FROM xnat_ecgScanData WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_imagescandata_id:integer)=('' || current_row.xnat_imagescandata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData(current_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.ecgScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ecgscandata_info:integer)=('' || current_row.ecgscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ecgScanData_meta_data(current_row.ecgScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(ecgscandata_info_ecgscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageScanData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagescandata_imagescandata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_ecgScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ecgScanData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_ecgScanData LEFT JOIN xnat_ecgScanData_meta_data meta ON xnat_ecgScanData.ecgScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_ecgScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.xnat_imagescandata_id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageScanData(current_row.xnat_imagescandata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageScanData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_ecgScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:ecgScanData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ecgScanData.*, meta.meta_data_id FROM xnat_ecgScanData LEFT JOIN xnat_ecgScanData_meta_data meta ON xnat_ecgScanData.ecgScanData_info=meta.meta_data_id WHERE  xnat_imagescandata_id=$1
      LOOP
         UPDATE xnat_ecgScanData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageScanData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_ecgScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_ecgScanData( OLD.xnat_imagescandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_ecgScanData','CREATE TRIGGER a_u_xnat_ecgScanData  AFTER UPDATE OR DELETE ON xnat_ecgScanData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_ecgScanData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_statisticsData_additionalStatistics_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:statisticsData_additionalStatistics_history)('';
      FOR current_row IN SELECT * FROM xnat_statisticsData_additionalStatistics_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.additionalstatistics IS NOT NULL) THEN 
              fullText := fullText || ''(additionalstatistics:float)=('' || current_row.additionalstatistics || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.statisticsData_additionalStatistics_info IS NOT NULL)) THEN
            fullText := fullText || ''(statisticsdata_additionalstatistics_info:integer)=('' || current_row.statisticsdata_additionalstatistics_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_statisticsData_additionalStatistics_meta_data(current_row.statisticsData_additionalStatistics_info, child_count,$3,false,false);
              fullText := fullText || ''(statisticsdata_additionalstatistics_info_statisticsdata_additionalstatistics_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.xnat_statisticsData_xnat_abstractstatistics_id IS NOT NULL)) THEN
            fullText := fullText || ''(xnat_statisticsdata_xnat_abstractstatistics_id:integer)=('' || current_row.xnat_statisticsdata_xnat_abstractstatistics_id || '')'';
        END IF;
          IF (current_row.xnat_statisticsdata_additionalstatistics_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_statisticsdata_additionalstatistics_id:integer)=('' || current_row.xnat_statisticsdata_additionalstatistics_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_ctSessionData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ctSessionData_history)('';
      FOR current_row IN SELECT * FROM xnat_ctSessionData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageSessionData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageSessionData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.ctSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ctsessiondata_info:integer)=('' || current_row.ctsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ctSessionData_meta_data(current_row.ctSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(ctsessiondata_info_ctsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_opSessionData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:opSessionData_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_opSessionData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_reconstructedImageData_scanID_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:reconstructedImageData_scanID_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_reconstructedImageData_scanID_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_reconstructedImageData_scanID( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:reconstructedImageData_scanID)('';
      FOR current_row IN SELECT * FROM xnat_reconstructedImageData_scanID WHERE  xnat_reconstructedimagedata_scanid_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.scanid IS NOT NULL) THEN 
              fullText := fullText || ''(scanid:string)=('' || REPLACE(REPLACE(current_row.scanid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.reconstructedImageData_scanID_info IS NOT NULL)) THEN
            fullText := fullText || ''(reconstructedimagedata_scanid_info:integer)=('' || current_row.reconstructedimagedata_scanid_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_reconstructedImageData_scanID_meta_data(current_row.reconstructedImageData_scanID_info, child_count,$3,false,false);
              fullText := fullText || ''(reconstructedimagedata_scanid_info_reconstructedimagedata_scanid_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id:integer)=('' || current_row.inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id || '')'';
        END IF;
          IF (current_row.xnat_reconstructedimagedata_scanid_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_reconstructedimagedata_scanid_id:integer)=('' || current_row.xnat_reconstructedimagedata_scanid_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_reconstructedImageData_scanID( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_reconstructedImageData_scanID.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_reconstructedImageData_scanID LEFT JOIN xnat_reconstructedImageData_scanID_meta_data meta ON xnat_reconstructedImageData_scanID.reconstructedImageData_scanID_info=meta.meta_data_id WHERE  xnat_reconstructedimagedata_scanid_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_reconstructedImageData_scanID_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_reconstructedImageData_scanID( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_reconstructedImageData_scanID.*, meta.meta_data_id FROM xnat_reconstructedImageData_scanID LEFT JOIN xnat_reconstructedImageData_scanID_meta_data meta ON xnat_reconstructedImageData_scanID.reconstructedImageData_scanID_info=meta.meta_data_id WHERE  xnat_reconstructedimagedata_scanid_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:reconstructedImageData/inScans/scanID
        IF ((current_row.inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_reconstructedImageData(current_row.inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_reconstructedImageData_scanID()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_reconstructedImageData_scanID( OLD.xnat_reconstructedimagedata_scanid_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_reconstructedImageData_scanID','CREATE TRIGGER a_u_xnat_reconstructedImageData_scanID  AFTER UPDATE OR DELETE ON xnat_reconstructedImageData_scanID FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_reconstructedImageData_scanID()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_reconstructedImageData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:reconstructedImageData)('';
      FOR current_row IN SELECT * FROM xnat_reconstructedImageData WHERE  xnat_reconstructedimagedata_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.image_session_id IS NOT NULL) THEN 
              fullText := fullText || ''(image_session_id:string)=('' || REPLACE(REPLACE(current_row.image_session_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_reconstructedImageData_scanID WHERE inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id ORDER BY xnat_reconstructedimagedata_scanid_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_reconstructedImageData_scanID( parent_row.xnat_reconstructedimagedata_scanid_id, child_count,$3,false,false);
              fullText := fullText || ''(inscans_scanid_reconstructedimagedata_scanid'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM recon_in_resource WHERE  xnat_reconstructedImageData_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(in_file_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    120
        mapping_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM recon_out_resource WHERE  xnat_reconstructedImageData_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(out_file_abstractresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END; 
        END IF; 
        IF ((current_row.provenance_prov_process_id IS NOT NULL)) THEN
            fullText := fullText || ''(provenance_prov_process_id:integer)=('' || current_row.provenance_prov_process_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_prov_process(current_row.provenance_prov_process_id, child_count,$3,false,false);
              fullText := fullText || ''(provenance_process:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField WHERE parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id ORDER BY xnat_addfield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_addField( parent_row.xnat_addfield_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_addparam_addfield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_computationData WHERE computations_datum_xnat_reconst_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id ORDER BY xnat_computationdata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_computationData( parent_row.xnat_computationdata_id, child_count,$3,false,false);
              fullText := fullText || ''(computations_datum_computationdata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.basescantype IS NOT NULL) THEN 
              fullText := fullText || ''(basescantype:string)=('' || REPLACE(REPLACE(current_row.basescantype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.reconstructedImageData_info IS NOT NULL)) THEN
            fullText := fullText || ''(reconstructedimagedata_info:integer)=('' || current_row.reconstructedimagedata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_reconstructedImageData_meta_data(current_row.reconstructedImageData_info, child_count,$3,false,false);
              fullText := fullText || ''(reconstructedimagedata_info_reconstructedimagedata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_reconstructedimagedata_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_reconstructedimagedata_id:integer)=('' || current_row.xnat_reconstructedimagedata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_reconstructedImageData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_reconstructedImageData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_reconstructedImageData LEFT JOIN xnat_reconstructedImageData_meta_data meta ON xnat_reconstructedImageData.reconstructedImageData_info=meta.meta_data_id WHERE  xnat_reconstructedimagedata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_reconstructedImageData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_reconstructedImageData_scanID WHERE inscans_scanid_xnat_reconstruct_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id
        LOOP
          PERFORM  a_xnat_reconstructedImageData_scanID( parent_row.xnat_reconstructedimagedata_scanid_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM recon_in_resource WHERE  xnat_reconstructedImageData_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id
        LOOP
          PERFORM  a_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, $2,$3,false);
        END LOOP;
        END; 
        DECLARE 
        mapping_row RECORD; 
        BEGIN 
        FOR mapping_row IN SELECT * FROM recon_out_resource WHERE  xnat_reconstructedImageData_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id
        LOOP
          PERFORM  a_xnat_abstractResource( mapping_row.xnat_abstractResource_xnat_abstractresource_id, $2,$3,false);
        END LOOP;
        END; 
        IF ((current_row.provenance_prov_process_id IS NOT NULL)) THEN
          PERFORM  a_prov_process(current_row.provenance_prov_process_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_addField WHERE parameters_addparam_xnat_recons_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id
        LOOP
          PERFORM  a_xnat_addField( parent_row.xnat_addfield_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_computationData WHERE computations_datum_xnat_reconst_xnat_reconstructedimagedata_id=current_row.xnat_reconstructedimagedata_id
        LOOP
          PERFORM  a_xnat_computationData( parent_row.xnat_computationdata_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_reconstructedImageData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:reconstructedImageData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_reconstructedImageData.*, meta.meta_data_id FROM xnat_reconstructedImageData LEFT JOIN xnat_reconstructedImageData_meta_data meta ON xnat_reconstructedImageData.reconstructedImageData_info=meta.meta_data_id WHERE  xnat_reconstructedimagedata_id=$1
      LOOP
         UPDATE xnat_reconstructedImageData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:imageSessionData/reconstructions/reconstructedImage
        IF ((current_row.image_session_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_imageSessionData(current_row.image_session_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_reconstructedImageData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_reconstructedImageData( OLD.xnat_reconstructedimagedata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_reconstructedImageData','CREATE TRIGGER a_u_xnat_reconstructedImageData  AFTER UPDATE OR DELETE ON xnat_reconstructedImageData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_reconstructedImageData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_regionResource_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:regionResource_meta_data)('';
      FOR current_row IN SELECT * FROM xnat_regionResource_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_regionResource( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:regionResource)('';
      FOR current_row IN SELECT * FROM xnat_regionResource WHERE  xnat_regionresource_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.file_xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(file_xnat_abstractresource_id:integer)=('' || current_row.file_xnat_abstractresource_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource(current_row.file_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(file_abstractresource:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.baseimage_xnat_abstractresource_id IS NOT NULL)) THEN
            fullText := fullText || ''(baseimage_xnat_abstractresource_id:integer)=('' || current_row.baseimage_xnat_abstractresource_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_abstractResource(current_row.baseimage_xnat_abstractresource_id, child_count,$3,false,false);
              fullText := fullText || ''(baseimage_abstractresource:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.creator_firstname IS NOT NULL) THEN 
              fullText := fullText || ''(creator_firstname:string)=('' || REPLACE(REPLACE(current_row.creator_firstname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.creator_lastname IS NOT NULL) THEN 
              fullText := fullText || ''(creator_lastname:string)=('' || REPLACE(REPLACE(current_row.creator_lastname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_regionResource_label WHERE subregionlabels_label_xnat_regi_xnat_regionresource_id=current_row.xnat_regionresource_id ORDER BY xnat_regionresource_label_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_regionResource_label( parent_row.xnat_regionresource_label_id, child_count,$3,false,false);
              fullText := fullText || ''(subregionlabels_label_regionresource_label'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.hemisphere IS NOT NULL) THEN 
              fullText := fullText || ''(hemisphere:string)=('' || REPLACE(REPLACE(current_row.hemisphere,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.session_id IS NOT NULL) THEN 
              fullText := fullText || ''(session_id:string)=('' || REPLACE(REPLACE(current_row.session_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.regionResource_info IS NOT NULL)) THEN
            fullText := fullText || ''(regionresource_info:integer)=('' || current_row.regionresource_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_regionResource_meta_data(current_row.regionResource_info, child_count,$3,false,false);
              fullText := fullText || ''(regionresource_info_regionresource_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xnat_regionresource_id IS NOT NULL) THEN 
              fullText := fullText || ''(xnat_regionresource_id:integer)=('' || current_row.xnat_regionresource_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_regionResource( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_regionResource.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_regionResource LEFT JOIN xnat_regionResource_meta_data meta ON xnat_regionResource.regionResource_info=meta.meta_data_id WHERE  xnat_regionresource_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_regionResource_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.file_xnat_abstractresource_id IS NOT NULL)) THEN
          PERFORM  a_xnat_abstractResource(current_row.file_xnat_abstractresource_id, $2,$3,false);
        END IF;
        IF ((current_row.baseimage_xnat_abstractresource_id IS NOT NULL)) THEN
          PERFORM  a_xnat_abstractResource(current_row.baseimage_xnat_abstractresource_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_regionResource_label WHERE subregionlabels_label_xnat_regi_xnat_regionresource_id=current_row.xnat_regionresource_id
        LOOP
          PERFORM  a_xnat_regionResource_label( parent_row.xnat_regionresource_label_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_regionResource( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:regionResource'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_regionResource.*, meta.meta_data_id FROM xnat_regionResource LEFT JOIN xnat_regionResource_meta_data meta ON xnat_regionResource.regionResource_info=meta.meta_data_id WHERE  xnat_regionresource_id=$1
      LOOP
         UPDATE xnat_regionResource_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION xnat:imageSessionData/regions/region
        IF ((current_row.session_id IS NOT NULL)) THEN
        PERFORM update_ls_xnat_imageSessionData(current_row.session_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_regionResource()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_regionResource( OLD.xnat_regionresource_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_regionResource','CREATE TRIGGER a_u_xnat_regionResource  AFTER UPDATE OR DELETE ON xnat_regionResource FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_regionResource()');
--BR



CREATE OR REPLACE FUNCTION ie_xnat_imageSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:imageSessionData)('';
      FOR current_row IN SELECT * FROM xnat_imageSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_regionResource WHERE session_id=current_row.id ORDER BY xnat_regionresource_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_regionResource( parent_row.xnat_regionresource_id, child_count,$3,false,false);
              fullText := fullText || ''(session_id_regionresource'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.scanner IS NOT NULL) THEN 
              fullText := fullText || ''(scanner:string)=('' || REPLACE(REPLACE(current_row.scanner,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.scanner_manufacturer IS NOT NULL) THEN 
              fullText := fullText || ''(scanner_manufacturer:string)=('' || REPLACE(REPLACE(current_row.scanner_manufacturer,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.scanner_model IS NOT NULL) THEN 
              fullText := fullText || ''(scanner_model:string)=('' || REPLACE(REPLACE(current_row.scanner_model,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.operator IS NOT NULL) THEN 
              fullText := fullText || ''(operator:string)=('' || REPLACE(REPLACE(current_row.operator,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.prearchivepath IS NOT NULL) THEN 
              fullText := fullText || ''(prearchivepath:string)=('' || REPLACE(REPLACE(current_row.prearchivepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageScanData WHERE image_session_id=current_row.id ORDER BY xnat_imagescandata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageScanData( parent_row.xnat_imagescandata_id, child_count,$3,false,false);
              fullText := fullText || ''(image_session_id_imagescandata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_reconstructedImageData WHERE image_session_id=current_row.id ORDER BY xnat_reconstructedimagedata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_reconstructedImageData( parent_row.xnat_reconstructedimagedata_id, child_count,$3,false,false);
              fullText := fullText || ''(image_session_id_reconstructedimagedata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageAssessorData WHERE imageSession_ID=current_row.id ORDER BY id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageAssessorData( parent_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesession_id_imageassessordata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.dcmaccessionnumber IS NOT NULL) THEN 
              fullText := fullText || ''(dcmaccessionnumber:string)=('' || REPLACE(REPLACE(current_row.dcmaccessionnumber,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmpatientid IS NOT NULL) THEN 
              fullText := fullText || ''(dcmpatientid:string)=('' || REPLACE(REPLACE(current_row.dcmpatientid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmpatientname IS NOT NULL) THEN 
              fullText := fullText || ''(dcmpatientname:string)=('' || REPLACE(REPLACE(current_row.dcmpatientname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcmpatientbirthdate IS NOT NULL) THEN 
              fullText := fullText || ''(dcmpatientbirthdate:date)=('' || current_row.dcmpatientbirthdate || '')'';
          END IF;
          IF (current_row.session_type IS NOT NULL) THEN 
              fullText := fullText || ''(session_type:string)=('' || REPLACE(REPLACE(current_row.session_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modality IS NOT NULL) THEN 
              fullText := fullText || ''(modality:string)=('' || REPLACE(REPLACE(current_row.modality,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.uid IS NOT NULL) THEN 
              fullText := fullText || ''(uid:string)=('' || REPLACE(REPLACE(current_row.uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.imageSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(imagesessiondata_info:integer)=('' || current_row.imagesessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_imageSessionData_meta_data(current_row.imageSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_info_imagesessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_xnat_imageSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT table1.id AS xnat_imageSessionData0, table3.element_name AS xdat_meta_element154, table1.date AS xnat_experimentData18 FROM xnat_imageSessionData xnat_imageSessionData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_imageSessionData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xdat_meta_element table3 ON table1.extension=table3.xdat_meta_element_id) SEARCH  WHERE 
 ( (xnat_imageSessionData0=$1))
      LOOP
         IF (current_row.xdat_meta_element154 IS NULL) THEN 
             fullText:= ie_xnat_imageSessionData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element154=''xnat:mrSessionData'') THEN
                fullText:= i_xnat_mrSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:petSessionData'') THEN
                fullText:= i_xnat_petSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:petmrSessionData'') THEN
                fullText:= i_xnat_petmrSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:ctSessionData'') THEN
                fullText:= i_xnat_ctSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:crSessionData'') THEN
                fullText:= i_xnat_crSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:dxSessionData'') THEN
                fullText:= i_xnat_dxSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:mgSessionData'') THEN
                fullText:= i_xnat_mgSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:ioSessionData'') THEN
                fullText:= i_xnat_ioSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:usSessionData'') THEN
                fullText:= i_xnat_usSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:ecgSessionData'') THEN
                fullText:= i_xnat_ecgSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:hdSessionData'') THEN
                fullText:= i_xnat_hdSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:epsSessionData'') THEN
                fullText:= i_xnat_epsSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xaSessionData'') THEN
                fullText:= i_xnat_xaSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:rfSessionData'') THEN
                fullText:= i_xnat_rfSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xa3DSessionData'') THEN
                fullText:= i_xnat_xa3DSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:dx3DCraniofacialSessionData'') THEN
                fullText:= i_xnat_dx3DCraniofacialSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:nmSessionData'') THEN
                fullText:= i_xnat_nmSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:srSessionData'') THEN
                fullText:= i_xnat_srSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:esSessionData'') THEN
                fullText:= i_xnat_esSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:esvSessionData'') THEN
                fullText:= i_xnat_esvSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:gmSessionData'') THEN
                fullText:= i_xnat_gmSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:gmvSessionData'') THEN
                fullText:= i_xnat_gmvSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:smSessionData'') THEN
                fullText:= i_xnat_smSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xcSessionData'') THEN
                fullText:= i_xnat_xcSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xcvSessionData'') THEN
                fullText:= i_xnat_xcvSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:opSessionData'') THEN
                fullText:= i_xnat_opSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:optSessionData'') THEN
                fullText:= i_xnat_optSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:rtSessionData'') THEN
                fullText:= i_xnat_rtSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:otherDicomSessionData'') THEN
                fullText:= i_xnat_otherDicomSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:megSessionData'') THEN
                fullText:= i_xnat_megSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:eegSessionData'') THEN
                fullText:= i_xnat_eegSessionData( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_xnat_imageSessionData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_xnat_imageSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_imageSessionData LEFT JOIN xnat_imageSessionData_meta_data meta ON xnat_imageSessionData.imageSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_imageSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_subjectAssessorData(current_row.id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_regionResource WHERE session_id=current_row.id
        LOOP
          PERFORM  a_xnat_regionResource( parent_row.xnat_regionresource_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageScanData WHERE image_session_id=current_row.id
        LOOP
          PERFORM  a_xnat_imageScanData( parent_row.xnat_imagescandata_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_reconstructedImageData WHERE image_session_id=current_row.id
        LOOP
          PERFORM  a_xnat_reconstructedImageData( parent_row.xnat_reconstructedimagedata_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM xnat_imageAssessorData WHERE imageSession_ID=current_row.id
        LOOP
          PERFORM  a_xnat_imageAssessorData( parent_row.id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_imageSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table1.id AS xnat_imageSessionData0, table3.element_name AS xdat_meta_element154, table1.date AS xnat_experimentData18 FROM xnat_imageSessionData xnat_imageSessionData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_imageSessionData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xdat_meta_element table3 ON table1.extension=table3.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_imageSessionData0=$1))
      LOOP
         IF (current_row.xdat_meta_element154 IS NULL) THEN 
            PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element154=''xnat:mrSessionData'') THEN
            PERFORM  a_xnat_mrSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:petSessionData'') THEN
            PERFORM  a_xnat_petSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:petmrSessionData'') THEN
            PERFORM  a_xnat_petmrSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:ctSessionData'') THEN
            PERFORM  a_xnat_ctSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:crSessionData'') THEN
            PERFORM  a_xnat_crSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:dxSessionData'') THEN
            PERFORM  a_xnat_dxSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:mgSessionData'') THEN
            PERFORM  a_xnat_mgSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:ioSessionData'') THEN
            PERFORM  a_xnat_ioSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:usSessionData'') THEN
            PERFORM  a_xnat_usSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:ecgSessionData'') THEN
            PERFORM  a_xnat_ecgSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:hdSessionData'') THEN
            PERFORM  a_xnat_hdSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:epsSessionData'') THEN
            PERFORM  a_xnat_epsSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xaSessionData'') THEN
            PERFORM  a_xnat_xaSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:rfSessionData'') THEN
            PERFORM  a_xnat_rfSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xa3DSessionData'') THEN
            PERFORM  a_xnat_xa3DSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:dx3DCraniofacialSessionData'') THEN
            PERFORM  a_xnat_dx3DCraniofacialSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:nmSessionData'') THEN
            PERFORM  a_xnat_nmSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:srSessionData'') THEN
            PERFORM  a_xnat_srSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:esSessionData'') THEN
            PERFORM  a_xnat_esSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:esvSessionData'') THEN
            PERFORM  a_xnat_esvSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:gmSessionData'') THEN
            PERFORM  a_xnat_gmSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:gmvSessionData'') THEN
            PERFORM  a_xnat_gmvSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:smSessionData'') THEN
            PERFORM  a_xnat_smSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xcSessionData'') THEN
            PERFORM  a_xnat_xcSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xcvSessionData'') THEN
            PERFORM  a_xnat_xcvSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:opSessionData'') THEN
            PERFORM  a_xnat_opSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:optSessionData'') THEN
            PERFORM  a_xnat_optSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:rtSessionData'') THEN
            PERFORM  a_xnat_rtSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:otherDicomSessionData'') THEN
            PERFORM  a_xnat_otherDicomSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:megSessionData'') THEN
            PERFORM  a_xnat_megSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:eegSessionData'') THEN
            PERFORM  a_xnat_eegSessionData( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_xnat_imageSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_imageSessionData.*, meta.meta_data_id FROM xnat_imageSessionData LEFT JOIN xnat_imageSessionData_meta_data meta ON xnat_imageSessionData.imageSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_imageSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT table1.id AS xnat_imageSessionData0, table3.element_name AS xdat_meta_element154, table1.date AS xnat_experimentData18 FROM xnat_imageSessionData xnat_imageSessionData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_imageSessionData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xdat_meta_element table3 ON table1.extension=table3.xdat_meta_element_id) SEARCH WHERE 
 ( (xnat_imageSessionData0=$1))
      LOOP
         IF (current_row.xdat_meta_element154 IS NULL) THEN 
             PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element154=''xnat:mrSessionData'') THEN
                PERFORM update_ls_xnat_mrSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:petSessionData'') THEN
                PERFORM update_ls_xnat_petSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:petmrSessionData'') THEN
                PERFORM update_ls_xnat_petmrSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:ctSessionData'') THEN
                PERFORM update_ls_xnat_ctSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:crSessionData'') THEN
                PERFORM update_ls_xnat_crSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:dxSessionData'') THEN
                PERFORM update_ls_xnat_dxSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:mgSessionData'') THEN
                PERFORM update_ls_xnat_mgSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:ioSessionData'') THEN
                PERFORM update_ls_xnat_ioSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:usSessionData'') THEN
                PERFORM update_ls_xnat_usSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:ecgSessionData'') THEN
                PERFORM update_ls_xnat_ecgSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:hdSessionData'') THEN
                PERFORM update_ls_xnat_hdSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:epsSessionData'') THEN
                PERFORM update_ls_xnat_epsSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xaSessionData'') THEN
                PERFORM update_ls_xnat_xaSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:rfSessionData'') THEN
                PERFORM update_ls_xnat_rfSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xa3DSessionData'') THEN
                PERFORM update_ls_xnat_xa3DSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:dx3DCraniofacialSessionData'') THEN
                PERFORM update_ls_xnat_dx3DCraniofacialSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:nmSessionData'') THEN
                PERFORM update_ls_xnat_nmSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:srSessionData'') THEN
                PERFORM update_ls_xnat_srSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:esSessionData'') THEN
                PERFORM update_ls_xnat_esSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:esvSessionData'') THEN
                PERFORM update_ls_xnat_esvSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:gmSessionData'') THEN
                PERFORM update_ls_xnat_gmSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:gmvSessionData'') THEN
                PERFORM update_ls_xnat_gmvSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:smSessionData'') THEN
                PERFORM update_ls_xnat_smSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xcSessionData'') THEN
                PERFORM update_ls_xnat_xcSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:xcvSessionData'') THEN
                PERFORM update_ls_xnat_xcvSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:opSessionData'') THEN
                PERFORM update_ls_xnat_opSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:optSessionData'') THEN
                PERFORM update_ls_xnat_optSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:rtSessionData'') THEN
                PERFORM update_ls_xnat_rtSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:otherDicomSessionData'') THEN
                PERFORM update_ls_xnat_otherDicomSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:megSessionData'') THEN
                PERFORM update_ls_xnat_megSessionData( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element154=''xnat:eegSessionData'') THEN
                PERFORM update_ls_xnat_eegSessionData( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element154;
                    PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_imageSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_imageSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_imageSessionData','CREATE TRIGGER a_u_xnat_imageSessionData  AFTER UPDATE OR DELETE ON xnat_imageSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_imageSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_eegSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:eegSessionData)('';
      FOR current_row IN SELECT * FROM xnat_eegSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.eegSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(eegsessiondata_info:integer)=('' || current_row.eegsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_eegSessionData_meta_data(current_row.eegSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(eegsessiondata_info_eegsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_eegSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_eegSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_eegSessionData LEFT JOIN xnat_eegSessionData_meta_data meta ON xnat_eegSessionData.eegSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_eegSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_eegSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:eegSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_eegSessionData.*, meta.meta_data_id FROM xnat_eegSessionData LEFT JOIN xnat_eegSessionData_meta_data meta ON xnat_eegSessionData.eegSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_eegSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_eegSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_eegSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_eegSessionData','CREATE TRIGGER a_u_xnat_eegSessionData  AFTER UPDATE OR DELETE ON xnat_eegSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_eegSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_megSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:megSessionData)('';
      FOR current_row IN SELECT * FROM xnat_megSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.megSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(megsessiondata_info:integer)=('' || current_row.megsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_megSessionData_meta_data(current_row.megSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(megsessiondata_info_megsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_megSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_megSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_megSessionData LEFT JOIN xnat_megSessionData_meta_data meta ON xnat_megSessionData.megSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_megSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_megSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:megSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_megSessionData.*, meta.meta_data_id FROM xnat_megSessionData LEFT JOIN xnat_megSessionData_meta_data meta ON xnat_megSessionData.megSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_megSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_megSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_megSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_megSessionData','CREATE TRIGGER a_u_xnat_megSessionData  AFTER UPDATE OR DELETE ON xnat_megSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_megSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_otherDicomSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:otherDicomSessionData)('';
      FOR current_row IN SELECT * FROM xnat_otherDicomSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.otherDicomSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(otherdicomsessiondata_info:integer)=('' || current_row.otherdicomsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_otherDicomSessionData_meta_data(current_row.otherDicomSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(otherdicomsessiondata_info_otherdicomsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_otherDicomSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_otherDicomSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_otherDicomSessionData LEFT JOIN xnat_otherDicomSessionData_meta_data meta ON xnat_otherDicomSessionData.otherDicomSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_otherDicomSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_otherDicomSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:otherDicomSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_otherDicomSessionData.*, meta.meta_data_id FROM xnat_otherDicomSessionData LEFT JOIN xnat_otherDicomSessionData_meta_data meta ON xnat_otherDicomSessionData.otherDicomSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_otherDicomSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_otherDicomSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_otherDicomSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_otherDicomSessionData','CREATE TRIGGER a_u_xnat_otherDicomSessionData  AFTER UPDATE OR DELETE ON xnat_otherDicomSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_otherDicomSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_rtSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rtSessionData)('';
      FOR current_row IN SELECT * FROM xnat_rtSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.rtSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(rtsessiondata_info:integer)=('' || current_row.rtsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_rtSessionData_meta_data(current_row.rtSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(rtsessiondata_info_rtsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_rtSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_rtSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_rtSessionData LEFT JOIN xnat_rtSessionData_meta_data meta ON xnat_rtSessionData.rtSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_rtSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_rtSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:rtSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_rtSessionData.*, meta.meta_data_id FROM xnat_rtSessionData LEFT JOIN xnat_rtSessionData_meta_data meta ON xnat_rtSessionData.rtSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_rtSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_rtSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_rtSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_rtSessionData','CREATE TRIGGER a_u_xnat_rtSessionData  AFTER UPDATE OR DELETE ON xnat_rtSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_rtSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_optSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:optSessionData)('';
      FOR current_row IN SELECT * FROM xnat_optSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.optSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(optsessiondata_info:integer)=('' || current_row.optsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_optSessionData_meta_data(current_row.optSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(optsessiondata_info_optsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_optSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_optSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_optSessionData LEFT JOIN xnat_optSessionData_meta_data meta ON xnat_optSessionData.optSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_optSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_optSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:optSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_optSessionData.*, meta.meta_data_id FROM xnat_optSessionData LEFT JOIN xnat_optSessionData_meta_data meta ON xnat_optSessionData.optSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_optSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_optSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_optSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_optSessionData','CREATE TRIGGER a_u_xnat_optSessionData  AFTER UPDATE OR DELETE ON xnat_optSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_optSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_opSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:opSessionData)('';
      FOR current_row IN SELECT * FROM xnat_opSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.opSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(opsessiondata_info:integer)=('' || current_row.opsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_opSessionData_meta_data(current_row.opSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(opsessiondata_info_opsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_opSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_opSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_opSessionData LEFT JOIN xnat_opSessionData_meta_data meta ON xnat_opSessionData.opSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_opSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_opSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:opSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_opSessionData.*, meta.meta_data_id FROM xnat_opSessionData LEFT JOIN xnat_opSessionData_meta_data meta ON xnat_opSessionData.opSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_opSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_opSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_opSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_opSessionData','CREATE TRIGGER a_u_xnat_opSessionData  AFTER UPDATE OR DELETE ON xnat_opSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_opSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcvSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcvSessionData)('';
      FOR current_row IN SELECT * FROM xnat_xcvSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.xcvSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xcvsessiondata_info:integer)=('' || current_row.xcvsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xcvSessionData_meta_data(current_row.xcvSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(xcvsessiondata_info_xcvsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_xcvSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xcvSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_xcvSessionData LEFT JOIN xnat_xcvSessionData_meta_data meta ON xnat_xcvSessionData.xcvSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_xcvSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_xcvSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:xcvSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xcvSessionData.*, meta.meta_data_id FROM xnat_xcvSessionData LEFT JOIN xnat_xcvSessionData_meta_data meta ON xnat_xcvSessionData.xcvSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_xcvSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_xcvSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_xcvSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_xcvSessionData','CREATE TRIGGER a_u_xnat_xcvSessionData  AFTER UPDATE OR DELETE ON xnat_xcvSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_xcvSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_xcSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xcSessionData)('';
      FOR current_row IN SELECT * FROM xnat_xcSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.xcSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xcsessiondata_info:integer)=('' || current_row.xcsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xcSessionData_meta_data(current_row.xcSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(xcsessiondata_info_xcsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_xcSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xcSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_xcSessionData LEFT JOIN xnat_xcSessionData_meta_data meta ON xnat_xcSessionData.xcSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_xcSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_xcSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:xcSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xcSessionData.*, meta.meta_data_id FROM xnat_xcSessionData LEFT JOIN xnat_xcSessionData_meta_data meta ON xnat_xcSessionData.xcSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_xcSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_xcSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_xcSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_xcSessionData','CREATE TRIGGER a_u_xnat_xcSessionData  AFTER UPDATE OR DELETE ON xnat_xcSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_xcSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_smSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:smSessionData)('';
      FOR current_row IN SELECT * FROM xnat_smSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.smSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(smsessiondata_info:integer)=('' || current_row.smsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_smSessionData_meta_data(current_row.smSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(smsessiondata_info_smsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_smSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_smSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_smSessionData LEFT JOIN xnat_smSessionData_meta_data meta ON xnat_smSessionData.smSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_smSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_smSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:smSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_smSessionData.*, meta.meta_data_id FROM xnat_smSessionData LEFT JOIN xnat_smSessionData_meta_data meta ON xnat_smSessionData.smSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_smSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_smSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_smSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_smSessionData','CREATE TRIGGER a_u_xnat_smSessionData  AFTER UPDATE OR DELETE ON xnat_smSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_smSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmvSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmvSessionData)('';
      FOR current_row IN SELECT * FROM xnat_gmvSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.gmvSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(gmvsessiondata_info:integer)=('' || current_row.gmvsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_gmvSessionData_meta_data(current_row.gmvSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(gmvsessiondata_info_gmvsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_gmvSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_gmvSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_gmvSessionData LEFT JOIN xnat_gmvSessionData_meta_data meta ON xnat_gmvSessionData.gmvSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_gmvSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_gmvSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:gmvSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_gmvSessionData.*, meta.meta_data_id FROM xnat_gmvSessionData LEFT JOIN xnat_gmvSessionData_meta_data meta ON xnat_gmvSessionData.gmvSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_gmvSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_gmvSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_gmvSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_gmvSessionData','CREATE TRIGGER a_u_xnat_gmvSessionData  AFTER UPDATE OR DELETE ON xnat_gmvSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_gmvSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_gmSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:gmSessionData)('';
      FOR current_row IN SELECT * FROM xnat_gmSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.gmSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(gmsessiondata_info:integer)=('' || current_row.gmsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_gmSessionData_meta_data(current_row.gmSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(gmsessiondata_info_gmsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_gmSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_gmSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_gmSessionData LEFT JOIN xnat_gmSessionData_meta_data meta ON xnat_gmSessionData.gmSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_gmSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_gmSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:gmSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_gmSessionData.*, meta.meta_data_id FROM xnat_gmSessionData LEFT JOIN xnat_gmSessionData_meta_data meta ON xnat_gmSessionData.gmSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_gmSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_gmSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_gmSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_gmSessionData','CREATE TRIGGER a_u_xnat_gmSessionData  AFTER UPDATE OR DELETE ON xnat_gmSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_gmSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_esvSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esvSessionData)('';
      FOR current_row IN SELECT * FROM xnat_esvSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.esvSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(esvsessiondata_info:integer)=('' || current_row.esvsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_esvSessionData_meta_data(current_row.esvSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(esvsessiondata_info_esvsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_esvSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_esvSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_esvSessionData LEFT JOIN xnat_esvSessionData_meta_data meta ON xnat_esvSessionData.esvSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_esvSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_esvSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:esvSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_esvSessionData.*, meta.meta_data_id FROM xnat_esvSessionData LEFT JOIN xnat_esvSessionData_meta_data meta ON xnat_esvSessionData.esvSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_esvSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_esvSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_esvSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_esvSessionData','CREATE TRIGGER a_u_xnat_esvSessionData  AFTER UPDATE OR DELETE ON xnat_esvSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_esvSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_esSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:esSessionData)('';
      FOR current_row IN SELECT * FROM xnat_esSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.esSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(essessiondata_info:integer)=('' || current_row.essessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_esSessionData_meta_data(current_row.esSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(essessiondata_info_essessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_esSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_esSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_esSessionData LEFT JOIN xnat_esSessionData_meta_data meta ON xnat_esSessionData.esSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_esSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_esSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:esSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_esSessionData.*, meta.meta_data_id FROM xnat_esSessionData LEFT JOIN xnat_esSessionData_meta_data meta ON xnat_esSessionData.esSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_esSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_esSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_esSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_esSessionData','CREATE TRIGGER a_u_xnat_esSessionData  AFTER UPDATE OR DELETE ON xnat_esSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_esSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_srSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:srSessionData)('';
      FOR current_row IN SELECT * FROM xnat_srSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.srSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(srsessiondata_info:integer)=('' || current_row.srsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_srSessionData_meta_data(current_row.srSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(srsessiondata_info_srsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_srSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_srSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_srSessionData LEFT JOIN xnat_srSessionData_meta_data meta ON xnat_srSessionData.srSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_srSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_srSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:srSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_srSessionData.*, meta.meta_data_id FROM xnat_srSessionData LEFT JOIN xnat_srSessionData_meta_data meta ON xnat_srSessionData.srSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_srSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_srSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_srSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_srSessionData','CREATE TRIGGER a_u_xnat_srSessionData  AFTER UPDATE OR DELETE ON xnat_srSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_srSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_nmSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:nmSessionData)('';
      FOR current_row IN SELECT * FROM xnat_nmSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.nmSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(nmsessiondata_info:integer)=('' || current_row.nmsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_nmSessionData_meta_data(current_row.nmSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(nmsessiondata_info_nmsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_nmSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_nmSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_nmSessionData LEFT JOIN xnat_nmSessionData_meta_data meta ON xnat_nmSessionData.nmSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_nmSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_nmSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:nmSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_nmSessionData.*, meta.meta_data_id FROM xnat_nmSessionData LEFT JOIN xnat_nmSessionData_meta_data meta ON xnat_nmSessionData.nmSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_nmSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_nmSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_nmSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_nmSessionData','CREATE TRIGGER a_u_xnat_nmSessionData  AFTER UPDATE OR DELETE ON xnat_nmSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_nmSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_dx3DCraniofacialSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dx3DCraniofacialSessionData)('';
      FOR current_row IN SELECT * FROM xnat_dx3DCraniofacialSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.dx3DCraniofacialSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(dx3dcraniofacialsessiondata_info:integer)=('' || current_row.dx3dcraniofacialsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dx3DCraniofacialSessionData_meta_data(current_row.dx3DCraniofacialSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(dx3dcraniofacialsessiondata_info_dx3dcraniofacialsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_dx3DCraniofacialSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dx3DCraniofacialSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_dx3DCraniofacialSessionData LEFT JOIN xnat_dx3DCraniofacialSessionData_meta_data meta ON xnat_dx3DCraniofacialSessionData.dx3DCraniofacialSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_dx3DCraniofacialSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_dx3DCraniofacialSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:dx3DCraniofacialSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dx3DCraniofacialSessionData.*, meta.meta_data_id FROM xnat_dx3DCraniofacialSessionData LEFT JOIN xnat_dx3DCraniofacialSessionData_meta_data meta ON xnat_dx3DCraniofacialSessionData.dx3DCraniofacialSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_dx3DCraniofacialSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_dx3DCraniofacialSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_dx3DCraniofacialSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_dx3DCraniofacialSessionData','CREATE TRIGGER a_u_xnat_dx3DCraniofacialSessionData  AFTER UPDATE OR DELETE ON xnat_dx3DCraniofacialSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_dx3DCraniofacialSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_xa3DSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xa3DSessionData)('';
      FOR current_row IN SELECT * FROM xnat_xa3DSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.xa3DSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xa3dsessiondata_info:integer)=('' || current_row.xa3dsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xa3DSessionData_meta_data(current_row.xa3DSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(xa3dsessiondata_info_xa3dsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_xa3DSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xa3DSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_xa3DSessionData LEFT JOIN xnat_xa3DSessionData_meta_data meta ON xnat_xa3DSessionData.xa3DSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_xa3DSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_xa3DSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:xa3DSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xa3DSessionData.*, meta.meta_data_id FROM xnat_xa3DSessionData LEFT JOIN xnat_xa3DSessionData_meta_data meta ON xnat_xa3DSessionData.xa3DSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_xa3DSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_xa3DSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_xa3DSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_xa3DSessionData','CREATE TRIGGER a_u_xnat_xa3DSessionData  AFTER UPDATE OR DELETE ON xnat_xa3DSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_xa3DSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_rfSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:rfSessionData)('';
      FOR current_row IN SELECT * FROM xnat_rfSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.rfSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(rfsessiondata_info:integer)=('' || current_row.rfsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_rfSessionData_meta_data(current_row.rfSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(rfsessiondata_info_rfsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_rfSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_rfSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_rfSessionData LEFT JOIN xnat_rfSessionData_meta_data meta ON xnat_rfSessionData.rfSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_rfSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_rfSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:rfSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_rfSessionData.*, meta.meta_data_id FROM xnat_rfSessionData LEFT JOIN xnat_rfSessionData_meta_data meta ON xnat_rfSessionData.rfSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_rfSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_rfSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_rfSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_rfSessionData','CREATE TRIGGER a_u_xnat_rfSessionData  AFTER UPDATE OR DELETE ON xnat_rfSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_rfSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_xaSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:xaSessionData)('';
      FOR current_row IN SELECT * FROM xnat_xaSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.xaSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(xasessiondata_info:integer)=('' || current_row.xasessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_xaSessionData_meta_data(current_row.xaSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(xasessiondata_info_xasessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_xaSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xaSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_xaSessionData LEFT JOIN xnat_xaSessionData_meta_data meta ON xnat_xaSessionData.xaSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_xaSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_xaSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:xaSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_xaSessionData.*, meta.meta_data_id FROM xnat_xaSessionData LEFT JOIN xnat_xaSessionData_meta_data meta ON xnat_xaSessionData.xaSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_xaSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_xaSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_xaSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_xaSessionData','CREATE TRIGGER a_u_xnat_xaSessionData  AFTER UPDATE OR DELETE ON xnat_xaSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_xaSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_epsSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:epsSessionData)('';
      FOR current_row IN SELECT * FROM xnat_epsSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.epsSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(epssessiondata_info:integer)=('' || current_row.epssessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_epsSessionData_meta_data(current_row.epsSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(epssessiondata_info_epssessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_epsSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_epsSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_epsSessionData LEFT JOIN xnat_epsSessionData_meta_data meta ON xnat_epsSessionData.epsSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_epsSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_epsSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:epsSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_epsSessionData.*, meta.meta_data_id FROM xnat_epsSessionData LEFT JOIN xnat_epsSessionData_meta_data meta ON xnat_epsSessionData.epsSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_epsSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_epsSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_epsSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_epsSessionData','CREATE TRIGGER a_u_xnat_epsSessionData  AFTER UPDATE OR DELETE ON xnat_epsSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_epsSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_hdSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:hdSessionData)('';
      FOR current_row IN SELECT * FROM xnat_hdSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.hdSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(hdsessiondata_info:integer)=('' || current_row.hdsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_hdSessionData_meta_data(current_row.hdSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(hdsessiondata_info_hdsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_hdSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_hdSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_hdSessionData LEFT JOIN xnat_hdSessionData_meta_data meta ON xnat_hdSessionData.hdSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_hdSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_hdSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:hdSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_hdSessionData.*, meta.meta_data_id FROM xnat_hdSessionData LEFT JOIN xnat_hdSessionData_meta_data meta ON xnat_hdSessionData.hdSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_hdSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_hdSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_hdSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_hdSessionData','CREATE TRIGGER a_u_xnat_hdSessionData  AFTER UPDATE OR DELETE ON xnat_hdSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_hdSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_ecgSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ecgSessionData)('';
      FOR current_row IN SELECT * FROM xnat_ecgSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.ecgSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ecgsessiondata_info:integer)=('' || current_row.ecgsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ecgSessionData_meta_data(current_row.ecgSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(ecgsessiondata_info_ecgsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_ecgSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ecgSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_ecgSessionData LEFT JOIN xnat_ecgSessionData_meta_data meta ON xnat_ecgSessionData.ecgSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_ecgSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_ecgSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:ecgSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ecgSessionData.*, meta.meta_data_id FROM xnat_ecgSessionData LEFT JOIN xnat_ecgSessionData_meta_data meta ON xnat_ecgSessionData.ecgSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_ecgSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_ecgSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_ecgSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_ecgSessionData','CREATE TRIGGER a_u_xnat_ecgSessionData  AFTER UPDATE OR DELETE ON xnat_ecgSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_ecgSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_usSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:usSessionData)('';
      FOR current_row IN SELECT * FROM xnat_usSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.usSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ussessiondata_info:integer)=('' || current_row.ussessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_usSessionData_meta_data(current_row.usSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(ussessiondata_info_ussessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_usSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_usSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_usSessionData LEFT JOIN xnat_usSessionData_meta_data meta ON xnat_usSessionData.usSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_usSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_usSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:usSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_usSessionData.*, meta.meta_data_id FROM xnat_usSessionData LEFT JOIN xnat_usSessionData_meta_data meta ON xnat_usSessionData.usSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_usSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_usSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_usSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_usSessionData','CREATE TRIGGER a_u_xnat_usSessionData  AFTER UPDATE OR DELETE ON xnat_usSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_usSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_ioSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ioSessionData)('';
      FOR current_row IN SELECT * FROM xnat_ioSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.ioSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(iosessiondata_info:integer)=('' || current_row.iosessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ioSessionData_meta_data(current_row.ioSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(iosessiondata_info_iosessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_ioSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ioSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_ioSessionData LEFT JOIN xnat_ioSessionData_meta_data meta ON xnat_ioSessionData.ioSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_ioSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_ioSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:ioSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ioSessionData.*, meta.meta_data_id FROM xnat_ioSessionData LEFT JOIN xnat_ioSessionData_meta_data meta ON xnat_ioSessionData.ioSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_ioSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_ioSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_ioSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_ioSessionData','CREATE TRIGGER a_u_xnat_ioSessionData  AFTER UPDATE OR DELETE ON xnat_ioSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_ioSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_mgSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mgSessionData)('';
      FOR current_row IN SELECT * FROM xnat_mgSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.mgSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mgsessiondata_info:integer)=('' || current_row.mgsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mgSessionData_meta_data(current_row.mgSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(mgsessiondata_info_mgsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_mgSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mgSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_mgSessionData LEFT JOIN xnat_mgSessionData_meta_data meta ON xnat_mgSessionData.mgSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_mgSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_mgSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:mgSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mgSessionData.*, meta.meta_data_id FROM xnat_mgSessionData LEFT JOIN xnat_mgSessionData_meta_data meta ON xnat_mgSessionData.mgSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_mgSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_mgSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_mgSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_mgSessionData','CREATE TRIGGER a_u_xnat_mgSessionData  AFTER UPDATE OR DELETE ON xnat_mgSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_mgSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_dxSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:dxSessionData)('';
      FOR current_row IN SELECT * FROM xnat_dxSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.dxSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(dxsessiondata_info:integer)=('' || current_row.dxsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_dxSessionData_meta_data(current_row.dxSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(dxsessiondata_info_dxsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_dxSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dxSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_dxSessionData LEFT JOIN xnat_dxSessionData_meta_data meta ON xnat_dxSessionData.dxSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_dxSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_dxSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:dxSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_dxSessionData.*, meta.meta_data_id FROM xnat_dxSessionData LEFT JOIN xnat_dxSessionData_meta_data meta ON xnat_dxSessionData.dxSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_dxSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_dxSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_dxSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_dxSessionData','CREATE TRIGGER a_u_xnat_dxSessionData  AFTER UPDATE OR DELETE ON xnat_dxSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_dxSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_crSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:crSessionData)('';
      FOR current_row IN SELECT * FROM xnat_crSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.crSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(crsessiondata_info:integer)=('' || current_row.crsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_crSessionData_meta_data(current_row.crSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(crsessiondata_info_crsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_crSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_crSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_crSessionData LEFT JOIN xnat_crSessionData_meta_data meta ON xnat_crSessionData.crSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_crSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_crSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:crSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_crSessionData.*, meta.meta_data_id FROM xnat_crSessionData LEFT JOIN xnat_crSessionData_meta_data meta ON xnat_crSessionData.crSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_crSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_crSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_crSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_crSessionData','CREATE TRIGGER a_u_xnat_crSessionData  AFTER UPDATE OR DELETE ON xnat_crSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_crSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_ctSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:ctSessionData)('';
      FOR current_row IN SELECT * FROM xnat_ctSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.ctSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(ctsessiondata_info:integer)=('' || current_row.ctsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_ctSessionData_meta_data(current_row.ctSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(ctsessiondata_info_ctsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_ctSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ctSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_ctSessionData LEFT JOIN xnat_ctSessionData_meta_data meta ON xnat_ctSessionData.ctSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_ctSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_ctSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:ctSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_ctSessionData.*, meta.meta_data_id FROM xnat_ctSessionData LEFT JOIN xnat_ctSessionData_meta_data meta ON xnat_ctSessionData.ctSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_ctSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_ctSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_ctSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_ctSessionData','CREATE TRIGGER a_u_xnat_ctSessionData  AFTER UPDATE OR DELETE ON xnat_ctSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_ctSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_petmrSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petmrSessionData)('';
      FOR current_row IN SELECT * FROM xnat_petmrSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.coil IS NOT NULL) THEN 
              fullText := fullText || ''(coil:string)=('' || REPLACE(REPLACE(current_row.coil,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.fieldstrength IS NOT NULL) THEN 
              fullText := fullText || ''(fieldstrength:string)=('' || REPLACE(REPLACE(current_row.fieldstrength,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.marker IS NOT NULL) THEN 
              fullText := fullText || ''(marker:string)=('' || REPLACE(REPLACE(current_row.marker,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.stabilization IS NOT NULL) THEN 
              fullText := fullText || ''(stabilization:string)=('' || REPLACE(REPLACE(current_row.stabilization,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.studytype IS NOT NULL) THEN 
              fullText := fullText || ''(studytype:string)=('' || REPLACE(REPLACE(current_row.studytype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.patientid IS NOT NULL) THEN 
              fullText := fullText || ''(patientid:string)=('' || REPLACE(REPLACE(current_row.patientid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.patientname IS NOT NULL) THEN 
              fullText := fullText || ''(patientname:string)=('' || REPLACE(REPLACE(current_row.patientname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_dose_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_dose_units:string)=('' || REPLACE(REPLACE(current_row.tracer_dose_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_dose IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_dose:float)=('' || current_row.tracer_dose || '')'';
          END IF;
          IF (current_row.tracer_specificactivity IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_specificactivity:float)=('' || current_row.tracer_specificactivity || '')'';
          END IF;
          IF (current_row.tracer_totalmass_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_totalmass_units:string)=('' || REPLACE(REPLACE(current_row.tracer_totalmass_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_totalmass IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_totalmass:float)=('' || current_row.tracer_totalmass || '')'';
          END IF;
          IF (current_row.tracer_intermediate_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_intermediate_units:string)=('' || REPLACE(REPLACE(current_row.tracer_intermediate_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_intermediate IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_intermediate:float)=('' || current_row.tracer_intermediate || '')'';
          END IF;
          IF (current_row.tracer_isotope_half_life IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_isotope_half_life:float)=('' || current_row.tracer_isotope_half_life || '')'';
          END IF;
          IF (current_row.tracer_isotope IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_isotope:string)=('' || REPLACE(REPLACE(current_row.tracer_isotope,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_transmissions IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_transmissions:integer)=('' || current_row.tracer_transmissions || '')'';
          END IF;
          IF (current_row.tracer_transmissions_starttime IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_transmissions_starttime:dateTime)=('' || current_row.tracer_transmissions_starttime || '')'';
          END IF;
          IF (current_row.tracer_name IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_name:string)=('' || REPLACE(REPLACE(current_row.tracer_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_starttime IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_starttime:dateTime)=('' || current_row.tracer_starttime || '')'';
          END IF;
          IF (current_row.start_time IS NOT NULL) THEN 
              fullText := fullText || ''(start_time:dateTime)=('' || current_row.start_time || '')'';
          END IF;
          IF (current_row.start_time_scan IS NOT NULL) THEN 
              fullText := fullText || ''(start_time_scan:dateTime)=('' || current_row.start_time_scan || '')'';
          END IF;
          IF (current_row.start_time_injection IS NOT NULL) THEN 
              fullText := fullText || ''(start_time_injection:dateTime)=('' || current_row.start_time_injection || '')'';
          END IF;
          IF (current_row.blood_glucose IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose:float)=('' || current_row.blood_glucose || '')'';
          END IF;
          IF (current_row.blood_glucose_units IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose_units:string)=('' || REPLACE(REPLACE(current_row.blood_glucose_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.blood_glucose_time IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose_time:dateTime)=('' || current_row.blood_glucose_time || '')'';
          END IF;
        IF ((current_row.petmrSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(petmrsessiondata_info:integer)=('' || current_row.petmrsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petmrSessionData_meta_data(current_row.petmrSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(petmrsessiondata_info_petmrsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_petmrSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petmrSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_petmrSessionData LEFT JOIN xnat_petmrSessionData_meta_data meta ON xnat_petmrSessionData.petmrSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_petmrSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_petmrSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:petmrSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petmrSessionData.*, meta.meta_data_id FROM xnat_petmrSessionData LEFT JOIN xnat_petmrSessionData_meta_data meta ON xnat_petmrSessionData.petmrSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_petmrSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_petmrSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_petmrSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_petmrSessionData','CREATE TRIGGER a_u_xnat_petmrSessionData  AFTER UPDATE OR DELETE ON xnat_petmrSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_petmrSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_petSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:petSessionData)('';
      FOR current_row IN SELECT * FROM xnat_petSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.stabilization IS NOT NULL) THEN 
              fullText := fullText || ''(stabilization:string)=('' || REPLACE(REPLACE(current_row.stabilization,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.studytype IS NOT NULL) THEN 
              fullText := fullText || ''(studytype:string)=('' || REPLACE(REPLACE(current_row.studytype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.patientid IS NOT NULL) THEN 
              fullText := fullText || ''(patientid:string)=('' || REPLACE(REPLACE(current_row.patientid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.patientname IS NOT NULL) THEN 
              fullText := fullText || ''(patientname:string)=('' || REPLACE(REPLACE(current_row.patientname,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_dose_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_dose_units:string)=('' || REPLACE(REPLACE(current_row.tracer_dose_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_dose IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_dose:float)=('' || current_row.tracer_dose || '')'';
          END IF;
          IF (current_row.tracer_specificactivity IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_specificactivity:float)=('' || current_row.tracer_specificactivity || '')'';
          END IF;
          IF (current_row.tracer_totalmass_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_totalmass_units:string)=('' || REPLACE(REPLACE(current_row.tracer_totalmass_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_totalmass IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_totalmass:float)=('' || current_row.tracer_totalmass || '')'';
          END IF;
          IF (current_row.tracer_intermediate_units IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_intermediate_units:string)=('' || REPLACE(REPLACE(current_row.tracer_intermediate_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_intermediate IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_intermediate:float)=('' || current_row.tracer_intermediate || '')'';
          END IF;
          IF (current_row.tracer_isotope_half_life IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_isotope_half_life:float)=('' || current_row.tracer_isotope_half_life || '')'';
          END IF;
          IF (current_row.tracer_isotope IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_isotope:string)=('' || REPLACE(REPLACE(current_row.tracer_isotope,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_transmissions IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_transmissions:integer)=('' || current_row.tracer_transmissions || '')'';
          END IF;
          IF (current_row.tracer_transmissions_starttime IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_transmissions_starttime:dateTime)=('' || current_row.tracer_transmissions_starttime || '')'';
          END IF;
          IF (current_row.tracer_name IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_name:string)=('' || REPLACE(REPLACE(current_row.tracer_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.tracer_starttime IS NOT NULL) THEN 
              fullText := fullText || ''(tracer_starttime:dateTime)=('' || current_row.tracer_starttime || '')'';
          END IF;
          IF (current_row.start_time IS NOT NULL) THEN 
              fullText := fullText || ''(start_time:dateTime)=('' || current_row.start_time || '')'';
          END IF;
          IF (current_row.start_time_scan IS NOT NULL) THEN 
              fullText := fullText || ''(start_time_scan:dateTime)=('' || current_row.start_time_scan || '')'';
          END IF;
          IF (current_row.start_time_injection IS NOT NULL) THEN 
              fullText := fullText || ''(start_time_injection:dateTime)=('' || current_row.start_time_injection || '')'';
          END IF;
          IF (current_row.blood_glucose IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose:float)=('' || current_row.blood_glucose || '')'';
          END IF;
          IF (current_row.blood_glucose_units IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose_units:string)=('' || REPLACE(REPLACE(current_row.blood_glucose_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.blood_glucose_time IS NOT NULL) THEN 
              fullText := fullText || ''(blood_glucose_time:dateTime)=('' || current_row.blood_glucose_time || '')'';
          END IF;
        IF ((current_row.petSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(petsessiondata_info:integer)=('' || current_row.petsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_petSessionData_meta_data(current_row.petSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(petsessiondata_info_petsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_petSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_petSessionData LEFT JOIN xnat_petSessionData_meta_data meta ON xnat_petSessionData.petSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_petSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_petSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:petSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_petSessionData.*, meta.meta_data_id FROM xnat_petSessionData LEFT JOIN xnat_petSessionData_meta_data meta ON xnat_petSessionData.petSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_petSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_petSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_petSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_petSessionData','CREATE TRIGGER a_u_xnat_petSessionData  AFTER UPDATE OR DELETE ON xnat_petSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_petSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_xnat_mrSessionData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(xnat:mrSessionData)('';
      FOR current_row IN SELECT * FROM xnat_mrSessionData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.coil IS NOT NULL) THEN 
              fullText := fullText || ''(coil:string)=('' || REPLACE(REPLACE(current_row.coil,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.fieldstrength IS NOT NULL) THEN 
              fullText := fullText || ''(fieldstrength:string)=('' || REPLACE(REPLACE(current_row.fieldstrength,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.marker IS NOT NULL) THEN 
              fullText := fullText || ''(marker:string)=('' || REPLACE(REPLACE(current_row.marker,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.stabilization IS NOT NULL) THEN 
              fullText := fullText || ''(stabilization:string)=('' || REPLACE(REPLACE(current_row.stabilization,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.mrSessionData_info IS NOT NULL)) THEN
            fullText := fullText || ''(mrsessiondata_info:integer)=('' || current_row.mrsessiondata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_mrSessionData_meta_data(current_row.mrSessionData_info, child_count,$3,false,false);
              fullText := fullText || ''(mrsessiondata_info_mrsessiondata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageSessionData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imagesessiondata_imagesessiondata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_xnat_mrSessionData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mrSessionData.*, meta.meta_data_id, meta.status AS meta_status FROM xnat_mrSessionData LEFT JOIN xnat_mrSessionData_meta_data meta ON xnat_mrSessionData.mrSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE xnat_mrSessionData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageSessionData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageSessionData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_xnat_mrSessionData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''xnat:mrSessionData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT xnat_mrSessionData.*, meta.meta_data_id FROM xnat_mrSessionData LEFT JOIN xnat_mrSessionData_meta_data meta ON xnat_mrSessionData.mrSessionData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE xnat_mrSessionData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageSessionData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_xnat_mrSessionData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_xnat_mrSessionData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_xnat_mrSessionData','CREATE TRIGGER a_u_xnat_mrSessionData  AFTER UPDATE OR DELETE ON xnat_mrSessionData FOR EACH ROW EXECUTE PROCEDURE after_update_xnat_mrSessionData()');
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_scan_check_condition_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_scan_check_condition_history)('';
      FOR current_row IN SELECT * FROM val_protocolData_scan_check_condition_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.verified IS NOT NULL) THEN 
              fullText := fullText || ''(verified:string)=('' || REPLACE(REPLACE(current_row.verified,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.diagnosis IS NOT NULL) THEN 
              fullText := fullText || ''(diagnosis:string)=('' || REPLACE(REPLACE(current_row.diagnosis,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.xmlpath IS NOT NULL) THEN 
              fullText := fullText || ''(xmlpath:string)=('' || REPLACE(REPLACE(current_row.xmlpath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.protocolData_scan_check_condition_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_scan_check_condition_info:integer)=('' || current_row.protocoldata_scan_check_condition_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_condition_meta_data(current_row.protocolData_scan_check_condition_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_scan_check_condition_info_protocoldata_scan_check_condition_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.conditions_condition_val_protoc_val_protocoldata_scan_check_id IS NOT NULL)) THEN
            fullText := fullText || ''(conditions_condition_val_protoc_val_protocoldata_scan_check_id:integer)=('' || current_row.conditions_condition_val_protoc_val_protocoldata_scan_check_id || '')'';
        END IF;
          IF (current_row.val_protocoldata_scan_check_condition_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_protocoldata_scan_check_condition_id:integer)=('' || current_row.val_protocoldata_scan_check_condition_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_scan_check_comment_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_scan_check_comment_history)('';
      FOR current_row IN SELECT * FROM val_protocolData_scan_check_comment_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.comment IS NOT NULL) THEN 
              fullText := fullText || ''(comment:string)=('' || REPLACE(REPLACE(current_row.comment,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.username IS NOT NULL) THEN 
              fullText := fullText || ''(username:string)=('' || REPLACE(REPLACE(current_row.username,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.datetime IS NOT NULL) THEN 
              fullText := fullText || ''(datetime:dateTime)=('' || current_row.datetime || '')'';
          END IF;
        IF ((current_row.protocolData_scan_check_comment_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_scan_check_comment_info:integer)=('' || current_row.protocoldata_scan_check_comment_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_comment_meta_data(current_row.protocolData_scan_check_comment_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_scan_check_comment_info_protocoldata_scan_check_comment_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.comments_comment_val_protocolDa_val_protocoldata_scan_check_id IS NOT NULL)) THEN
            fullText := fullText || ''(comments_comment_val_protocolda_val_protocoldata_scan_check_id:integer)=('' || current_row.comments_comment_val_protocolda_val_protocoldata_scan_check_id || '')'';
        END IF;
          IF (current_row.val_protocoldata_scan_check_comment_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_protocoldata_scan_check_comment_id:integer)=('' || current_row.val_protocoldata_scan_check_comment_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_condition_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_condition_meta_data)('';
      FOR current_row IN SELECT * FROM val_protocolData_condition_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_condition( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_condition)('';
      FOR current_row IN SELECT * FROM val_protocolData_condition WHERE  val_protocoldata_condition_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.verified IS NOT NULL) THEN 
              fullText := fullText || ''(verified:string)=('' || REPLACE(REPLACE(current_row.verified,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.diagnosis IS NOT NULL) THEN 
              fullText := fullText || ''(diagnosis:string)=('' || REPLACE(REPLACE(current_row.diagnosis,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.xmlpath IS NOT NULL) THEN 
              fullText := fullText || ''(xmlpath:string)=('' || REPLACE(REPLACE(current_row.xmlpath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.protocolData_condition_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_condition_info:integer)=('' || current_row.protocoldata_condition_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_condition_meta_data(current_row.protocolData_condition_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_condition_info_protocoldata_condition_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.check_conditions_condition_val__id IS NOT NULL)) THEN
            fullText := fullText || ''(check_conditions_condition_val__id:string)=('' || current_row.check_conditions_condition_val__id || '')'';
        END IF;
          IF (current_row.val_protocoldata_condition_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_protocoldata_condition_id:integer)=('' || current_row.val_protocoldata_condition_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_val_protocolData_condition( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData_condition.*, meta.meta_data_id, meta.status AS meta_status FROM val_protocolData_condition LEFT JOIN val_protocolData_condition_meta_data meta ON val_protocolData_condition.protocolData_condition_info=meta.meta_data_id WHERE  val_protocoldata_condition_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE val_protocolData_condition_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_val_protocolData_condition( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData_condition.*, meta.meta_data_id FROM val_protocolData_condition LEFT JOIN val_protocolData_condition_meta_data meta ON val_protocolData_condition.protocolData_condition_info=meta.meta_data_id WHERE  val_protocoldata_condition_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION val:protocolData/check/conditions/condition
        IF ((current_row.check_conditions_condition_val__id IS NOT NULL)) THEN
        PERFORM update_ls_val_protocolData(current_row.check_conditions_condition_val__id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_val_protocolData_condition()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_val_protocolData_condition( OLD.val_protocoldata_condition_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_val_protocolData_condition','CREATE TRIGGER a_u_val_protocolData_condition  AFTER UPDATE OR DELETE ON val_protocolData_condition FOR EACH ROW EXECUTE PROCEDURE after_update_val_protocolData_condition()');
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_history)('';
      FOR current_row IN SELECT * FROM val_protocolData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_condition_history WHERE check_conditions_condition_val__id=current_row.id AND xft_version=current_row.xft_version ORDER BY val_protocoldata_condition_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_condition_history( parent_row.val_protocoldata_condition_id, child_count,$3,false,false);
              fullText := fullText || ''(check_conditions_condition_protocoldata_condition'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_comment_history WHERE check_comments_comment_val_prot_id=current_row.id AND xft_version=current_row.xft_version ORDER BY val_protocoldata_comment_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_comment_history( parent_row.val_protocoldata_comment_id, child_count,$3,false,false);
              fullText := fullText || ''(check_comments_comment_protocoldata_comment'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.check_additionalval_val_additionalval_id IS NOT NULL)) THEN
            fullText := fullText || ''(check_additionalval_val_additionalval_id:integer)=('' || current_row.check_additionalval_val_additionalval_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM val_additionalVal_history WHERE  val_additionalval_id=current_row.check_additionalval_val_additionalval_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_additionalVal_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(check_additionalval_additionalval:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.check_status IS NOT NULL) THEN 
              fullText := fullText || ''(check_status:string)=('' || REPLACE(REPLACE(current_row.check_status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_scan_check_history WHERE scans_scan_check_val_protocolDa_id=current_row.id AND xft_version=current_row.xft_version ORDER BY val_protocoldata_scan_check_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_history( parent_row.val_protocoldata_scan_check_id, child_count,$3,false,false);
              fullText := fullText || ''(scans_scan_check_protocoldata_scan_check'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.protocolData_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_info:integer)=('' || current_row.protocoldata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_meta_data(current_row.protocolData_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_info_protocoldata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_scan_check_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_scan_check_history)('';
      FOR current_row IN SELECT * FROM val_protocolData_scan_check_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_scan_check_condition_history WHERE conditions_condition_val_protoc_val_protocoldata_scan_check_id=current_row.val_protocoldata_scan_check_id AND xft_version=current_row.xft_version ORDER BY val_protocoldata_scan_check_condition_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_condition_history( parent_row.val_protocoldata_scan_check_condition_id, child_count,$3,false,false);
              fullText := fullText || ''(conditions_condition_protocoldata_scan_check_condition'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_scan_check_comment_history WHERE comments_comment_val_protocolDa_val_protocoldata_scan_check_id=current_row.val_protocoldata_scan_check_id AND xft_version=current_row.xft_version ORDER BY val_protocoldata_scan_check_comment_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_comment_history( parent_row.val_protocoldata_scan_check_comment_id, child_count,$3,false,false);
              fullText := fullText || ''(comments_comment_protocoldata_scan_check_comment'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.additionalval_val_additionalval_id IS NOT NULL)) THEN
            fullText := fullText || ''(additionalval_val_additionalval_id:integer)=('' || current_row.additionalval_val_additionalval_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM val_additionalVal_history WHERE  val_additionalval_id=current_row.additionalval_val_additionalval_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_additionalVal_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(additionalval_additionalval:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.scan_id IS NOT NULL) THEN 
              fullText := fullText || ''(scan_id:string)=('' || REPLACE(REPLACE(current_row.scan_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.protocolData_scan_check_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_scan_check_info:integer)=('' || current_row.protocoldata_scan_check_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_meta_data(current_row.protocolData_scan_check_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_scan_check_info_protocoldata_scan_check_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.scans_scan_check_val_protocolDa_id IS NOT NULL)) THEN
            fullText := fullText || ''(scans_scan_check_val_protocolda_id:string)=('' || current_row.scans_scan_check_val_protocolda_id || '')'';
        END IF;
          IF (current_row.val_protocoldata_scan_check_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_protocoldata_scan_check_id:integer)=('' || current_row.val_protocoldata_scan_check_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_meta_data)('';
      FOR current_row IN SELECT * FROM val_protocolData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_additionalVal_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:additionalVal_meta_data)('';
      FOR current_row IN SELECT * FROM val_additionalVal_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_additionalVal( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:additionalVal)('';
      FOR current_row IN SELECT * FROM val_additionalVal WHERE  val_additionalval_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.additionalVal_info IS NOT NULL)) THEN
            fullText := fullText || ''(additionalval_info:integer)=('' || current_row.additionalval_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_additionalVal_meta_data(current_row.additionalVal_info, child_count,$3,false,false);
              fullText := fullText || ''(additionalval_info_additionalval_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.val_additionalval_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_additionalval_id:integer)=('' || current_row.val_additionalval_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_val_additionalVal( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_additionalVal.*, meta.meta_data_id, meta.status AS meta_status FROM val_additionalVal LEFT JOIN val_additionalVal_meta_data meta ON val_additionalVal.additionalVal_info=meta.meta_data_id WHERE  val_additionalval_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE val_additionalVal_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_val_additionalVal( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_additionalVal.*, meta.meta_data_id FROM val_additionalVal LEFT JOIN val_additionalVal_meta_data meta ON val_additionalVal.additionalVal_info=meta.meta_data_id WHERE  val_additionalval_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION val:protocolData/check/additionalVal
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData WHERE check_additionalval_val_additionalval_id=current_row.val_additionalval_id
        LOOP
        PERFORM update_ls_val_protocolData( parent_row.id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION val:protocolData_scan_check/additionalVal
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_scan_check WHERE additionalval_val_additionalval_id=current_row.val_additionalval_id
        LOOP
        PERFORM update_ls_val_protocolData_scan_check( parent_row.val_protocoldata_scan_check_id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_val_additionalVal()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_val_additionalVal( OLD.val_additionalval_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_val_additionalVal','CREATE TRIGGER a_u_val_additionalVal  AFTER UPDATE OR DELETE ON val_additionalVal FOR EACH ROW EXECUTE PROCEDURE after_update_val_additionalVal()');
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_comment_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_comment_history)('';
      FOR current_row IN SELECT * FROM val_protocolData_comment_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.comment IS NOT NULL) THEN 
              fullText := fullText || ''(comment:string)=('' || REPLACE(REPLACE(current_row.comment,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.username IS NOT NULL) THEN 
              fullText := fullText || ''(username:string)=('' || REPLACE(REPLACE(current_row.username,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.datetime IS NOT NULL) THEN 
              fullText := fullText || ''(datetime:dateTime)=('' || current_row.datetime || '')'';
          END IF;
        IF ((current_row.protocolData_comment_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_comment_info:integer)=('' || current_row.protocoldata_comment_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_comment_meta_data(current_row.protocolData_comment_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_comment_info_protocoldata_comment_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.check_comments_comment_val_prot_id IS NOT NULL)) THEN
            fullText := fullText || ''(check_comments_comment_val_prot_id:string)=('' || current_row.check_comments_comment_val_prot_id || '')'';
        END IF;
          IF (current_row.val_protocoldata_comment_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_protocoldata_comment_id:integer)=('' || current_row.val_protocoldata_comment_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_additionalVal_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:additionalVal_history)('';
      FOR current_row IN SELECT * FROM val_additionalVal_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.additionalVal_info IS NOT NULL)) THEN
            fullText := fullText || ''(additionalval_info:integer)=('' || current_row.additionalval_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_additionalVal_meta_data(current_row.additionalVal_info, child_count,$3,false,false);
              fullText := fullText || ''(additionalval_info_additionalval_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.val_additionalval_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_additionalval_id:integer)=('' || current_row.val_additionalval_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_comment_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_comment_meta_data)('';
      FOR current_row IN SELECT * FROM val_protocolData_comment_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_comment( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_comment)('';
      FOR current_row IN SELECT * FROM val_protocolData_comment WHERE  val_protocoldata_comment_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.comment IS NOT NULL) THEN 
              fullText := fullText || ''(comment:string)=('' || REPLACE(REPLACE(current_row.comment,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.username IS NOT NULL) THEN 
              fullText := fullText || ''(username:string)=('' || REPLACE(REPLACE(current_row.username,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.datetime IS NOT NULL) THEN 
              fullText := fullText || ''(datetime:dateTime)=('' || current_row.datetime || '')'';
          END IF;
        IF ((current_row.protocolData_comment_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_comment_info:integer)=('' || current_row.protocoldata_comment_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_comment_meta_data(current_row.protocolData_comment_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_comment_info_protocoldata_comment_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.check_comments_comment_val_prot_id IS NOT NULL)) THEN
            fullText := fullText || ''(check_comments_comment_val_prot_id:string)=('' || current_row.check_comments_comment_val_prot_id || '')'';
        END IF;
          IF (current_row.val_protocoldata_comment_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_protocoldata_comment_id:integer)=('' || current_row.val_protocoldata_comment_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_val_protocolData_comment( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData_comment.*, meta.meta_data_id, meta.status AS meta_status FROM val_protocolData_comment LEFT JOIN val_protocolData_comment_meta_data meta ON val_protocolData_comment.protocolData_comment_info=meta.meta_data_id WHERE  val_protocoldata_comment_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE val_protocolData_comment_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_val_protocolData_comment( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData_comment.*, meta.meta_data_id FROM val_protocolData_comment LEFT JOIN val_protocolData_comment_meta_data meta ON val_protocolData_comment.protocolData_comment_info=meta.meta_data_id WHERE  val_protocoldata_comment_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION val:protocolData/check/comments/comment
        IF ((current_row.check_comments_comment_val_prot_id IS NOT NULL)) THEN
        PERFORM update_ls_val_protocolData(current_row.check_comments_comment_val_prot_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_val_protocolData_comment()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_val_protocolData_comment( OLD.val_protocoldata_comment_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_val_protocolData_comment','CREATE TRIGGER a_u_val_protocolData_comment  AFTER UPDATE OR DELETE ON val_protocolData_comment FOR EACH ROW EXECUTE PROCEDURE after_update_val_protocolData_comment()');
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_scan_check_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_scan_check_meta_data)('';
      FOR current_row IN SELECT * FROM val_protocolData_scan_check_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_scan_check_comment_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_scan_check_comment_meta_data)('';
      FOR current_row IN SELECT * FROM val_protocolData_scan_check_comment_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_scan_check_comment( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_scan_check_comment)('';
      FOR current_row IN SELECT * FROM val_protocolData_scan_check_comment WHERE  val_protocoldata_scan_check_comment_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.comment IS NOT NULL) THEN 
              fullText := fullText || ''(comment:string)=('' || REPLACE(REPLACE(current_row.comment,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.username IS NOT NULL) THEN 
              fullText := fullText || ''(username:string)=('' || REPLACE(REPLACE(current_row.username,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.datetime IS NOT NULL) THEN 
              fullText := fullText || ''(datetime:dateTime)=('' || current_row.datetime || '')'';
          END IF;
        IF ((current_row.protocolData_scan_check_comment_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_scan_check_comment_info:integer)=('' || current_row.protocoldata_scan_check_comment_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_comment_meta_data(current_row.protocolData_scan_check_comment_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_scan_check_comment_info_protocoldata_scan_check_comment_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.comments_comment_val_protocolDa_val_protocoldata_scan_check_id IS NOT NULL)) THEN
            fullText := fullText || ''(comments_comment_val_protocolda_val_protocoldata_scan_check_id:integer)=('' || current_row.comments_comment_val_protocolda_val_protocoldata_scan_check_id || '')'';
        END IF;
          IF (current_row.val_protocoldata_scan_check_comment_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_protocoldata_scan_check_comment_id:integer)=('' || current_row.val_protocoldata_scan_check_comment_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_val_protocolData_scan_check_comment( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData_scan_check_comment.*, meta.meta_data_id, meta.status AS meta_status FROM val_protocolData_scan_check_comment LEFT JOIN val_protocolData_scan_check_comment_meta_data meta ON val_protocolData_scan_check_comment.protocolData_scan_check_comment_info=meta.meta_data_id WHERE  val_protocoldata_scan_check_comment_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE val_protocolData_scan_check_comment_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_val_protocolData_scan_check_comment( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData_scan_check_comment.*, meta.meta_data_id FROM val_protocolData_scan_check_comment LEFT JOIN val_protocolData_scan_check_comment_meta_data meta ON val_protocolData_scan_check_comment.protocolData_scan_check_comment_info=meta.meta_data_id WHERE  val_protocoldata_scan_check_comment_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION val:protocolData_scan_check/comments/comment
        IF ((current_row.comments_comment_val_protocolDa_val_protocoldata_scan_check_id IS NOT NULL)) THEN
        PERFORM update_ls_val_protocolData_scan_check(current_row.comments_comment_val_protocolDa_val_protocoldata_scan_check_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_val_protocolData_scan_check_comment()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_val_protocolData_scan_check_comment( OLD.val_protocoldata_scan_check_comment_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_val_protocolData_scan_check_comment','CREATE TRIGGER a_u_val_protocolData_scan_check_comment  AFTER UPDATE OR DELETE ON val_protocolData_scan_check_comment FOR EACH ROW EXECUTE PROCEDURE after_update_val_protocolData_scan_check_comment()');
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_scan_check_condition_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_scan_check_condition_meta_data)('';
      FOR current_row IN SELECT * FROM val_protocolData_scan_check_condition_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_scan_check_condition( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_scan_check_condition)('';
      FOR current_row IN SELECT * FROM val_protocolData_scan_check_condition WHERE  val_protocoldata_scan_check_condition_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.verified IS NOT NULL) THEN 
              fullText := fullText || ''(verified:string)=('' || REPLACE(REPLACE(current_row.verified,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.diagnosis IS NOT NULL) THEN 
              fullText := fullText || ''(diagnosis:string)=('' || REPLACE(REPLACE(current_row.diagnosis,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.xmlpath IS NOT NULL) THEN 
              fullText := fullText || ''(xmlpath:string)=('' || REPLACE(REPLACE(current_row.xmlpath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.protocolData_scan_check_condition_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_scan_check_condition_info:integer)=('' || current_row.protocoldata_scan_check_condition_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_condition_meta_data(current_row.protocolData_scan_check_condition_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_scan_check_condition_info_protocoldata_scan_check_condition_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.conditions_condition_val_protoc_val_protocoldata_scan_check_id IS NOT NULL)) THEN
            fullText := fullText || ''(conditions_condition_val_protoc_val_protocoldata_scan_check_id:integer)=('' || current_row.conditions_condition_val_protoc_val_protocoldata_scan_check_id || '')'';
        END IF;
          IF (current_row.val_protocoldata_scan_check_condition_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_protocoldata_scan_check_condition_id:integer)=('' || current_row.val_protocoldata_scan_check_condition_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_val_protocolData_scan_check_condition( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData_scan_check_condition.*, meta.meta_data_id, meta.status AS meta_status FROM val_protocolData_scan_check_condition LEFT JOIN val_protocolData_scan_check_condition_meta_data meta ON val_protocolData_scan_check_condition.protocolData_scan_check_condition_info=meta.meta_data_id WHERE  val_protocoldata_scan_check_condition_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE val_protocolData_scan_check_condition_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_val_protocolData_scan_check_condition( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData_scan_check_condition.*, meta.meta_data_id FROM val_protocolData_scan_check_condition LEFT JOIN val_protocolData_scan_check_condition_meta_data meta ON val_protocolData_scan_check_condition.protocolData_scan_check_condition_info=meta.meta_data_id WHERE  val_protocoldata_scan_check_condition_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION val:protocolData_scan_check/conditions/condition
        IF ((current_row.conditions_condition_val_protoc_val_protocoldata_scan_check_id IS NOT NULL)) THEN
        PERFORM update_ls_val_protocolData_scan_check(current_row.conditions_condition_val_protoc_val_protocoldata_scan_check_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_val_protocolData_scan_check_condition()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_val_protocolData_scan_check_condition( OLD.val_protocoldata_scan_check_condition_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_val_protocolData_scan_check_condition','CREATE TRIGGER a_u_val_protocolData_scan_check_condition  AFTER UPDATE OR DELETE ON val_protocolData_scan_check_condition FOR EACH ROW EXECUTE PROCEDURE after_update_val_protocolData_scan_check_condition()');
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_scan_check( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_scan_check)('';
      FOR current_row IN SELECT * FROM val_protocolData_scan_check WHERE  val_protocoldata_scan_check_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_scan_check_condition WHERE conditions_condition_val_protoc_val_protocoldata_scan_check_id=current_row.val_protocoldata_scan_check_id ORDER BY val_protocoldata_scan_check_condition_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_condition( parent_row.val_protocoldata_scan_check_condition_id, child_count,$3,false,false);
              fullText := fullText || ''(conditions_condition_protocoldata_scan_check_condition'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_scan_check_comment WHERE comments_comment_val_protocolDa_val_protocoldata_scan_check_id=current_row.val_protocoldata_scan_check_id ORDER BY val_protocoldata_scan_check_comment_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_comment( parent_row.val_protocoldata_scan_check_comment_id, child_count,$3,false,false);
              fullText := fullText || ''(comments_comment_protocoldata_scan_check_comment'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.additionalval_val_additionalval_id IS NOT NULL)) THEN
            fullText := fullText || ''(additionalval_val_additionalval_id:integer)=('' || current_row.additionalval_val_additionalval_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_additionalVal(current_row.additionalval_val_additionalval_id, child_count,$3,false,false);
              fullText := fullText || ''(additionalval_additionalval:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.scan_id IS NOT NULL) THEN 
              fullText := fullText || ''(scan_id:string)=('' || REPLACE(REPLACE(current_row.scan_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.protocolData_scan_check_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_scan_check_info:integer)=('' || current_row.protocoldata_scan_check_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check_meta_data(current_row.protocolData_scan_check_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_scan_check_info_protocoldata_scan_check_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.scans_scan_check_val_protocolDa_id IS NOT NULL)) THEN
            fullText := fullText || ''(scans_scan_check_val_protocolda_id:string)=('' || current_row.scans_scan_check_val_protocolda_id || '')'';
        END IF;
          IF (current_row.val_protocoldata_scan_check_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_protocoldata_scan_check_id:integer)=('' || current_row.val_protocoldata_scan_check_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_val_protocolData_scan_check( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData_scan_check.*, meta.meta_data_id, meta.status AS meta_status FROM val_protocolData_scan_check LEFT JOIN val_protocolData_scan_check_meta_data meta ON val_protocolData_scan_check.protocolData_scan_check_info=meta.meta_data_id WHERE  val_protocoldata_scan_check_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE val_protocolData_scan_check_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_scan_check_condition WHERE conditions_condition_val_protoc_val_protocoldata_scan_check_id=current_row.val_protocoldata_scan_check_id
        LOOP
          PERFORM  a_val_protocolData_scan_check_condition( parent_row.val_protocoldata_scan_check_condition_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_scan_check_comment WHERE comments_comment_val_protocolDa_val_protocoldata_scan_check_id=current_row.val_protocoldata_scan_check_id
        LOOP
          PERFORM  a_val_protocolData_scan_check_comment( parent_row.val_protocoldata_scan_check_comment_id, $2,$3,false);
        END LOOP;
        END;
        IF ((current_row.additionalval_val_additionalval_id IS NOT NULL)) THEN
          PERFORM  a_val_additionalVal(current_row.additionalval_val_additionalval_id, $2,$3,false);
        END IF;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_val_protocolData_scan_check( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData_scan_check.*, meta.meta_data_id FROM val_protocolData_scan_check LEFT JOIN val_protocolData_scan_check_meta_data meta ON val_protocolData_scan_check.protocolData_scan_check_info=meta.meta_data_id WHERE  val_protocoldata_scan_check_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION val:protocolData/scans/scan_check
        IF ((current_row.scans_scan_check_val_protocolDa_id IS NOT NULL)) THEN
        PERFORM update_ls_val_protocolData(current_row.scans_scan_check_val_protocolDa_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_val_protocolData_scan_check()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_val_protocolData_scan_check( OLD.val_protocoldata_scan_check_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_val_protocolData_scan_check','CREATE TRIGGER a_u_val_protocolData_scan_check  AFTER UPDATE OR DELETE ON val_protocolData_scan_check FOR EACH ROW EXECUTE PROCEDURE after_update_val_protocolData_scan_check()');
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData)('';
      FOR current_row IN SELECT * FROM val_protocolData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_condition WHERE check_conditions_condition_val__id=current_row.id ORDER BY val_protocoldata_condition_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_condition( parent_row.val_protocoldata_condition_id, child_count,$3,false,false);
              fullText := fullText || ''(check_conditions_condition_protocoldata_condition'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_comment WHERE check_comments_comment_val_prot_id=current_row.id ORDER BY val_protocoldata_comment_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_comment( parent_row.val_protocoldata_comment_id, child_count,$3,false,false);
              fullText := fullText || ''(check_comments_comment_protocoldata_comment'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.check_additionalval_val_additionalval_id IS NOT NULL)) THEN
            fullText := fullText || ''(check_additionalval_val_additionalval_id:integer)=('' || current_row.check_additionalval_val_additionalval_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_additionalVal(current_row.check_additionalval_val_additionalval_id, child_count,$3,false,false);
              fullText := fullText || ''(check_additionalval_additionalval:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.check_status IS NOT NULL) THEN 
              fullText := fullText || ''(check_status:string)=('' || REPLACE(REPLACE(current_row.check_status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_scan_check WHERE scans_scan_check_val_protocolDa_id=current_row.id ORDER BY val_protocoldata_scan_check_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_scan_check( parent_row.val_protocoldata_scan_check_id, child_count,$3,false,false);
              fullText := fullText || ''(scans_scan_check_protocoldata_scan_check'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.protocolData_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_info:integer)=('' || current_row.protocoldata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_meta_data(current_row.protocolData_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_info_protocoldata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_val_protocolData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData.*, meta.meta_data_id, meta.status AS meta_status FROM val_protocolData LEFT JOIN val_protocolData_meta_data meta ON val_protocolData.protocolData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE val_protocolData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageAssessorData(current_row.id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_condition WHERE check_conditions_condition_val__id=current_row.id
        LOOP
          PERFORM  a_val_protocolData_condition( parent_row.val_protocoldata_condition_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_comment WHERE check_comments_comment_val_prot_id=current_row.id
        LOOP
          PERFORM  a_val_protocolData_comment( parent_row.val_protocoldata_comment_id, $2,$3,false);
        END LOOP;
        END;
        IF ((current_row.check_additionalval_val_additionalval_id IS NOT NULL)) THEN
          PERFORM  a_val_additionalVal(current_row.check_additionalval_val_additionalval_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM val_protocolData_scan_check WHERE scans_scan_check_val_protocolDa_id=current_row.id
        LOOP
          PERFORM  a_val_protocolData_scan_check( parent_row.val_protocoldata_scan_check_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_val_protocolData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''val:protocolData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT val_protocolData.*, meta.meta_data_id FROM val_protocolData LEFT JOIN val_protocolData_meta_data meta ON val_protocolData.protocolData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE val_protocolData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_val_protocolData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_val_protocolData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_val_protocolData','CREATE TRIGGER a_u_val_protocolData  AFTER UPDATE OR DELETE ON val_protocolData FOR EACH ROW EXECUTE PROCEDURE after_update_val_protocolData()');
--BR



CREATE OR REPLACE FUNCTION i_val_protocolData_condition_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(val:protocolData_condition_history)('';
      FOR current_row IN SELECT * FROM val_protocolData_condition_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.verified IS NOT NULL) THEN 
              fullText := fullText || ''(verified:string)=('' || REPLACE(REPLACE(current_row.verified,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.diagnosis IS NOT NULL) THEN 
              fullText := fullText || ''(diagnosis:string)=('' || REPLACE(REPLACE(current_row.diagnosis,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.xmlpath IS NOT NULL) THEN 
              fullText := fullText || ''(xmlpath:string)=('' || REPLACE(REPLACE(current_row.xmlpath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.protocolData_condition_info IS NOT NULL)) THEN
            fullText := fullText || ''(protocoldata_condition_info:integer)=('' || current_row.protocoldata_condition_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_val_protocolData_condition_meta_data(current_row.protocolData_condition_info, child_count,$3,false,false);
              fullText := fullText || ''(protocoldata_condition_info_protocoldata_condition_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.check_conditions_condition_val__id IS NOT NULL)) THEN
            fullText := fullText || ''(check_conditions_condition_val__id:string)=('' || current_row.check_conditions_condition_val__id || '')'';
        END IF;
          IF (current_row.val_protocoldata_condition_id IS NOT NULL) THEN 
              fullText := fullText || ''(val_protocoldata_condition_id:integer)=('' || current_row.val_protocoldata_condition_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_pipelineData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:pipelineData_meta_data)('';
      FOR current_row IN SELECT * FROM arc_pipelineData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_project_descendant_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_descendant_history)('';
      FOR current_row IN SELECT * FROM arc_project_descendant_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project_descendant_pipeline_history WHERE arc_project_descendant_arc_project_descendant_id=current_row.arc_project_descendant_id AND xft_version=current_row.xft_version ORDER BY arc_pipelinedata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_descendant_pipeline_history( parent_row.arc_pipelinedata_id, child_count,$3,false,false);
              fullText := fullText || ''(pipeline_project_descendant_pipeline'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.xsitype IS NOT NULL) THEN 
              fullText := fullText || ''(xsitype:string)=('' || REPLACE(REPLACE(current_row.xsitype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.project_descendant_info IS NOT NULL)) THEN
            fullText := fullText || ''(project_descendant_info:integer)=('' || current_row.project_descendant_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_descendant_meta_data(current_row.project_descendant_info, child_count,$3,false,false);
              fullText := fullText || ''(project_descendant_info_project_descendant_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.pipelines_descendants_descendan_arc_project_id IS NOT NULL)) THEN
            fullText := fullText || ''(pipelines_descendants_descendan_arc_project_id:integer)=('' || current_row.pipelines_descendants_descendan_arc_project_id || '')'';
        END IF;
          IF (current_row.arc_project_descendant_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_project_descendant_id:integer)=('' || current_row.arc_project_descendant_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_property_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:property_history)('';
      FOR current_row IN SELECT * FROM arc_property_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.property IS NOT NULL) THEN 
              fullText := fullText || ''(property:string)=('' || REPLACE(REPLACE(current_row.property,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.property_info IS NOT NULL)) THEN
            fullText := fullText || ''(property_info:integer)=('' || current_row.property_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_property_meta_data(current_row.property_info, child_count,$3,false,false);
              fullText := fullText || ''(property_info_property_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.properties_property_arc_project_arc_project_id IS NOT NULL)) THEN
            fullText := fullText || ''(properties_property_arc_project_arc_project_id:integer)=('' || current_row.properties_property_arc_project_arc_project_id || '')'';
        END IF;
          IF (current_row.arc_property_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_property_id:integer)=('' || current_row.arc_property_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_ArchiveSpecification_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:ArchiveSpecification_history)('';
      FOR current_row IN SELECT * FROM arc_ArchiveSpecification_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.globalpaths_arc_pathinfo_id IS NOT NULL)) THEN
            fullText := fullText || ''(globalpaths_arc_pathinfo_id:integer)=('' || current_row.globalpaths_arc_pathinfo_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM arc_pathInfo_history WHERE  arc_pathinfo_id=current_row.globalpaths_arc_pathinfo_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pathInfo_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(globalpaths_pathinfo:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_fieldSpecification_history WHERE fieldspecifications_fieldspecif_arc_archivespecification_id=current_row.arc_archivespecification_id AND xft_version=current_row.xft_version ORDER BY arc_fieldspecification_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_fieldSpecification_history( parent_row.arc_fieldspecification_id, child_count,$3,false,false);
              fullText := fullText || ''(fieldspecifications_fieldspecification_fieldspecification'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project_history WHERE projects_project_arc_ArchiveSpe_arc_archivespecification_id=current_row.arc_archivespecification_id AND xft_version=current_row.xft_version ORDER BY arc_project_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_history( parent_row.arc_project_id, child_count,$3,false,false);
              fullText := fullText || ''(projects_project_project'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.emailspecifications_new_user_registration IS NOT NULL) THEN 
              fullText := fullText || ''(emailspecifications_new_user_registration:integer)=('' || current_row.emailspecifications_new_user_registration || '')'';
          END IF;
          IF (current_row.emailspecifications_pipeline IS NOT NULL) THEN 
              fullText := fullText || ''(emailspecifications_pipeline:integer)=('' || current_row.emailspecifications_pipeline || '')'';
          END IF;
          IF (current_row.emailspecifications_project_access IS NOT NULL) THEN 
              fullText := fullText || ''(emailspecifications_project_access:integer)=('' || current_row.emailspecifications_project_access || '')'';
          END IF;
          IF (current_row.emailspecifications_transfer IS NOT NULL) THEN 
              fullText := fullText || ''(emailspecifications_transfer:integer)=('' || current_row.emailspecifications_transfer || '')'';
          END IF;
          IF (current_row.emailspecifications_page_email IS NOT NULL) THEN 
              fullText := fullText || ''(emailspecifications_page_email:integer)=('' || current_row.emailspecifications_page_email || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_ArchiveSpecification_notification_type_history WHERE notification_types_notification_arc_archivespecification_id=current_row.arc_archivespecification_id AND xft_version=current_row.xft_version ORDER BY arc_archivespecification_notification_type_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_ArchiveSpecification_notification_type_history( parent_row.arc_archivespecification_notification_type_id, child_count,$3,false,false);
              fullText := fullText || ''(notification_types_notification_type_archivespecification_notification_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.dcm_dcm_host IS NOT NULL) THEN 
              fullText := fullText || ''(dcm_dcm_host:string)=('' || REPLACE(REPLACE(current_row.dcm_dcm_host,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcm_dcm_port IS NOT NULL) THEN 
              fullText := fullText || ''(dcm_dcm_port:string)=('' || REPLACE(REPLACE(current_row.dcm_dcm_port,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcm_dcm_ae IS NOT NULL) THEN 
              fullText := fullText || ''(dcm_dcm_ae:string)=('' || REPLACE(REPLACE(current_row.dcm_dcm_ae,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcm_http_url IS NOT NULL) THEN 
              fullText := fullText || ''(dcm_http_url:string)=('' || REPLACE(REPLACE(current_row.dcm_http_url,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcm_applet_link IS NOT NULL) THEN 
              fullText := fullText || ''(dcm_applet_link:integer)=('' || current_row.dcm_applet_link || '')'';
          END IF;
          IF (current_row.site_id IS NOT NULL) THEN 
              fullText := fullText || ''(site_id:string)=('' || REPLACE(REPLACE(current_row.site_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.site_admin_email IS NOT NULL) THEN 
              fullText := fullText || ''(site_admin_email:string)=('' || REPLACE(REPLACE(current_row.site_admin_email,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.site_url IS NOT NULL) THEN 
              fullText := fullText || ''(site_url:string)=('' || REPLACE(REPLACE(current_row.site_url,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.smtp_host IS NOT NULL) THEN 
              fullText := fullText || ''(smtp_host:string)=('' || REPLACE(REPLACE(current_row.smtp_host,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.require_login IS NOT NULL) THEN 
              fullText := fullText || ''(require_login:integer)=('' || current_row.require_login || '')'';
          END IF;
          IF (current_row.enable_new_registrations IS NOT NULL) THEN 
              fullText := fullText || ''(enable_new_registrations:integer)=('' || current_row.enable_new_registrations || '')'';
          END IF;
          IF (current_row.enable_csrf_token IS NOT NULL) THEN 
              fullText := fullText || ''(enable_csrf_token:integer)=('' || current_row.enable_csrf_token || '')'';
          END IF;
          IF (current_row.quarantine_code IS NOT NULL) THEN 
              fullText := fullText || ''(quarantine_code:integer)=('' || current_row.quarantine_code || '')'';
          END IF;
          IF (current_row.prearchive_code IS NOT NULL) THEN 
              fullText := fullText || ''(prearchive_code:integer)=('' || current_row.prearchive_code || '')'';
          END IF;
        IF ((current_row.ArchiveSpecification_info IS NOT NULL)) THEN
            fullText := fullText || ''(archivespecification_info:integer)=('' || current_row.archivespecification_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_ArchiveSpecification_meta_data(current_row.ArchiveSpecification_info, child_count,$3,false,false);
              fullText := fullText || ''(archivespecification_info_archivespecification_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.arc_archivespecification_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_archivespecification_id:integer)=('' || current_row.arc_archivespecification_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_pathInfo_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:pathInfo_meta_data)('';
      FOR current_row IN SELECT * FROM arc_pathInfo_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_pathInfo( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:pathInfo)('';
      FOR current_row IN SELECT * FROM arc_pathInfo WHERE  arc_pathinfo_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.archivepath IS NOT NULL) THEN 
              fullText := fullText || ''(archivepath:string)=('' || REPLACE(REPLACE(current_row.archivepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.prearchivepath IS NOT NULL) THEN 
              fullText := fullText || ''(prearchivepath:string)=('' || REPLACE(REPLACE(current_row.prearchivepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.cachepath IS NOT NULL) THEN 
              fullText := fullText || ''(cachepath:string)=('' || REPLACE(REPLACE(current_row.cachepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.buildpath IS NOT NULL) THEN 
              fullText := fullText || ''(buildpath:string)=('' || REPLACE(REPLACE(current_row.buildpath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.ftppath IS NOT NULL) THEN 
              fullText := fullText || ''(ftppath:string)=('' || REPLACE(REPLACE(current_row.ftppath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pipelinepath IS NOT NULL) THEN 
              fullText := fullText || ''(pipelinepath:string)=('' || REPLACE(REPLACE(current_row.pipelinepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.pathInfo_info IS NOT NULL)) THEN
            fullText := fullText || ''(pathinfo_info:integer)=('' || current_row.pathinfo_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pathInfo_meta_data(current_row.pathInfo_info, child_count,$3,false,false);
              fullText := fullText || ''(pathinfo_info_pathinfo_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.arc_pathinfo_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_pathinfo_id:integer)=('' || current_row.arc_pathinfo_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_pathInfo( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_pathInfo.*, meta.meta_data_id, meta.status AS meta_status FROM arc_pathInfo LEFT JOIN arc_pathInfo_meta_data meta ON arc_pathInfo.pathInfo_info=meta.meta_data_id WHERE  arc_pathinfo_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_pathInfo_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_pathInfo( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_pathInfo.*, meta.meta_data_id FROM arc_pathInfo LEFT JOIN arc_pathInfo_meta_data meta ON arc_pathInfo.pathInfo_info=meta.meta_data_id WHERE  arc_pathinfo_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION arc:ArchiveSpecification/globalPaths
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_ArchiveSpecification WHERE globalpaths_arc_pathinfo_id=current_row.arc_pathinfo_id
        LOOP
        PERFORM update_ls_arc_ArchiveSpecification( parent_row.arc_archivespecification_id, $2);
        END LOOP;
        END;

        --PROCESS SUPERIOR RELATION arc:project/paths
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project WHERE paths_arc_pathinfo_id=current_row.arc_pathinfo_id
        LOOP
        PERFORM update_ls_arc_project( parent_row.arc_project_id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_pathInfo()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_pathInfo( OLD.arc_pathinfo_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_pathInfo','CREATE TRIGGER a_u_arc_pathInfo  AFTER UPDATE OR DELETE ON arc_pathInfo FOR EACH ROW EXECUTE PROCEDURE after_update_arc_pathInfo()');
--BR



CREATE OR REPLACE FUNCTION i_arc_project_descendant_pipeline_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_descendant_pipeline_meta_data)('';
      FOR current_row IN SELECT * FROM arc_project_descendant_pipeline_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_project_pipeline_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_pipeline_history)('';
      FOR current_row IN SELECT * FROM arc_project_pipeline_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.arc_pipelinedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(arc_pipelinedata_id:integer)=('' || current_row.arc_pipelinedata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM arc_pipelineData_history WHERE arc_pipelinedata_id=current_row.arc_pipelinedata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_arc_pipelineData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(pipelinedata_pipelinedata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.stepid IS NOT NULL) THEN 
              fullText := fullText || ''(stepid:string)=('' || REPLACE(REPLACE(current_row.stepid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dependent IS NOT NULL) THEN 
              fullText := fullText || ''(dependent:integer)=('' || current_row.dependent || '')'';
          END IF;
        IF ((current_row.project_pipeline_info IS NOT NULL)) THEN
            fullText := fullText || ''(project_pipeline_info:integer)=('' || current_row.project_pipeline_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_pipeline_meta_data(current_row.project_pipeline_info, child_count,$3,false,false);
              fullText := fullText || ''(project_pipeline_info_project_pipeline_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.pipelines_pipeline_arc_project_arc_project_id IS NOT NULL)) THEN
            fullText := fullText || ''(pipelines_pipeline_arc_project_arc_project_id:integer)=('' || current_row.pipelines_pipeline_arc_project_arc_project_id || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_arc_pipelineData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(pipelinedata_pipelinedata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_ArchiveSpecification_notification_type_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:ArchiveSpecification_notification_type_history)('';
      FOR current_row IN SELECT * FROM arc_ArchiveSpecification_notification_type_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.notification_type IS NOT NULL) THEN 
              fullText := fullText || ''(notification_type:string)=('' || REPLACE(REPLACE(current_row.notification_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.email_addresses IS NOT NULL) THEN 
              fullText := fullText || ''(email_addresses:string)=('' || REPLACE(REPLACE(current_row.email_addresses,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.ArchiveSpecification_notification_type_info IS NOT NULL)) THEN
            fullText := fullText || ''(archivespecification_notification_type_info:integer)=('' || current_row.archivespecification_notification_type_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_ArchiveSpecification_notification_type_meta_data(current_row.ArchiveSpecification_notification_type_info, child_count,$3,false,false);
              fullText := fullText || ''(archivespecification_notification_type_info_archivespecification_notification_type_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.notification_types_notification_arc_archivespecification_id IS NOT NULL)) THEN
            fullText := fullText || ''(notification_types_notification_arc_archivespecification_id:integer)=('' || current_row.notification_types_notification_arc_archivespecification_id || '')'';
        END IF;
          IF (current_row.arc_archivespecification_notification_type_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_archivespecification_notification_type_id:integer)=('' || current_row.arc_archivespecification_notification_type_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_property_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:property_meta_data)('';
      FOR current_row IN SELECT * FROM arc_property_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_property( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:property)('';
      FOR current_row IN SELECT * FROM arc_property WHERE  arc_property_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.property IS NOT NULL) THEN 
              fullText := fullText || ''(property:string)=('' || REPLACE(REPLACE(current_row.property,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.property_info IS NOT NULL)) THEN
            fullText := fullText || ''(property_info:integer)=('' || current_row.property_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_property_meta_data(current_row.property_info, child_count,$3,false,false);
              fullText := fullText || ''(property_info_property_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.properties_property_arc_project_arc_project_id IS NOT NULL)) THEN
            fullText := fullText || ''(properties_property_arc_project_arc_project_id:integer)=('' || current_row.properties_property_arc_project_arc_project_id || '')'';
        END IF;
          IF (current_row.arc_property_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_property_id:integer)=('' || current_row.arc_property_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_property( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_property.*, meta.meta_data_id, meta.status AS meta_status FROM arc_property LEFT JOIN arc_property_meta_data meta ON arc_property.property_info=meta.meta_data_id WHERE  arc_property_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_property_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_property( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_property.*, meta.meta_data_id FROM arc_property LEFT JOIN arc_property_meta_data meta ON arc_property.property_info=meta.meta_data_id WHERE  arc_property_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION arc:project/properties/property
        IF ((current_row.properties_property_arc_project_arc_project_id IS NOT NULL)) THEN
        PERFORM update_ls_arc_project(current_row.properties_property_arc_project_arc_project_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_property()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_property( OLD.arc_property_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_property','CREATE TRIGGER a_u_arc_property  AFTER UPDATE OR DELETE ON arc_property FOR EACH ROW EXECUTE PROCEDURE after_update_arc_property()');
--BR



CREATE OR REPLACE FUNCTION i_arc_pipelineParameterData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:pipelineParameterData_history)('';
      FOR current_row IN SELECT * FROM arc_pipelineParameterData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.schemalink IS NOT NULL) THEN 
              fullText := fullText || ''(schemalink:string)=('' || REPLACE(REPLACE(current_row.schemalink,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.csvvalues IS NOT NULL) THEN 
              fullText := fullText || ''(csvvalues:string)=('' || REPLACE(REPLACE(current_row.csvvalues,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.csvvalues_selected IS NOT NULL) THEN 
              fullText := fullText || ''(csvvalues_selected:string)=('' || REPLACE(REPLACE(current_row.csvvalues_selected,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.multiplevalues IS NOT NULL) THEN 
              fullText := fullText || ''(multiplevalues:integer)=('' || current_row.multiplevalues || '')'';
          END IF;
          IF (current_row.editable IS NOT NULL) THEN 
              fullText := fullText || ''(editable:integer)=('' || current_row.editable || '')'';
          END IF;
          IF (current_row.batchparam IS NOT NULL) THEN 
              fullText := fullText || ''(batchparam:integer)=('' || current_row.batchparam || '')'';
          END IF;
        IF ((current_row.pipelineParameterData_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelineparameterdata_info:integer)=('' || current_row.pipelineparameterdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pipelineParameterData_meta_data(current_row.pipelineParameterData_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelineparameterdata_info_pipelineparameterdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_parameter_arc_pipeli_arc_pipelinedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_parameter_arc_pipeli_arc_pipelinedata_id:integer)=('' || current_row.parameters_parameter_arc_pipeli_arc_pipelinedata_id || '')'';
        END IF;
          IF (current_row.arc_pipelineparameterdata_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_pipelineparameterdata_id:integer)=('' || current_row.arc_pipelineparameterdata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_project_descendant_pipeline_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_descendant_pipeline_history)('';
      FOR current_row IN SELECT * FROM arc_project_descendant_pipeline_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.arc_pipelinedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(arc_pipelinedata_id:integer)=('' || current_row.arc_pipelinedata_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM arc_pipelineData_history WHERE arc_pipelinedata_id=current_row.arc_pipelinedata_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_arc_pipelineData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(pipelinedata_pipelinedata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.stepid IS NOT NULL) THEN 
              fullText := fullText || ''(stepid:string)=('' || REPLACE(REPLACE(current_row.stepid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dependent IS NOT NULL) THEN 
              fullText := fullText || ''(dependent:integer)=('' || current_row.dependent || '')'';
          END IF;
        IF ((current_row.project_descendant_pipeline_info IS NOT NULL)) THEN
            fullText := fullText || ''(project_descendant_pipeline_info:integer)=('' || current_row.project_descendant_pipeline_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_descendant_pipeline_meta_data(current_row.project_descendant_pipeline_info, child_count,$3,false,false);
              fullText := fullText || ''(project_descendant_pipeline_info_project_descendant_pipeline_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.arc_project_descendant_arc_project_descendant_id IS NOT NULL)) THEN
            fullText := fullText || ''(arc_project_descendant_arc_project_descendant_id:integer)=('' || current_row.arc_project_descendant_arc_project_descendant_id || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_arc_pipelineData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(pipelinedata_pipelinedata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_project_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_meta_data)('';
      FOR current_row IN SELECT * FROM arc_project_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_ArchiveSpecification_notification_type_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:ArchiveSpecification_notification_type_meta_data)('';
      FOR current_row IN SELECT * FROM arc_ArchiveSpecification_notification_type_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_ArchiveSpecification_notification_type( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:ArchiveSpecification_notification_type)('';
      FOR current_row IN SELECT * FROM arc_ArchiveSpecification_notification_type WHERE  arc_archivespecification_notification_type_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.notification_type IS NOT NULL) THEN 
              fullText := fullText || ''(notification_type:string)=('' || REPLACE(REPLACE(current_row.notification_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.email_addresses IS NOT NULL) THEN 
              fullText := fullText || ''(email_addresses:string)=('' || REPLACE(REPLACE(current_row.email_addresses,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.ArchiveSpecification_notification_type_info IS NOT NULL)) THEN
            fullText := fullText || ''(archivespecification_notification_type_info:integer)=('' || current_row.archivespecification_notification_type_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_ArchiveSpecification_notification_type_meta_data(current_row.ArchiveSpecification_notification_type_info, child_count,$3,false,false);
              fullText := fullText || ''(archivespecification_notification_type_info_archivespecification_notification_type_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.notification_types_notification_arc_archivespecification_id IS NOT NULL)) THEN
            fullText := fullText || ''(notification_types_notification_arc_archivespecification_id:integer)=('' || current_row.notification_types_notification_arc_archivespecification_id || '')'';
        END IF;
          IF (current_row.arc_archivespecification_notification_type_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_archivespecification_notification_type_id:integer)=('' || current_row.arc_archivespecification_notification_type_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_ArchiveSpecification_notification_type( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_ArchiveSpecification_notification_type.*, meta.meta_data_id, meta.status AS meta_status FROM arc_ArchiveSpecification_notification_type LEFT JOIN arc_ArchiveSpecification_notification_type_meta_data meta ON arc_ArchiveSpecification_notification_type.ArchiveSpecification_notification_type_info=meta.meta_data_id WHERE  arc_archivespecification_notification_type_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_ArchiveSpecification_notification_type_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_ArchiveSpecification_notification_type( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_ArchiveSpecification_notification_type.*, meta.meta_data_id FROM arc_ArchiveSpecification_notification_type LEFT JOIN arc_ArchiveSpecification_notification_type_meta_data meta ON arc_ArchiveSpecification_notification_type.ArchiveSpecification_notification_type_info=meta.meta_data_id WHERE  arc_archivespecification_notification_type_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION arc:ArchiveSpecification/notification_types/notification_type
        IF ((current_row.notification_types_notification_arc_archivespecification_id IS NOT NULL)) THEN
        PERFORM update_ls_arc_ArchiveSpecification(current_row.notification_types_notification_arc_archivespecification_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_ArchiveSpecification_notification_type()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_ArchiveSpecification_notification_type( OLD.arc_archivespecification_notification_type_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_ArchiveSpecification_notification_type','CREATE TRIGGER a_u_arc_ArchiveSpecification_notification_type  AFTER UPDATE OR DELETE ON arc_ArchiveSpecification_notification_type FOR EACH ROW EXECUTE PROCEDURE after_update_arc_ArchiveSpecification_notification_type()');
--BR



CREATE OR REPLACE FUNCTION i_arc_fieldSpecification_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:fieldSpecification_meta_data)('';
      FOR current_row IN SELECT * FROM arc_fieldSpecification_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_fieldSpecification( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:fieldSpecification)('';
      FOR current_row IN SELECT * FROM arc_fieldSpecification WHERE  arc_fieldspecification_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.fieldspecification IS NOT NULL) THEN 
              fullText := fullText || ''(fieldspecification:string)=('' || REPLACE(REPLACE(current_row.fieldspecification,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.fieldSpecification_info IS NOT NULL)) THEN
            fullText := fullText || ''(fieldspecification_info:integer)=('' || current_row.fieldspecification_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_fieldSpecification_meta_data(current_row.fieldSpecification_info, child_count,$3,false,false);
              fullText := fullText || ''(fieldspecification_info_fieldspecification_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fieldspecifications_fieldspecif_arc_archivespecification_id IS NOT NULL)) THEN
            fullText := fullText || ''(fieldspecifications_fieldspecif_arc_archivespecification_id:integer)=('' || current_row.fieldspecifications_fieldspecif_arc_archivespecification_id || '')'';
        END IF;
  -- 475
        IF ((current_row.fieldspecifications_fieldspecif_arc_project_id IS NOT NULL)) THEN
            fullText := fullText || ''(fieldspecifications_fieldspecif_arc_project_id:integer)=('' || current_row.fieldspecifications_fieldspecif_arc_project_id || '')'';
        END IF;
          IF (current_row.arc_fieldspecification_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_fieldspecification_id:integer)=('' || current_row.arc_fieldspecification_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_fieldSpecification( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_fieldSpecification.*, meta.meta_data_id, meta.status AS meta_status FROM arc_fieldSpecification LEFT JOIN arc_fieldSpecification_meta_data meta ON arc_fieldSpecification.fieldSpecification_info=meta.meta_data_id WHERE  arc_fieldspecification_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_fieldSpecification_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_fieldSpecification( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_fieldSpecification.*, meta.meta_data_id FROM arc_fieldSpecification LEFT JOIN arc_fieldSpecification_meta_data meta ON arc_fieldSpecification.fieldSpecification_info=meta.meta_data_id WHERE  arc_fieldspecification_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION arc:ArchiveSpecification/fieldSpecifications/fieldSpecification
        IF ((current_row.fieldspecifications_fieldspecif_arc_archivespecification_id IS NOT NULL)) THEN
        PERFORM update_ls_arc_ArchiveSpecification(current_row.fieldspecifications_fieldspecif_arc_archivespecification_id, $2);
        END IF;

        --PROCESS SUBORDINATE RELATION arc:project/fieldSpecifications/fieldSpecification
        IF ((current_row.fieldspecifications_fieldspecif_arc_project_id IS NOT NULL)) THEN
        PERFORM update_ls_arc_project(current_row.fieldspecifications_fieldspecif_arc_project_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_fieldSpecification()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_fieldSpecification( OLD.arc_fieldspecification_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_fieldSpecification','CREATE TRIGGER a_u_arc_fieldSpecification  AFTER UPDATE OR DELETE ON arc_fieldSpecification FOR EACH ROW EXECUTE PROCEDURE after_update_arc_fieldSpecification()');
--BR



CREATE OR REPLACE FUNCTION i_arc_project_pipeline_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_pipeline_meta_data)('';
      FOR current_row IN SELECT * FROM arc_project_pipeline_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_fieldSpecification_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:fieldSpecification_history)('';
      FOR current_row IN SELECT * FROM arc_fieldSpecification_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.fieldspecification IS NOT NULL) THEN 
              fullText := fullText || ''(fieldspecification:string)=('' || REPLACE(REPLACE(current_row.fieldspecification,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.fieldSpecification_info IS NOT NULL)) THEN
            fullText := fullText || ''(fieldspecification_info:integer)=('' || current_row.fieldspecification_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_fieldSpecification_meta_data(current_row.fieldSpecification_info, child_count,$3,false,false);
              fullText := fullText || ''(fieldspecification_info_fieldspecification_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.fieldspecifications_fieldspecif_arc_archivespecification_id IS NOT NULL)) THEN
            fullText := fullText || ''(fieldspecifications_fieldspecif_arc_archivespecification_id:integer)=('' || current_row.fieldspecifications_fieldspecif_arc_archivespecification_id || '')'';
        END IF;
  -- 475
        IF ((current_row.fieldspecifications_fieldspecif_arc_project_id IS NOT NULL)) THEN
            fullText := fullText || ''(fieldspecifications_fieldspecif_arc_project_id:integer)=('' || current_row.fieldspecifications_fieldspecif_arc_project_id || '')'';
        END IF;
          IF (current_row.arc_fieldspecification_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_fieldspecification_id:integer)=('' || current_row.arc_fieldspecification_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_project_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_history)('';
      FOR current_row IN SELECT * FROM arc_project_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.paths_arc_pathinfo_id IS NOT NULL)) THEN
            fullText := fullText || ''(paths_arc_pathinfo_id:integer)=('' || current_row.paths_arc_pathinfo_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM arc_pathInfo_history WHERE  arc_pathinfo_id=current_row.paths_arc_pathinfo_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pathInfo_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(paths_pathinfo:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_fieldSpecification_history WHERE fieldspecifications_fieldspecif_arc_project_id=current_row.arc_project_id AND xft_version=current_row.xft_version ORDER BY arc_fieldspecification_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_fieldSpecification_history( parent_row.arc_fieldspecification_id, child_count,$3,false,false);
              fullText := fullText || ''(fieldspecifications_fieldspecification_fieldspecification'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_property_history WHERE properties_property_arc_project_arc_project_id=current_row.arc_project_id AND xft_version=current_row.xft_version ORDER BY arc_property_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_property_history( parent_row.arc_property_id, child_count,$3,false,false);
              fullText := fullText || ''(properties_property_property'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project_descendant_history WHERE pipelines_descendants_descendan_arc_project_id=current_row.arc_project_id AND xft_version=current_row.xft_version ORDER BY arc_project_descendant_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_descendant_history( parent_row.arc_project_descendant_id, child_count,$3,false,false);
              fullText := fullText || ''(pipelines_descendants_descendant_project_descendant'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project_pipeline_history WHERE pipelines_pipeline_arc_project_arc_project_id=current_row.arc_project_id AND xft_version=current_row.xft_version ORDER BY arc_pipelinedata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_pipeline_history( parent_row.arc_pipelinedata_id, child_count,$3,false,false);
              fullText := fullText || ''(pipelines_pipeline_project_pipeline'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.current_arc IS NOT NULL) THEN 
              fullText := fullText || ''(current_arc:string)=('' || REPLACE(REPLACE(current_row.current_arc,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.quarantine_code IS NOT NULL) THEN 
              fullText := fullText || ''(quarantine_code:integer)=('' || current_row.quarantine_code || '')'';
          END IF;
          IF (current_row.prearchive_code IS NOT NULL) THEN 
              fullText := fullText || ''(prearchive_code:integer)=('' || current_row.prearchive_code || '')'';
          END IF;
        IF ((current_row.project_info IS NOT NULL)) THEN
            fullText := fullText || ''(project_info:integer)=('' || current_row.project_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_meta_data(current_row.project_info, child_count,$3,false,false);
              fullText := fullText || ''(project_info_project_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.projects_project_arc_ArchiveSpe_arc_archivespecification_id IS NOT NULL)) THEN
            fullText := fullText || ''(projects_project_arc_archivespe_arc_archivespecification_id:integer)=('' || current_row.projects_project_arc_archivespe_arc_archivespecification_id || '')'';
        END IF;
          IF (current_row.arc_project_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_project_id:integer)=('' || current_row.arc_project_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_pathInfo_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:pathInfo_history)('';
      FOR current_row IN SELECT * FROM arc_pathInfo_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.archivepath IS NOT NULL) THEN 
              fullText := fullText || ''(archivepath:string)=('' || REPLACE(REPLACE(current_row.archivepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.prearchivepath IS NOT NULL) THEN 
              fullText := fullText || ''(prearchivepath:string)=('' || REPLACE(REPLACE(current_row.prearchivepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.cachepath IS NOT NULL) THEN 
              fullText := fullText || ''(cachepath:string)=('' || REPLACE(REPLACE(current_row.cachepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.buildpath IS NOT NULL) THEN 
              fullText := fullText || ''(buildpath:string)=('' || REPLACE(REPLACE(current_row.buildpath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.ftppath IS NOT NULL) THEN 
              fullText := fullText || ''(ftppath:string)=('' || REPLACE(REPLACE(current_row.ftppath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pipelinepath IS NOT NULL) THEN 
              fullText := fullText || ''(pipelinepath:string)=('' || REPLACE(REPLACE(current_row.pipelinepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.pathInfo_info IS NOT NULL)) THEN
            fullText := fullText || ''(pathinfo_info:integer)=('' || current_row.pathinfo_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pathInfo_meta_data(current_row.pathInfo_info, child_count,$3,false,false);
              fullText := fullText || ''(pathinfo_info_pathinfo_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.arc_pathinfo_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_pathinfo_id:integer)=('' || current_row.arc_pathinfo_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_pipelineParameterData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:pipelineParameterData_meta_data)('';
      FOR current_row IN SELECT * FROM arc_pipelineParameterData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_pipelineParameterData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:pipelineParameterData)('';
      FOR current_row IN SELECT * FROM arc_pipelineParameterData WHERE  arc_pipelineparameterdata_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.schemalink IS NOT NULL) THEN 
              fullText := fullText || ''(schemalink:string)=('' || REPLACE(REPLACE(current_row.schemalink,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.csvvalues IS NOT NULL) THEN 
              fullText := fullText || ''(csvvalues:string)=('' || REPLACE(REPLACE(current_row.csvvalues,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.csvvalues_selected IS NOT NULL) THEN 
              fullText := fullText || ''(csvvalues_selected:string)=('' || REPLACE(REPLACE(current_row.csvvalues_selected,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.multiplevalues IS NOT NULL) THEN 
              fullText := fullText || ''(multiplevalues:integer)=('' || current_row.multiplevalues || '')'';
          END IF;
          IF (current_row.editable IS NOT NULL) THEN 
              fullText := fullText || ''(editable:integer)=('' || current_row.editable || '')'';
          END IF;
          IF (current_row.batchparam IS NOT NULL) THEN 
              fullText := fullText || ''(batchparam:integer)=('' || current_row.batchparam || '')'';
          END IF;
        IF ((current_row.pipelineParameterData_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelineparameterdata_info:integer)=('' || current_row.pipelineparameterdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pipelineParameterData_meta_data(current_row.pipelineParameterData_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelineparameterdata_info_pipelineparameterdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_parameter_arc_pipeli_arc_pipelinedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_parameter_arc_pipeli_arc_pipelinedata_id:integer)=('' || current_row.parameters_parameter_arc_pipeli_arc_pipelinedata_id || '')'';
        END IF;
          IF (current_row.arc_pipelineparameterdata_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_pipelineparameterdata_id:integer)=('' || current_row.arc_pipelineparameterdata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_pipelineParameterData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_pipelineParameterData.*, meta.meta_data_id, meta.status AS meta_status FROM arc_pipelineParameterData LEFT JOIN arc_pipelineParameterData_meta_data meta ON arc_pipelineParameterData.pipelineParameterData_info=meta.meta_data_id WHERE  arc_pipelineparameterdata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_pipelineParameterData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_pipelineParameterData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_pipelineParameterData.*, meta.meta_data_id FROM arc_pipelineParameterData LEFT JOIN arc_pipelineParameterData_meta_data meta ON arc_pipelineParameterData.pipelineParameterData_info=meta.meta_data_id WHERE  arc_pipelineparameterdata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION arc:pipelineData/parameters/parameter
        IF ((current_row.parameters_parameter_arc_pipeli_arc_pipelinedata_id IS NOT NULL)) THEN
        PERFORM update_ls_arc_pipelineData(current_row.parameters_parameter_arc_pipeli_arc_pipelinedata_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_pipelineParameterData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_pipelineParameterData( OLD.arc_pipelineparameterdata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_pipelineParameterData','CREATE TRIGGER a_u_arc_pipelineParameterData  AFTER UPDATE OR DELETE ON arc_pipelineParameterData FOR EACH ROW EXECUTE PROCEDURE after_update_arc_pipelineParameterData()');
--BR



CREATE OR REPLACE FUNCTION ie_arc_pipelineData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:pipelineData)('';
      FOR current_row IN SELECT * FROM arc_pipelineData WHERE  arc_pipelinedata_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.displaytext IS NOT NULL) THEN 
              fullText := fullText || ''(displaytext:string)=('' || REPLACE(REPLACE(current_row.displaytext,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.location IS NOT NULL) THEN 
              fullText := fullText || ''(location:string)=('' || REPLACE(REPLACE(current_row.location,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_pipelineParameterData WHERE parameters_parameter_arc_pipeli_arc_pipelinedata_id=current_row.arc_pipelinedata_id ORDER BY arc_pipelineparameterdata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pipelineParameterData( parent_row.arc_pipelineparameterdata_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_parameter_pipelineparameterdata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.customwebpage IS NOT NULL) THEN 
              fullText := fullText || ''(customwebpage:string)=('' || REPLACE(REPLACE(current_row.customwebpage,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.pipelineData_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelinedata_info:integer)=('' || current_row.pipelinedata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pipelineData_meta_data(current_row.pipelineData_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelinedata_info_pipelinedata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.arc_pipelinedata_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_pipelinedata_id:integer)=('' || current_row.arc_pipelinedata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_pipelineData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT arc_pipelineData.arc_pipelinedata_id AS arc_pipelineData7, table1.element_name AS xdat_meta_element31, table2.insert_date AS arc_pipelineData_meta_data38 FROM arc_pipelineData arc_pipelineData   LEFT JOIN xdat_meta_element table1 ON arc_pipelineData.extension=table1.xdat_meta_element_id   LEFT JOIN arc_pipelineData_meta_data table2 ON arc_pipelineData.pipelineData_info=table2.meta_data_id) SEARCH  WHERE 
 ( (arc_pipelineData7=$1))
      LOOP
         IF (current_row.xdat_meta_element31 IS NULL) THEN 
             fullText:= ie_arc_pipelineData( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element31=''arc:project_descendant_pipeline'') THEN
                fullText:= i_arc_project_descendant_pipeline( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element31=''arc:project_pipeline'') THEN
                fullText:= i_arc_project_pipeline( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_arc_pipelineData( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_arc_pipelineData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_pipelineData.*, meta.meta_data_id, meta.status AS meta_status FROM arc_pipelineData LEFT JOIN arc_pipelineData_meta_data meta ON arc_pipelineData.pipelineData_info=meta.meta_data_id WHERE  arc_pipelinedata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_pipelineData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_pipelineParameterData WHERE parameters_parameter_arc_pipeli_arc_pipelinedata_id=current_row.arc_pipelinedata_id
        LOOP
          PERFORM  a_arc_pipelineParameterData( parent_row.arc_pipelineparameterdata_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_pipelineData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT arc_pipelineData.arc_pipelinedata_id AS arc_pipelineData7, table1.element_name AS xdat_meta_element31, table2.insert_date AS arc_pipelineData_meta_data38 FROM arc_pipelineData arc_pipelineData   LEFT JOIN xdat_meta_element table1 ON arc_pipelineData.extension=table1.xdat_meta_element_id   LEFT JOIN arc_pipelineData_meta_data table2 ON arc_pipelineData.pipelineData_info=table2.meta_data_id) SEARCH WHERE 
 ( (arc_pipelineData7=$1))
      LOOP
         IF (current_row.xdat_meta_element31 IS NULL) THEN 
            PERFORM  ae_arc_pipelineData( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element31=''arc:project_descendant_pipeline'') THEN
            PERFORM  a_arc_project_descendant_pipeline( $1, $2,$3,$4);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element31=''arc:project_pipeline'') THEN
            PERFORM  a_arc_project_pipeline( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_arc_pipelineData( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_arc_pipelineData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_pipelineData.*, meta.meta_data_id FROM arc_pipelineData LEFT JOIN arc_pipelineData_meta_data meta ON arc_pipelineData.pipelineData_info=meta.meta_data_id WHERE  arc_pipelinedata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_pipelineData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT arc_pipelineData.arc_pipelinedata_id AS arc_pipelineData7, table1.element_name AS xdat_meta_element31, table2.insert_date AS arc_pipelineData_meta_data38 FROM arc_pipelineData arc_pipelineData   LEFT JOIN xdat_meta_element table1 ON arc_pipelineData.extension=table1.xdat_meta_element_id   LEFT JOIN arc_pipelineData_meta_data table2 ON arc_pipelineData.pipelineData_info=table2.meta_data_id) SEARCH WHERE 
 ( (arc_pipelineData7=$1))
      LOOP
         IF (current_row.xdat_meta_element31 IS NULL) THEN 
             PERFORM update_ls_ext_arc_pipelineData( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element31=''arc:project_descendant_pipeline'') THEN
                PERFORM update_ls_arc_project_descendant_pipeline( $1, $2);
                matches:=1;
            END IF;
            IF (current_row.xdat_meta_element31=''arc:project_pipeline'') THEN
                PERFORM update_ls_arc_project_pipeline( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element31;
                    PERFORM update_ls_ext_arc_pipelineData( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_pipelineData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_pipelineData( OLD.arc_pipelinedata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_pipelineData','CREATE TRIGGER a_u_arc_pipelineData  AFTER UPDATE OR DELETE ON arc_pipelineData FOR EACH ROW EXECUTE PROCEDURE after_update_arc_pipelineData()');
--BR



CREATE OR REPLACE FUNCTION i_arc_project_pipeline( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_pipeline)('';
      FOR current_row IN SELECT * FROM arc_project_pipeline WHERE  arc_pipelinedata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.arc_pipelinedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(arc_pipelinedata_id:integer)=('' || current_row.arc_pipelinedata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_arc_pipelineData(current_row.arc_pipelinedata_id, child_count,$3,false,false);
              fullText := fullText || ''(pipelinedata_pipelinedata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.stepid IS NOT NULL) THEN 
              fullText := fullText || ''(stepid:string)=('' || REPLACE(REPLACE(current_row.stepid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dependent IS NOT NULL) THEN 
              fullText := fullText || ''(dependent:integer)=('' || current_row.dependent || '')'';
          END IF;
        IF ((current_row.project_pipeline_info IS NOT NULL)) THEN
            fullText := fullText || ''(project_pipeline_info:integer)=('' || current_row.project_pipeline_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_pipeline_meta_data(current_row.project_pipeline_info, child_count,$3,false,false);
              fullText := fullText || ''(project_pipeline_info_project_pipeline_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.pipelines_pipeline_arc_project_arc_project_id IS NOT NULL)) THEN
            fullText := fullText || ''(pipelines_pipeline_arc_project_arc_project_id:integer)=('' || current_row.pipelines_pipeline_arc_project_arc_project_id || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_arc_pipelineData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(pipelinedata_pipelinedata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_project_pipeline( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_project_pipeline.*, meta.meta_data_id, meta.status AS meta_status FROM arc_project_pipeline LEFT JOIN arc_project_pipeline_meta_data meta ON arc_project_pipeline.project_pipeline_info=meta.meta_data_id WHERE  arc_pipelinedata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_project_pipeline_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.arc_pipelinedata_id IS NOT NULL)) THEN
          PERFORM  ae_arc_pipelineData(current_row.arc_pipelinedata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_arc_pipelineData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_project_pipeline( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_project_pipeline.*, meta.meta_data_id FROM arc_project_pipeline LEFT JOIN arc_project_pipeline_meta_data meta ON arc_project_pipeline.project_pipeline_info=meta.meta_data_id WHERE  arc_pipelinedata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION arc:project/pipelines/pipeline
        IF ((current_row.pipelines_pipeline_arc_project_arc_project_id IS NOT NULL)) THEN
        PERFORM update_ls_arc_project(current_row.pipelines_pipeline_arc_project_arc_project_id, $2);
        END IF;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_arc_pipelineData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_project_pipeline()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_project_pipeline( OLD.arc_pipelinedata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_project_pipeline','CREATE TRIGGER a_u_arc_project_pipeline  AFTER UPDATE OR DELETE ON arc_project_pipeline FOR EACH ROW EXECUTE PROCEDURE after_update_arc_project_pipeline()');
--BR



CREATE OR REPLACE FUNCTION i_arc_project_descendant_pipeline( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_descendant_pipeline)('';
      FOR current_row IN SELECT * FROM arc_project_descendant_pipeline WHERE  arc_pipelinedata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.arc_pipelinedata_id IS NOT NULL)) THEN
            fullText := fullText || ''(arc_pipelinedata_id:integer)=('' || current_row.arc_pipelinedata_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_arc_pipelineData(current_row.arc_pipelinedata_id, child_count,$3,false,false);
              fullText := fullText || ''(pipelinedata_pipelinedata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.stepid IS NOT NULL) THEN 
              fullText := fullText || ''(stepid:string)=('' || REPLACE(REPLACE(current_row.stepid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dependent IS NOT NULL) THEN 
              fullText := fullText || ''(dependent:integer)=('' || current_row.dependent || '')'';
          END IF;
        IF ((current_row.project_descendant_pipeline_info IS NOT NULL)) THEN
            fullText := fullText || ''(project_descendant_pipeline_info:integer)=('' || current_row.project_descendant_pipeline_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_descendant_pipeline_meta_data(current_row.project_descendant_pipeline_info, child_count,$3,false,false);
              fullText := fullText || ''(project_descendant_pipeline_info_project_descendant_pipeline_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.arc_project_descendant_arc_project_descendant_id IS NOT NULL)) THEN
            fullText := fullText || ''(arc_project_descendant_arc_project_descendant_id:integer)=('' || current_row.arc_project_descendant_arc_project_descendant_id || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_arc_pipelineData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(pipelinedata_pipelinedata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_project_descendant_pipeline( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_project_descendant_pipeline.*, meta.meta_data_id, meta.status AS meta_status FROM arc_project_descendant_pipeline LEFT JOIN arc_project_descendant_pipeline_meta_data meta ON arc_project_descendant_pipeline.project_descendant_pipeline_info=meta.meta_data_id WHERE  arc_pipelinedata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_project_descendant_pipeline_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.arc_pipelinedata_id IS NOT NULL)) THEN
          PERFORM  ae_arc_pipelineData(current_row.arc_pipelinedata_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_arc_pipelineData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_project_descendant_pipeline( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_project_descendant_pipeline.*, meta.meta_data_id FROM arc_project_descendant_pipeline LEFT JOIN arc_project_descendant_pipeline_meta_data meta ON arc_project_descendant_pipeline.project_descendant_pipeline_info=meta.meta_data_id WHERE  arc_pipelinedata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION arc:project_descendant/pipeline
        IF ((current_row.arc_project_descendant_arc_project_descendant_id IS NOT NULL)) THEN
        PERFORM update_ls_arc_project_descendant(current_row.arc_project_descendant_arc_project_descendant_id, $2);
        END IF;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_arc_pipelineData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_project_descendant_pipeline()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_project_descendant_pipeline( OLD.arc_pipelinedata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_project_descendant_pipeline','CREATE TRIGGER a_u_arc_project_descendant_pipeline  AFTER UPDATE OR DELETE ON arc_project_descendant_pipeline FOR EACH ROW EXECUTE PROCEDURE after_update_arc_project_descendant_pipeline()');
--BR



CREATE OR REPLACE FUNCTION i_arc_ArchiveSpecification_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:ArchiveSpecification_meta_data)('';
      FOR current_row IN SELECT * FROM arc_ArchiveSpecification_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_project_descendant_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_descendant_meta_data)('';
      FOR current_row IN SELECT * FROM arc_project_descendant_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_arc_project_descendant( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project_descendant)('';
      FOR current_row IN SELECT * FROM arc_project_descendant WHERE  arc_project_descendant_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project_descendant_pipeline WHERE arc_project_descendant_arc_project_descendant_id=current_row.arc_project_descendant_id ORDER BY arc_pipelinedata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_descendant_pipeline( parent_row.arc_pipelinedata_id, child_count,$3,false,false);
              fullText := fullText || ''(pipeline_project_descendant_pipeline'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.xsitype IS NOT NULL) THEN 
              fullText := fullText || ''(xsitype:string)=('' || REPLACE(REPLACE(current_row.xsitype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.project_descendant_info IS NOT NULL)) THEN
            fullText := fullText || ''(project_descendant_info:integer)=('' || current_row.project_descendant_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_descendant_meta_data(current_row.project_descendant_info, child_count,$3,false,false);
              fullText := fullText || ''(project_descendant_info_project_descendant_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.pipelines_descendants_descendan_arc_project_id IS NOT NULL)) THEN
            fullText := fullText || ''(pipelines_descendants_descendan_arc_project_id:integer)=('' || current_row.pipelines_descendants_descendan_arc_project_id || '')'';
        END IF;
          IF (current_row.arc_project_descendant_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_project_descendant_id:integer)=('' || current_row.arc_project_descendant_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_project_descendant( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_project_descendant.*, meta.meta_data_id, meta.status AS meta_status FROM arc_project_descendant LEFT JOIN arc_project_descendant_meta_data meta ON arc_project_descendant.project_descendant_info=meta.meta_data_id WHERE  arc_project_descendant_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_project_descendant_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project_descendant_pipeline WHERE arc_project_descendant_arc_project_descendant_id=current_row.arc_project_descendant_id
        LOOP
          PERFORM  a_arc_project_descendant_pipeline( parent_row.arc_pipelinedata_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_project_descendant( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_project_descendant.*, meta.meta_data_id FROM arc_project_descendant LEFT JOIN arc_project_descendant_meta_data meta ON arc_project_descendant.project_descendant_info=meta.meta_data_id WHERE  arc_project_descendant_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION arc:project/pipelines/descendants/descendant
        IF ((current_row.pipelines_descendants_descendan_arc_project_id IS NOT NULL)) THEN
        PERFORM update_ls_arc_project(current_row.pipelines_descendants_descendan_arc_project_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_project_descendant()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_project_descendant( OLD.arc_project_descendant_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_project_descendant','CREATE TRIGGER a_u_arc_project_descendant  AFTER UPDATE OR DELETE ON arc_project_descendant FOR EACH ROW EXECUTE PROCEDURE after_update_arc_project_descendant()');
--BR



CREATE OR REPLACE FUNCTION i_arc_project( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:project)('';
      FOR current_row IN SELECT * FROM arc_project WHERE  arc_project_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.paths_arc_pathinfo_id IS NOT NULL)) THEN
            fullText := fullText || ''(paths_arc_pathinfo_id:integer)=('' || current_row.paths_arc_pathinfo_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pathInfo(current_row.paths_arc_pathinfo_id, child_count,$3,false,false);
              fullText := fullText || ''(paths_pathinfo:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_fieldSpecification WHERE fieldspecifications_fieldspecif_arc_project_id=current_row.arc_project_id ORDER BY arc_fieldspecification_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_fieldSpecification( parent_row.arc_fieldspecification_id, child_count,$3,false,false);
              fullText := fullText || ''(fieldspecifications_fieldspecification_fieldspecification'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_property WHERE properties_property_arc_project_arc_project_id=current_row.arc_project_id ORDER BY arc_property_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_property( parent_row.arc_property_id, child_count,$3,false,false);
              fullText := fullText || ''(properties_property_property'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project_descendant WHERE pipelines_descendants_descendan_arc_project_id=current_row.arc_project_id ORDER BY arc_project_descendant_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_descendant( parent_row.arc_project_descendant_id, child_count,$3,false,false);
              fullText := fullText || ''(pipelines_descendants_descendant_project_descendant'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project_pipeline WHERE pipelines_pipeline_arc_project_arc_project_id=current_row.arc_project_id ORDER BY arc_pipelinedata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_pipeline( parent_row.arc_pipelinedata_id, child_count,$3,false,false);
              fullText := fullText || ''(pipelines_pipeline_project_pipeline'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.current_arc IS NOT NULL) THEN 
              fullText := fullText || ''(current_arc:string)=('' || REPLACE(REPLACE(current_row.current_arc,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.quarantine_code IS NOT NULL) THEN 
              fullText := fullText || ''(quarantine_code:integer)=('' || current_row.quarantine_code || '')'';
          END IF;
          IF (current_row.prearchive_code IS NOT NULL) THEN 
              fullText := fullText || ''(prearchive_code:integer)=('' || current_row.prearchive_code || '')'';
          END IF;
        IF ((current_row.project_info IS NOT NULL)) THEN
            fullText := fullText || ''(project_info:integer)=('' || current_row.project_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project_meta_data(current_row.project_info, child_count,$3,false,false);
              fullText := fullText || ''(project_info_project_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.projects_project_arc_ArchiveSpe_arc_archivespecification_id IS NOT NULL)) THEN
            fullText := fullText || ''(projects_project_arc_archivespe_arc_archivespecification_id:integer)=('' || current_row.projects_project_arc_archivespe_arc_archivespecification_id || '')'';
        END IF;
          IF (current_row.arc_project_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_project_id:integer)=('' || current_row.arc_project_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_project( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_project.*, meta.meta_data_id, meta.status AS meta_status FROM arc_project LEFT JOIN arc_project_meta_data meta ON arc_project.project_info=meta.meta_data_id WHERE  arc_project_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_project_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.paths_arc_pathinfo_id IS NOT NULL)) THEN
          PERFORM  a_arc_pathInfo(current_row.paths_arc_pathinfo_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_fieldSpecification WHERE fieldspecifications_fieldspecif_arc_project_id=current_row.arc_project_id
        LOOP
          PERFORM  a_arc_fieldSpecification( parent_row.arc_fieldspecification_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_property WHERE properties_property_arc_project_arc_project_id=current_row.arc_project_id
        LOOP
          PERFORM  a_arc_property( parent_row.arc_property_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project_descendant WHERE pipelines_descendants_descendan_arc_project_id=current_row.arc_project_id
        LOOP
          PERFORM  a_arc_project_descendant( parent_row.arc_project_descendant_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project_pipeline WHERE pipelines_pipeline_arc_project_arc_project_id=current_row.arc_project_id
        LOOP
          PERFORM  a_arc_project_pipeline( parent_row.arc_pipelinedata_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_project( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_project.*, meta.meta_data_id FROM arc_project LEFT JOIN arc_project_meta_data meta ON arc_project.project_info=meta.meta_data_id WHERE  arc_project_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION arc:ArchiveSpecification/projects/project
        IF ((current_row.projects_project_arc_ArchiveSpe_arc_archivespecification_id IS NOT NULL)) THEN
        PERFORM update_ls_arc_ArchiveSpecification(current_row.projects_project_arc_ArchiveSpe_arc_archivespecification_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_project()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_project( OLD.arc_project_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_project','CREATE TRIGGER a_u_arc_project  AFTER UPDATE OR DELETE ON arc_project FOR EACH ROW EXECUTE PROCEDURE after_update_arc_project()');
--BR



CREATE OR REPLACE FUNCTION i_arc_ArchiveSpecification( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(arc:ArchiveSpecification)('';
      FOR current_row IN SELECT * FROM arc_ArchiveSpecification WHERE  arc_archivespecification_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.globalpaths_arc_pathinfo_id IS NOT NULL)) THEN
            fullText := fullText || ''(globalpaths_arc_pathinfo_id:integer)=('' || current_row.globalpaths_arc_pathinfo_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_pathInfo(current_row.globalpaths_arc_pathinfo_id, child_count,$3,false,false);
              fullText := fullText || ''(globalpaths_pathinfo:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_fieldSpecification WHERE fieldspecifications_fieldspecif_arc_archivespecification_id=current_row.arc_archivespecification_id ORDER BY arc_fieldspecification_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_fieldSpecification( parent_row.arc_fieldspecification_id, child_count,$3,false,false);
              fullText := fullText || ''(fieldspecifications_fieldspecification_fieldspecification'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project WHERE projects_project_arc_ArchiveSpe_arc_archivespecification_id=current_row.arc_archivespecification_id ORDER BY arc_project_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_project( parent_row.arc_project_id, child_count,$3,false,false);
              fullText := fullText || ''(projects_project_project'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.emailspecifications_new_user_registration IS NOT NULL) THEN 
              fullText := fullText || ''(emailspecifications_new_user_registration:integer)=('' || current_row.emailspecifications_new_user_registration || '')'';
          END IF;
          IF (current_row.emailspecifications_pipeline IS NOT NULL) THEN 
              fullText := fullText || ''(emailspecifications_pipeline:integer)=('' || current_row.emailspecifications_pipeline || '')'';
          END IF;
          IF (current_row.emailspecifications_project_access IS NOT NULL) THEN 
              fullText := fullText || ''(emailspecifications_project_access:integer)=('' || current_row.emailspecifications_project_access || '')'';
          END IF;
          IF (current_row.emailspecifications_transfer IS NOT NULL) THEN 
              fullText := fullText || ''(emailspecifications_transfer:integer)=('' || current_row.emailspecifications_transfer || '')'';
          END IF;
          IF (current_row.emailspecifications_page_email IS NOT NULL) THEN 
              fullText := fullText || ''(emailspecifications_page_email:integer)=('' || current_row.emailspecifications_page_email || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_ArchiveSpecification_notification_type WHERE notification_types_notification_arc_archivespecification_id=current_row.arc_archivespecification_id ORDER BY arc_archivespecification_notification_type_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_ArchiveSpecification_notification_type( parent_row.arc_archivespecification_notification_type_id, child_count,$3,false,false);
              fullText := fullText || ''(notification_types_notification_type_archivespecification_notification_type'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.dcm_dcm_host IS NOT NULL) THEN 
              fullText := fullText || ''(dcm_dcm_host:string)=('' || REPLACE(REPLACE(current_row.dcm_dcm_host,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcm_dcm_port IS NOT NULL) THEN 
              fullText := fullText || ''(dcm_dcm_port:string)=('' || REPLACE(REPLACE(current_row.dcm_dcm_port,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcm_dcm_ae IS NOT NULL) THEN 
              fullText := fullText || ''(dcm_dcm_ae:string)=('' || REPLACE(REPLACE(current_row.dcm_dcm_ae,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcm_http_url IS NOT NULL) THEN 
              fullText := fullText || ''(dcm_http_url:string)=('' || REPLACE(REPLACE(current_row.dcm_http_url,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dcm_applet_link IS NOT NULL) THEN 
              fullText := fullText || ''(dcm_applet_link:integer)=('' || current_row.dcm_applet_link || '')'';
          END IF;
          IF (current_row.site_id IS NOT NULL) THEN 
              fullText := fullText || ''(site_id:string)=('' || REPLACE(REPLACE(current_row.site_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.site_admin_email IS NOT NULL) THEN 
              fullText := fullText || ''(site_admin_email:string)=('' || REPLACE(REPLACE(current_row.site_admin_email,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.site_url IS NOT NULL) THEN 
              fullText := fullText || ''(site_url:string)=('' || REPLACE(REPLACE(current_row.site_url,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.smtp_host IS NOT NULL) THEN 
              fullText := fullText || ''(smtp_host:string)=('' || REPLACE(REPLACE(current_row.smtp_host,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.require_login IS NOT NULL) THEN 
              fullText := fullText || ''(require_login:integer)=('' || current_row.require_login || '')'';
          END IF;
          IF (current_row.enable_new_registrations IS NOT NULL) THEN 
              fullText := fullText || ''(enable_new_registrations:integer)=('' || current_row.enable_new_registrations || '')'';
          END IF;
          IF (current_row.enable_csrf_token IS NOT NULL) THEN 
              fullText := fullText || ''(enable_csrf_token:integer)=('' || current_row.enable_csrf_token || '')'';
          END IF;
          IF (current_row.quarantine_code IS NOT NULL) THEN 
              fullText := fullText || ''(quarantine_code:integer)=('' || current_row.quarantine_code || '')'';
          END IF;
          IF (current_row.prearchive_code IS NOT NULL) THEN 
              fullText := fullText || ''(prearchive_code:integer)=('' || current_row.prearchive_code || '')'';
          END IF;
        IF ((current_row.ArchiveSpecification_info IS NOT NULL)) THEN
            fullText := fullText || ''(archivespecification_info:integer)=('' || current_row.archivespecification_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_arc_ArchiveSpecification_meta_data(current_row.ArchiveSpecification_info, child_count,$3,false,false);
              fullText := fullText || ''(archivespecification_info_archivespecification_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.arc_archivespecification_id IS NOT NULL) THEN 
              fullText := fullText || ''(arc_archivespecification_id:integer)=('' || current_row.arc_archivespecification_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_arc_ArchiveSpecification( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_ArchiveSpecification.*, meta.meta_data_id, meta.status AS meta_status FROM arc_ArchiveSpecification LEFT JOIN arc_ArchiveSpecification_meta_data meta ON arc_ArchiveSpecification.ArchiveSpecification_info=meta.meta_data_id WHERE  arc_archivespecification_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE arc_ArchiveSpecification_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.globalpaths_arc_pathinfo_id IS NOT NULL)) THEN
          PERFORM  a_arc_pathInfo(current_row.globalpaths_arc_pathinfo_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_fieldSpecification WHERE fieldspecifications_fieldspecif_arc_archivespecification_id=current_row.arc_archivespecification_id
        LOOP
          PERFORM  a_arc_fieldSpecification( parent_row.arc_fieldspecification_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_project WHERE projects_project_arc_ArchiveSpe_arc_archivespecification_id=current_row.arc_archivespecification_id
        LOOP
          PERFORM  a_arc_project( parent_row.arc_project_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM arc_ArchiveSpecification_notification_type WHERE notification_types_notification_arc_archivespecification_id=current_row.arc_archivespecification_id
        LOOP
          PERFORM  a_arc_ArchiveSpecification_notification_type( parent_row.arc_archivespecification_notification_type_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_arc_ArchiveSpecification( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''arc:ArchiveSpecification'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT arc_ArchiveSpecification.*, meta.meta_data_id FROM arc_ArchiveSpecification LEFT JOIN arc_ArchiveSpecification_meta_data meta ON arc_ArchiveSpecification.ArchiveSpecification_info=meta.meta_data_id WHERE  arc_archivespecification_id=$1
      LOOP
         UPDATE arc_ArchiveSpecification_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_arc_ArchiveSpecification()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_arc_ArchiveSpecification( OLD.arc_archivespecification_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_arc_ArchiveSpecification','CREATE TRIGGER a_u_arc_ArchiveSpecification  AFTER UPDATE OR DELETE ON arc_ArchiveSpecification FOR EACH ROW EXECUTE PROCEDURE after_update_arc_ArchiveSpecification()');
--BR



CREATE OR REPLACE FUNCTION i_ext_clinicalAssessmentData_Medication_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:clinicalAssessmentData_Medication_meta_data)('';
      FOR current_row IN SELECT * FROM ext_clinicalAssessmentData_Medication_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_ext_clinicalAssessmentData_Medication( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:clinicalAssessmentData_Medication)('';
      FOR current_row IN SELECT * FROM ext_clinicalAssessmentData_Medication WHERE  ext_clinicalassessmentdata_medication_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dose IS NOT NULL) THEN 
              fullText := fullText || ''(dose:string)=('' || REPLACE(REPLACE(current_row.dose,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.history IS NOT NULL) THEN 
              fullText := fullText || ''(history:string)=('' || REPLACE(REPLACE(current_row.history,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.clinicalAssessmentData_Medication_info IS NOT NULL)) THEN
            fullText := fullText || ''(clinicalassessmentdata_medication_info:integer)=('' || current_row.clinicalassessmentdata_medication_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_clinicalAssessmentData_Medication_meta_data(current_row.clinicalAssessmentData_Medication_info, child_count,$3,false,false);
              fullText := fullText || ''(clinicalassessmentdata_medication_info_clinicalassessmentdata_medication_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.ext_clinicalAssessmentData_id IS NOT NULL)) THEN
            fullText := fullText || ''(ext_clinicalassessmentdata_id:string)=('' || current_row.ext_clinicalassessmentdata_id || '')'';
        END IF;
          IF (current_row.ext_clinicalassessmentdata_medication_id IS NOT NULL) THEN 
              fullText := fullText || ''(ext_clinicalassessmentdata_medication_id:integer)=('' || current_row.ext_clinicalassessmentdata_medication_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_ext_clinicalAssessmentData_Medication( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT ext_clinicalAssessmentData_Medication.*, meta.meta_data_id, meta.status AS meta_status FROM ext_clinicalAssessmentData_Medication LEFT JOIN ext_clinicalAssessmentData_Medication_meta_data meta ON ext_clinicalAssessmentData_Medication.clinicalAssessmentData_Medication_info=meta.meta_data_id WHERE  ext_clinicalassessmentdata_medication_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE ext_clinicalAssessmentData_Medication_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_clinicalAssessmentData_Medication( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT ext_clinicalAssessmentData_Medication.*, meta.meta_data_id FROM ext_clinicalAssessmentData_Medication LEFT JOIN ext_clinicalAssessmentData_Medication_meta_data meta ON ext_clinicalAssessmentData_Medication.clinicalAssessmentData_Medication_info=meta.meta_data_id WHERE  ext_clinicalassessmentdata_medication_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION ext:clinicalAssessmentData/Medication
        IF ((current_row.ext_clinicalAssessmentData_id IS NOT NULL)) THEN
        PERFORM update_ls_ext_clinicalAssessmentData(current_row.ext_clinicalAssessmentData_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_ext_clinicalAssessmentData_Medication()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_ext_clinicalAssessmentData_Medication( OLD.ext_clinicalassessmentdata_medication_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_ext_clinicalAssessmentData_Medication','CREATE TRIGGER a_u_ext_clinicalAssessmentData_Medication  AFTER UPDATE OR DELETE ON ext_clinicalAssessmentData_Medication FOR EACH ROW EXECUTE PROCEDURE after_update_ext_clinicalAssessmentData_Medication()');
--BR



CREATE OR REPLACE FUNCTION i_ext_atlasScalingFactorData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:atlasScalingFactorData_history)('';
      FOR current_row IN SELECT * FROM ext_atlasScalingFactorData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_mrAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_mrAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.scalingfactor IS NOT NULL) THEN 
              fullText := fullText || ''(scalingfactor:float)=('' || current_row.scalingfactor || '')'';
          END IF;
          IF (current_row.eta IS NOT NULL) THEN 
              fullText := fullText || ''(eta:float)=('' || current_row.eta || '')'';
          END IF;
          IF (current_row.eicv IS NOT NULL) THEN 
              fullText := fullText || ''(eicv:float)=('' || current_row.eicv || '')'';
          END IF;
          IF (current_row.basescannumber IS NOT NULL) THEN 
              fullText := fullText || ''(basescannumber:string)=('' || REPLACE(REPLACE(current_row.basescannumber,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.atlasScalingFactorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(atlasscalingfactordata_info:integer)=('' || current_row.atlasscalingfactordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_atlasScalingFactorData_meta_data(current_row.atlasScalingFactorData_info, child_count,$3,false,false);
              fullText := fullText || ''(atlasscalingfactordata_info_atlasscalingfactordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_mrAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_ext_clinicalAssessmentData_Diagnosis_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:clinicalAssessmentData_Diagnosis_history)('';
      FOR current_row IN SELECT * FROM ext_clinicalAssessmentData_Diagnosis_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.diagnosis IS NOT NULL) THEN 
              fullText := fullText || ''(diagnosis:string)=('' || REPLACE(REPLACE(current_row.diagnosis,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.number IS NOT NULL) THEN 
              fullText := fullText || ''(number:integer)=('' || current_row.number || '')'';
          END IF;
        IF ((current_row.clinicalAssessmentData_Diagnosis_info IS NOT NULL)) THEN
            fullText := fullText || ''(clinicalassessmentdata_diagnosis_info:integer)=('' || current_row.clinicalassessmentdata_diagnosis_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_clinicalAssessmentData_Diagnosis_meta_data(current_row.clinicalAssessmentData_Diagnosis_info, child_count,$3,false,false);
              fullText := fullText || ''(clinicalassessmentdata_diagnosis_info_clinicalassessmentdata_diagnosis_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.ext_clinicalAssessmentData_id IS NOT NULL)) THEN
            fullText := fullText || ''(ext_clinicalassessmentdata_id:string)=('' || current_row.ext_clinicalassessmentdata_id || '')'';
        END IF;
          IF (current_row.ext_clinicalassessmentdata_diagnosis_id IS NOT NULL) THEN 
              fullText := fullText || ''(ext_clinicalassessmentdata_diagnosis_id:integer)=('' || current_row.ext_clinicalassessmentdata_diagnosis_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_ext_clinicalAssessmentData_Medication_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:clinicalAssessmentData_Medication_history)('';
      FOR current_row IN SELECT * FROM ext_clinicalAssessmentData_Medication_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.dose IS NOT NULL) THEN 
              fullText := fullText || ''(dose:string)=('' || REPLACE(REPLACE(current_row.dose,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.history IS NOT NULL) THEN 
              fullText := fullText || ''(history:string)=('' || REPLACE(REPLACE(current_row.history,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.clinicalAssessmentData_Medication_info IS NOT NULL)) THEN
            fullText := fullText || ''(clinicalassessmentdata_medication_info:integer)=('' || current_row.clinicalassessmentdata_medication_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_clinicalAssessmentData_Medication_meta_data(current_row.clinicalAssessmentData_Medication_info, child_count,$3,false,false);
              fullText := fullText || ''(clinicalassessmentdata_medication_info_clinicalassessmentdata_medication_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.ext_clinicalAssessmentData_id IS NOT NULL)) THEN
            fullText := fullText || ''(ext_clinicalassessmentdata_id:string)=('' || current_row.ext_clinicalassessmentdata_id || '')'';
        END IF;
          IF (current_row.ext_clinicalassessmentdata_medication_id IS NOT NULL) THEN 
              fullText := fullText || ''(ext_clinicalassessmentdata_medication_id:integer)=('' || current_row.ext_clinicalassessmentdata_medication_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_ext_segmentationFastData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:segmentationFastData_history)('';
      FOR current_row IN SELECT * FROM ext_segmentationFastData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_mrAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_mrAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF ((current_row.brainvolume_xnat_volumetricregion_id IS NOT NULL)) THEN
            fullText := fullText || ''(brainvolume_xnat_volumetricregion_id:integer)=('' || current_row.brainvolume_xnat_volumetricregion_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM xnat_volumetricRegion_history WHERE  xnat_volumetricregion_id=current_row.brainvolume_xnat_volumetricregion_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_volumetricRegion_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(brainvolume_volumetricregion:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.brainpercent IS NOT NULL) THEN 
              fullText := fullText || ''(brainpercent:float)=('' || current_row.brainpercent || '')'';
          END IF;
        IF ((current_row.segmentationFastData_info IS NOT NULL)) THEN
            fullText := fullText || ''(segmentationfastdata_info:integer)=('' || current_row.segmentationfastdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_segmentationFastData_meta_data(current_row.segmentationFastData_info, child_count,$3,false,false);
              fullText := fullText || ''(segmentationfastdata_info_segmentationfastdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_mrAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_ext_clinicalAssessmentData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:clinicalAssessmentData_history)('';
      FOR current_row IN SELECT * FROM ext_clinicalAssessmentData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_subjectAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_subjectAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM ext_clinicalAssessmentData_Diagnosis_history WHERE ext_clinicalAssessmentData_id=current_row.id AND xft_version=current_row.xft_version ORDER BY ext_clinicalassessmentdata_diagnosis_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_clinicalAssessmentData_Diagnosis_history( parent_row.ext_clinicalassessmentdata_diagnosis_id, child_count,$3,false,false);
              fullText := fullText || ''(diagnosis_clinicalassessmentdata_diagnosis'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.bloodpressure_highbp_cs_bool IS NOT NULL) THEN 
              fullText := fullText || ''(bloodpressure_highbp_cs_bool:integer)=('' || current_row.bloodpressure_highbp_cs_bool || '')'';
          END IF;
          IF (current_row.bloodpressure_systolic IS NOT NULL) THEN 
              fullText := fullText || ''(bloodpressure_systolic:integer)=('' || current_row.bloodpressure_systolic || '')'';
          END IF;
          IF (current_row.bloodpressure_diastolic IS NOT NULL) THEN 
              fullText := fullText || ''(bloodpressure_diastolic:integer)=('' || current_row.bloodpressure_diastolic || '')'';
          END IF;
          IF (current_row.neuro_sbt IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_sbt:integer)=('' || current_row.neuro_sbt || '')'';
          END IF;
          IF (current_row.neuro_mmse IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_mmse:integer)=('' || current_row.neuro_mmse || '')'';
          END IF;
          IF (current_row.neuro_bdsc IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_bdsc:float)=('' || current_row.neuro_bdsc || '')'';
          END IF;
          IF (current_row.neuro_cdr_memory IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_memory:float)=('' || current_row.neuro_cdr_memory || '')'';
          END IF;
          IF (current_row.neuro_cdr_orientation IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_orientation:float)=('' || current_row.neuro_cdr_orientation || '')'';
          END IF;
          IF (current_row.neuro_cdr_judgment_problem_solving IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_judgment_problem_solving:float)=('' || current_row.neuro_cdr_judgment_problem_solving || '')'';
          END IF;
          IF (current_row.neuro_cdr_community_affairs IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_community_affairs:float)=('' || current_row.neuro_cdr_community_affairs || '')'';
          END IF;
          IF (current_row.neuro_cdr_home_hobbies IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_home_hobbies:float)=('' || current_row.neuro_cdr_home_hobbies || '')'';
          END IF;
          IF (current_row.neuro_cdr_personal_care IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_personal_care:float)=('' || current_row.neuro_cdr_personal_care || '')'';
          END IF;
          IF (current_row.neuro_cdr_sumbox IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_sumbox:float)=('' || current_row.neuro_cdr_sumbox || '')'';
          END IF;
          IF (current_row.neuro_cdr_rating IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_rating:float)=('' || current_row.neuro_cdr_rating || '')'';
          END IF;
          IF (current_row.neuro_thinkingproblem_s_bool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_thinkingproblem_s_bool:integer)=('' || current_row.neuro_thinkingproblem_s_bool || '')'';
          END IF;
          IF (current_row.neuro_thinkingproblem_cs_bool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_thinkingproblem_cs_bool:integer)=('' || current_row.neuro_thinkingproblem_cs_bool || '')'';
          END IF;
          IF (current_row.neuro_consmemoryproblem_bool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_consmemoryproblem_bool:integer)=('' || current_row.neuro_consmemoryproblem_bool || '')'';
          END IF;
          IF (current_row.neuro_strokebool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_strokebool:integer)=('' || current_row.neuro_strokebool || '')'';
          END IF;
          IF (current_row.neuro_sx_stroke_bool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_sx_stroke_bool:integer)=('' || current_row.neuro_sx_stroke_bool || '')'';
          END IF;
          IF (current_row.neuro_sx_tia_bool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_sx_tia_bool:integer)=('' || current_row.neuro_sx_tia_bool || '')'';
          END IF;
          IF (current_row.movement_spasticity_bool IS NOT NULL) THEN 
              fullText := fullText || ''(movement_spasticity_bool:integer)=('' || current_row.movement_spasticity_bool || '')'';
          END IF;
          IF (current_row.movement_rigid IS NOT NULL) THEN 
              fullText := fullText || ''(movement_rigid:integer)=('' || current_row.movement_rigid || '')'';
          END IF;
          IF (current_row.movement_bradyk_bool IS NOT NULL) THEN 
              fullText := fullText || ''(movement_bradyk_bool:integer)=('' || current_row.movement_bradyk_bool || '')'';
          END IF;
          IF (current_row.movement_gait IS NOT NULL) THEN 
              fullText := fullText || ''(movement_gait:integer)=('' || current_row.movement_gait || '')'';
          END IF;
          IF (current_row.movement_abnormalgait_bool IS NOT NULL) THEN 
              fullText := fullText || ''(movement_abnormalgait_bool:integer)=('' || current_row.movement_abnormalgait_bool || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM ext_clinicalAssessmentData_Medication_history WHERE ext_clinicalAssessmentData_id=current_row.id AND xft_version=current_row.xft_version ORDER BY ext_clinicalassessmentdata_medication_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_clinicalAssessmentData_Medication_history( parent_row.ext_clinicalassessmentdata_medication_id, child_count,$3,false,false);
              fullText := fullText || ''(medication_clinicalassessmentdata_medication'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.weight IS NOT NULL) THEN 
              fullText := fullText || ''(weight:integer)=('' || current_row.weight || '')'';
          END IF;
          IF (current_row.diabetes_bool IS NOT NULL) THEN 
              fullText := fullText || ''(diabetes_bool:integer)=('' || current_row.diabetes_bool || '')'';
          END IF;
          IF (current_row.heartproblems_bool IS NOT NULL) THEN 
              fullText := fullText || ''(heartproblems_bool:integer)=('' || current_row.heartproblems_bool || '')'';
          END IF;
          IF (current_row.tobaccouse_bool IS NOT NULL) THEN 
              fullText := fullText || ''(tobaccouse_bool:integer)=('' || current_row.tobaccouse_bool || '')'';
          END IF;
        IF ((current_row.clinicalAssessmentData_info IS NOT NULL)) THEN
            fullText := fullText || ''(clinicalassessmentdata_info:integer)=('' || current_row.clinicalassessmentdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_clinicalAssessmentData_meta_data(current_row.clinicalAssessmentData_info, child_count,$3,false,false);
              fullText := fullText || ''(clinicalassessmentdata_info_clinicalassessmentdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_ext_segmentationFastData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:segmentationFastData_meta_data)('';
      FOR current_row IN SELECT * FROM ext_segmentationFastData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_ext_segmentationFastData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:segmentationFastData)('';
      FOR current_row IN SELECT * FROM ext_segmentationFastData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_mrAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.brainvolume_xnat_volumetricregion_id IS NOT NULL)) THEN
            fullText := fullText || ''(brainvolume_xnat_volumetricregion_id:integer)=('' || current_row.brainvolume_xnat_volumetricregion_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xnat_volumetricRegion(current_row.brainvolume_xnat_volumetricregion_id, child_count,$3,false,false);
              fullText := fullText || ''(brainvolume_volumetricregion:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.brainpercent IS NOT NULL) THEN 
              fullText := fullText || ''(brainpercent:float)=('' || current_row.brainpercent || '')'';
          END IF;
        IF ((current_row.segmentationFastData_info IS NOT NULL)) THEN
            fullText := fullText || ''(segmentationfastdata_info:integer)=('' || current_row.segmentationfastdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_segmentationFastData_meta_data(current_row.segmentationFastData_info, child_count,$3,false,false);
              fullText := fullText || ''(segmentationfastdata_info_segmentationfastdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_mrAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_ext_segmentationFastData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT ext_segmentationFastData.*, meta.meta_data_id, meta.status AS meta_status FROM ext_segmentationFastData LEFT JOIN ext_segmentationFastData_meta_data meta ON ext_segmentationFastData.segmentationFastData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE ext_segmentationFastData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_mrAssessorData(current_row.id, $2,$3,false);
        END IF;
        IF ((current_row.brainvolume_xnat_volumetricregion_id IS NOT NULL)) THEN
          PERFORM  a_xnat_volumetricRegion(current_row.brainvolume_xnat_volumetricregion_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_mrAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_segmentationFastData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''ext:segmentationFastData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT ext_segmentationFastData.*, meta.meta_data_id FROM ext_segmentationFastData LEFT JOIN ext_segmentationFastData_meta_data meta ON ext_segmentationFastData.segmentationFastData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE ext_segmentationFastData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_mrAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_ext_segmentationFastData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_ext_segmentationFastData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_ext_segmentationFastData','CREATE TRIGGER a_u_ext_segmentationFastData  AFTER UPDATE OR DELETE ON ext_segmentationFastData FOR EACH ROW EXECUTE PROCEDURE after_update_ext_segmentationFastData()');
--BR



CREATE OR REPLACE FUNCTION i_ext_atlasScalingFactorData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:atlasScalingFactorData_meta_data)('';
      FOR current_row IN SELECT * FROM ext_atlasScalingFactorData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_ext_atlasScalingFactorData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:atlasScalingFactorData)('';
      FOR current_row IN SELECT * FROM ext_atlasScalingFactorData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_mrAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.scalingfactor IS NOT NULL) THEN 
              fullText := fullText || ''(scalingfactor:float)=('' || current_row.scalingfactor || '')'';
          END IF;
          IF (current_row.eta IS NOT NULL) THEN 
              fullText := fullText || ''(eta:float)=('' || current_row.eta || '')'';
          END IF;
          IF (current_row.eicv IS NOT NULL) THEN 
              fullText := fullText || ''(eicv:float)=('' || current_row.eicv || '')'';
          END IF;
          IF (current_row.basescannumber IS NOT NULL) THEN 
              fullText := fullText || ''(basescannumber:string)=('' || REPLACE(REPLACE(current_row.basescannumber,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.atlasScalingFactorData_info IS NOT NULL)) THEN
            fullText := fullText || ''(atlasscalingfactordata_info:integer)=('' || current_row.atlasscalingfactordata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_atlasScalingFactorData_meta_data(current_row.atlasScalingFactorData_info, child_count,$3,false,false);
              fullText := fullText || ''(atlasscalingfactordata_info_atlasscalingfactordata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_mrAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(mrassessordata_mrassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_ext_atlasScalingFactorData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT ext_atlasScalingFactorData.*, meta.meta_data_id, meta.status AS meta_status FROM ext_atlasScalingFactorData LEFT JOIN ext_atlasScalingFactorData_meta_data meta ON ext_atlasScalingFactorData.atlasScalingFactorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE ext_atlasScalingFactorData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_mrAssessorData(current_row.id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_mrAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_atlasScalingFactorData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''ext:atlasScalingFactorData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT ext_atlasScalingFactorData.*, meta.meta_data_id FROM ext_atlasScalingFactorData LEFT JOIN ext_atlasScalingFactorData_meta_data meta ON ext_atlasScalingFactorData.atlasScalingFactorData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE ext_atlasScalingFactorData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_mrAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_ext_atlasScalingFactorData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_ext_atlasScalingFactorData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_ext_atlasScalingFactorData','CREATE TRIGGER a_u_ext_atlasScalingFactorData  AFTER UPDATE OR DELETE ON ext_atlasScalingFactorData FOR EACH ROW EXECUTE PROCEDURE after_update_ext_atlasScalingFactorData()');
--BR



CREATE OR REPLACE FUNCTION i_ext_clinicalAssessmentData_Diagnosis_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:clinicalAssessmentData_Diagnosis_meta_data)('';
      FOR current_row IN SELECT * FROM ext_clinicalAssessmentData_Diagnosis_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_ext_clinicalAssessmentData_Diagnosis( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:clinicalAssessmentData_Diagnosis)('';
      FOR current_row IN SELECT * FROM ext_clinicalAssessmentData_Diagnosis WHERE  ext_clinicalassessmentdata_diagnosis_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.diagnosis IS NOT NULL) THEN 
              fullText := fullText || ''(diagnosis:string)=('' || REPLACE(REPLACE(current_row.diagnosis,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.number IS NOT NULL) THEN 
              fullText := fullText || ''(number:integer)=('' || current_row.number || '')'';
          END IF;
        IF ((current_row.clinicalAssessmentData_Diagnosis_info IS NOT NULL)) THEN
            fullText := fullText || ''(clinicalassessmentdata_diagnosis_info:integer)=('' || current_row.clinicalassessmentdata_diagnosis_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_clinicalAssessmentData_Diagnosis_meta_data(current_row.clinicalAssessmentData_Diagnosis_info, child_count,$3,false,false);
              fullText := fullText || ''(clinicalassessmentdata_diagnosis_info_clinicalassessmentdata_diagnosis_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.ext_clinicalAssessmentData_id IS NOT NULL)) THEN
            fullText := fullText || ''(ext_clinicalassessmentdata_id:string)=('' || current_row.ext_clinicalassessmentdata_id || '')'';
        END IF;
          IF (current_row.ext_clinicalassessmentdata_diagnosis_id IS NOT NULL) THEN 
              fullText := fullText || ''(ext_clinicalassessmentdata_diagnosis_id:integer)=('' || current_row.ext_clinicalassessmentdata_diagnosis_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_ext_clinicalAssessmentData_Diagnosis( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT ext_clinicalAssessmentData_Diagnosis.*, meta.meta_data_id, meta.status AS meta_status FROM ext_clinicalAssessmentData_Diagnosis LEFT JOIN ext_clinicalAssessmentData_Diagnosis_meta_data meta ON ext_clinicalAssessmentData_Diagnosis.clinicalAssessmentData_Diagnosis_info=meta.meta_data_id WHERE  ext_clinicalassessmentdata_diagnosis_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE ext_clinicalAssessmentData_Diagnosis_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_clinicalAssessmentData_Diagnosis( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT ext_clinicalAssessmentData_Diagnosis.*, meta.meta_data_id FROM ext_clinicalAssessmentData_Diagnosis LEFT JOIN ext_clinicalAssessmentData_Diagnosis_meta_data meta ON ext_clinicalAssessmentData_Diagnosis.clinicalAssessmentData_Diagnosis_info=meta.meta_data_id WHERE  ext_clinicalassessmentdata_diagnosis_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION ext:clinicalAssessmentData/Diagnosis
        IF ((current_row.ext_clinicalAssessmentData_id IS NOT NULL)) THEN
        PERFORM update_ls_ext_clinicalAssessmentData(current_row.ext_clinicalAssessmentData_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_ext_clinicalAssessmentData_Diagnosis()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_ext_clinicalAssessmentData_Diagnosis( OLD.ext_clinicalassessmentdata_diagnosis_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_ext_clinicalAssessmentData_Diagnosis','CREATE TRIGGER a_u_ext_clinicalAssessmentData_Diagnosis  AFTER UPDATE OR DELETE ON ext_clinicalAssessmentData_Diagnosis FOR EACH ROW EXECUTE PROCEDURE after_update_ext_clinicalAssessmentData_Diagnosis()');
--BR



CREATE OR REPLACE FUNCTION i_ext_clinicalAssessmentData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:clinicalAssessmentData_meta_data)('';
      FOR current_row IN SELECT * FROM ext_clinicalAssessmentData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_ext_clinicalAssessmentData( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(ext:clinicalAssessmentData)('';
      FOR current_row IN SELECT * FROM ext_clinicalAssessmentData WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM ext_clinicalAssessmentData_Diagnosis WHERE ext_clinicalAssessmentData_id=current_row.id ORDER BY ext_clinicalassessmentdata_diagnosis_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_clinicalAssessmentData_Diagnosis( parent_row.ext_clinicalassessmentdata_diagnosis_id, child_count,$3,false,false);
              fullText := fullText || ''(diagnosis_clinicalassessmentdata_diagnosis'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.bloodpressure_highbp_cs_bool IS NOT NULL) THEN 
              fullText := fullText || ''(bloodpressure_highbp_cs_bool:integer)=('' || current_row.bloodpressure_highbp_cs_bool || '')'';
          END IF;
          IF (current_row.bloodpressure_systolic IS NOT NULL) THEN 
              fullText := fullText || ''(bloodpressure_systolic:integer)=('' || current_row.bloodpressure_systolic || '')'';
          END IF;
          IF (current_row.bloodpressure_diastolic IS NOT NULL) THEN 
              fullText := fullText || ''(bloodpressure_diastolic:integer)=('' || current_row.bloodpressure_diastolic || '')'';
          END IF;
          IF (current_row.neuro_sbt IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_sbt:integer)=('' || current_row.neuro_sbt || '')'';
          END IF;
          IF (current_row.neuro_mmse IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_mmse:integer)=('' || current_row.neuro_mmse || '')'';
          END IF;
          IF (current_row.neuro_bdsc IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_bdsc:float)=('' || current_row.neuro_bdsc || '')'';
          END IF;
          IF (current_row.neuro_cdr_memory IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_memory:float)=('' || current_row.neuro_cdr_memory || '')'';
          END IF;
          IF (current_row.neuro_cdr_orientation IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_orientation:float)=('' || current_row.neuro_cdr_orientation || '')'';
          END IF;
          IF (current_row.neuro_cdr_judgment_problem_solving IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_judgment_problem_solving:float)=('' || current_row.neuro_cdr_judgment_problem_solving || '')'';
          END IF;
          IF (current_row.neuro_cdr_community_affairs IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_community_affairs:float)=('' || current_row.neuro_cdr_community_affairs || '')'';
          END IF;
          IF (current_row.neuro_cdr_home_hobbies IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_home_hobbies:float)=('' || current_row.neuro_cdr_home_hobbies || '')'';
          END IF;
          IF (current_row.neuro_cdr_personal_care IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_personal_care:float)=('' || current_row.neuro_cdr_personal_care || '')'';
          END IF;
          IF (current_row.neuro_cdr_sumbox IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_sumbox:float)=('' || current_row.neuro_cdr_sumbox || '')'';
          END IF;
          IF (current_row.neuro_cdr_rating IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_cdr_rating:float)=('' || current_row.neuro_cdr_rating || '')'';
          END IF;
          IF (current_row.neuro_thinkingproblem_s_bool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_thinkingproblem_s_bool:integer)=('' || current_row.neuro_thinkingproblem_s_bool || '')'';
          END IF;
          IF (current_row.neuro_thinkingproblem_cs_bool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_thinkingproblem_cs_bool:integer)=('' || current_row.neuro_thinkingproblem_cs_bool || '')'';
          END IF;
          IF (current_row.neuro_consmemoryproblem_bool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_consmemoryproblem_bool:integer)=('' || current_row.neuro_consmemoryproblem_bool || '')'';
          END IF;
          IF (current_row.neuro_strokebool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_strokebool:integer)=('' || current_row.neuro_strokebool || '')'';
          END IF;
          IF (current_row.neuro_sx_stroke_bool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_sx_stroke_bool:integer)=('' || current_row.neuro_sx_stroke_bool || '')'';
          END IF;
          IF (current_row.neuro_sx_tia_bool IS NOT NULL) THEN 
              fullText := fullText || ''(neuro_sx_tia_bool:integer)=('' || current_row.neuro_sx_tia_bool || '')'';
          END IF;
          IF (current_row.movement_spasticity_bool IS NOT NULL) THEN 
              fullText := fullText || ''(movement_spasticity_bool:integer)=('' || current_row.movement_spasticity_bool || '')'';
          END IF;
          IF (current_row.movement_rigid IS NOT NULL) THEN 
              fullText := fullText || ''(movement_rigid:integer)=('' || current_row.movement_rigid || '')'';
          END IF;
          IF (current_row.movement_bradyk_bool IS NOT NULL) THEN 
              fullText := fullText || ''(movement_bradyk_bool:integer)=('' || current_row.movement_bradyk_bool || '')'';
          END IF;
          IF (current_row.movement_gait IS NOT NULL) THEN 
              fullText := fullText || ''(movement_gait:integer)=('' || current_row.movement_gait || '')'';
          END IF;
          IF (current_row.movement_abnormalgait_bool IS NOT NULL) THEN 
              fullText := fullText || ''(movement_abnormalgait_bool:integer)=('' || current_row.movement_abnormalgait_bool || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM ext_clinicalAssessmentData_Medication WHERE ext_clinicalAssessmentData_id=current_row.id ORDER BY ext_clinicalassessmentdata_medication_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_clinicalAssessmentData_Medication( parent_row.ext_clinicalassessmentdata_medication_id, child_count,$3,false,false);
              fullText := fullText || ''(medication_clinicalassessmentdata_medication'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.weight IS NOT NULL) THEN 
              fullText := fullText || ''(weight:integer)=('' || current_row.weight || '')'';
          END IF;
          IF (current_row.diabetes_bool IS NOT NULL) THEN 
              fullText := fullText || ''(diabetes_bool:integer)=('' || current_row.diabetes_bool || '')'';
          END IF;
          IF (current_row.heartproblems_bool IS NOT NULL) THEN 
              fullText := fullText || ''(heartproblems_bool:integer)=('' || current_row.heartproblems_bool || '')'';
          END IF;
          IF (current_row.tobaccouse_bool IS NOT NULL) THEN 
              fullText := fullText || ''(tobaccouse_bool:integer)=('' || current_row.tobaccouse_bool || '')'';
          END IF;
        IF ((current_row.clinicalAssessmentData_info IS NOT NULL)) THEN
            fullText := fullText || ''(clinicalassessmentdata_info:integer)=('' || current_row.clinicalassessmentdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_ext_clinicalAssessmentData_meta_data(current_row.clinicalAssessmentData_info, child_count,$3,false,false);
              fullText := fullText || ''(clinicalassessmentdata_info_clinicalassessmentdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_subjectAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(subjectassessordata_subjectassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_ext_clinicalAssessmentData( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT ext_clinicalAssessmentData.*, meta.meta_data_id, meta.status AS meta_status FROM ext_clinicalAssessmentData LEFT JOIN ext_clinicalAssessmentData_meta_data meta ON ext_clinicalAssessmentData.clinicalAssessmentData_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE ext_clinicalAssessmentData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_subjectAssessorData(current_row.id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM ext_clinicalAssessmentData_Diagnosis WHERE ext_clinicalAssessmentData_id=current_row.id
        LOOP
          PERFORM  a_ext_clinicalAssessmentData_Diagnosis( parent_row.ext_clinicalassessmentdata_diagnosis_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM ext_clinicalAssessmentData_Medication WHERE ext_clinicalAssessmentData_id=current_row.id
        LOOP
          PERFORM  a_ext_clinicalAssessmentData_Medication( parent_row.ext_clinicalassessmentdata_medication_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_subjectAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_clinicalAssessmentData( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''ext:clinicalAssessmentData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT ext_clinicalAssessmentData.*, meta.meta_data_id FROM ext_clinicalAssessmentData LEFT JOIN ext_clinicalAssessmentData_meta_data meta ON ext_clinicalAssessmentData.clinicalAssessmentData_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE ext_clinicalAssessmentData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_subjectAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_ext_clinicalAssessmentData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_ext_clinicalAssessmentData( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_ext_clinicalAssessmentData','CREATE TRIGGER a_u_ext_clinicalAssessmentData  AFTER UPDATE OR DELETE ON ext_clinicalAssessmentData FOR EACH ROW EXECUTE PROCEDURE after_update_ext_clinicalAssessmentData()');
--BR



CREATE OR REPLACE FUNCTION i_scr_screeningAssessment_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(scr:screeningAssessment_meta_data)('';
      FOR current_row IN SELECT * FROM scr_screeningAssessment_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_scr_screeningAssessment_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(scr:screeningAssessment_history)('';
      FOR current_row IN SELECT * FROM scr_screeningAssessment_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM xnat_imageAssessorData_history WHERE id=current_row.id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_xnat_imageAssessorData_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.rater IS NOT NULL) THEN 
              fullText := fullText || ''(rater:string)=('' || REPLACE(REPLACE(current_row.rater,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.comments IS NOT NULL) THEN 
              fullText := fullText || ''(comments:string)=('' || REPLACE(REPLACE(current_row.comments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pass IS NOT NULL) THEN 
              fullText := fullText || ''(pass:string)=('' || REPLACE(REPLACE(current_row.pass,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM scr_screeningScanData_history WHERE scans_scan_scr_screeningAssessm_id=current_row.id AND xft_version=current_row.xft_version ORDER BY scr_screeningscandata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_scr_screeningScanData_history( parent_row.scr_screeningscandata_id, child_count,$3,false,false);
              fullText := fullText || ''(scans_scan_screeningscandata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.screeningAssessment_info IS NOT NULL)) THEN
            fullText := fullText || ''(screeningassessment_info:integer)=('' || current_row.screeningassessment_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_scr_screeningAssessment_meta_data(current_row.screeningAssessment_info, child_count,$3,false,false);
              fullText := fullText || ''(screeningassessment_info_screeningassessment_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_scr_screeningScanData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(scr:screeningScanData_meta_data)('';
      FOR current_row IN SELECT * FROM scr_screeningScanData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_scr_screeningScanData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(scr:screeningScanData)('';
      FOR current_row IN SELECT * FROM scr_screeningScanData WHERE  scr_screeningscandata_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.imagescan_id IS NOT NULL) THEN 
              fullText := fullText || ''(imagescan_id:string)=('' || REPLACE(REPLACE(current_row.imagescan_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.comments IS NOT NULL) THEN 
              fullText := fullText || ''(comments:string)=('' || REPLACE(REPLACE(current_row.comments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pass IS NOT NULL) THEN 
              fullText := fullText || ''(pass:string)=('' || REPLACE(REPLACE(current_row.pass,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.screeningScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(screeningscandata_info:integer)=('' || current_row.screeningscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_scr_screeningScanData_meta_data(current_row.screeningScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(screeningscandata_info_screeningscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.scans_scan_scr_screeningAssessm_id IS NOT NULL)) THEN
            fullText := fullText || ''(scans_scan_scr_screeningassessm_id:string)=('' || current_row.scans_scan_scr_screeningassessm_id || '')'';
        END IF;
          IF (current_row.scr_screeningscandata_id IS NOT NULL) THEN 
              fullText := fullText || ''(scr_screeningscandata_id:integer)=('' || current_row.scr_screeningscandata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_scr_screeningScanData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT scr_screeningScanData.*, meta.meta_data_id, meta.status AS meta_status FROM scr_screeningScanData LEFT JOIN scr_screeningScanData_meta_data meta ON scr_screeningScanData.screeningScanData_info=meta.meta_data_id WHERE  scr_screeningscandata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE scr_screeningScanData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_scr_screeningScanData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT scr_screeningScanData.*, meta.meta_data_id FROM scr_screeningScanData LEFT JOIN scr_screeningScanData_meta_data meta ON scr_screeningScanData.screeningScanData_info=meta.meta_data_id WHERE  scr_screeningscandata_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION scr:screeningAssessment/scans/scan
        IF ((current_row.scans_scan_scr_screeningAssessm_id IS NOT NULL)) THEN
        PERFORM update_ls_scr_screeningAssessment(current_row.scans_scan_scr_screeningAssessm_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_scr_screeningScanData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_scr_screeningScanData( OLD.scr_screeningscandata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_scr_screeningScanData','CREATE TRIGGER a_u_scr_screeningScanData  AFTER UPDATE OR DELETE ON scr_screeningScanData FOR EACH ROW EXECUTE PROCEDURE after_update_scr_screeningScanData()');
--BR



CREATE OR REPLACE FUNCTION i_scr_screeningAssessment( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(scr:screeningAssessment)('';
      FOR current_row IN SELECT * FROM scr_screeningAssessment WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.id IS NOT NULL)) THEN
            fullText := fullText || ''(id:string)=('' || current_row.id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData(current_row.id, child_count,$3,false,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.rater IS NOT NULL) THEN 
              fullText := fullText || ''(rater:string)=('' || REPLACE(REPLACE(current_row.rater,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.comments IS NOT NULL) THEN 
              fullText := fullText || ''(comments:string)=('' || REPLACE(REPLACE(current_row.comments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pass IS NOT NULL) THEN 
              fullText := fullText || ''(pass:string)=('' || REPLACE(REPLACE(current_row.pass,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM scr_screeningScanData WHERE scans_scan_scr_screeningAssessm_id=current_row.id ORDER BY scr_screeningscandata_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_scr_screeningScanData( parent_row.scr_screeningscandata_id, child_count,$3,false,false);
              fullText := fullText || ''(scans_scan_screeningscandata'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.screeningAssessment_info IS NOT NULL)) THEN
            fullText := fullText || ''(screeningassessment_info:integer)=('' || current_row.screeningassessment_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_scr_screeningAssessment_meta_data(current_row.screeningAssessment_info, child_count,$3,false,false);
              fullText := fullText || ''(screeningassessment_info_screeningassessment_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_xnat_imageAssessorData( $1, child_count,$3,$4,false);
              fullText := fullText || ''(imageassessordata_imageassessordata:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_scr_screeningAssessment( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT scr_screeningAssessment.*, meta.meta_data_id, meta.status AS meta_status FROM scr_screeningAssessment LEFT JOIN scr_screeningAssessment_meta_data meta ON scr_screeningAssessment.screeningAssessment_info=meta.meta_data_id WHERE  id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE scr_screeningAssessment_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.id IS NOT NULL)) THEN
          PERFORM  ae_xnat_imageAssessorData(current_row.id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM scr_screeningScanData WHERE scans_scan_scr_screeningAssessm_id=current_row.id
        LOOP
          PERFORM  a_scr_screeningScanData( parent_row.scr_screeningscandata_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_xnat_imageAssessorData( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_scr_screeningAssessment( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''scr:screeningAssessment'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT scr_screeningAssessment.*, meta.meta_data_id FROM scr_screeningAssessment LEFT JOIN scr_screeningAssessment_meta_data meta ON scr_screeningAssessment.screeningAssessment_info=meta.meta_data_id WHERE  id=$1
      LOOP
         UPDATE scr_screeningAssessment_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_xnat_imageAssessorData( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_scr_screeningAssessment()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_scr_screeningAssessment( OLD.id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_scr_screeningAssessment','CREATE TRIGGER a_u_scr_screeningAssessment  AFTER UPDATE OR DELETE ON scr_screeningAssessment FOR EACH ROW EXECUTE PROCEDURE after_update_scr_screeningAssessment()');
--BR



CREATE OR REPLACE FUNCTION i_scr_screeningScanData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(scr:screeningScanData_history)('';
      FOR current_row IN SELECT * FROM scr_screeningScanData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.imagescan_id IS NOT NULL) THEN 
              fullText := fullText || ''(imagescan_id:string)=('' || REPLACE(REPLACE(current_row.imagescan_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.comments IS NOT NULL) THEN 
              fullText := fullText || ''(comments:string)=('' || REPLACE(REPLACE(current_row.comments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pass IS NOT NULL) THEN 
              fullText := fullText || ''(pass:string)=('' || REPLACE(REPLACE(current_row.pass,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.screeningScanData_info IS NOT NULL)) THEN
            fullText := fullText || ''(screeningscandata_info:integer)=('' || current_row.screeningscandata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_scr_screeningScanData_meta_data(current_row.screeningScanData_info, child_count,$3,false,false);
              fullText := fullText || ''(screeningscandata_info_screeningscandata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.scans_scan_scr_screeningAssessm_id IS NOT NULL)) THEN
            fullText := fullText || ''(scans_scan_scr_screeningassessm_id:string)=('' || current_row.scans_scan_scr_screeningassessm_id || '')'';
        END IF;
          IF (current_row.scr_screeningscandata_id IS NOT NULL) THEN 
              fullText := fullText || ''(scr_screeningscandata_id:integer)=('' || current_row.scr_screeningscandata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_pipe_pipelineDetails_parameter_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:pipelineDetails_parameter_history)('';
      FOR current_row IN SELECT * FROM pipe_pipelineDetails_parameter_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.values_schemalink IS NOT NULL) THEN 
              fullText := fullText || ''(values_schemalink:string)=('' || REPLACE(REPLACE(current_row.values_schemalink,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.values_csvvalues IS NOT NULL) THEN 
              fullText := fullText || ''(values_csvvalues:string)=('' || REPLACE(REPLACE(current_row.values_csvvalues,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.pipelineDetails_parameter_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelinedetails_parameter_info:integer)=('' || current_row.pipelinedetails_parameter_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_parameter_meta_data(current_row.pipelineDetails_parameter_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelinedetails_parameter_info_pipelinedetails_parameter_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_parameter_pipe_pipel_path IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_parameter_pipe_pipel_path:string)=('' || current_row.parameters_parameter_pipe_pipel_path || '')'';
        END IF;
          IF (current_row.pipe_pipelinedetails_parameter_id IS NOT NULL) THEN 
              fullText := fullText || ''(pipe_pipelinedetails_parameter_id:integer)=('' || current_row.pipe_pipelinedetails_parameter_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_pipe_pipelineDetails_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:pipelineDetails_history)('';
      FOR current_row IN SELECT * FROM pipe_pipelineDetails_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.path IS NOT NULL) THEN 
              fullText := fullText || ''(path:string)=('' || REPLACE(REPLACE(current_row.path,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM pipe_pipelineDetails_element_history WHERE generateselements_element_pipe__path=current_row.path AND xft_version=current_row.xft_version ORDER BY pipe_pipelinedetails_element_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_element_history( parent_row.pipe_pipelinedetails_element_id, child_count,$3,false,false);
              fullText := fullText || ''(generateselements_element_pipelinedetails_element'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.customwebpage IS NOT NULL) THEN 
              fullText := fullText || ''(customwebpage:string)=('' || REPLACE(REPLACE(current_row.customwebpage,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM pipe_pipelineDetails_parameter_history WHERE parameters_parameter_pipe_pipel_path=current_row.path AND xft_version=current_row.xft_version ORDER BY pipe_pipelinedetails_parameter_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_parameter_history( parent_row.pipe_pipelinedetails_parameter_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_parameter_pipelinedetails_parameter'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.appliesto IS NOT NULL) THEN 
              fullText := fullText || ''(appliesto:string)=('' || REPLACE(REPLACE(current_row.appliesto,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.pipelineDetails_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelinedetails_info:integer)=('' || current_row.pipelinedetails_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_meta_data(current_row.pipelineDetails_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelinedetails_info_pipelinedetails_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.pipe_PipelineRepository_pipe_pipelinerepository_id IS NOT NULL)) THEN
            fullText := fullText || ''(pipe_pipelinerepository_pipe_pipelinerepository_id:integer)=('' || current_row.pipe_pipelinerepository_pipe_pipelinerepository_id || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_pipe_pipelineDetails_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:pipelineDetails_meta_data)('';
      FOR current_row IN SELECT * FROM pipe_pipelineDetails_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_pipe_pipelineDetails_element_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:pipelineDetails_element_history)('';
      FOR current_row IN SELECT * FROM pipe_pipelineDetails_element_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.element IS NOT NULL) THEN 
              fullText := fullText || ''(element:string)=('' || REPLACE(REPLACE(current_row.element,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.pipelineDetails_element_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelinedetails_element_info:integer)=('' || current_row.pipelinedetails_element_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_element_meta_data(current_row.pipelineDetails_element_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelinedetails_element_info_pipelinedetails_element_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.generateselements_element_pipe__path IS NOT NULL)) THEN
            fullText := fullText || ''(generateselements_element_pipe__path:string)=('' || current_row.generateselements_element_pipe__path || '')'';
        END IF;
          IF (current_row.pipe_pipelinedetails_element_id IS NOT NULL) THEN 
              fullText := fullText || ''(pipe_pipelinedetails_element_id:integer)=('' || current_row.pipe_pipelinedetails_element_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_pipe_PipelineRepository_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:PipelineRepository_history)('';
      FOR current_row IN SELECT * FROM pipe_PipelineRepository_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM pipe_pipelineDetails_history WHERE pipe_PipelineRepository_pipe_pipelinerepository_id=current_row.pipe_pipelinerepository_id AND xft_version=current_row.xft_version ORDER BY path
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_history( parent_row.path, child_count,$3,false,false);
              fullText := fullText || ''(pipeline_pipelinedetails'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.PipelineRepository_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelinerepository_info:integer)=('' || current_row.pipelinerepository_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_PipelineRepository_meta_data(current_row.PipelineRepository_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelinerepository_info_pipelinerepository_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.pipe_pipelinerepository_id IS NOT NULL) THEN 
              fullText := fullText || ''(pipe_pipelinerepository_id:integer)=('' || current_row.pipe_pipelinerepository_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_pipe_PipelineRepository_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:PipelineRepository_meta_data)('';
      FOR current_row IN SELECT * FROM pipe_PipelineRepository_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_pipe_pipelineDetails_parameter_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:pipelineDetails_parameter_meta_data)('';
      FOR current_row IN SELECT * FROM pipe_pipelineDetails_parameter_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_pipe_pipelineDetails_parameter( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:pipelineDetails_parameter)('';
      FOR current_row IN SELECT * FROM pipe_pipelineDetails_parameter WHERE  pipe_pipelinedetails_parameter_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.values_schemalink IS NOT NULL) THEN 
              fullText := fullText || ''(values_schemalink:string)=('' || REPLACE(REPLACE(current_row.values_schemalink,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.values_csvvalues IS NOT NULL) THEN 
              fullText := fullText || ''(values_csvvalues:string)=('' || REPLACE(REPLACE(current_row.values_csvvalues,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.pipelineDetails_parameter_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelinedetails_parameter_info:integer)=('' || current_row.pipelinedetails_parameter_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_parameter_meta_data(current_row.pipelineDetails_parameter_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelinedetails_parameter_info_pipelinedetails_parameter_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_parameter_pipe_pipel_path IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_parameter_pipe_pipel_path:string)=('' || current_row.parameters_parameter_pipe_pipel_path || '')'';
        END IF;
          IF (current_row.pipe_pipelinedetails_parameter_id IS NOT NULL) THEN 
              fullText := fullText || ''(pipe_pipelinedetails_parameter_id:integer)=('' || current_row.pipe_pipelinedetails_parameter_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_pipe_pipelineDetails_parameter( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT pipe_pipelineDetails_parameter.*, meta.meta_data_id, meta.status AS meta_status FROM pipe_pipelineDetails_parameter LEFT JOIN pipe_pipelineDetails_parameter_meta_data meta ON pipe_pipelineDetails_parameter.pipelineDetails_parameter_info=meta.meta_data_id WHERE  pipe_pipelinedetails_parameter_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE pipe_pipelineDetails_parameter_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_pipe_pipelineDetails_parameter( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT pipe_pipelineDetails_parameter.*, meta.meta_data_id FROM pipe_pipelineDetails_parameter LEFT JOIN pipe_pipelineDetails_parameter_meta_data meta ON pipe_pipelineDetails_parameter.pipelineDetails_parameter_info=meta.meta_data_id WHERE  pipe_pipelinedetails_parameter_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION pipe:pipelineDetails/parameters/parameter
        IF ((current_row.parameters_parameter_pipe_pipel_path IS NOT NULL)) THEN
        PERFORM update_ls_pipe_pipelineDetails(current_row.parameters_parameter_pipe_pipel_path, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_pipe_pipelineDetails_parameter()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_pipe_pipelineDetails_parameter( OLD.pipe_pipelinedetails_parameter_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_pipe_pipelineDetails_parameter','CREATE TRIGGER a_u_pipe_pipelineDetails_parameter  AFTER UPDATE OR DELETE ON pipe_pipelineDetails_parameter FOR EACH ROW EXECUTE PROCEDURE after_update_pipe_pipelineDetails_parameter()');
--BR



CREATE OR REPLACE FUNCTION i_pipe_pipelineDetails_element_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:pipelineDetails_element_meta_data)('';
      FOR current_row IN SELECT * FROM pipe_pipelineDetails_element_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_pipe_pipelineDetails_element( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:pipelineDetails_element)('';
      FOR current_row IN SELECT * FROM pipe_pipelineDetails_element WHERE  pipe_pipelinedetails_element_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.element IS NOT NULL) THEN 
              fullText := fullText || ''(element:string)=('' || REPLACE(REPLACE(current_row.element,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.pipelineDetails_element_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelinedetails_element_info:integer)=('' || current_row.pipelinedetails_element_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_element_meta_data(current_row.pipelineDetails_element_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelinedetails_element_info_pipelinedetails_element_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.generateselements_element_pipe__path IS NOT NULL)) THEN
            fullText := fullText || ''(generateselements_element_pipe__path:string)=('' || current_row.generateselements_element_pipe__path || '')'';
        END IF;
          IF (current_row.pipe_pipelinedetails_element_id IS NOT NULL) THEN 
              fullText := fullText || ''(pipe_pipelinedetails_element_id:integer)=('' || current_row.pipe_pipelinedetails_element_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_pipe_pipelineDetails_element( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT pipe_pipelineDetails_element.*, meta.meta_data_id, meta.status AS meta_status FROM pipe_pipelineDetails_element LEFT JOIN pipe_pipelineDetails_element_meta_data meta ON pipe_pipelineDetails_element.pipelineDetails_element_info=meta.meta_data_id WHERE  pipe_pipelinedetails_element_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE pipe_pipelineDetails_element_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_pipe_pipelineDetails_element( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT pipe_pipelineDetails_element.*, meta.meta_data_id FROM pipe_pipelineDetails_element LEFT JOIN pipe_pipelineDetails_element_meta_data meta ON pipe_pipelineDetails_element.pipelineDetails_element_info=meta.meta_data_id WHERE  pipe_pipelinedetails_element_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION pipe:pipelineDetails/generatesElements/element
        IF ((current_row.generateselements_element_pipe__path IS NOT NULL)) THEN
        PERFORM update_ls_pipe_pipelineDetails(current_row.generateselements_element_pipe__path, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_pipe_pipelineDetails_element()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_pipe_pipelineDetails_element( OLD.pipe_pipelinedetails_element_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_pipe_pipelineDetails_element','CREATE TRIGGER a_u_pipe_pipelineDetails_element  AFTER UPDATE OR DELETE ON pipe_pipelineDetails_element FOR EACH ROW EXECUTE PROCEDURE after_update_pipe_pipelineDetails_element()');
--BR



CREATE OR REPLACE FUNCTION i_pipe_pipelineDetails( VARCHAR(255), int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:pipelineDetails)('';
      FOR current_row IN SELECT * FROM pipe_pipelineDetails WHERE  path=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.path IS NOT NULL) THEN 
              fullText := fullText || ''(path:string)=('' || REPLACE(REPLACE(current_row.path,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM pipe_pipelineDetails_element WHERE generateselements_element_pipe__path=current_row.path ORDER BY pipe_pipelinedetails_element_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_element( parent_row.pipe_pipelinedetails_element_id, child_count,$3,false,false);
              fullText := fullText || ''(generateselements_element_pipelinedetails_element'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.customwebpage IS NOT NULL) THEN 
              fullText := fullText || ''(customwebpage:string)=('' || REPLACE(REPLACE(current_row.customwebpage,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM pipe_pipelineDetails_parameter WHERE parameters_parameter_pipe_pipel_path=current_row.path ORDER BY pipe_pipelinedetails_parameter_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_parameter( parent_row.pipe_pipelinedetails_parameter_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_parameter_pipelinedetails_parameter'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.appliesto IS NOT NULL) THEN 
              fullText := fullText || ''(appliesto:string)=('' || REPLACE(REPLACE(current_row.appliesto,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.pipelineDetails_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelinedetails_info:integer)=('' || current_row.pipelinedetails_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails_meta_data(current_row.pipelineDetails_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelinedetails_info_pipelinedetails_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.pipe_PipelineRepository_pipe_pipelinerepository_id IS NOT NULL)) THEN
            fullText := fullText || ''(pipe_pipelinerepository_pipe_pipelinerepository_id:integer)=('' || current_row.pipe_pipelinerepository_pipe_pipelinerepository_id || '')'';
        END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_pipe_pipelineDetails( VARCHAR(255), int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT pipe_pipelineDetails.*, meta.meta_data_id, meta.status AS meta_status FROM pipe_pipelineDetails LEFT JOIN pipe_pipelineDetails_meta_data meta ON pipe_pipelineDetails.pipelineDetails_info=meta.meta_data_id WHERE  path=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE pipe_pipelineDetails_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM pipe_pipelineDetails_element WHERE generateselements_element_pipe__path=current_row.path
        LOOP
          PERFORM  a_pipe_pipelineDetails_element( parent_row.pipe_pipelinedetails_element_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM pipe_pipelineDetails_parameter WHERE parameters_parameter_pipe_pipel_path=current_row.path
        LOOP
          PERFORM  a_pipe_pipelineDetails_parameter( parent_row.pipe_pipelinedetails_parameter_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_pipe_pipelineDetails( VARCHAR(255), int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT pipe_pipelineDetails.*, meta.meta_data_id FROM pipe_pipelineDetails LEFT JOIN pipe_pipelineDetails_meta_data meta ON pipe_pipelineDetails.pipelineDetails_info=meta.meta_data_id WHERE  path=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION pipe:PipelineRepository/pipeline
        IF ((current_row.pipe_PipelineRepository_pipe_pipelinerepository_id IS NOT NULL)) THEN
        PERFORM update_ls_pipe_PipelineRepository(current_row.pipe_PipelineRepository_pipe_pipelinerepository_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_pipe_pipelineDetails()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_pipe_pipelineDetails( OLD.path, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_pipe_pipelineDetails','CREATE TRIGGER a_u_pipe_pipelineDetails  AFTER UPDATE OR DELETE ON pipe_pipelineDetails FOR EACH ROW EXECUTE PROCEDURE after_update_pipe_pipelineDetails()');
--BR



CREATE OR REPLACE FUNCTION i_pipe_PipelineRepository( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(pipe:PipelineRepository)('';
      FOR current_row IN SELECT * FROM pipe_PipelineRepository WHERE  pipe_pipelinerepository_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM pipe_pipelineDetails WHERE pipe_PipelineRepository_pipe_pipelinerepository_id=current_row.pipe_pipelinerepository_id ORDER BY path
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_pipelineDetails( parent_row.path, child_count,$3,false,false);
              fullText := fullText || ''(pipeline_pipelinedetails'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF ((current_row.PipelineRepository_info IS NOT NULL)) THEN
            fullText := fullText || ''(pipelinerepository_info:integer)=('' || current_row.pipelinerepository_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_pipe_PipelineRepository_meta_data(current_row.PipelineRepository_info, child_count,$3,false,false);
              fullText := fullText || ''(pipelinerepository_info_pipelinerepository_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.pipe_pipelinerepository_id IS NOT NULL) THEN 
              fullText := fullText || ''(pipe_pipelinerepository_id:integer)=('' || current_row.pipe_pipelinerepository_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_pipe_PipelineRepository( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT pipe_PipelineRepository.*, meta.meta_data_id, meta.status AS meta_status FROM pipe_PipelineRepository LEFT JOIN pipe_PipelineRepository_meta_data meta ON pipe_PipelineRepository.PipelineRepository_info=meta.meta_data_id WHERE  pipe_pipelinerepository_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE pipe_PipelineRepository_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM pipe_pipelineDetails WHERE pipe_PipelineRepository_pipe_pipelinerepository_id=current_row.pipe_pipelinerepository_id
        LOOP
          PERFORM  a_pipe_pipelineDetails( parent_row.path, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_pipe_PipelineRepository( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''pipe:PipelineRepository'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT pipe_PipelineRepository.*, meta.meta_data_id FROM pipe_PipelineRepository LEFT JOIN pipe_PipelineRepository_meta_data meta ON pipe_PipelineRepository.PipelineRepository_info=meta.meta_data_id WHERE  pipe_pipelinerepository_id=$1
      LOOP
         UPDATE pipe_PipelineRepository_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_pipe_PipelineRepository()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_pipe_PipelineRepository( OLD.pipe_pipelinerepository_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_pipe_PipelineRepository','CREATE TRIGGER a_u_pipe_PipelineRepository  AFTER UPDATE OR DELETE ON pipe_PipelineRepository FOR EACH ROW EXECUTE PROCEDURE after_update_pipe_PipelineRepository()');
--BR



CREATE OR REPLACE FUNCTION i_cat_catalog_tag_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:catalog_tag_history)('';
      FOR current_row IN SELECT * FROM cat_catalog_tag_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.tag IS NOT NULL) THEN 
              fullText := fullText || ''(tag:string)=('' || REPLACE(REPLACE(current_row.tag,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.catalog_tag_info IS NOT NULL)) THEN
            fullText := fullText || ''(catalog_tag_info:integer)=('' || current_row.catalog_tag_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_tag_meta_data(current_row.catalog_tag_info, child_count,$3,false,false);
              fullText := fullText || ''(catalog_tag_info_catalog_tag_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.tags_tag_cat_catalog_cat_catalog_id IS NOT NULL)) THEN
            fullText := fullText || ''(tags_tag_cat_catalog_cat_catalog_id:integer)=('' || current_row.tags_tag_cat_catalog_cat_catalog_id || '')'';
        END IF;
          IF (current_row.cat_catalog_tag_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_catalog_tag_id:integer)=('' || current_row.cat_catalog_tag_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_catalog_metaField_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:catalog_metaField_meta_data)('';
      FOR current_row IN SELECT * FROM cat_catalog_metaField_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_catalog_metaField( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:catalog_metaField)('';
      FOR current_row IN SELECT * FROM cat_catalog_metaField WHERE  cat_catalog_metafield_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.metafield IS NOT NULL) THEN 
              fullText := fullText || ''(metafield:string)=('' || REPLACE(REPLACE(current_row.metafield,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.catalog_metaField_info IS NOT NULL)) THEN
            fullText := fullText || ''(catalog_metafield_info:integer)=('' || current_row.catalog_metafield_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_metaField_meta_data(current_row.catalog_metaField_info, child_count,$3,false,false);
              fullText := fullText || ''(catalog_metafield_info_catalog_metafield_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.metafields_metafield_cat_catalo_cat_catalog_id IS NOT NULL)) THEN
            fullText := fullText || ''(metafields_metafield_cat_catalo_cat_catalog_id:integer)=('' || current_row.metafields_metafield_cat_catalo_cat_catalog_id || '')'';
        END IF;
          IF (current_row.cat_catalog_metafield_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_catalog_metafield_id:integer)=('' || current_row.cat_catalog_metafield_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_cat_catalog_metaField( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_catalog_metaField.*, meta.meta_data_id, meta.status AS meta_status FROM cat_catalog_metaField LEFT JOIN cat_catalog_metaField_meta_data meta ON cat_catalog_metaField.catalog_metaField_info=meta.meta_data_id WHERE  cat_catalog_metafield_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE cat_catalog_metaField_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_cat_catalog_metaField( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_catalog_metaField.*, meta.meta_data_id FROM cat_catalog_metaField LEFT JOIN cat_catalog_metaField_meta_data meta ON cat_catalog_metaField.catalog_metaField_info=meta.meta_data_id WHERE  cat_catalog_metafield_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION cat:catalog/metaFields/metaField
        IF ((current_row.metafields_metafield_cat_catalo_cat_catalog_id IS NOT NULL)) THEN
        PERFORM update_ls_cat_catalog(current_row.metafields_metafield_cat_catalo_cat_catalog_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_cat_catalog_metaField()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_cat_catalog_metaField( OLD.cat_catalog_metafield_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_cat_catalog_metaField','CREATE TRIGGER a_u_cat_catalog_metaField  AFTER UPDATE OR DELETE ON cat_catalog_metaField FOR EACH ROW EXECUTE PROCEDURE after_update_cat_catalog_metaField()');
--BR



CREATE OR REPLACE FUNCTION i_cat_entry_tag_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:entry_tag_meta_data)('';
      FOR current_row IN SELECT * FROM cat_entry_tag_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_entry_tag( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:entry_tag)('';
      FOR current_row IN SELECT * FROM cat_entry_tag WHERE  cat_entry_tag_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.tag IS NOT NULL) THEN 
              fullText := fullText || ''(tag:string)=('' || REPLACE(REPLACE(current_row.tag,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.entry_tag_info IS NOT NULL)) THEN
            fullText := fullText || ''(entry_tag_info:integer)=('' || current_row.entry_tag_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_tag_meta_data(current_row.entry_tag_info, child_count,$3,false,false);
              fullText := fullText || ''(entry_tag_info_entry_tag_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.tags_tag_cat_entry_cat_entry_id IS NOT NULL)) THEN
            fullText := fullText || ''(tags_tag_cat_entry_cat_entry_id:integer)=('' || current_row.tags_tag_cat_entry_cat_entry_id || '')'';
        END IF;
          IF (current_row.cat_entry_tag_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_entry_tag_id:integer)=('' || current_row.cat_entry_tag_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_cat_entry_tag( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_entry_tag.*, meta.meta_data_id, meta.status AS meta_status FROM cat_entry_tag LEFT JOIN cat_entry_tag_meta_data meta ON cat_entry_tag.entry_tag_info=meta.meta_data_id WHERE  cat_entry_tag_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE cat_entry_tag_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_cat_entry_tag( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_entry_tag.*, meta.meta_data_id FROM cat_entry_tag LEFT JOIN cat_entry_tag_meta_data meta ON cat_entry_tag.entry_tag_info=meta.meta_data_id WHERE  cat_entry_tag_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION cat:entry/tags/tag
        IF ((current_row.tags_tag_cat_entry_cat_entry_id IS NOT NULL)) THEN
        PERFORM update_ls_cat_entry(current_row.tags_tag_cat_entry_cat_entry_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_cat_entry_tag()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_cat_entry_tag( OLD.cat_entry_tag_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_cat_entry_tag','CREATE TRIGGER a_u_cat_entry_tag  AFTER UPDATE OR DELETE ON cat_entry_tag FOR EACH ROW EXECUTE PROCEDURE after_update_cat_entry_tag()');
--BR



CREATE OR REPLACE FUNCTION i_cat_dcmEntry_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:dcmEntry_history)('';
      FOR current_row IN SELECT * FROM cat_dcmEntry_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.cat_entry_id IS NOT NULL)) THEN
            fullText := fullText || ''(cat_entry_id:integer)=('' || current_row.cat_entry_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM cat_entry_history WHERE cat_entry_id=current_row.cat_entry_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_cat_entry_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(entry_entry:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.uid IS NOT NULL) THEN 
              fullText := fullText || ''(uid:string)=('' || REPLACE(REPLACE(current_row.uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.instancenumber IS NOT NULL) THEN 
              fullText := fullText || ''(instancenumber:integer)=('' || current_row.instancenumber || '')'';
          END IF;
        IF ((current_row.dcmEntry_info IS NOT NULL)) THEN
            fullText := fullText || ''(dcmentry_info:integer)=('' || current_row.dcmentry_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_dcmEntry_meta_data(current_row.dcmEntry_info, child_count,$3,false,false);
              fullText := fullText || ''(dcmentry_info_dcmentry_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_cat_entry_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(entry_entry:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_catalog_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:catalog_meta_data)('';
      FOR current_row IN SELECT * FROM cat_catalog_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_entry_metaField_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:entry_metaField_history)('';
      FOR current_row IN SELECT * FROM cat_entry_metaField_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.metafield IS NOT NULL) THEN 
              fullText := fullText || ''(metafield:string)=('' || REPLACE(REPLACE(current_row.metafield,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.entry_metaField_info IS NOT NULL)) THEN
            fullText := fullText || ''(entry_metafield_info:integer)=('' || current_row.entry_metafield_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_metaField_meta_data(current_row.entry_metaField_info, child_count,$3,false,false);
              fullText := fullText || ''(entry_metafield_info_entry_metafield_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.metafields_metafield_cat_entry_cat_entry_id IS NOT NULL)) THEN
            fullText := fullText || ''(metafields_metafield_cat_entry_cat_entry_id:integer)=('' || current_row.metafields_metafield_cat_entry_cat_entry_id || '')'';
        END IF;
          IF (current_row.cat_entry_metafield_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_entry_metafield_id:integer)=('' || current_row.cat_entry_metafield_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_entry_metaField_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:entry_metaField_meta_data)('';
      FOR current_row IN SELECT * FROM cat_entry_metaField_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_entry_metaField( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:entry_metaField)('';
      FOR current_row IN SELECT * FROM cat_entry_metaField WHERE  cat_entry_metafield_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.metafield IS NOT NULL) THEN 
              fullText := fullText || ''(metafield:string)=('' || REPLACE(REPLACE(current_row.metafield,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.entry_metaField_info IS NOT NULL)) THEN
            fullText := fullText || ''(entry_metafield_info:integer)=('' || current_row.entry_metafield_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_metaField_meta_data(current_row.entry_metaField_info, child_count,$3,false,false);
              fullText := fullText || ''(entry_metafield_info_entry_metafield_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.metafields_metafield_cat_entry_cat_entry_id IS NOT NULL)) THEN
            fullText := fullText || ''(metafields_metafield_cat_entry_cat_entry_id:integer)=('' || current_row.metafields_metafield_cat_entry_cat_entry_id || '')'';
        END IF;
          IF (current_row.cat_entry_metafield_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_entry_metafield_id:integer)=('' || current_row.cat_entry_metafield_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_cat_entry_metaField( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_entry_metaField.*, meta.meta_data_id, meta.status AS meta_status FROM cat_entry_metaField LEFT JOIN cat_entry_metaField_meta_data meta ON cat_entry_metaField.entry_metaField_info=meta.meta_data_id WHERE  cat_entry_metafield_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE cat_entry_metaField_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_cat_entry_metaField( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_entry_metaField.*, meta.meta_data_id FROM cat_entry_metaField LEFT JOIN cat_entry_metaField_meta_data meta ON cat_entry_metaField.entry_metaField_info=meta.meta_data_id WHERE  cat_entry_metafield_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION cat:entry/metaFields/metaField
        IF ((current_row.metafields_metafield_cat_entry_cat_entry_id IS NOT NULL)) THEN
        PERFORM update_ls_cat_entry(current_row.metafields_metafield_cat_entry_cat_entry_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_cat_entry_metaField()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_cat_entry_metaField( OLD.cat_entry_metafield_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_cat_entry_metaField','CREATE TRIGGER a_u_cat_entry_metaField  AFTER UPDATE OR DELETE ON cat_entry_metaField FOR EACH ROW EXECUTE PROCEDURE after_update_cat_entry_metaField()');
--BR



CREATE OR REPLACE FUNCTION i_cat_entry_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:entry_meta_data)('';
      FOR current_row IN SELECT * FROM cat_entry_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_cat_entry( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:entry)('';
      FOR current_row IN SELECT * FROM cat_entry WHERE  cat_entry_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_entry_metaField WHERE metafields_metafield_cat_entry_cat_entry_id=current_row.cat_entry_id ORDER BY cat_entry_metafield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_metaField( parent_row.cat_entry_metafield_id, child_count,$3,false,false);
              fullText := fullText || ''(metafields_metafield_entry_metafield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_entry_tag WHERE tags_tag_cat_entry_cat_entry_id=current_row.cat_entry_id ORDER BY cat_entry_tag_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_tag( parent_row.cat_entry_tag_id, child_count,$3,false,false);
              fullText := fullText || ''(tags_tag_entry_tag'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.uri IS NOT NULL) THEN 
              fullText := fullText || ''(uri:string)=('' || REPLACE(REPLACE(current_row.uri,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.format IS NOT NULL) THEN 
              fullText := fullText || ''(format:string)=('' || REPLACE(REPLACE(current_row.format,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.content IS NOT NULL) THEN 
              fullText := fullText || ''(content:string)=('' || REPLACE(REPLACE(current_row.content,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.cachepath IS NOT NULL) THEN 
              fullText := fullText || ''(cachepath:string)=('' || REPLACE(REPLACE(current_row.cachepath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.createdtime IS NOT NULL) THEN 
              fullText := fullText || ''(createdtime:dateTime)=('' || current_row.createdtime || '')'';
          END IF;
          IF (current_row.createdby IS NOT NULL) THEN 
              fullText := fullText || ''(createdby:string)=('' || REPLACE(REPLACE(current_row.createdby,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.createdeventid IS NOT NULL) THEN 
              fullText := fullText || ''(createdeventid:integer)=('' || current_row.createdeventid || '')'';
          END IF;
          IF (current_row.modifiedtime IS NOT NULL) THEN 
              fullText := fullText || ''(modifiedtime:dateTime)=('' || current_row.modifiedtime || '')'';
          END IF;
          IF (current_row.modifiedby IS NOT NULL) THEN 
              fullText := fullText || ''(modifiedby:string)=('' || REPLACE(REPLACE(current_row.modifiedby,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modifiedeventid IS NOT NULL) THEN 
              fullText := fullText || ''(modifiedeventid:integer)=('' || current_row.modifiedeventid || '')'';
          END IF;
          IF (current_row.digest IS NOT NULL) THEN 
              fullText := fullText || ''(digest:string)=('' || REPLACE(REPLACE(current_row.digest,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.entry_info IS NOT NULL)) THEN
            fullText := fullText || ''(entry_info:integer)=('' || current_row.entry_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_meta_data(current_row.entry_info, child_count,$3,false,false);
              fullText := fullText || ''(entry_info_entry_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.entries_entry_cat_catalog_cat_catalog_id IS NOT NULL)) THEN
            fullText := fullText || ''(entries_entry_cat_catalog_cat_catalog_id:integer)=('' || current_row.entries_entry_cat_catalog_cat_catalog_id || '')'';
        END IF;
          IF (current_row.cat_entry_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_entry_id:integer)=('' || current_row.cat_entry_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_entry( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT cat_entry.cat_entry_id AS cat_entry16, table1.element_name AS xdat_meta_element51, table2.insert_date AS cat_entry_meta_data58 FROM cat_entry cat_entry   LEFT JOIN xdat_meta_element table1 ON cat_entry.extension=table1.xdat_meta_element_id   LEFT JOIN cat_entry_meta_data table2 ON cat_entry.entry_info=table2.meta_data_id) SEARCH  WHERE 
 ( (cat_entry16=$1))
      LOOP
         IF (current_row.xdat_meta_element51 IS NULL) THEN 
             fullText:= ie_cat_entry( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element51=''cat:dcmEntry'') THEN
                fullText:= i_cat_dcmEntry( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_cat_entry( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_cat_entry( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_entry.*, meta.meta_data_id, meta.status AS meta_status FROM cat_entry LEFT JOIN cat_entry_meta_data meta ON cat_entry.entry_info=meta.meta_data_id WHERE  cat_entry_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE cat_entry_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_entry_metaField WHERE metafields_metafield_cat_entry_cat_entry_id=current_row.cat_entry_id
        LOOP
          PERFORM  a_cat_entry_metaField( parent_row.cat_entry_metafield_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_entry_tag WHERE tags_tag_cat_entry_cat_entry_id=current_row.cat_entry_id
        LOOP
          PERFORM  a_cat_entry_tag( parent_row.cat_entry_tag_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_cat_entry( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT cat_entry.cat_entry_id AS cat_entry16, table1.element_name AS xdat_meta_element51, table2.insert_date AS cat_entry_meta_data58 FROM cat_entry cat_entry   LEFT JOIN xdat_meta_element table1 ON cat_entry.extension=table1.xdat_meta_element_id   LEFT JOIN cat_entry_meta_data table2 ON cat_entry.entry_info=table2.meta_data_id) SEARCH WHERE 
 ( (cat_entry16=$1))
      LOOP
         IF (current_row.xdat_meta_element51 IS NULL) THEN 
            PERFORM  ae_cat_entry( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element51=''cat:dcmEntry'') THEN
            PERFORM  a_cat_dcmEntry( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_cat_entry( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_cat_entry( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''cat:entry'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_entry.*, meta.meta_data_id FROM cat_entry LEFT JOIN cat_entry_meta_data meta ON cat_entry.entry_info=meta.meta_data_id WHERE  cat_entry_id=$1
      LOOP
         UPDATE cat_entry_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION cat:catalog/entries/entry
        IF ((current_row.entries_entry_cat_catalog_cat_catalog_id IS NOT NULL)) THEN
        PERFORM update_ls_cat_catalog(current_row.entries_entry_cat_catalog_cat_catalog_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_cat_entry( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT cat_entry.cat_entry_id AS cat_entry16, table1.element_name AS xdat_meta_element51, table2.insert_date AS cat_entry_meta_data58 FROM cat_entry cat_entry   LEFT JOIN xdat_meta_element table1 ON cat_entry.extension=table1.xdat_meta_element_id   LEFT JOIN cat_entry_meta_data table2 ON cat_entry.entry_info=table2.meta_data_id) SEARCH WHERE 
 ( (cat_entry16=$1))
      LOOP
         IF (current_row.xdat_meta_element51 IS NULL) THEN 
             PERFORM update_ls_ext_cat_entry( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element51=''cat:dcmEntry'') THEN
                PERFORM update_ls_cat_dcmEntry( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element51;
                    PERFORM update_ls_ext_cat_entry( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_cat_entry()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_cat_entry( OLD.cat_entry_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_cat_entry','CREATE TRIGGER a_u_cat_entry  AFTER UPDATE OR DELETE ON cat_entry FOR EACH ROW EXECUTE PROCEDURE after_update_cat_entry()');
--BR



CREATE OR REPLACE FUNCTION i_cat_dcmCatalog_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:dcmCatalog_meta_data)('';
      FOR current_row IN SELECT * FROM cat_dcmCatalog_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_dcmCatalog_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:dcmCatalog_history)('';
      FOR current_row IN SELECT * FROM cat_dcmCatalog_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.cat_catalog_id IS NOT NULL)) THEN
            fullText := fullText || ''(cat_catalog_id:integer)=('' || current_row.cat_catalog_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM cat_catalog_history WHERE cat_catalog_id=current_row.cat_catalog_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_cat_catalog_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(catalog_catalog:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.dimensions_x IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_x:integer)=('' || current_row.dimensions_x || '')'';
          END IF;
          IF (current_row.dimensions_y IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_y:integer)=('' || current_row.dimensions_y || '')'';
          END IF;
          IF (current_row.dimensions_z IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_z:integer)=('' || current_row.dimensions_z || '')'';
          END IF;
          IF (current_row.dimensions_volumes IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_volumes:integer)=('' || current_row.dimensions_volumes || '')'';
          END IF;
          IF (current_row.voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_x:float)=('' || current_row.voxelres_x || '')'';
          END IF;
          IF (current_row.voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_y:float)=('' || current_row.voxelres_y || '')'';
          END IF;
          IF (current_row.voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_z:float)=('' || current_row.voxelres_z || '')'';
          END IF;
          IF (current_row.voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_units:string)=('' || REPLACE(REPLACE(current_row.voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.orientation IS NOT NULL) THEN 
              fullText := fullText || ''(orientation:string)=('' || REPLACE(REPLACE(current_row.orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.uid IS NOT NULL) THEN 
              fullText := fullText || ''(uid:string)=('' || REPLACE(REPLACE(current_row.uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.dcmCatalog_info IS NOT NULL)) THEN
            fullText := fullText || ''(dcmcatalog_info:integer)=('' || current_row.dcmcatalog_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_dcmCatalog_meta_data(current_row.dcmCatalog_info, child_count,$3,false,false);
              fullText := fullText || ''(dcmcatalog_info_dcmcatalog_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_cat_catalog_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(catalog_catalog:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_catalog_metaField_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:catalog_metaField_history)('';
      FOR current_row IN SELECT * FROM cat_catalog_metaField_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.metafield IS NOT NULL) THEN 
              fullText := fullText || ''(metafield:string)=('' || REPLACE(REPLACE(current_row.metafield,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.catalog_metaField_info IS NOT NULL)) THEN
            fullText := fullText || ''(catalog_metafield_info:integer)=('' || current_row.catalog_metafield_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_metaField_meta_data(current_row.catalog_metaField_info, child_count,$3,false,false);
              fullText := fullText || ''(catalog_metafield_info_catalog_metafield_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.metafields_metafield_cat_catalo_cat_catalog_id IS NOT NULL)) THEN
            fullText := fullText || ''(metafields_metafield_cat_catalo_cat_catalog_id:integer)=('' || current_row.metafields_metafield_cat_catalo_cat_catalog_id || '')'';
        END IF;
          IF (current_row.cat_catalog_metafield_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_catalog_metafield_id:integer)=('' || current_row.cat_catalog_metafield_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_catalog_tag_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:catalog_tag_meta_data)('';
      FOR current_row IN SELECT * FROM cat_catalog_tag_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_catalog_tag( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:catalog_tag)('';
      FOR current_row IN SELECT * FROM cat_catalog_tag WHERE  cat_catalog_tag_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.tag IS NOT NULL) THEN 
              fullText := fullText || ''(tag:string)=('' || REPLACE(REPLACE(current_row.tag,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.catalog_tag_info IS NOT NULL)) THEN
            fullText := fullText || ''(catalog_tag_info:integer)=('' || current_row.catalog_tag_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_tag_meta_data(current_row.catalog_tag_info, child_count,$3,false,false);
              fullText := fullText || ''(catalog_tag_info_catalog_tag_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.tags_tag_cat_catalog_cat_catalog_id IS NOT NULL)) THEN
            fullText := fullText || ''(tags_tag_cat_catalog_cat_catalog_id:integer)=('' || current_row.tags_tag_cat_catalog_cat_catalog_id || '')'';
        END IF;
          IF (current_row.cat_catalog_tag_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_catalog_tag_id:integer)=('' || current_row.cat_catalog_tag_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_cat_catalog_tag( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_catalog_tag.*, meta.meta_data_id, meta.status AS meta_status FROM cat_catalog_tag LEFT JOIN cat_catalog_tag_meta_data meta ON cat_catalog_tag.catalog_tag_info=meta.meta_data_id WHERE  cat_catalog_tag_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE cat_catalog_tag_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_cat_catalog_tag( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_catalog_tag.*, meta.meta_data_id FROM cat_catalog_tag LEFT JOIN cat_catalog_tag_meta_data meta ON cat_catalog_tag.catalog_tag_info=meta.meta_data_id WHERE  cat_catalog_tag_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION cat:catalog/tags/tag
        IF ((current_row.tags_tag_cat_catalog_cat_catalog_id IS NOT NULL)) THEN
        PERFORM update_ls_cat_catalog(current_row.tags_tag_cat_catalog_cat_catalog_id, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_cat_catalog_tag()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_cat_catalog_tag( OLD.cat_catalog_tag_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_cat_catalog_tag','CREATE TRIGGER a_u_cat_catalog_tag  AFTER UPDATE OR DELETE ON cat_catalog_tag FOR EACH ROW EXECUTE PROCEDURE after_update_cat_catalog_tag()');
--BR



CREATE OR REPLACE FUNCTION ie_cat_catalog( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:catalog)('';
      FOR current_row IN SELECT * FROM cat_catalog WHERE  cat_catalog_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_catalog_metaField WHERE metafields_metafield_cat_catalo_cat_catalog_id=current_row.cat_catalog_id ORDER BY cat_catalog_metafield_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_metaField( parent_row.cat_catalog_metafield_id, child_count,$3,false,false);
              fullText := fullText || ''(metafields_metafield_catalog_metafield'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_catalog_tag WHERE tags_tag_cat_catalog_cat_catalog_id=current_row.cat_catalog_id ORDER BY cat_catalog_tag_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_tag( parent_row.cat_catalog_tag_id, child_count,$3,false,false);
              fullText := fullText || ''(tags_tag_catalog_tag'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_catalog WHERE sets_entryset_cat_catalog_id=current_row.cat_catalog_id ORDER BY cat_catalog_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog( parent_row.cat_catalog_id, child_count,$3,false,false);
              fullText := fullText || ''(sets_entryset_catalog'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_entry WHERE entries_entry_cat_catalog_cat_catalog_id=current_row.cat_catalog_id ORDER BY cat_entry_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry( parent_row.cat_entry_id, child_count,$3,false,false);
              fullText := fullText || ''(entries_entry_entry'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.catalog_info IS NOT NULL)) THEN
            fullText := fullText || ''(catalog_info:integer)=('' || current_row.catalog_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_catalog_meta_data(current_row.catalog_info, child_count,$3,false,false);
              fullText := fullText || ''(catalog_info_catalog_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.cat_catalog_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_catalog_id:integer)=('' || current_row.cat_catalog_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_catalog( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT cat_catalog.cat_catalog_id AS cat_catalog6, table1.element_name AS xdat_meta_element105, table2.insert_date AS cat_catalog_meta_data112 FROM cat_catalog cat_catalog   LEFT JOIN xdat_meta_element table1 ON cat_catalog.extension=table1.xdat_meta_element_id   LEFT JOIN cat_catalog_meta_data table2 ON cat_catalog.catalog_info=table2.meta_data_id) SEARCH  WHERE 
 ( (cat_catalog6=$1))
      LOOP
         IF (current_row.xdat_meta_element105 IS NULL) THEN 
             fullText:= ie_cat_catalog( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element105=''cat:dcmCatalog'') THEN
                fullText:= i_cat_dcmCatalog( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_cat_catalog( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_cat_catalog( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_catalog.*, meta.meta_data_id, meta.status AS meta_status FROM cat_catalog LEFT JOIN cat_catalog_meta_data meta ON cat_catalog.catalog_info=meta.meta_data_id WHERE  cat_catalog_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE cat_catalog_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_catalog_metaField WHERE metafields_metafield_cat_catalo_cat_catalog_id=current_row.cat_catalog_id
        LOOP
          PERFORM  a_cat_catalog_metaField( parent_row.cat_catalog_metafield_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_catalog_tag WHERE tags_tag_cat_catalog_cat_catalog_id=current_row.cat_catalog_id
        LOOP
          PERFORM  a_cat_catalog_tag( parent_row.cat_catalog_tag_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_catalog WHERE sets_entryset_cat_catalog_id=current_row.cat_catalog_id
        LOOP
          PERFORM  a_cat_catalog( parent_row.cat_catalog_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM cat_entry WHERE entries_entry_cat_catalog_cat_catalog_id=current_row.cat_catalog_id
        LOOP
          PERFORM  a_cat_entry( parent_row.cat_entry_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_cat_catalog( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT cat_catalog.cat_catalog_id AS cat_catalog6, table1.element_name AS xdat_meta_element105, table2.insert_date AS cat_catalog_meta_data112 FROM cat_catalog cat_catalog   LEFT JOIN xdat_meta_element table1 ON cat_catalog.extension=table1.xdat_meta_element_id   LEFT JOIN cat_catalog_meta_data table2 ON cat_catalog.catalog_info=table2.meta_data_id) SEARCH WHERE 
 ( (cat_catalog6=$1))
      LOOP
         IF (current_row.xdat_meta_element105 IS NULL) THEN 
            PERFORM  ae_cat_catalog( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element105=''cat:dcmCatalog'') THEN
            PERFORM  a_cat_dcmCatalog( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_cat_catalog( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_cat_catalog( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''cat:catalog'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_catalog.*, meta.meta_data_id FROM cat_catalog LEFT JOIN cat_catalog_meta_data meta ON cat_catalog.catalog_info=meta.meta_data_id WHERE  cat_catalog_id=$1
      LOOP
         UPDATE cat_catalog_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_cat_catalog( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT cat_catalog.cat_catalog_id AS cat_catalog6, table1.element_name AS xdat_meta_element105, table2.insert_date AS cat_catalog_meta_data112 FROM cat_catalog cat_catalog   LEFT JOIN xdat_meta_element table1 ON cat_catalog.extension=table1.xdat_meta_element_id   LEFT JOIN cat_catalog_meta_data table2 ON cat_catalog.catalog_info=table2.meta_data_id) SEARCH WHERE 
 ( (cat_catalog6=$1))
      LOOP
         IF (current_row.xdat_meta_element105 IS NULL) THEN 
             PERFORM update_ls_ext_cat_catalog( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element105=''cat:dcmCatalog'') THEN
                PERFORM update_ls_cat_dcmCatalog( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element105;
                    PERFORM update_ls_ext_cat_catalog( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_cat_catalog()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_cat_catalog( OLD.cat_catalog_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_cat_catalog','CREATE TRIGGER a_u_cat_catalog  AFTER UPDATE OR DELETE ON cat_catalog FOR EACH ROW EXECUTE PROCEDURE after_update_cat_catalog()');
--BR



CREATE OR REPLACE FUNCTION i_cat_dcmCatalog( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:dcmCatalog)('';
      FOR current_row IN SELECT * FROM cat_dcmCatalog WHERE  cat_catalog_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.cat_catalog_id IS NOT NULL)) THEN
            fullText := fullText || ''(cat_catalog_id:integer)=('' || current_row.cat_catalog_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_cat_catalog(current_row.cat_catalog_id, child_count,$3,false,false);
              fullText := fullText || ''(catalog_catalog:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.dimensions_x IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_x:integer)=('' || current_row.dimensions_x || '')'';
          END IF;
          IF (current_row.dimensions_y IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_y:integer)=('' || current_row.dimensions_y || '')'';
          END IF;
          IF (current_row.dimensions_z IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_z:integer)=('' || current_row.dimensions_z || '')'';
          END IF;
          IF (current_row.dimensions_volumes IS NOT NULL) THEN 
              fullText := fullText || ''(dimensions_volumes:integer)=('' || current_row.dimensions_volumes || '')'';
          END IF;
          IF (current_row.voxelres_x IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_x:float)=('' || current_row.voxelres_x || '')'';
          END IF;
          IF (current_row.voxelres_y IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_y:float)=('' || current_row.voxelres_y || '')'';
          END IF;
          IF (current_row.voxelres_z IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_z:float)=('' || current_row.voxelres_z || '')'';
          END IF;
          IF (current_row.voxelres_units IS NOT NULL) THEN 
              fullText := fullText || ''(voxelres_units:string)=('' || REPLACE(REPLACE(current_row.voxelres_units,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.orientation IS NOT NULL) THEN 
              fullText := fullText || ''(orientation:string)=('' || REPLACE(REPLACE(current_row.orientation,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.uid IS NOT NULL) THEN 
              fullText := fullText || ''(uid:string)=('' || REPLACE(REPLACE(current_row.uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.dcmCatalog_info IS NOT NULL)) THEN
            fullText := fullText || ''(dcmcatalog_info:integer)=('' || current_row.dcmcatalog_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_dcmCatalog_meta_data(current_row.dcmCatalog_info, child_count,$3,false,false);
              fullText := fullText || ''(dcmcatalog_info_dcmcatalog_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_cat_catalog( $1, child_count,$3,$4,false);
              fullText := fullText || ''(catalog_catalog:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_cat_dcmCatalog( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_dcmCatalog.*, meta.meta_data_id, meta.status AS meta_status FROM cat_dcmCatalog LEFT JOIN cat_dcmCatalog_meta_data meta ON cat_dcmCatalog.dcmCatalog_info=meta.meta_data_id WHERE  cat_catalog_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE cat_dcmCatalog_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.cat_catalog_id IS NOT NULL)) THEN
          PERFORM  ae_cat_catalog(current_row.cat_catalog_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_cat_catalog( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_cat_dcmCatalog( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''cat:dcmCatalog'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_dcmCatalog.*, meta.meta_data_id FROM cat_dcmCatalog LEFT JOIN cat_dcmCatalog_meta_data meta ON cat_dcmCatalog.dcmCatalog_info=meta.meta_data_id WHERE  cat_catalog_id=$1
      LOOP
         UPDATE cat_dcmCatalog_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_cat_catalog( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_cat_dcmCatalog()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_cat_dcmCatalog( OLD.cat_catalog_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_cat_dcmCatalog','CREATE TRIGGER a_u_cat_dcmCatalog  AFTER UPDATE OR DELETE ON cat_dcmCatalog FOR EACH ROW EXECUTE PROCEDURE after_update_cat_dcmCatalog()');
--BR



CREATE OR REPLACE FUNCTION i_cat_dcmEntry_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:dcmEntry_meta_data)('';
      FOR current_row IN SELECT * FROM cat_dcmEntry_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_cat_dcmEntry( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:dcmEntry)('';
      FOR current_row IN SELECT * FROM cat_dcmEntry WHERE  cat_entry_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.cat_entry_id IS NOT NULL)) THEN
            fullText := fullText || ''(cat_entry_id:integer)=('' || current_row.cat_entry_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_cat_entry(current_row.cat_entry_id, child_count,$3,false,false);
              fullText := fullText || ''(entry_entry:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.uid IS NOT NULL) THEN 
              fullText := fullText || ''(uid:string)=('' || REPLACE(REPLACE(current_row.uid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.instancenumber IS NOT NULL) THEN 
              fullText := fullText || ''(instancenumber:integer)=('' || current_row.instancenumber || '')'';
          END IF;
        IF ((current_row.dcmEntry_info IS NOT NULL)) THEN
            fullText := fullText || ''(dcmentry_info:integer)=('' || current_row.dcmentry_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_dcmEntry_meta_data(current_row.dcmEntry_info, child_count,$3,false,false);
              fullText := fullText || ''(dcmentry_info_dcmentry_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_cat_entry( $1, child_count,$3,$4,false);
              fullText := fullText || ''(entry_entry:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_cat_dcmEntry( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_dcmEntry.*, meta.meta_data_id, meta.status AS meta_status FROM cat_dcmEntry LEFT JOIN cat_dcmEntry_meta_data meta ON cat_dcmEntry.dcmEntry_info=meta.meta_data_id WHERE  cat_entry_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE cat_dcmEntry_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.cat_entry_id IS NOT NULL)) THEN
          PERFORM  ae_cat_entry(current_row.cat_entry_id, $2,$3,false);
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_cat_entry( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_cat_dcmEntry( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT cat_dcmEntry.*, meta.meta_data_id FROM cat_dcmEntry LEFT JOIN cat_dcmEntry_meta_data meta ON cat_dcmEntry.dcmEntry_info=meta.meta_data_id WHERE  cat_entry_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_cat_entry( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_cat_dcmEntry()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_cat_dcmEntry( OLD.cat_entry_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_cat_dcmEntry','CREATE TRIGGER a_u_cat_dcmEntry  AFTER UPDATE OR DELETE ON cat_dcmEntry FOR EACH ROW EXECUTE PROCEDURE after_update_cat_dcmEntry()');
--BR



CREATE OR REPLACE FUNCTION i_cat_entry_tag_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(cat:entry_tag_history)('';
      FOR current_row IN SELECT * FROM cat_entry_tag_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.tag IS NOT NULL) THEN 
              fullText := fullText || ''(tag:string)=('' || REPLACE(REPLACE(current_row.tag,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.entry_tag_info IS NOT NULL)) THEN
            fullText := fullText || ''(entry_tag_info:integer)=('' || current_row.entry_tag_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_cat_entry_tag_meta_data(current_row.entry_tag_info, child_count,$3,false,false);
              fullText := fullText || ''(entry_tag_info_entry_tag_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.tags_tag_cat_entry_cat_entry_id IS NOT NULL)) THEN
            fullText := fullText || ''(tags_tag_cat_entry_cat_entry_id:integer)=('' || current_row.tags_tag_cat_entry_cat_entry_id || '')'';
        END IF;
          IF (current_row.cat_entry_tag_id IS NOT NULL) THEN 
              fullText := fullText || ''(cat_entry_tag_id:integer)=('' || current_row.cat_entry_tag_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_xnatExecutionEnvironment_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:xnatExecutionEnvironment_history)('';
      FOR current_row IN SELECT * FROM wrk_xnatExecutionEnvironment_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.wrk_abstractexecutionenvironment_id IS NOT NULL)) THEN
            fullText := fullText || ''(wrk_abstractexecutionenvironment_id:integer)=('' || current_row.wrk_abstractexecutionenvironment_id || '')'';
           child_count := child_count+1;
           tempText := NULL;
           DECLARE
           	ext_row RECORD;
           BEGIN 
           	FOR ext_row IN SELECT * FROM wrk_abstractExecutionEnvironment_history WHERE wrk_abstractexecutionenvironment_id=current_row.wrk_abstractexecutionenvironment_id AND xft_version=current_row.xft_version
           	LOOP
 -- 632
           	   tempText := ie_wrk_abstractExecutionEnvironment_history(ext_row.history_id, child_count,$3,false,false);
           	      fullText := fullText || ''(abstractexecutionenvironment_abstractexecutionenvironment:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END;
        END IF;
          IF (current_row.pipeline IS NOT NULL) THEN 
              fullText := fullText || ''(pipeline:string)=('' || REPLACE(REPLACE(current_row.pipeline,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.xnatuser IS NOT NULL) THEN 
              fullText := fullText || ''(xnatuser:string)=('' || REPLACE(REPLACE(current_row.xnatuser,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.host IS NOT NULL) THEN 
              fullText := fullText || ''(host:string)=('' || REPLACE(REPLACE(current_row.host,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.startat IS NOT NULL) THEN 
              fullText := fullText || ''(startat:string)=('' || REPLACE(REPLACE(current_row.startat,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM wrk_xnatExecutionEnvironment_parameter_history WHERE parameters_parameter_wrk_xnatEx_wrk_abstractexecutionenvironmen=current_row.wrk_abstractexecutionenvironment_id AND xft_version=current_row.xft_version ORDER BY wrk_xnatexecutionenvironment_parameter_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_xnatExecutionEnvironment_parameter_history( parent_row.wrk_xnatexecutionenvironment_parameter_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_parameter_xnatexecutionenvironment_parameter'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM wrk_xnatExecutionEnvironment_notify_history WHERE wrk_xnatExecutionEnvironment_wrk_abstractexecutionenvironmen=current_row.wrk_abstractexecutionenvironment_id AND xft_version=current_row.xft_version ORDER BY wrk_xnatexecutionenvironment_notify_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_xnatExecutionEnvironment_notify_history( parent_row.wrk_xnatexecutionenvironment_notify_id, child_count,$3,false,false);
              fullText := fullText || ''(notify_xnatexecutionenvironment_notify'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.datatype IS NOT NULL) THEN 
              fullText := fullText || ''(datatype:string)=('' || REPLACE(REPLACE(current_row.datatype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.supressnotification IS NOT NULL) THEN 
              fullText := fullText || ''(supressnotification:integer)=('' || current_row.supressnotification || '')'';
          END IF;
          IF (current_row.log IS NOT NULL) THEN 
              fullText := fullText || ''(log:string)=('' || REPLACE(REPLACE(current_row.log,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.catalogpath IS NOT NULL) THEN 
              fullText := fullText || ''(catalogpath:string)=('' || REPLACE(REPLACE(current_row.catalogpath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameterfile_xml IS NOT NULL) THEN 
              fullText := fullText || ''(parameterfile_xml:string)=('' || REPLACE(REPLACE(current_row.parameterfile_xml,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameterfile_path IS NOT NULL) THEN 
              fullText := fullText || ''(parameterfile_path:string)=('' || REPLACE(REPLACE(current_row.parameterfile_path,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.xnatExecutionEnvironment_info IS NOT NULL)) THEN
            fullText := fullText || ''(xnatexecutionenvironment_info:integer)=('' || current_row.xnatexecutionenvironment_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_xnatExecutionEnvironment_meta_data(current_row.xnatExecutionEnvironment_info, child_count,$3,false,false);
              fullText := fullText || ''(xnatexecutionenvironment_info_xnatexecutionenvironment_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_wrk_abstractExecutionEnvironment_history( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractexecutionenvironment_abstractexecutionenvironment:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_abstractExecutionEnvironment_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:abstractExecutionEnvironment_meta_data)('';
      FOR current_row IN SELECT * FROM wrk_abstractExecutionEnvironment_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ie_wrk_abstractExecutionEnvironment( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:abstractExecutionEnvironment)('';
      FOR current_row IN SELECT * FROM wrk_abstractExecutionEnvironment WHERE  wrk_abstractexecutionenvironment_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.extension IS NOT NULL)) THEN
            fullText := fullText || ''(extension:integer)=('' || current_row.extension || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_xdat_meta_element(current_row.extension, child_count,$3,false,false);
              fullText := fullText || ''(extension_meta_element:XFTItem)=('' || tempText || '')'';
        END IF;
        IF ((current_row.abstractExecutionEnvironment_info IS NOT NULL)) THEN
            fullText := fullText || ''(abstractexecutionenvironment_info:integer)=('' || current_row.abstractexecutionenvironment_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_abstractExecutionEnvironment_meta_data(current_row.abstractExecutionEnvironment_info, child_count,$3,false,false);
              fullText := fullText || ''(abstractexecutionenvironment_info_abstractexecutionenvironment_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.wrk_abstractexecutionenvironment_id IS NOT NULL) THEN 
              fullText := fullText || ''(wrk_abstractexecutionenvironment_id:integer)=('' || current_row.wrk_abstractexecutionenvironment_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_abstractExecutionEnvironment( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     fullText TEXT;
    begin
      FOR current_row IN SELECT * FROM (SELECT wrk_abstractExecutionEnvironment.wrk_abstractexecutionenvironment_id AS wrk_abstractExecutionEnvironment2, table1.element_name AS xdat_meta_element3, table2.insert_date AS wrk_abstractExecutionEnvironment_meta_data10 FROM wrk_abstractExecutionEnvironment wrk_abstractExecutionEnvironment   LEFT JOIN xdat_meta_element table1 ON wrk_abstractExecutionEnvironment.extension=table1.xdat_meta_element_id   LEFT JOIN wrk_abstractExecutionEnvironment_meta_data table2 ON wrk_abstractExecutionEnvironment.abstractExecutionEnvironment_info=table2.meta_data_id) SEARCH  WHERE 
 ( (wrk_abstractExecutionEnvironment2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
             fullText:= ie_wrk_abstractExecutionEnvironment( $1, $2,$3,$4,$5);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''wrk:xnatExecutionEnvironment'') THEN
                fullText:= i_wrk_xnatExecutionEnvironment( $1, $2,$3,$4,$5);
                matches:=1;
            END IF;
                IF (matches=0) THEN
                    fullText:= ie_wrk_abstractExecutionEnvironment( $1, $2,$3,$4,$5);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION ae_wrk_abstractExecutionEnvironment( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT wrk_abstractExecutionEnvironment.*, meta.meta_data_id, meta.status AS meta_status FROM wrk_abstractExecutionEnvironment LEFT JOIN wrk_abstractExecutionEnvironment_meta_data meta ON wrk_abstractExecutionEnvironment.abstractExecutionEnvironment_info=meta.meta_data_id WHERE  wrk_abstractexecutionenvironment_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE wrk_abstractExecutionEnvironment_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_wrk_abstractExecutionEnvironment( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT wrk_abstractExecutionEnvironment.wrk_abstractexecutionenvironment_id AS wrk_abstractExecutionEnvironment2, table1.element_name AS xdat_meta_element3, table2.insert_date AS wrk_abstractExecutionEnvironment_meta_data10 FROM wrk_abstractExecutionEnvironment wrk_abstractExecutionEnvironment   LEFT JOIN xdat_meta_element table1 ON wrk_abstractExecutionEnvironment.extension=table1.xdat_meta_element_id   LEFT JOIN wrk_abstractExecutionEnvironment_meta_data table2 ON wrk_abstractExecutionEnvironment.abstractExecutionEnvironment_info=table2.meta_data_id) SEARCH WHERE 
 ( (wrk_abstractExecutionEnvironment2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
            PERFORM  ae_wrk_abstractExecutionEnvironment( $1, $2,$3,$4);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''wrk:xnatExecutionEnvironment'') THEN
            PERFORM  a_wrk_xnatExecutionEnvironment( $1, $2,$3,$4);
                matches:=1;
            END IF;
                IF (matches=0) THEN
            PERFORM  ae_wrk_abstractExecutionEnvironment( $1, $2,$3,$4);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_ext_wrk_abstractExecutionEnvironment( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT wrk_abstractExecutionEnvironment.*, meta.meta_data_id FROM wrk_abstractExecutionEnvironment LEFT JOIN wrk_abstractExecutionEnvironment_meta_data meta ON wrk_abstractExecutionEnvironment.abstractExecutionEnvironment_info=meta.meta_data_id WHERE  wrk_abstractexecutionenvironment_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUPERIOR RELATION wrk:workflowData/executionEnvironment
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM wrk_workflowData WHERE executionenvironment_wrk_abstractexecutionenvironment_id=current_row.wrk_abstractexecutionenvironment_id
        LOOP
        PERFORM update_ls_wrk_workflowData( parent_row.wrk_workflowdata_id, $2);
        END LOOP;
        END;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_wrk_abstractExecutionEnvironment( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin
      FOR current_row IN SELECT * FROM (SELECT wrk_abstractExecutionEnvironment.wrk_abstractexecutionenvironment_id AS wrk_abstractExecutionEnvironment2, table1.element_name AS xdat_meta_element3, table2.insert_date AS wrk_abstractExecutionEnvironment_meta_data10 FROM wrk_abstractExecutionEnvironment wrk_abstractExecutionEnvironment   LEFT JOIN xdat_meta_element table1 ON wrk_abstractExecutionEnvironment.extension=table1.xdat_meta_element_id   LEFT JOIN wrk_abstractExecutionEnvironment_meta_data table2 ON wrk_abstractExecutionEnvironment.abstractExecutionEnvironment_info=table2.meta_data_id) SEARCH WHERE 
 ( (wrk_abstractExecutionEnvironment2=$1))
      LOOP
         IF (current_row.xdat_meta_element3 IS NULL) THEN 
             PERFORM update_ls_ext_wrk_abstractExecutionEnvironment( $1, $2);
         ELSE
            --CALL EXTENDER 
            declare
               matches int4:=0;
            begin
            IF (current_row.xdat_meta_element3=''wrk:xnatExecutionEnvironment'') THEN
                PERFORM update_ls_wrk_xnatExecutionEnvironment( $1, $2);
                matches:=1;
            END IF;
                IF (matches=0) THEN
       RAISE NOTICE ''ERROR: NO MATCHING EXTENSION FOUND FOR (%)'', current_row.xdat_meta_element3;
                    PERFORM update_ls_ext_wrk_abstractExecutionEnvironment( $1, $2);
                END IF;
            end;
         end IF;
      END LOOP;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_wrk_abstractExecutionEnvironment()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_wrk_abstractExecutionEnvironment( OLD.wrk_abstractexecutionenvironment_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_wrk_abstractExecutionEnvironment','CREATE TRIGGER a_u_wrk_abstractExecutionEnvironment  AFTER UPDATE OR DELETE ON wrk_abstractExecutionEnvironment FOR EACH ROW EXECUTE PROCEDURE after_update_wrk_abstractExecutionEnvironment()');
--BR



CREATE OR REPLACE FUNCTION i_wrk_xnatExecutionEnvironment_notify_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:xnatExecutionEnvironment_notify_meta_data)('';
      FOR current_row IN SELECT * FROM wrk_xnatExecutionEnvironment_notify_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_xnatExecutionEnvironment_notify( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:xnatExecutionEnvironment_notify)('';
      FOR current_row IN SELECT * FROM wrk_xnatExecutionEnvironment_notify WHERE  wrk_xnatexecutionenvironment_notify_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.notify IS NOT NULL) THEN 
              fullText := fullText || ''(notify:string)=('' || REPLACE(REPLACE(current_row.notify,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.xnatExecutionEnvironment_notify_info IS NOT NULL)) THEN
            fullText := fullText || ''(xnatexecutionenvironment_notify_info:integer)=('' || current_row.xnatexecutionenvironment_notify_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_xnatExecutionEnvironment_notify_meta_data(current_row.xnatExecutionEnvironment_notify_info, child_count,$3,false,false);
              fullText := fullText || ''(xnatexecutionenvironment_notify_info_xnatexecutionenvironment_notify_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.wrk_xnatExecutionEnvironment_wrk_abstractexecutionenvironmen IS NOT NULL)) THEN
            fullText := fullText || ''(wrk_xnatexecutionenvironment_wrk_abstractexecutionenvironmen:integer)=('' || current_row.wrk_xnatexecutionenvironment_wrk_abstractexecutionenvironmen || '')'';
        END IF;
          IF (current_row.wrk_xnatexecutionenvironment_notify_id IS NOT NULL) THEN 
              fullText := fullText || ''(wrk_xnatexecutionenvironment_notify_id:integer)=('' || current_row.wrk_xnatexecutionenvironment_notify_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_wrk_xnatExecutionEnvironment_notify( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT wrk_xnatExecutionEnvironment_notify.*, meta.meta_data_id, meta.status AS meta_status FROM wrk_xnatExecutionEnvironment_notify LEFT JOIN wrk_xnatExecutionEnvironment_notify_meta_data meta ON wrk_xnatExecutionEnvironment_notify.xnatExecutionEnvironment_notify_info=meta.meta_data_id WHERE  wrk_xnatexecutionenvironment_notify_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE wrk_xnatExecutionEnvironment_notify_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_wrk_xnatExecutionEnvironment_notify( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT wrk_xnatExecutionEnvironment_notify.*, meta.meta_data_id FROM wrk_xnatExecutionEnvironment_notify LEFT JOIN wrk_xnatExecutionEnvironment_notify_meta_data meta ON wrk_xnatExecutionEnvironment_notify.xnatExecutionEnvironment_notify_info=meta.meta_data_id WHERE  wrk_xnatexecutionenvironment_notify_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION wrk:xnatExecutionEnvironment/notify
        IF ((current_row.wrk_xnatExecutionEnvironment_wrk_abstractexecutionenvironmen IS NOT NULL)) THEN
        PERFORM update_ls_wrk_xnatExecutionEnvironment(current_row.wrk_xnatExecutionEnvironment_wrk_abstractexecutionenvironmen, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_wrk_xnatExecutionEnvironment_notify()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_wrk_xnatExecutionEnvironment_notify( OLD.wrk_xnatexecutionenvironment_notify_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_wrk_xnatExecutionEnvironment_notify','CREATE TRIGGER a_u_wrk_xnatExecutionEnvironment_notify  AFTER UPDATE OR DELETE ON wrk_xnatExecutionEnvironment_notify FOR EACH ROW EXECUTE PROCEDURE after_update_wrk_xnatExecutionEnvironment_notify()');
--BR



CREATE OR REPLACE FUNCTION i_wrk_xnatExecutionEnvironment_notify_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:xnatExecutionEnvironment_notify_history)('';
      FOR current_row IN SELECT * FROM wrk_xnatExecutionEnvironment_notify_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.notify IS NOT NULL) THEN 
              fullText := fullText || ''(notify:string)=('' || REPLACE(REPLACE(current_row.notify,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.xnatExecutionEnvironment_notify_info IS NOT NULL)) THEN
            fullText := fullText || ''(xnatexecutionenvironment_notify_info:integer)=('' || current_row.xnatexecutionenvironment_notify_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_xnatExecutionEnvironment_notify_meta_data(current_row.xnatExecutionEnvironment_notify_info, child_count,$3,false,false);
              fullText := fullText || ''(xnatexecutionenvironment_notify_info_xnatexecutionenvironment_notify_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.wrk_xnatExecutionEnvironment_wrk_abstractexecutionenvironmen IS NOT NULL)) THEN
            fullText := fullText || ''(wrk_xnatexecutionenvironment_wrk_abstractexecutionenvironmen:integer)=('' || current_row.wrk_xnatexecutionenvironment_wrk_abstractexecutionenvironmen || '')'';
        END IF;
          IF (current_row.wrk_xnatexecutionenvironment_notify_id IS NOT NULL) THEN 
              fullText := fullText || ''(wrk_xnatexecutionenvironment_notify_id:integer)=('' || current_row.wrk_xnatexecutionenvironment_notify_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_workflowData_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:workflowData_history)('';
      FOR current_row IN SELECT * FROM wrk_workflowData_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.executionenvironment_wrk_abstractexecutionenvironment_id IS NOT NULL)) THEN
            fullText := fullText || ''(executionenvironment_wrk_abstractexecutionenvironment_id:integer)=('' || current_row.executionenvironment_wrk_abstractexecutionenvironment_id || '')'';
 -- 661
           DECLARE
           mapping_row RECORD; 
           loop_count int4:=0; 
           BEGIN 
           	FOR mapping_row IN SELECT * FROM wrk_abstractExecutionEnvironment_history WHERE  wrk_abstractexecutionenvironment_id=current_row.executionenvironment_wrk_abstractexecutionenvironment_id AND xft_version=current_row.xft_version LIMIT 1
           	LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_abstractExecutionEnvironment_history(mapping_row.history_id, child_count,$3,false,false);
              fullText := fullText || ''(executionenvironment_abstractexecutionenvironment:XFTItem)=('' || tempText || '')'';
           	END LOOP;
           END; 
        END IF;
          IF (current_row.comments IS NOT NULL) THEN 
              fullText := fullText || ''(comments:string)=('' || REPLACE(REPLACE(current_row.comments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.details IS NOT NULL) THEN 
              fullText := fullText || ''(details:string)=('' || REPLACE(REPLACE(current_row.details,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.justification IS NOT NULL) THEN 
              fullText := fullText || ''(justification:string)=('' || REPLACE(REPLACE(current_row.justification,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.src IS NOT NULL) THEN 
              fullText := fullText || ''(src:string)=('' || REPLACE(REPLACE(current_row.src,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.category IS NOT NULL) THEN 
              fullText := fullText || ''(category:string)=('' || REPLACE(REPLACE(current_row.category,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.data_type IS NOT NULL) THEN 
              fullText := fullText || ''(data_type:string)=('' || REPLACE(REPLACE(current_row.data_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.externalid IS NOT NULL) THEN 
              fullText := fullText || ''(externalid:string)=('' || REPLACE(REPLACE(current_row.externalid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.current_step_launch_time IS NOT NULL) THEN 
              fullText := fullText || ''(current_step_launch_time:dateTime)=('' || current_row.current_step_launch_time || '')'';
          END IF;
          IF (current_row.current_step_id IS NOT NULL) THEN 
              fullText := fullText || ''(current_step_id:string)=('' || REPLACE(REPLACE(current_row.current_step_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.create_user IS NOT NULL) THEN 
              fullText := fullText || ''(create_user:string)=('' || REPLACE(REPLACE(current_row.create_user,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pipeline_name IS NOT NULL) THEN 
              fullText := fullText || ''(pipeline_name:string)=('' || REPLACE(REPLACE(current_row.pipeline_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.next_step_id IS NOT NULL) THEN 
              fullText := fullText || ''(next_step_id:string)=('' || REPLACE(REPLACE(current_row.next_step_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.step_description IS NOT NULL) THEN 
              fullText := fullText || ''(step_description:string)=('' || REPLACE(REPLACE(current_row.step_description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.launch_time IS NOT NULL) THEN 
              fullText := fullText || ''(launch_time:dateTime)=('' || current_row.launch_time || '')'';
          END IF;
          IF (current_row.percentagecomplete IS NOT NULL) THEN 
              fullText := fullText || ''(percentagecomplete:string)=('' || REPLACE(REPLACE(current_row.percentagecomplete,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.jobid IS NOT NULL) THEN 
              fullText := fullText || ''(jobid:string)=('' || REPLACE(REPLACE(current_row.jobid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.workflowData_info IS NOT NULL)) THEN
            fullText := fullText || ''(workflowdata_info:integer)=('' || current_row.workflowdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_workflowData_meta_data(current_row.workflowData_info, child_count,$3,false,false);
              fullText := fullText || ''(workflowdata_info_workflowdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.wrk_workflowdata_id IS NOT NULL) THEN 
              fullText := fullText || ''(wrk_workflowdata_id:integer)=('' || current_row.wrk_workflowdata_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_xnatExecutionEnvironment_parameter_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:xnatExecutionEnvironment_parameter_meta_data)('';
      FOR current_row IN SELECT * FROM wrk_xnatExecutionEnvironment_parameter_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_xnatExecutionEnvironment_parameter( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:xnatExecutionEnvironment_parameter)('';
      FOR current_row IN SELECT * FROM wrk_xnatExecutionEnvironment_parameter WHERE  wrk_xnatexecutionenvironment_parameter_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.parameter IS NOT NULL) THEN 
              fullText := fullText || ''(parameter:string)=('' || REPLACE(REPLACE(current_row.parameter,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.xnatExecutionEnvironment_parameter_info IS NOT NULL)) THEN
            fullText := fullText || ''(xnatexecutionenvironment_parameter_info:integer)=('' || current_row.xnatexecutionenvironment_parameter_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_xnatExecutionEnvironment_parameter_meta_data(current_row.xnatExecutionEnvironment_parameter_info, child_count,$3,false,false);
              fullText := fullText || ''(xnatexecutionenvironment_parameter_info_xnatexecutionenvironment_parameter_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_parameter_wrk_xnatEx_wrk_abstractexecutionenvironmen IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_parameter_wrk_xnatex_wrk_abstractexecutionenvironmen:integer)=('' || current_row.parameters_parameter_wrk_xnatex_wrk_abstractexecutionenvironmen || '')'';
        END IF;
          IF (current_row.wrk_xnatexecutionenvironment_parameter_id IS NOT NULL) THEN 
              fullText := fullText || ''(wrk_xnatexecutionenvironment_parameter_id:integer)=('' || current_row.wrk_xnatexecutionenvironment_parameter_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_wrk_xnatExecutionEnvironment_parameter( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT wrk_xnatExecutionEnvironment_parameter.*, meta.meta_data_id, meta.status AS meta_status FROM wrk_xnatExecutionEnvironment_parameter LEFT JOIN wrk_xnatExecutionEnvironment_parameter_meta_data meta ON wrk_xnatExecutionEnvironment_parameter.xnatExecutionEnvironment_parameter_info=meta.meta_data_id WHERE  wrk_xnatexecutionenvironment_parameter_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE wrk_xnatExecutionEnvironment_parameter_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_wrk_xnatExecutionEnvironment_parameter( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT wrk_xnatExecutionEnvironment_parameter.*, meta.meta_data_id FROM wrk_xnatExecutionEnvironment_parameter LEFT JOIN wrk_xnatExecutionEnvironment_parameter_meta_data meta ON wrk_xnatExecutionEnvironment_parameter.xnatExecutionEnvironment_parameter_info=meta.meta_data_id WHERE  wrk_xnatexecutionenvironment_parameter_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        --PROCESS SUBORDINATE RELATION wrk:xnatExecutionEnvironment/parameters/parameter
        IF ((current_row.parameters_parameter_wrk_xnatEx_wrk_abstractexecutionenvironmen IS NOT NULL)) THEN
        PERFORM update_ls_wrk_xnatExecutionEnvironment(current_row.parameters_parameter_wrk_xnatEx_wrk_abstractexecutionenvironmen, $2);
        END IF;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_wrk_xnatExecutionEnvironment_parameter()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_wrk_xnatExecutionEnvironment_parameter( OLD.wrk_xnatexecutionenvironment_parameter_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_wrk_xnatExecutionEnvironment_parameter','CREATE TRIGGER a_u_wrk_xnatExecutionEnvironment_parameter  AFTER UPDATE OR DELETE ON wrk_xnatExecutionEnvironment_parameter FOR EACH ROW EXECUTE PROCEDURE after_update_wrk_xnatExecutionEnvironment_parameter()');
--BR



CREATE OR REPLACE FUNCTION i_wrk_xnatExecutionEnvironment_parameter_history( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:xnatExecutionEnvironment_parameter_history)('';
      FOR current_row IN SELECT * FROM wrk_xnatExecutionEnvironment_parameter_history WHERE  history_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.parameter IS NOT NULL) THEN 
              fullText := fullText || ''(parameter:string)=('' || REPLACE(REPLACE(current_row.parameter,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.name IS NOT NULL) THEN 
              fullText := fullText || ''(name:string)=('' || REPLACE(REPLACE(current_row.name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.xnatExecutionEnvironment_parameter_info IS NOT NULL)) THEN
            fullText := fullText || ''(xnatexecutionenvironment_parameter_info:integer)=('' || current_row.xnatexecutionenvironment_parameter_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_xnatExecutionEnvironment_parameter_meta_data(current_row.xnatExecutionEnvironment_parameter_info, child_count,$3,false,false);
              fullText := fullText || ''(xnatexecutionenvironment_parameter_info_xnatexecutionenvironment_parameter_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
  -- 475
        IF ((current_row.parameters_parameter_wrk_xnatEx_wrk_abstractexecutionenvironmen IS NOT NULL)) THEN
            fullText := fullText || ''(parameters_parameter_wrk_xnatex_wrk_abstractexecutionenvironmen:integer)=('' || current_row.parameters_parameter_wrk_xnatex_wrk_abstractexecutionenvironmen || '')'';
        END IF;
          IF (current_row.wrk_xnatexecutionenvironment_parameter_id IS NOT NULL) THEN 
              fullText := fullText || ''(wrk_xnatexecutionenvironment_parameter_id:integer)=('' || current_row.wrk_xnatexecutionenvironment_parameter_id || '')'';
          END IF;
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:integer)=('' || current_row.xft_version || '')'';
          END IF;
          IF (current_row.history_id IS NOT NULL) THEN 
              fullText := fullText || ''(history_id:integer)=('' || current_row.history_id || '')'';
          END IF;
          IF (current_row.change_user IS NOT NULL) THEN 
              fullText := fullText || ''(change_user:integer)=('' || current_row.change_user || '')'';
          END IF;
          IF (current_row.change_date IS NOT NULL) THEN 
              fullText := fullText || ''(change_date:dateTime)=('' || current_row.change_date || '')'';
          END IF;
          IF (current_row.previous_change_date IS NOT NULL) THEN 
              fullText := fullText || ''(previous_change_date:dateTime)=('' || current_row.previous_change_date || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_workflowData_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:workflowData_meta_data)('';
      FOR current_row IN SELECT * FROM wrk_workflowData_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_workflowData( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:workflowData)('';
      FOR current_row IN SELECT * FROM wrk_workflowData WHERE  wrk_workflowdata_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.executionenvironment_wrk_abstractexecutionenvironment_id IS NOT NULL)) THEN
            fullText := fullText || ''(executionenvironment_wrk_abstractexecutionenvironment_id:integer)=('' || current_row.executionenvironment_wrk_abstractexecutionenvironment_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_abstractExecutionEnvironment(current_row.executionenvironment_wrk_abstractexecutionenvironment_id, child_count,$3,false,false);
              fullText := fullText || ''(executionenvironment_abstractexecutionenvironment:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.comments IS NOT NULL) THEN 
              fullText := fullText || ''(comments:string)=('' || REPLACE(REPLACE(current_row.comments,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.details IS NOT NULL) THEN 
              fullText := fullText || ''(details:string)=('' || REPLACE(REPLACE(current_row.details,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.justification IS NOT NULL) THEN 
              fullText := fullText || ''(justification:string)=('' || REPLACE(REPLACE(current_row.justification,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.description IS NOT NULL) THEN 
              fullText := fullText || ''(description:string)=('' || REPLACE(REPLACE(current_row.description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.src IS NOT NULL) THEN 
              fullText := fullText || ''(src:string)=('' || REPLACE(REPLACE(current_row.src,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.type IS NOT NULL) THEN 
              fullText := fullText || ''(type:string)=('' || REPLACE(REPLACE(current_row.type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.category IS NOT NULL) THEN 
              fullText := fullText || ''(category:string)=('' || REPLACE(REPLACE(current_row.category,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.data_type IS NOT NULL) THEN 
              fullText := fullText || ''(data_type:string)=('' || REPLACE(REPLACE(current_row.data_type,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.externalid IS NOT NULL) THEN 
              fullText := fullText || ''(externalid:string)=('' || REPLACE(REPLACE(current_row.externalid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.current_step_launch_time IS NOT NULL) THEN 
              fullText := fullText || ''(current_step_launch_time:dateTime)=('' || current_row.current_step_launch_time || '')'';
          END IF;
          IF (current_row.current_step_id IS NOT NULL) THEN 
              fullText := fullText || ''(current_step_id:string)=('' || REPLACE(REPLACE(current_row.current_step_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.create_user IS NOT NULL) THEN 
              fullText := fullText || ''(create_user:string)=('' || REPLACE(REPLACE(current_row.create_user,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.pipeline_name IS NOT NULL) THEN 
              fullText := fullText || ''(pipeline_name:string)=('' || REPLACE(REPLACE(current_row.pipeline_name,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.next_step_id IS NOT NULL) THEN 
              fullText := fullText || ''(next_step_id:string)=('' || REPLACE(REPLACE(current_row.next_step_id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.step_description IS NOT NULL) THEN 
              fullText := fullText || ''(step_description:string)=('' || REPLACE(REPLACE(current_row.step_description,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.launch_time IS NOT NULL) THEN 
              fullText := fullText || ''(launch_time:dateTime)=('' || current_row.launch_time || '')'';
          END IF;
          IF (current_row.percentagecomplete IS NOT NULL) THEN 
              fullText := fullText || ''(percentagecomplete:string)=('' || REPLACE(REPLACE(current_row.percentagecomplete,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.jobid IS NOT NULL) THEN 
              fullText := fullText || ''(jobid:string)=('' || REPLACE(REPLACE(current_row.jobid,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.workflowData_info IS NOT NULL)) THEN
            fullText := fullText || ''(workflowdata_info:integer)=('' || current_row.workflowdata_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_workflowData_meta_data(current_row.workflowData_info, child_count,$3,false,false);
              fullText := fullText || ''(workflowdata_info_workflowdata_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.wrk_workflowdata_id IS NOT NULL) THEN 
              fullText := fullText || ''(wrk_workflowdata_id:integer)=('' || current_row.wrk_workflowdata_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_wrk_workflowData( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT wrk_workflowData.*, meta.meta_data_id, meta.status AS meta_status FROM wrk_workflowData LEFT JOIN wrk_workflowData_meta_data meta ON wrk_workflowData.workflowData_info=meta.meta_data_id WHERE  wrk_workflowdata_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE wrk_workflowData_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.executionenvironment_wrk_abstractexecutionenvironment_id IS NOT NULL)) THEN
          PERFORM  a_wrk_abstractExecutionEnvironment(current_row.executionenvironment_wrk_abstractexecutionenvironment_id, $2,$3,false);
        END IF;
      END LOOP;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_wrk_workflowData( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --DELETE CACHE
      declare
        current_cache RECORD;
      BEGIN
        FOR current_cache IN SELECT oid FROM xs_item_cache WHERE elementname=''wrk:workflowData'' AND ids=CAST($1 AS text)
        LOOP
         DELETE FROM xs_item_cache WHERE oid=current_cache.oid;
        END LOOP;
      END;

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT wrk_workflowData.*, meta.meta_data_id FROM wrk_workflowData LEFT JOIN wrk_workflowData_meta_data meta ON wrk_workflowData.workflowData_info=meta.meta_data_id WHERE  wrk_workflowdata_id=$1
      LOOP
         UPDATE wrk_workflowData_meta_data SET last_modified=NOW(), modified=1 WHERE meta_data_id=current_row.meta_data_id;
      END LOOP;

      --UPDATE PARENTS;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_wrk_workflowData()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_wrk_workflowData( OLD.wrk_workflowdata_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_wrk_workflowData','CREATE TRIGGER a_u_wrk_workflowData  AFTER UPDATE OR DELETE ON wrk_workflowData FOR EACH ROW EXECUTE PROCEDURE after_update_wrk_workflowData()');
--BR



CREATE OR REPLACE FUNCTION i_wrk_xnatExecutionEnvironment_meta_data( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:xnatExecutionEnvironment_meta_data)('';
      FOR current_row IN SELECT * FROM wrk_xnatExecutionEnvironment_meta_data WHERE  meta_data_id=$1
      LOOP
           row_ct := row_ct+1;
          
          IF (current_row.xft_version IS NOT NULL) THEN 
              fullText := fullText || ''(xft_version:string)=('' || REPLACE(REPLACE(current_row.xft_version,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(last_modified:dateTime)=('' || current_row.last_modified || '')'';
          END IF;
          IF (current_row.status IS NOT NULL) THEN 
              fullText := fullText || ''(status:string)=('' || REPLACE(REPLACE(current_row.status,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.activation_date IS NOT NULL) THEN 
              fullText := fullText || ''(activation_date:dateTime)=('' || current_row.activation_date || '')'';
          END IF;
          IF (current_row.row_last_modified IS NOT NULL) THEN 
              fullText := fullText || ''(row_last_modified:dateTime)=('' || current_row.row_last_modified || '')'';
          END IF;
          IF (current_row.insert_date IS NOT NULL) THEN 
              fullText := fullText || ''(insert_date:dateTime)=('' || current_row.insert_date || '')'';
          END IF;
        IF ((current_row.activation_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(activation_user_xdat_user_id:integer)=('' || current_row.activation_user_xdat_user_id || '')'';
        END IF;
        IF ((current_row.insert_user_xdat_user_id IS NOT NULL)) THEN
            fullText := fullText || ''(insert_user_xdat_user_id:integer)=('' || current_row.insert_user_xdat_user_id || '')'';
        END IF;
          IF (current_row.origin IS NOT NULL) THEN 
              fullText := fullText || ''(origin:string)=('' || REPLACE(REPLACE(current_row.origin,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.modified IS NOT NULL) THEN 
              fullText := fullText || ''(modified:integer)=('' || current_row.modified || '')'';
          END IF;
          IF (current_row.shareable IS NOT NULL) THEN 
              fullText := fullText || ''(shareable:integer)=('' || current_row.shareable || '')'';
          END IF;
          IF (current_row.meta_data_id IS NOT NULL) THEN 
              fullText := fullText || ''(meta_data_id:integer)=('' || current_row.meta_data_id || '')'';
          END IF;
      END LOOP;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION i_wrk_xnatExecutionEnvironment( INTEGER, int4,bool,bool,bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     tempText TEXT;
     fullText TEXT;
     row_ct int4;
     local_count int4;
     child_count int4;
    begin
  --    72
      local_count := $2;
      child_count := $2;
      row_ct := 0;
      fullText := ''Item:('' || local_count || ''(wrk:xnatExecutionEnvironment)('';
      FOR current_row IN SELECT * FROM wrk_xnatExecutionEnvironment WHERE  wrk_abstractexecutionenvironment_id=$1
      LOOP
           row_ct := row_ct+1;
          
        IF ((current_row.wrk_abstractexecutionenvironment_id IS NOT NULL)) THEN
            fullText := fullText || ''(wrk_abstractexecutionenvironment_id:integer)=('' || current_row.wrk_abstractexecutionenvironment_id || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_wrk_abstractExecutionEnvironment(current_row.wrk_abstractexecutionenvironment_id, child_count,$3,false,false);
              fullText := fullText || ''(abstractexecutionenvironment_abstractexecutionenvironment:XFTItem)=('' || tempText || '')'';
        END IF;
          IF (current_row.pipeline IS NOT NULL) THEN 
              fullText := fullText || ''(pipeline:string)=('' || REPLACE(REPLACE(current_row.pipeline,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.xnatuser IS NOT NULL) THEN 
              fullText := fullText || ''(xnatuser:string)=('' || REPLACE(REPLACE(current_row.xnatuser,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.host IS NOT NULL) THEN 
              fullText := fullText || ''(host:string)=('' || REPLACE(REPLACE(current_row.host,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.startat IS NOT NULL) THEN 
              fullText := fullText || ''(startat:string)=('' || REPLACE(REPLACE(current_row.startat,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM wrk_xnatExecutionEnvironment_parameter WHERE parameters_parameter_wrk_xnatEx_wrk_abstractexecutionenvironmen=current_row.wrk_abstractexecutionenvironment_id ORDER BY wrk_xnatexecutionenvironment_parameter_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_xnatExecutionEnvironment_parameter( parent_row.wrk_xnatexecutionenvironment_parameter_id, child_count,$3,false,false);
              fullText := fullText || ''(parameters_parameter_xnatexecutionenvironment_parameter'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
        IF($3) THEN 
        DECLARE 
  --    198
        parent_row RECORD; 
        loop_count int4:=0; 
        BEGIN 
        FOR parent_row IN SELECT * FROM wrk_xnatExecutionEnvironment_notify WHERE wrk_xnatExecutionEnvironment_wrk_abstractexecutionenvironmen=current_row.wrk_abstractexecutionenvironment_id ORDER BY wrk_xnatexecutionenvironment_notify_id
        LOOP
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_xnatExecutionEnvironment_notify( parent_row.wrk_xnatexecutionenvironment_notify_id, child_count,$3,false,false);
              fullText := fullText || ''(notify_xnatexecutionenvironment_notify'' || loop_count || '':XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
              loop_count := loop_count+1;
        END LOOP;
        END;
        END IF; 
          IF (current_row.datatype IS NOT NULL) THEN 
              fullText := fullText || ''(datatype:string)=('' || REPLACE(REPLACE(current_row.datatype,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.id IS NOT NULL) THEN 
              fullText := fullText || ''(id:string)=('' || REPLACE(REPLACE(current_row.id,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.supressnotification IS NOT NULL) THEN 
              fullText := fullText || ''(supressnotification:integer)=('' || current_row.supressnotification || '')'';
          END IF;
          IF (current_row.log IS NOT NULL) THEN 
              fullText := fullText || ''(log:string)=('' || REPLACE(REPLACE(current_row.log,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.catalogpath IS NOT NULL) THEN 
              fullText := fullText || ''(catalogpath:string)=('' || REPLACE(REPLACE(current_row.catalogpath,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameterfile_xml IS NOT NULL) THEN 
              fullText := fullText || ''(parameterfile_xml:string)=('' || REPLACE(REPLACE(current_row.parameterfile_xml,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
          IF (current_row.parameterfile_path IS NOT NULL) THEN 
              fullText := fullText || ''(parameterfile_path:string)=('' || REPLACE(REPLACE(current_row.parameterfile_path,''('',''*OPEN*''),'')'',''*CLOSE*'') || '')'';
          END IF;
        IF ((current_row.xnatExecutionEnvironment_info IS NOT NULL)) THEN
            fullText := fullText || ''(xnatexecutionenvironment_info:integer)=('' || current_row.xnatexecutionenvironment_info || '')'';
 -- 693
           child_count := child_count+1;
           tempText := NULL;
           tempText := i_wrk_xnatExecutionEnvironment_meta_data(current_row.xnatExecutionEnvironment_info, child_count,$3,false,false);
              fullText := fullText || ''(xnatexecutionenvironment_info_xnatexecutionenvironment_meta_data:XFTItem)=('' || tempText || '')'';
        END IF;
      END LOOP;
      IF (row_ct=0) THEN 
           child_count := child_count+1;
           tempText := NULL;
           tempText := ie_wrk_abstractExecutionEnvironment( $1, child_count,$3,$4,false);
              fullText := fullText || ''(abstractexecutionenvironment_abstractexecutionenvironment:XFTItem)='';
              fullText := fullText || ''('' || tempText || '')'';
          
      END IF;
	   fullText := fullText || '')*END_ITEM*'' || local_count || '')'';
	
	 RETURN fullText;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION a_wrk_xnatExecutionEnvironment( INTEGER, int4,varchar(255),bool)
  RETURNS TEXT AS
'
    declare
     current_row RECORD;
     row_ct int4;
    begin
      row_ct := 0;
       --UPDATE LOCAL ROW
      FOR current_row IN SELECT wrk_xnatExecutionEnvironment.*, meta.meta_data_id, meta.status AS meta_status FROM wrk_xnatExecutionEnvironment LEFT JOIN wrk_xnatExecutionEnvironment_meta_data meta ON wrk_xnatExecutionEnvironment.xnatExecutionEnvironment_info=meta.meta_data_id WHERE  wrk_abstractexecutionenvironment_id=$1
      LOOP
           row_ct := row_ct+1;
           IF (current_row.meta_status!=$3) THEN
         UPDATE wrk_xnatExecutionEnvironment_meta_data SET status=$3,activation_date=NOW(),activation_user_xdat_user_id=$2 WHERE meta_data_id=current_row.meta_data_id;
           END IF;
          
        IF ((current_row.wrk_abstractexecutionenvironment_id IS NOT NULL)) THEN
          PERFORM  ae_wrk_abstractExecutionEnvironment(current_row.wrk_abstractexecutionenvironment_id, $2,$3,false);
        END IF;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM wrk_xnatExecutionEnvironment_parameter WHERE parameters_parameter_wrk_xnatEx_wrk_abstractexecutionenvironmen=current_row.wrk_abstractexecutionenvironment_id
        LOOP
          PERFORM  a_wrk_xnatExecutionEnvironment_parameter( parent_row.wrk_xnatexecutionenvironment_parameter_id, $2,$3,false);
        END LOOP;
        END;
        DECLARE 
        parent_row RECORD; 
        BEGIN 
        FOR parent_row IN SELECT * FROM wrk_xnatExecutionEnvironment_notify WHERE wrk_xnatExecutionEnvironment_wrk_abstractexecutionenvironmen=current_row.wrk_abstractexecutionenvironment_id
        LOOP
          PERFORM  a_wrk_xnatExecutionEnvironment_notify( parent_row.wrk_xnatexecutionenvironment_notify_id, $2,$3,false);
        END LOOP;
        END;
      END LOOP;
      IF (row_ct=0) THEN 
          PERFORM  ae_wrk_abstractExecutionEnvironment( $1, $2,$3,$4);
          
      END IF;
	
	 RETURN '''';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR



CREATE OR REPLACE FUNCTION update_ls_wrk_xnatExecutionEnvironment( INTEGER, int4)
  RETURNS "varchar" AS
'
    declare
     current_row RECORD;
    begin

       --UPDATE LOCAL ROW
      FOR current_row IN SELECT wrk_xnatExecutionEnvironment.*, meta.meta_data_id FROM wrk_xnatExecutionEnvironment LEFT JOIN wrk_xnatExecutionEnvironment_meta_data meta ON wrk_xnatExecutionEnvironment.xnatExecutionEnvironment_info=meta.meta_data_id WHERE  wrk_abstractexecutionenvironment_id=$1
      LOOP
      END LOOP;

      --UPDATE PARENTS;

        -- PROCESS EXTENSION
        PERFORM update_ls_ext_wrk_abstractExecutionEnvironment( $1, $2);
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION after_update_wrk_xnatExecutionEnvironment()
  RETURNS TRIGGER AS
'
    begin
--       PERFORM update_ls_wrk_xnatExecutionEnvironment( OLD.wrk_abstractexecutionenvironment_id, NULL);
	
	    RETURN NULL;
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR


SELECT create_trigger('a_u_wrk_xnatExecutionEnvironment','CREATE TRIGGER a_u_wrk_xnatExecutionEnvironment  AFTER UPDATE OR DELETE ON wrk_xnatExecutionEnvironment FOR EACH ROW EXECUTE PROCEDURE after_update_wrk_xnatExecutionEnvironment()');
--BR
SELECT create_class('analytics', 'CREATE TABLE analytics
(
        id serial NOT NULL,
        entry_date timestamp without time zone,
        entry_level character varying(10),
        entry_location character varying(512),
        entry_type character varying(32),
        entry_subtype character varying(32),
        duration bigint,
        message text,
        PRIMARY KEY (id)
) WITH (OIDS=FALSE)');
--BR


-- REMOVE OLD VIEWS FOR DISPLAY DOCS



SELECT removeViews();
--BR


-- ADDED VIEWS FOR DISPLAY DOCS



--XDAT SEARCH ENTRIES
SELECT CREATE_SCHEMA('xdat_search','CREATE SCHEMA xdat_search;');
--BR


--XDAT SEARCH ENTRIES
SELECT CREATE_CLASS('xdat_searches','CREATE TABLE xdat_searches
(
  search_name varchar(255) NOT NULL,
  last_access timestamp DEFAULT now(),
  created timestamp DEFAULT now(),
  owner varchar(255)
) 
WITHOUT OIDS');
--BR
GRANT ALL ON TABLE xdat_searches TO public;
--BR


--XDAT SEARCH ENTRIES
SELECT CREATE_CLASS('xs_fav_entries','CREATE TABLE xdat_search.xs_fav_entries 
( 
  datatype character varying(255), 
  id character varying(255), 
  xdat_user_id integer 
) 
WITH OIDS;');
--BR
GRANT ALL ON TABLE xdat_search.xs_fav_entries TO public;
--BR


--XDAT SEARCH ENTRIES
SELECT CREATE_CLASS('xs_materialized_views','CREATE TABLE xdat_search.xs_materialized_views
(
table_name character varying(255),
created timestamp without time zone DEFAULT now(),
last_access timestamp without time zone DEFAULT now(),
username character varying(255),
search_id text,
tag character varying(255),
search_sql text,
search_xml text
) 
WITH OIDS;');
--BR
GRANT ALL ON TABLE xdat_search.xs_materialized_views TO public;
--BR


--XDAT SEARCH ENTRIES
SELECT CREATE_CLASS('xs_item_access','CREATE TABLE xdat_search.xs_item_access
(
search_value character varying(255),
search_element character varying(255),
search_field character varying(255),
accessed timestamp without time zone DEFAULT now(),
xdat_user_id character varying(255),
method character varying(255)
)
WITH OIDS;');
--BR
GRANT ALL ON TABLE xdat_search.xs_item_access TO public;
--BR
--DEFINED FUNCTION
CREATE OR REPLACE FUNCTION xs_lastPosition(text, text)   RETURNS int4 AS $BODY$     DECLARE        t text;        i int4:=0;     begin        t = $2;        WHILE(POSITION($1 in t)!=0) LOOP             i = i + POSITION($1 in t);             t = substring(t from (POSITION($1 in t) + 1));        END LOOP;        RETURN i;     END; $BODY$   LANGUAGE 'plpgsql' VOLATILE;


--BR
--DEFINED FUNCTION
SELECT CREATE_CLASS('sortedstrings','CREATE TYPE sortedstrings AS    (strings "varchar",     sort_order int4)');


--BR
--DEFINED FUNCTION
CREATE OR REPLACE FUNCTION getnextview()   RETURNS name AS  E' DECLARE   my_record RECORD;  viewName name;  BEGIN  FOR my_record IN SELECT c.relname FROM pg_catalog.pg_class AS c LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace  WHERE     c.relkind IN (\'v\') AND n.nspname NOT IN (\'pg_catalog\', \'pg_toast\') AND pg_catalog.pg_table_is_visible(c.oid) LIMIT 1   LOOP   viewName := my_record.relname;  END LOOP;  RETURN (viewName); END; '  LANGUAGE 'plpgsql' VOLATILE;


--BR
--DEFINED FUNCTION
CREATE OR REPLACE FUNCTION viewcount()   RETURNS int8 AS E' DECLARE   my_record RECORD;  counter int8;  BEGIN  FOR my_record IN SELECT * FROM (SELECT COUNT (c.relname) AS view_count FROM pg_catalog.pg_class AS c  LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace WHERE     c.relkind IN (\'v\') AND n.nspname  NOT IN (\'pg_catalog\', \'pg_toast\') AND pg_catalog.pg_table_is_visible(c.oid) LIMIT 1) AS COUNT_TABLE  LOOP   counter := my_record.view_count;   END LOOP;  RETURN (counter); END; '  LANGUAGE 'plpgsql' VOLATILE;


--BR
--DEFINED FUNCTION
CREATE OR REPLACE FUNCTION getsortedstring("varchar", int4)   RETURNS sortedstrings AS E'DECLARE  sorted_strings sortedStrings%ROWTYPE;  BEGIN  sorted_strings.strings:=$1;  sorted_strings.sort_order:=$2;  return sorted_strings; END;'   LANGUAGE 'plpgsql' VOLATILE;


--BR
--DEFINED FUNCTION
CREATE OR REPLACE FUNCTION removeviews()   RETURNS varchar AS E' DECLARE  viewName name;  viewCounter int8;  BEGIN  SELECT INTO viewName getnextview();  SELECT INTO viewCounter viewCount();  WHILE (viewCounter > 0)   LOOP    EXECUTE \'DROP VIEW \'|| viewName || \' CASCADE\';   RAISE NOTICE \'DROPPED %. % more.\',viewName,viewCounter;   SELECT INTO viewName getnextview();    SELECT INTO viewCounter viewCount();  END LOOP;   RETURN (\'DONE\'); END; '   LANGUAGE 'plpgsql' VOLATILE;


--BR
--DEFINED FUNCTION
CREATE OR REPLACE FUNCTION stringstosortedtable(varchar[])   RETURNS SETOF sortedstrings AS 'DECLARE   ss sortedstrings%ROWTYPE;  i int4;   BEGIN    i :=1 ;  WHILE ($1[i] IS NOT NULL)   LOOP      FOR ss IN     SELECT * FROM getSortedString($1[i],i)    LOOP    RAISE NOTICE ''SORTED STRING: %,%'',ss.strings,ss.sort_order;    RETURN NEXT ss;   END LOOP;   i:=i+1;    END LOOP;   RETURN;  END;'   LANGUAGE 'plpgsql' VOLATILE;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_mrsScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_mrsScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_mrsScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_mrsScanData0, table2.status AS xnat_mrsScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_mrsScanData_meta_data118, table4.login AS table4_login FROM xnat_mrsScanData xnat_mrsScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_mrsScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_mrsScanData_meta_data table2 ON xnat_mrsScanData.mrsScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_mrsScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_mrsScanData0, table2.insert_date AS xnat_mrsScanData_meta_data118 FROM xnat_mrsScanData xnat_mrsScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_mrsScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_mrsScanData_meta_data table2 ON xnat_mrsScanData.mrsScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_mrsScanData0=SEARCH.xnat_mrsScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_A_SCIDRESEARCHDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat_a:scidResearchData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_a_scidResearchData AS SELECT SEARCH.xnat_subjectAssessorData139 AS SUBJECT_ID, SEARCH.xnat_a_scidResearchData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData142 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData142) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData142)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_A_SCIDRESEARCHDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData158, SEARCH.xnat_a_scidResearchData0) AS LABEL, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_a_scidResearchData_meta_data309 AS INSERT_DATE, SEARCH.xnat_experimentData152 AS PROJECT, SEARCH.xnat_a_scidResearchData1 AS ADMINISTRATOR, SEARCH.xnat_a_scidResearchData2 AS MOODEPISODES_CURRENTMAJORDEPRESSIVEEPISODE, SEARCH.xnat_a_scidResearchData3 AS MOODEPISODES_PASTMAJORDEPRESSIVEEPISODE, SEARCH.xnat_a_scidResearchData4 AS MOODEPISODES_CURRENTMANICEPISODE, SEARCH.xnat_a_scidResearchData5 AS MOODEPISODES_PASTMANICEPISODE, SEARCH.xnat_a_scidResearchData6 AS MOODEPISODES_CURRENTHYPOMANICEPISODE, SEARCH.xnat_a_scidResearchData7 AS MOODEPISODES_PASTHYPOMANICEPISODE, SEARCH.xnat_a_scidResearchData8 AS MOODEPISODES_CURRENTDYSTHMICEPISODE, SEARCH.xnat_a_scidResearchData9 AS MOODEPISODES_CURRENTMOODDISORDERDUETOMEDICALCONDITION, SEARCH.xnat_a_scidResearchData10 AS MOODEPISODES_PASTMOODDISORDERDUETOMEDICALCONDITION, SEARCH.xnat_a_scidResearchData11 AS MOODEPISODES_CURRENTSUBSTANCEINDUCEDMOODDISORDER, SEARCH.xnat_a_scidResearchData12 AS MOODEPISODES_PASTSUBSTANCEINDUCEDMOODDISORDER, SEARCH.xnat_a_scidResearchData13 AS PSYCHOTICSYMPTOMS_CURRENTDELUSIONS, SEARCH.xnat_a_scidResearchData14 AS PSYCHOTICSYMPTOMS_PASTDELUSIONS, SEARCH.xnat_a_scidResearchData15 AS PSYCHOTICSYMPTOMS_CURRENTHALLUCINATIONS, SEARCH.xnat_a_scidResearchData16 AS PSYCHOTICSYMPTOMS_PASTHALLUCINATIONS, SEARCH.xnat_a_scidResearchData17 AS PSYCHOTICSYMPTOMS_CURRENTDISORGANIZEDSPEECHBEHAVIOR, SEARCH.xnat_a_scidResearchData18 AS PSYCHOTICSYMPTOMS_PASTDISORGANIZEDSPEECHBEHAVIOR, SEARCH.xnat_a_scidResearchData19 AS PSYCHOTICSYMPTOMS_CURRENTCATATONICBEHAVIOR, SEARCH.xnat_a_scidResearchData20 AS PSYCHOTICSYMPTOMS_PASTCATATONICBEHAVIOR, SEARCH.xnat_a_scidResearchData21 AS PSYCHOTICSYMPTOMS_CURRENTNEGATIVESYMPTOMS, SEARCH.xnat_a_scidResearchData22 AS PSYCHOTICSYMPTOMS_PASTNEGATIVESYMPTOMS, SEARCH.xnat_a_scidResearchData23 AS PSYCHOTICDISORDERS_CURRENTSCHIZOPHRENIA, SEARCH.xnat_a_scidResearchData24 AS PSYCHOTICDISORDERS_PASTSCHIZOPHRENIA, SEARCH.xnat_a_scidResearchData25 AS PSYCHOTICDISORDERS_CURRENTPARANOIDTYPE, SEARCH.xnat_a_scidResearchData26 AS PSYCHOTICDISORDERS_PASTPARANOIDTYPE, SEARCH.xnat_a_scidResearchData27 AS PSYCHOTICDISORDERS_CURRENTCATATONICTYPE, SEARCH.xnat_a_scidResearchData28 AS PSYCHOTICDISORDERS_PASTCATATONICTYPE, SEARCH.xnat_a_scidResearchData29 AS PSYCHOTICDISORDERS_CURRENTDISORGANIZEDTYPE, SEARCH.xnat_a_scidResearchData30 AS PSYCHOTICDISORDERS_PASTDISORGANIZEDTYPE, SEARCH.xnat_a_scidResearchData31 AS PSYCHOTICDISORDERS_CURRENTUNDIFFERENTIATEDTYPE, SEARCH.xnat_a_scidResearchData32 AS PSYCHOTICDISORDERS_PASTUNDIFFERENTIATEDTYPE, SEARCH.xnat_a_scidResearchData33 AS PSYCHOTICDISORDERS_CURRENTRESIDUALTYPE, SEARCH.xnat_a_scidResearchData34 AS PSYCHOTICDISORDERS_PASTRESIDUALTYPE, SEARCH.xnat_a_scidResearchData35 AS PSYCHOTICDISORDERS_CURRENTSCHIZOPHRENIFORMDISORDER, SEARCH.xnat_a_scidResearchData36 AS PSYCHOTICDISORDERS_PASTSCHIZOPHRENIFORMDISORDER, SEARCH.xnat_a_scidResearchData37 AS PSYCHOTICDISORDERS_CURRENTSCHIZOAFFECTIVEDISORDER, SEARCH.xnat_a_scidResearchData38 AS PSYCHOTICDISORDERS_PASTSCHIZOAFFECTIVEDISORDER, SEARCH.xnat_a_scidResearchData39 AS PSYCHOTICDISORDERS_CURRENTDELUSIONALDISORDER, SEARCH.xnat_a_scidResearchData40 AS PSYCHOTICDISORDERS_PASTDELUSIONALDISORDER, SEARCH.xnat_a_scidResearchData41 AS PSYCHOTICDISORDERS_CURRENTBRIEFPSYCHOTICDISORDER, SEARCH.xnat_a_scidResearchData42 AS PSYCHOTICDISORDERS_PASTBRIEFPSYCHOTICDISORDER, SEARCH.xnat_a_scidResearchData43 AS PSYCHOTICDISORDERS_CURRENTPSYCHOTICDISORDERDUETOMEDICALCONDITIO, SEARCH.xnat_a_scidResearchData44 AS PSYCHOTICDISORDERS_PASTPSYCHOTICDISORDERDUETOMEDICALCONDITION, SEARCH.xnat_a_scidResearchData45 AS PSYCHOTICDISORDERS_CURRENTSUBSTANCEINDUCEDPSYCHOTICDISORDER, SEARCH.xnat_a_scidResearchData46 AS PSYCHOTICDISORDERS_PASTSUBSTANCEINDUCEDPSYCHOTICDISORDER, SEARCH.xnat_a_scidResearchData47 AS PSYCHOTICDISORDERS_CURRENTPSYCHOTICDISORDERNOS, SEARCH.xnat_a_scidResearchData48 AS PSYCHOTICDISORDERS_PASTPSYCHOTICDISORDERNOS, SEARCH.xnat_a_scidResearchData49 AS MOODDISORDERS_CURRENTBIPOLAR1DISORDER, SEARCH.xnat_a_scidResearchData50 AS MOODDISORDERS_PASTBIPOLAR1DISORDER, SEARCH.xnat_a_scidResearchData51 AS MOODDISORDERS_CURRENTBIPOLAR2DISORDER, SEARCH.xnat_a_scidResearchData52 AS MOODDISORDERS_PASTBIPOLAR2DISORDER, SEARCH.xnat_a_scidResearchData53 AS MOODDISORDERS_CURRENTOTHERBIPOLARDISORDER, SEARCH.xnat_a_scidResearchData54 AS MOODDISORDERS_PASTOTHERBIPOLARDISORDER, SEARCH.xnat_a_scidResearchData55 AS MOODDISORDERS_CURRENTMAJORDEPRESSIVEDISORDER, SEARCH.xnat_a_scidResearchData56 AS MOODDISORDERS_PASTMAJORDEPRESSIVEDISORDER, SEARCH.xnat_a_scidResearchData57 AS MOODDISORDERS_CURRENTDEPRESSIVEDISORDERNOS, SEARCH.xnat_a_scidResearchData58 AS MOODDISORDERS_PASTDEPRESSIVEDISORDERNOS, SEARCH.xnat_a_scidResearchData59 AS SUBSTANCEUSEDISORDERS_CURRENTALCOHOLDEPENDENCE, SEARCH.xnat_a_scidResearchData60 AS SUBSTANCEUSEDISORDERS_PASTALCOHOLDEPENDENCE, SEARCH.xnat_a_scidResearchData61 AS SUBSTANCEUSEDISORDERS_CURRENTALCOHOLABUSE, SEARCH.xnat_a_scidResearchData62 AS SUBSTANCEUSEDISORDERS_PASTALCOHOLABUSE, SEARCH.xnat_a_scidResearchData63 AS SUBSTANCEUSEDISORDERS_CURRENTAMPHETAMINEDEPENDENCE, SEARCH.xnat_a_scidResearchData64 AS SUBSTANCEUSEDISORDERS_PASTAMPHETAMINEDEPENDENCE, SEARCH.xnat_a_scidResearchData65 AS SUBSTANCEUSEDISORDERS_CURRENTAMPHETAMINEABUSE, SEARCH.xnat_a_scidResearchData66 AS SUBSTANCEUSEDISORDERS_PASTAMPHETAMINEABUSE, SEARCH.xnat_a_scidResearchData67 AS SUBSTANCEUSEDISORDERS_CURRENTCANNABISDEPENDENCE, SEARCH.xnat_a_scidResearchData68 AS SUBSTANCEUSEDISORDERS_PASTCANNABISDEPENDENCE, SEARCH.xnat_a_scidResearchData69 AS SUBSTANCEUSEDISORDERS_CURRENTCANNABISABUSE, SEARCH.xnat_a_scidResearchData70 AS SUBSTANCEUSEDISORDERS_PASTCANNABISABUSE, SEARCH.xnat_a_scidResearchData71 AS SUBSTANCEUSEDISORDERS_CURRENTCOCAINEDEPENDENCE, SEARCH.xnat_a_scidResearchData72 AS SUBSTANCEUSEDISORDERS_PASTCOCAINEDEPENDENCE, SEARCH.xnat_a_scidResearchData73 AS SUBSTANCEUSEDISORDERS_CURRENTCOCAINEABUSE, SEARCH.xnat_a_scidResearchData74 AS SUBSTANCEUSEDISORDERS_PASTCOCAINEABUSE, SEARCH.xnat_a_scidResearchData75 AS SUBSTANCEUSEDISORDERS_CURRENTHALLUCINOGENDEPENDENCE, SEARCH.xnat_a_scidResearchData76 AS SUBSTANCEUSEDISORDERS_PASTHALLUCINOGENDEPENDENCE, SEARCH.xnat_a_scidResearchData77 AS SUBSTANCEUSEDISORDERS_CURRENTHALLUCINOGENABUSE, SEARCH.xnat_a_scidResearchData78 AS SUBSTANCEUSEDISORDERS_PASTHALLUCINOGENABUSE, SEARCH.xnat_a_scidResearchData79 AS SUBSTANCEUSEDISORDERS_CURRENTOPIOIDDEPENDENCE, SEARCH.xnat_a_scidResearchData80 AS SUBSTANCEUSEDISORDERS_PASTOPIOIDDEPENDENCE, SEARCH.xnat_a_scidResearchData81 AS SUBSTANCEUSEDISORDERS_CURRENTOPIOIDABUSE, SEARCH.xnat_a_scidResearchData82 AS SUBSTANCEUSEDISORDERS_PASTOPIOIDABUSE, SEARCH.xnat_a_scidResearchData83 AS SUBSTANCEUSEDISORDERS_CURRENTPHENCYCLIDINEDEPENDENCE, SEARCH.xnat_a_scidResearchData84 AS SUBSTANCEUSEDISORDERS_PASTPHENCYCLIDINEDEPENDENCE, SEARCH.xnat_a_scidResearchData85 AS SUBSTANCEUSEDISORDERS_CURRENTPHENCYCLIDINEABUSE, SEARCH.xnat_a_scidResearchData86 AS SUBSTANCEUSEDISORDERS_PASTPHENCYCLIDINEABUSE, SEARCH.xnat_a_scidResearchData87 AS SUBSTANCEUSEDISORDERS_CURRENTSEDATIVEHYPNOTICANXIOLYTICDEPENDEN, SEARCH.xnat_a_scidResearchData88 AS SUBSTANCEUSEDISORDERS_PASTSEDATIVEHYPNOTICANXIOLYTICDEPENDENCE, SEARCH.xnat_a_scidResearchData89 AS SUBSTANCEUSEDISORDERS_CURRENTSEDATIVEHYPNOTICANXIOLYTICABUSE, SEARCH.xnat_a_scidResearchData90 AS SUBSTANCEUSEDISORDERS_PASTSEDATIVEHYPNOTICANXIOLYTICABUSE, SEARCH.xnat_a_scidResearchData91 AS SUBSTANCEUSEDISORDERS_CURRENTPOLYSUBSTANCEDEPENDENCE, SEARCH.xnat_a_scidResearchData92 AS SUBSTANCEUSEDISORDERS_PASTPOLYSUBSTANCEDEPENDENCE, SEARCH.xnat_a_scidResearchData93 AS SUBSTANCEUSEDISORDERS_CURRENTOTHERORUNKNOWNDEPENDENCE, SEARCH.xnat_a_scidResearchData94 AS SUBSTANCEUSEDISORDERS_PASTOTHERORUNKNOWNDEPENDENCE, SEARCH.xnat_a_scidResearchData95 AS SUBSTANCEUSEDISORDERS_CURRENTOTHERORUNKNOWNABUSE, SEARCH.xnat_a_scidResearchData96 AS SUBSTANCEUSEDISORDERS_PASTOTHERORUNKNOWNABUSE, SEARCH.xnat_a_scidResearchData97 AS ANXIETYDISORDERS_CURRENTPANICWITHAGORAPHOBIA, SEARCH.xnat_a_scidResearchData98 AS ANXIETYDISORDERS_PASTPANICWITHAGORAPHOBIA, SEARCH.xnat_a_scidResearchData99 AS ANXIETYDISORDERS_CURRENTPANICWITHOUTAGORAPHOBIA, SEARCH.xnat_a_scidResearchData100 AS ANXIETYDISORDERS_PASTPANICWITHOUTAGORAPHOBIA, SEARCH.xnat_a_scidResearchData101 AS ANXIETYDISORDERS_CURRENTAGORAPHOBIAWITHOUTPANICHX, SEARCH.xnat_a_scidResearchData102 AS ANXIETYDISORDERS_PASTAGORAPHOBIAWITHOUTPANICHX, SEARCH.xnat_a_scidResearchData103 AS ANXIETYDISORDERS_CURRENTSOCIALPHOBIA, SEARCH.xnat_a_scidResearchData104 AS ANXIETYDISORDERS_PASTSOCIALPHOBIA, SEARCH.xnat_a_scidResearchData105 AS ANXIETYDISORDERS_CURRENTSPECIFICPHOBIA, SEARCH.xnat_a_scidResearchData106 AS ANXIETYDISORDERS_PASTSPECIFICPHOBIA, SEARCH.xnat_a_scidResearchData107 AS ANXIETYDISORDERS_CURRENTOCD, SEARCH.xnat_a_scidResearchData108 AS ANXIETYDISORDERS_PASTOCD, SEARCH.xnat_a_scidResearchData109 AS ANXIETYDISORDERS_CURRENTPTSD, SEARCH.xnat_a_scidResearchData110 AS ANXIETYDISORDERS_PASTPTSD, SEARCH.xnat_a_scidResearchData111 AS ANXIETYDISORDERS_CURRENTGENERALIZEDANXIETYDISORDER, SEARCH.xnat_a_scidResearchData112 AS ANXIETYDISORDERS_CURRENTANXIETYDUETOMEDICALCONDITION, SEARCH.xnat_a_scidResearchData113 AS ANXIETYDISORDERS_PASTANXIETYDUETOMEDICALCONDITION, SEARCH.xnat_a_scidResearchData114 AS ANXIETYDISORDERS_CURRENTSUBSTANCEINDUCEDANXIETYDISORDER, SEARCH.xnat_a_scidResearchData115 AS ANXIETYDISORDERS_PASTSUBSTANCEINDUCEDANXIETYDISORDER, SEARCH.xnat_a_scidResearchData116 AS ANXIETYDISORDERS_CURRENTANXIETYDISORDERNOS, SEARCH.xnat_a_scidResearchData117 AS ANXIETYDISORDERS_PASTANXIETYDISORDERNOS, SEARCH.xnat_a_scidResearchData118 AS SOMATOFORMDISORDERS_SOMATIZATIONDISORDER, SEARCH.xnat_a_scidResearchData119 AS SOMATOFORMDISORDERS_UNDIFFERENTIATEDSOMATFORMDISORDER, SEARCH.xnat_a_scidResearchData120 AS SOMATOFORMDISORDERS_PAINDISORDER, SEARCH.xnat_a_scidResearchData121 AS SOMATOFORMDISORDERS_HYPOCHONDRIASIS, SEARCH.xnat_a_scidResearchData122 AS SOMATOFORMDISORDERS_BODYDYSMORPHICDISORDER, SEARCH.xnat_a_scidResearchData123 AS EATINGDISORDERS_CURRENTANOREXIANERVOSA, SEARCH.xnat_a_scidResearchData124 AS EATINGDISORDERS_PASTANOREXIANERVOSA, SEARCH.xnat_a_scidResearchData125 AS EATINGDISORDERS_CURRENTBULIMIANERVOSA, SEARCH.xnat_a_scidResearchData126 AS EATINGDISORDERS_PASTBULIMIANERVOSA, SEARCH.xnat_a_scidResearchData127 AS EATINGDISORDERS_CURRENTBINGEEATINGDISORDER, SEARCH.xnat_a_scidResearchData128 AS EATINGDISORDERS_PASTBINGEEATINGDISORDER, SEARCH.xnat_a_scidResearchData129 AS ADJUSTMENTDISORDER, SEARCH.xnat_a_scidResearchData130 AS OPTIONAL_CURRENTACUTESTRESSDISORDER, SEARCH.xnat_a_scidResearchData131 AS OPTIONAL_PASTACUTESTRESSDISORDER, SEARCH.xnat_a_scidResearchData132 AS OPTIONAL_CURRENTMINORDEPRESSIVEDISORDER, SEARCH.xnat_a_scidResearchData133 AS OPTIONAL_PASTMINORDEPRESSIVEDISORDER, SEARCH.xnat_a_scidResearchData134 AS OPTIONAL_CURRENTMIXEDANXIETYDEPRESSIVEDISORDER, SEARCH.xnat_a_scidResearchData135 AS OPTIONAL_PASTMIXEDANXIETYDEPRESSIVEDISORDER, SEARCH.xnat_a_scidResearchData136 AS OPTIONAL_PASTSYMPOMATICDETAILS, SEARCH.xnat_a_scidResearchData_meta_data306 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_a_scidResearchData0) * FROM (SELECT table1.id AS xnat_a_scidResearchData0, table3.status AS xnat_a_scidResearchData_meta_data306, table0.subject_id AS xnat_subjectAssessorData139, table1.date AS xnat_experimentData142, table1.label AS xnat_experimentData158, table4.login AS table4_login, table3.insert_date AS xnat_a_scidResearchData_meta_data309, table1.project AS xnat_experimentData152, xnat_a_scidResearchData.administrator AS xnat_a_scidResearchData1, xnat_a_scidResearchData.moodepisodes_currentmajordepressiveepisode AS xnat_a_scidResearchData2, xnat_a_scidResearchData.moodepisodes_pastmajordepressiveepisode AS xnat_a_scidResearchData3, xnat_a_scidResearchData.moodepisodes_currentmanicepisode AS xnat_a_scidResearchData4, xnat_a_scidResearchData.moodepisodes_pastmanicepisode AS xnat_a_scidResearchData5, xnat_a_scidResearchData.moodepisodes_currenthypomanicepisode AS xnat_a_scidResearchData6, xnat_a_scidResearchData.moodepisodes_pasthypomanicepisode AS xnat_a_scidResearchData7, xnat_a_scidResearchData.moodepisodes_currentdysthmicepisode AS xnat_a_scidResearchData8, xnat_a_scidResearchData.moodepisodes_currentmooddisorderduetomedicalcondition AS xnat_a_scidResearchData9, xnat_a_scidResearchData.moodepisodes_pastmooddisorderduetomedicalcondition AS xnat_a_scidResearchData10, xnat_a_scidResearchData.moodepisodes_currentsubstanceinducedmooddisorder AS xnat_a_scidResearchData11, xnat_a_scidResearchData.moodepisodes_pastsubstanceinducedmooddisorder AS xnat_a_scidResearchData12, xnat_a_scidResearchData.psychoticsymptoms_currentdelusions AS xnat_a_scidResearchData13, xnat_a_scidResearchData.psychoticsymptoms_pastdelusions AS xnat_a_scidResearchData14, xnat_a_scidResearchData.psychoticsymptoms_currenthallucinations AS xnat_a_scidResearchData15, xnat_a_scidResearchData.psychoticsymptoms_pasthallucinations AS xnat_a_scidResearchData16, xnat_a_scidResearchData.psychoticsymptoms_currentdisorganizedspeechbehavior AS xnat_a_scidResearchData17, xnat_a_scidResearchData.psychoticsymptoms_pastdisorganizedspeechbehavior AS xnat_a_scidResearchData18, xnat_a_scidResearchData.psychoticsymptoms_currentcatatonicbehavior AS xnat_a_scidResearchData19, xnat_a_scidResearchData.psychoticsymptoms_pastcatatonicbehavior AS xnat_a_scidResearchData20, xnat_a_scidResearchData.psychoticsymptoms_currentnegativesymptoms AS xnat_a_scidResearchData21, xnat_a_scidResearchData.psychoticsymptoms_pastnegativesymptoms AS xnat_a_scidResearchData22, xnat_a_scidResearchData.psychoticdisorders_currentschizophrenia AS xnat_a_scidResearchData23, xnat_a_scidResearchData.psychoticdisorders_pastschizophrenia AS xnat_a_scidResearchData24, xnat_a_scidResearchData.psychoticdisorders_currentparanoidtype AS xnat_a_scidResearchData25, xnat_a_scidResearchData.psychoticdisorders_pastparanoidtype AS xnat_a_scidResearchData26, xnat_a_scidResearchData.psychoticdisorders_currentcatatonictype AS xnat_a_scidResearchData27, xnat_a_scidResearchData.psychoticdisorders_pastcatatonictype AS xnat_a_scidResearchData28, xnat_a_scidResearchData.psychoticdisorders_currentdisorganizedtype AS xnat_a_scidResearchData29, xnat_a_scidResearchData.psychoticdisorders_pastdisorganizedtype AS xnat_a_scidResearchData30, xnat_a_scidResearchData.psychoticdisorders_currentundifferentiatedtype AS xnat_a_scidResearchData31, xnat_a_scidResearchData.psychoticdisorders_pastundifferentiatedtype AS xnat_a_scidResearchData32, xnat_a_scidResearchData.psychoticdisorders_currentresidualtype AS xnat_a_scidResearchData33, xnat_a_scidResearchData.psychoticdisorders_pastresidualtype AS xnat_a_scidResearchData34, xnat_a_scidResearchData.psychoticdisorders_currentschizophreniformdisorder AS xnat_a_scidResearchData35, xnat_a_scidResearchData.psychoticdisorders_pastschizophreniformdisorder AS xnat_a_scidResearchData36, xnat_a_scidResearchData.psychoticdisorders_currentschizoaffectivedisorder AS xnat_a_scidResearchData37, xnat_a_scidResearchData.psychoticdisorders_pastschizoaffectivedisorder AS xnat_a_scidResearchData38, xnat_a_scidResearchData.psychoticdisorders_currentdelusionaldisorder AS xnat_a_scidResearchData39, xnat_a_scidResearchData.psychoticdisorders_pastdelusionaldisorder AS xnat_a_scidResearchData40, xnat_a_scidResearchData.psychoticdisorders_currentbriefpsychoticdisorder AS xnat_a_scidResearchData41, xnat_a_scidResearchData.psychoticdisorders_pastbriefpsychoticdisorder AS xnat_a_scidResearchData42, xnat_a_scidResearchData.psychoticdisorders_currentpsychoticdisorderduetomedicalconditio AS xnat_a_scidResearchData43, xnat_a_scidResearchData.psychoticdisorders_pastpsychoticdisorderduetomedicalcondition AS xnat_a_scidResearchData44, xnat_a_scidResearchData.psychoticdisorders_currentsubstanceinducedpsychoticdisorder AS xnat_a_scidResearchData45, xnat_a_scidResearchData.psychoticdisorders_pastsubstanceinducedpsychoticdisorder AS xnat_a_scidResearchData46, xnat_a_scidResearchData.psychoticdisorders_currentpsychoticdisordernos AS xnat_a_scidResearchData47, xnat_a_scidResearchData.psychoticdisorders_pastpsychoticdisordernos AS xnat_a_scidResearchData48, xnat_a_scidResearchData.mooddisorders_currentbipolar1disorder AS xnat_a_scidResearchData49, xnat_a_scidResearchData.mooddisorders_pastbipolar1disorder AS xnat_a_scidResearchData50, xnat_a_scidResearchData.mooddisorders_currentbipolar2disorder AS xnat_a_scidResearchData51, xnat_a_scidResearchData.mooddisorders_pastbipolar2disorder AS xnat_a_scidResearchData52, xnat_a_scidResearchData.mooddisorders_currentotherbipolardisorder AS xnat_a_scidResearchData53, xnat_a_scidResearchData.mooddisorders_pastotherbipolardisorder AS xnat_a_scidResearchData54, xnat_a_scidResearchData.mooddisorders_currentmajordepressivedisorder AS xnat_a_scidResearchData55, xnat_a_scidResearchData.mooddisorders_pastmajordepressivedisorder AS xnat_a_scidResearchData56, xnat_a_scidResearchData.mooddisorders_currentdepressivedisordernos AS xnat_a_scidResearchData57, xnat_a_scidResearchData.mooddisorders_pastdepressivedisordernos AS xnat_a_scidResearchData58, xnat_a_scidResearchData.substanceusedisorders_currentalcoholdependence AS xnat_a_scidResearchData59, xnat_a_scidResearchData.substanceusedisorders_pastalcoholdependence AS xnat_a_scidResearchData60, xnat_a_scidResearchData.substanceusedisorders_currentalcoholabuse AS xnat_a_scidResearchData61, xnat_a_scidResearchData.substanceusedisorders_pastalcoholabuse AS xnat_a_scidResearchData62, xnat_a_scidResearchData.substanceusedisorders_currentamphetaminedependence AS xnat_a_scidResearchData63, xnat_a_scidResearchData.substanceusedisorders_pastamphetaminedependence AS xnat_a_scidResearchData64, xnat_a_scidResearchData.substanceusedisorders_currentamphetamineabuse AS xnat_a_scidResearchData65, xnat_a_scidResearchData.substanceusedisorders_pastamphetamineabuse AS xnat_a_scidResearchData66, xnat_a_scidResearchData.substanceusedisorders_currentcannabisdependence AS xnat_a_scidResearchData67, xnat_a_scidResearchData.substanceusedisorders_pastcannabisdependence AS xnat_a_scidResearchData68, xnat_a_scidResearchData.substanceusedisorders_currentcannabisabuse AS xnat_a_scidResearchData69, xnat_a_scidResearchData.substanceusedisorders_pastcannabisabuse AS xnat_a_scidResearchData70, xnat_a_scidResearchData.substanceusedisorders_currentcocainedependence AS xnat_a_scidResearchData71, xnat_a_scidResearchData.substanceusedisorders_pastcocainedependence AS xnat_a_scidResearchData72, xnat_a_scidResearchData.substanceusedisorders_currentcocaineabuse AS xnat_a_scidResearchData73, xnat_a_scidResearchData.substanceusedisorders_pastcocaineabuse AS xnat_a_scidResearchData74, xnat_a_scidResearchData.substanceusedisorders_currenthallucinogendependence AS xnat_a_scidResearchData75, xnat_a_scidResearchData.substanceusedisorders_pasthallucinogendependence AS xnat_a_scidResearchData76, xnat_a_scidResearchData.substanceusedisorders_currenthallucinogenabuse AS xnat_a_scidResearchData77, xnat_a_scidResearchData.substanceusedisorders_pasthallucinogenabuse AS xnat_a_scidResearchData78, xnat_a_scidResearchData.substanceusedisorders_currentopioiddependence AS xnat_a_scidResearchData79, xnat_a_scidResearchData.substanceusedisorders_pastopioiddependence AS xnat_a_scidResearchData80, xnat_a_scidResearchData.substanceusedisorders_currentopioidabuse AS xnat_a_scidResearchData81, xnat_a_scidResearchData.substanceusedisorders_pastopioidabuse AS xnat_a_scidResearchData82, xnat_a_scidResearchData.substanceusedisorders_currentphencyclidinedependence AS xnat_a_scidResearchData83, xnat_a_scidResearchData.substanceusedisorders_pastphencyclidinedependence AS xnat_a_scidResearchData84, xnat_a_scidResearchData.substanceusedisorders_currentphencyclidineabuse AS xnat_a_scidResearchData85, xnat_a_scidResearchData.substanceusedisorders_pastphencyclidineabuse AS xnat_a_scidResearchData86, xnat_a_scidResearchData.substanceusedisorders_currentsedativehypnoticanxiolyticdependen AS xnat_a_scidResearchData87, xnat_a_scidResearchData.substanceusedisorders_pastsedativehypnoticanxiolyticdependence AS xnat_a_scidResearchData88, xnat_a_scidResearchData.substanceusedisorders_currentsedativehypnoticanxiolyticabuse AS xnat_a_scidResearchData89, xnat_a_scidResearchData.substanceusedisorders_pastsedativehypnoticanxiolyticabuse AS xnat_a_scidResearchData90, xnat_a_scidResearchData.substanceusedisorders_currentpolysubstancedependence AS xnat_a_scidResearchData91, xnat_a_scidResearchData.substanceusedisorders_pastpolysubstancedependence AS xnat_a_scidResearchData92, xnat_a_scidResearchData.substanceusedisorders_currentotherorunknowndependence AS xnat_a_scidResearchData93, xnat_a_scidResearchData.substanceusedisorders_pastotherorunknowndependence AS xnat_a_scidResearchData94, xnat_a_scidResearchData.substanceusedisorders_currentotherorunknownabuse AS xnat_a_scidResearchData95, xnat_a_scidResearchData.substanceusedisorders_pastotherorunknownabuse AS xnat_a_scidResearchData96, xnat_a_scidResearchData.anxietydisorders_currentpanicwithagoraphobia AS xnat_a_scidResearchData97, xnat_a_scidResearchData.anxietydisorders_pastpanicwithagoraphobia AS xnat_a_scidResearchData98, xnat_a_scidResearchData.anxietydisorders_currentpanicwithoutagoraphobia AS xnat_a_scidResearchData99, xnat_a_scidResearchData.anxietydisorders_pastpanicwithoutagoraphobia AS xnat_a_scidResearchData100, xnat_a_scidResearchData.anxietydisorders_currentagoraphobiawithoutpanichx AS xnat_a_scidResearchData101, xnat_a_scidResearchData.anxietydisorders_pastagoraphobiawithoutpanichx AS xnat_a_scidResearchData102, xnat_a_scidResearchData.anxietydisorders_currentsocialphobia AS xnat_a_scidResearchData103, xnat_a_scidResearchData.anxietydisorders_pastsocialphobia AS xnat_a_scidResearchData104, xnat_a_scidResearchData.anxietydisorders_currentspecificphobia AS xnat_a_scidResearchData105, xnat_a_scidResearchData.anxietydisorders_pastspecificphobia AS xnat_a_scidResearchData106, xnat_a_scidResearchData.anxietydisorders_currentocd AS xnat_a_scidResearchData107, xnat_a_scidResearchData.anxietydisorders_pastocd AS xnat_a_scidResearchData108, xnat_a_scidResearchData.anxietydisorders_currentptsd AS xnat_a_scidResearchData109, xnat_a_scidResearchData.anxietydisorders_pastptsd AS xnat_a_scidResearchData110, xnat_a_scidResearchData.anxietydisorders_currentgeneralizedanxietydisorder AS xnat_a_scidResearchData111, xnat_a_scidResearchData.anxietydisorders_currentanxietyduetomedicalcondition AS xnat_a_scidResearchData112, xnat_a_scidResearchData.anxietydisorders_pastanxietyduetomedicalcondition AS xnat_a_scidResearchData113, xnat_a_scidResearchData.anxietydisorders_currentsubstanceinducedanxietydisorder AS xnat_a_scidResearchData114, xnat_a_scidResearchData.anxietydisorders_pastsubstanceinducedanxietydisorder AS xnat_a_scidResearchData115, xnat_a_scidResearchData.anxietydisorders_currentanxietydisordernos AS xnat_a_scidResearchData116, xnat_a_scidResearchData.anxietydisorders_pastanxietydisordernos AS xnat_a_scidResearchData117, xnat_a_scidResearchData.somatoformdisorders_somatizationdisorder AS xnat_a_scidResearchData118, xnat_a_scidResearchData.somatoformdisorders_undifferentiatedsomatformdisorder AS xnat_a_scidResearchData119, xnat_a_scidResearchData.somatoformdisorders_paindisorder AS xnat_a_scidResearchData120, xnat_a_scidResearchData.somatoformdisorders_hypochondriasis AS xnat_a_scidResearchData121, xnat_a_scidResearchData.somatoformdisorders_bodydysmorphicdisorder AS xnat_a_scidResearchData122, xnat_a_scidResearchData.eatingdisorders_currentanorexianervosa AS xnat_a_scidResearchData123, xnat_a_scidResearchData.eatingdisorders_pastanorexianervosa AS xnat_a_scidResearchData124, xnat_a_scidResearchData.eatingdisorders_currentbulimianervosa AS xnat_a_scidResearchData125, xnat_a_scidResearchData.eatingdisorders_pastbulimianervosa AS xnat_a_scidResearchData126, xnat_a_scidResearchData.eatingdisorders_currentbingeeatingdisorder AS xnat_a_scidResearchData127, xnat_a_scidResearchData.eatingdisorders_pastbingeeatingdisorder AS xnat_a_scidResearchData128, xnat_a_scidResearchData.adjustmentdisorder AS xnat_a_scidResearchData129, xnat_a_scidResearchData.optional_currentacutestressdisorder AS xnat_a_scidResearchData130, xnat_a_scidResearchData.optional_pastacutestressdisorder AS xnat_a_scidResearchData131, xnat_a_scidResearchData.optional_currentminordepressivedisorder AS xnat_a_scidResearchData132, xnat_a_scidResearchData.optional_pastminordepressivedisorder AS xnat_a_scidResearchData133, xnat_a_scidResearchData.optional_currentmixedanxietydepressivedisorder AS xnat_a_scidResearchData134, xnat_a_scidResearchData.optional_pastmixedanxietydepressivedisorder AS xnat_a_scidResearchData135, xnat_a_scidResearchData.optional_pastsympomaticdetails AS xnat_a_scidResearchData136, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_A_SCIDRESEARCHDATA_PROJECTS.PROJECTS AS XNAT_A_SCIDRESEARCHDATA_PROJECTS_PROJECTS FROM xnat_a_scidResearchData xnat_a_scidResearchData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_scidResearchData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xnat_a_scidResearchData_meta_data table3 ON xnat_a_scidResearchData.scidResearchData_info=table3.meta_data_id   LEFT JOIN xdat_user table4 ON table3.insert_user_xdat_user_id=table4.xdat_user_id  LEFT JOIN XNAT_A_SCIDRESEARCHDATA_PROJECTS XNAT_A_SCIDRESEARCHDATA_PROJECTS ON table1.id=XNAT_A_SCIDRESEARCHDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_a_scidResearchData.xnat_a_scidResearchData0 AS xnat_a_scidResearchData_tdata_xnat_a_scidResearchData0, xnat_a_scidResearchData.xnat_experimentData142 AS xnat_a_scidResearchData_tdata_E_xnat_experimentData142, xnat_a_scidResearchData.xnat_subjectAssessorData139 AS xnat_a_scidResearchData_id_xnat_subjectAssessorData139, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table1.id AS xnat_a_scidResearchData0, table1.date AS xnat_experimentData142, table0.subject_id AS xnat_subjectAssessorData139 FROM xnat_a_scidResearchData xnat_a_scidResearchData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_scidResearchData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) AS xnat_a_scidResearchData ON xnat_subjectData.id=xnat_a_scidResearchData.xnat_subjectAssessorData139 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_a_scidResearchData_tdata_E_xnat_experimentData142 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table1.id=map_xnat_subjectData_xnat_demographicData.xnat_a_scidResearchData_tdata_xnat_a_scidResearchData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_a_scidResearchData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_a_scidResearchData0 FROM (SELECT table1.id AS xnat_a_scidResearchData0, table1.date AS xnat_experimentData142 FROM xnat_a_scidResearchData xnat_a_scidResearchData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_scidResearchData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_a_scidResearchData0=SEARCH.xnat_a_scidResearchData0 ORDER BY (SEARCH.xnat_subjectAssessorData139) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_SUBJECTVARIABLESDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:subjectVariablesData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_subjectVariablesData AS SELECT SEARCH.xnat_subjectAssessorData3 AS SUBJECT_ID, SEARCH.xnat_subjectVariablesData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData6 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData6) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData6)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_SUBJECTVARIABLESDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData22, SEARCH.xnat_subjectVariablesData0) AS LABEL, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_subjectVariablesData_meta_data190 AS INSERT_DATE, SEARCH.xnat_experimentData16 AS PROJECT, SEARCH.xnat_subjectVariablesData_meta_data187 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_subjectVariablesData0) * FROM (SELECT table1.id AS xnat_subjectVariablesData0, table3.status AS xnat_subjectVariablesData_meta_data187, table0.subject_id AS xnat_subjectAssessorData3, table1.date AS xnat_experimentData6, table1.label AS xnat_experimentData22, table4.login AS table4_login, table3.insert_date AS xnat_subjectVariablesData_meta_data190, table1.project AS xnat_experimentData16, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_SUBJECTVARIABLESDATA_PROJECTS.PROJECTS AS XNAT_SUBJECTVARIABLESDATA_PROJECTS_PROJECTS FROM xnat_subjectVariablesData xnat_subjectVariablesData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_subjectVariablesData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xnat_subjectVariablesData_meta_data table3 ON xnat_subjectVariablesData.subjectVariablesData_info=table3.meta_data_id   LEFT JOIN xdat_user table4 ON table3.insert_user_xdat_user_id=table4.xdat_user_id  LEFT JOIN XNAT_SUBJECTVARIABLESDATA_PROJECTS XNAT_SUBJECTVARIABLESDATA_PROJECTS ON table1.id=XNAT_SUBJECTVARIABLESDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_subjectVariablesData.xnat_subjectVariablesData0 AS xnat_subjectVariablesData_tda_xnat_subjectVariablesData0, xnat_subjectVariablesData.xnat_experimentData6 AS xnat_subjectVariablesData_tdata_EXT_xnat_experimentData6, xnat_subjectVariablesData.xnat_subjectAssessorData3 AS xnat_subjectVariablesData_ectV_xnat_subjectAssessorData3 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table1.id AS xnat_subjectVariablesData0, table1.date AS xnat_experimentData6, table0.subject_id AS xnat_subjectAssessorData3 FROM xnat_subjectVariablesData xnat_subjectVariablesData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_subjectVariablesData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) AS xnat_subjectVariablesData ON xnat_subjectData.id=xnat_subjectVariablesData.xnat_subjectAssessorData3) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_subjectVariablesData_tdata_EXT_xnat_experimentData6 DESC) AS map_xnat_subjectData_xnat_demographicData ON table1.id=map_xnat_subjectData_xnat_demographicData.xnat_subjectVariablesData_tda_xnat_subjectVariablesData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_subjectVariablesData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_subjectVariablesData0 FROM (SELECT table1.id AS xnat_subjectVariablesData0, table1.date AS xnat_experimentData6 FROM xnat_subjectVariablesData xnat_subjectVariablesData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_subjectVariablesData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_subjectVariablesData0=SEARCH.xnat_subjectVariablesData0 ORDER BY (SEARCH.xnat_subjectAssessorData3) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_gmScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_gmScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_gmScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_gmScanData0, table2.status AS xnat_gmScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_gmScanData_meta_data118, table4.login AS table4_login FROM xnat_gmScanData xnat_gmScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_gmScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_gmScanData_meta_data table2 ON xnat_gmScanData.gmScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_gmScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_gmScanData0, table2.insert_date AS xnat_gmScanData_meta_data118 FROM xnat_gmScanData xnat_gmScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_gmScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_gmScanData_meta_data table2 ON xnat_gmScanData.gmScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_gmScanData0=SEARCH.xnat_gmScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_cat_entry AS SELECT SEARCH.cat_entry_meta_data58 AS INSERT_DATE, SEARCH.table2_login AS INSERT_USER, SEARCH.cat_entry0 AS URI, SEARCH.cat_entry1 AS ID, SEARCH.cat_entry2 AS NAME, SEARCH.cat_entry3 AS DESCRIPTION, SEARCH.cat_entry4 AS FORMAT, SEARCH.cat_entry5 AS CONTENT, SEARCH.cat_entry6 AS CACHEPATH, SEARCH.cat_entry7 AS CREATEDTIME, SEARCH.cat_entry8 AS CREATEDBY, SEARCH.cat_entry9 AS CREATEDEVENTID, SEARCH.cat_entry10 AS MODIFIEDTIME, SEARCH.cat_entry11 AS MODIFIEDBY, SEARCH.cat_entry12 AS MODIFIEDEVENTID, SEARCH.cat_entry13 AS DIGEST, SEARCH.cat_entry_meta_data55 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  cat_entry.cat_entry_id AS cat_entry16, table1.status AS cat_entry_meta_data55, table1.insert_date AS cat_entry_meta_data58, table2.login AS table2_login, cat_entry.uri AS cat_entry0, cat_entry.id AS cat_entry1, cat_entry.name AS cat_entry2, cat_entry.description AS cat_entry3, cat_entry.format AS cat_entry4, cat_entry.content AS cat_entry5, cat_entry.cachepath AS cat_entry6, cat_entry.createdtime AS cat_entry7, cat_entry.createdby AS cat_entry8, cat_entry.createdeventid AS cat_entry9, cat_entry.modifiedtime AS cat_entry10, cat_entry.modifiedby AS cat_entry11, cat_entry.modifiedeventid AS cat_entry12, cat_entry.digest AS cat_entry13 FROM cat_entry cat_entry   LEFT JOIN cat_entry_meta_data table1 ON cat_entry.entry_info=table1.meta_data_id   LEFT JOIN xdat_user table2 ON table1.insert_user_xdat_user_id=table2.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT cat_entry16 FROM (SELECT cat_entry.cat_entry_id AS cat_entry16, table1.insert_date AS cat_entry_meta_data58 FROM cat_entry cat_entry   LEFT JOIN cat_entry_meta_data table1 ON cat_entry.entry_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.cat_entry16=SEARCH.cat_entry16 ORDER BY (SEARCH.cat_entry_meta_data58) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_GMVSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:gmvSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_gmvSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_gmvSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_GMVSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_gmvSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_gmvSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_gmvSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_gmvSessionData0) * FROM (SELECT table2.id AS xnat_gmvSessionData0, table4.status AS xnat_gmvSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_gmvSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_GMVSESSIONDATA_PROJECTS.PROJECTS AS XNAT_GMVSESSIONDATA_PROJECTS_PROJECTS FROM xnat_gmvSessionData xnat_gmvSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_gmvSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_gmvSessionData_meta_data table4 ON xnat_gmvSessionData.gmvSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_GMVSESSIONDATA_PROJECTS XNAT_GMVSESSIONDATA_PROJECTS ON table2.id=XNAT_GMVSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_gmvSessionData.xnat_gmvSessionData0 AS xnat_gmvSessionData_sordata_E_xnat_gmvSessionData0, xnat_gmvSessionData.xnat_experimentData20 AS xnat_gmvSessionData_sordata__xnat_experimentData20, xnat_gmvSessionData.xnat_subjectAssessorData17 AS xnat_gmvSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_gmvSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_gmvSessionData xnat_gmvSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_gmvSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_gmvSessionData ON xnat_subjectData.id=xnat_gmvSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_gmvSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_gmvSessionData_sordata_E_xnat_gmvSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_gmvSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_gmvSessionData0 FROM (SELECT table2.id AS xnat_gmvSessionData0, table2.date AS xnat_experimentData20 FROM xnat_gmvSessionData xnat_gmvSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_gmvSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_gmvSessionData0=SEARCH.xnat_gmvSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_DXSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:dxSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_dxSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_dxSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_DXSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_dxSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_dxSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_dxSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_dxSessionData0) * FROM (SELECT table2.id AS xnat_dxSessionData0, table4.status AS xnat_dxSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_dxSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_DXSESSIONDATA_PROJECTS.PROJECTS AS XNAT_DXSESSIONDATA_PROJECTS_PROJECTS FROM xnat_dxSessionData xnat_dxSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_dxSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_dxSessionData_meta_data table4 ON xnat_dxSessionData.dxSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_DXSESSIONDATA_PROJECTS XNAT_DXSESSIONDATA_PROJECTS ON table2.id=XNAT_DXSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_dxSessionData.xnat_dxSessionData0 AS xnat_dxSessionData_sordata_EX_xnat_dxSessionData0, xnat_dxSessionData.xnat_experimentData20 AS xnat_dxSessionData_sordata__xnat_experimentData20, xnat_dxSessionData.xnat_subjectAssessorData17 AS xnat_dxSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_dxSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_dxSessionData xnat_dxSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_dxSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_dxSessionData ON xnat_subjectData.id=xnat_dxSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_dxSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_dxSessionData_sordata_EX_xnat_dxSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_dxSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_dxSessionData0 FROM (SELECT table2.id AS xnat_dxSessionData0, table2.date AS xnat_experimentData20 FROM xnat_dxSessionData xnat_dxSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_dxSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_dxSessionData0=SEARCH.xnat_dxSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_cat_catalog AS SELECT SEARCH.cat_catalog_meta_data112 AS INSERT_DATE, SEARCH.table2_login AS INSERT_USER, SEARCH.cat_catalog1 AS ID, SEARCH.cat_catalog2 AS NAME, SEARCH.cat_catalog3 AS DESCRIPTION, SEARCH.cat_catalog_meta_data109 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  cat_catalog.cat_catalog_id AS cat_catalog6, table1.status AS cat_catalog_meta_data109, table1.insert_date AS cat_catalog_meta_data112, table2.login AS table2_login, cat_catalog.id AS cat_catalog1, cat_catalog.name AS cat_catalog2, cat_catalog.description AS cat_catalog3 FROM cat_catalog cat_catalog   LEFT JOIN cat_catalog_meta_data table1 ON cat_catalog.catalog_info=table1.meta_data_id   LEFT JOIN xdat_user table2 ON table1.insert_user_xdat_user_id=table2.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT cat_catalog6 FROM (SELECT cat_catalog.cat_catalog_id AS cat_catalog6, table1.insert_date AS cat_catalog_meta_data112 FROM cat_catalog cat_catalog   LEFT JOIN cat_catalog_meta_data table1 ON cat_catalog.catalog_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.cat_catalog6=SEARCH.cat_catalog6 ORDER BY (SEARCH.cat_catalog_meta_data112) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_OTHERDICOMSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:otherDicomSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_otherDicomSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_otherDicomSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_OTHERDICOMSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_otherDicomSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_otherDicomSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_otherDicomSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_otherDicomSessionData0) * FROM (SELECT table2.id AS xnat_otherDicomSessionData0, table4.status AS xnat_otherDicomSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_otherDicomSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_OTHERDICOMSESSIONDATA_PROJECTS.PROJECTS AS XNAT_OTHERDICOMSESSIONDATA_PROJECTS_PROJECTS FROM xnat_otherDicomSessionData xnat_otherDicomSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_otherDicomSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_otherDicomSessionData_meta_data table4 ON xnat_otherDicomSessionData.otherDicomSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_OTHERDICOMSESSIONDATA_PROJECTS XNAT_OTHERDICOMSESSIONDATA_PROJECTS ON table2.id=XNAT_OTHERDICOMSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_otherDicomSessionData.xnat_otherDicomSessionData0 AS xnat_otherDicomSessionData_so_xnat_otherDicomSessionData0, xnat_otherDicomSessionData.xnat_experimentData20 AS xnat_otherDicomSessionData_sordata__xnat_experimentData20, xnat_otherDicomSessionData.xnat_subjectAssessorData17 AS xnat_otherDicomSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_otherDicomSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_otherDicomSessionData xnat_otherDicomSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_otherDicomSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_otherDicomSessionData ON xnat_subjectData.id=xnat_otherDicomSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_otherDicomSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_otherDicomSessionData_so_xnat_otherDicomSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_otherDicomSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_otherDicomSessionData0 FROM (SELECT table2.id AS xnat_otherDicomSessionData0, table2.date AS xnat_experimentData20 FROM xnat_otherDicomSessionData xnat_otherDicomSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_otherDicomSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_otherDicomSessionData0=SEARCH.xnat_otherDicomSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_MEGSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:megSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_megSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_megSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_MEGSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_megSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_megSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_megSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_megSessionData0) * FROM (SELECT table2.id AS xnat_megSessionData0, table4.status AS xnat_megSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_megSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_MEGSESSIONDATA_PROJECTS.PROJECTS AS XNAT_MEGSESSIONDATA_PROJECTS_PROJECTS FROM xnat_megSessionData xnat_megSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_megSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_megSessionData_meta_data table4 ON xnat_megSessionData.megSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_MEGSESSIONDATA_PROJECTS XNAT_MEGSESSIONDATA_PROJECTS ON table2.id=XNAT_MEGSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_megSessionData.xnat_megSessionData0 AS xnat_megSessionData_sordata_E_xnat_megSessionData0, xnat_megSessionData.xnat_experimentData20 AS xnat_megSessionData_sordata__xnat_experimentData20, xnat_megSessionData.xnat_subjectAssessorData17 AS xnat_megSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_megSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_megSessionData xnat_megSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_megSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_megSessionData ON xnat_subjectData.id=xnat_megSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_megSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_megSessionData_sordata_E_xnat_megSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_megSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_megSessionData0 FROM (SELECT table2.id AS xnat_megSessionData0, table2.date AS xnat_experimentData20 FROM xnat_megSessionData xnat_megSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_megSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_megSessionData0=SEARCH.xnat_megSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_regionResource AS SELECT SEARCH.xnat_regionResource_meta_data110 AS INSERT_DATE, SEARCH.table2_login AS INSERT_USER, SEARCH.xnat_regionResource2 AS CREATOR_FIRSTNAME, SEARCH.xnat_regionResource3 AS CREATOR_LASTNAME, SEARCH.xnat_regionResource4 AS NAME, SEARCH.xnat_regionResource5 AS HEMISPHERE, SEARCH.xnat_regionResource6 AS SESSION_ID, SEARCH.xnat_regionResource_meta_data107 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xnat_regionResource.xnat_regionresource_id AS xnat_regionResource8, table1.status AS xnat_regionResource_meta_data107, table1.insert_date AS xnat_regionResource_meta_data110, table2.login AS table2_login, xnat_regionResource.creator_firstname AS xnat_regionResource2, xnat_regionResource.creator_lastname AS xnat_regionResource3, xnat_regionResource.name AS xnat_regionResource4, xnat_regionResource.hemisphere AS xnat_regionResource5, xnat_regionResource.session_id AS xnat_regionResource6 FROM xnat_regionResource xnat_regionResource   LEFT JOIN xnat_regionResource_meta_data table1 ON xnat_regionResource.regionResource_info=table1.meta_data_id   LEFT JOIN xdat_user table2 ON table1.insert_user_xdat_user_id=table2.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_regionResource8 FROM (SELECT xnat_regionResource.xnat_regionresource_id AS xnat_regionResource8, table1.insert_date AS xnat_regionResource_meta_data110 FROM xnat_regionResource xnat_regionResource   LEFT JOIN xnat_regionResource_meta_data table1 ON xnat_regionResource.regionResource_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_regionResource8=SEARCH.xnat_regionResource8 ORDER BY (SEARCH.xnat_regionResource_meta_data110) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_DX3DCRANIOFACIALSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:dx3DCraniofacialSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_dx3DCraniofacialSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_dx3DCraniofacialSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_DX3DCRANIOFACIALSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_dx3DCraniofacialSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_dx3DCraniofacialSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_dx3DCraniofacialSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_dx3DCraniofacialSessionData0) * FROM (SELECT table2.id AS xnat_dx3DCraniofacialSessionData0, table4.status AS xnat_dx3DCraniofacialSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_dx3DCraniofacialSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_DX3DCRANIOFACIALSESSIONDATA_PROJECTS.PROJECTS AS XNAT_DX3DCRANIOFACIALSESSIONDATA_PROJECTS_PROJECTS FROM xnat_dx3DCraniofacialSessionData xnat_dx3DCraniofacialSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_dx3DCraniofacialSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_dx3DCraniofacialSessionData_meta_data table4 ON xnat_dx3DCraniofacialSessionData.dx3DCraniofacialSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_DX3DCRANIOFACIALSESSIONDATA_PROJECTS XNAT_DX3DCRANIOFACIALSESSIONDATA_PROJECTS ON table2.id=XNAT_DX3DCRANIOFACIALSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_dx3DCraniofacialSessionData.xnat_dx3DCraniofacialSessionData0 AS xnat_dx3DCraniofacialSessionDa_t_dx3DCraniofacialSessionData0, xnat_dx3DCraniofacialSessionData.xnat_experimentData20 AS xnat_dx3DCraniofacialSessionDa_sordata__xnat_experimentData20, xnat_dx3DCraniofacialSessionData.xnat_subjectAssessorData17 AS xnat_dx3DCraniofacialSessionDa_sor_xnat_subjectAssessorData17, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_dx3DCraniofacialSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_dx3DCraniofacialSessionData xnat_dx3DCraniofacialSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_dx3DCraniofacialSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_dx3DCraniofacialSessionData ON xnat_subjectData.id=xnat_dx3DCraniofacialSessionData.xnat_subjectAssessorData17 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_dx3DCraniofacialSessionDa_sordata__xnat_experimentData20 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_dx3DCraniofacialSessionDa_t_dx3DCraniofacialSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_dx3DCraniofacialSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_dx3DCraniofacialSessionData0 FROM (SELECT table2.id AS xnat_dx3DCraniofacialSessionData0, table2.date AS xnat_experimentData20 FROM xnat_dx3DCraniofacialSessionData xnat_dx3DCraniofacialSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_dx3DCraniofacialSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_dx3DCraniofacialSessionData0=SEARCH.xnat_dx3DCraniofacialSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW ROLE_COUNT AS SELECT role_name AS role1,COUNT (map.xdat_a_xdat_action_type_allowe_xdat_role_type_id) AS ACTION_COUNT FROM xdat_role_type role LEFT JOIN xdat_a_xdat_action_type_allowe_xdat_role_type map ON role.role_name=map.xdat_role_type_role_name GROUP BY role_name;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xdat_role_type AS SELECT SEARCH.xdat_role_type0 AS ROLE_NAME, '/@WEBAPP/images/r.gif'::text AS RPT, CASE SEARCH.xdat_role_type_meta_data24 WHEN 'active' THEN '/@WEBAPP/images/cg.gif' ELSE  '/@WEBAPP/images/cr.gif' END AS ACTIVE, SEARCH.xdat_role_type1 AS DESCRIPTION, ROLE_COUNT_ACTION_COUNT AS ACTION_COUNT, SEARCH.xdat_role_type2 AS SEQ, SEARCH.xdat_role_type_meta_data24 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xdat_role_type.role_name AS xdat_role_type0, table1.status AS xdat_role_type_meta_data24, xdat_role_type.description AS xdat_role_type1, xdat_role_type.sequence AS xdat_role_type2, table1.insert_date AS xdat_role_type_meta_data27, ROLE_COUNT.ACTION_COUNT AS ROLE_COUNT_ACTION_COUNT FROM xdat_role_type xdat_role_type   LEFT JOIN xdat_role_type_meta_data table1 ON xdat_role_type.role_type_info=table1.meta_data_id  LEFT JOIN ROLE_COUNT ROLE_COUNT ON xdat_role_type.role_name=ROLE_COUNT.role1) SEARCH RIGHT JOIN (SELECT DISTINCT xdat_role_type0 FROM (SELECT xdat_role_type.role_name AS xdat_role_type0, table1.insert_date AS xdat_role_type_meta_data27 FROM xdat_role_type xdat_role_type   LEFT JOIN xdat_role_type_meta_data table1 ON xdat_role_type.role_type_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xdat_role_type0=SEARCH.xdat_role_type0 ORDER BY (SEARCH.xdat_role_type0) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_ctScanData AS SELECT SEARCH.xnat_imageScanData39 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData40 AS NOTE, SEARCH.xnat_imageScanData41 AS QUALITY, SEARCH.xnat_imageScanData42 AS CONDITION, SEARCH.xnat_imageScanData43 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData44 AS DOCUMENTATION, SEARCH.xnat_imageScanData45 AS SCANNER, SEARCH.xnat_imageScanData46 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData47 AS SCANNER_MODEL, SEARCH.xnat_imageScanData48 AS MODALITY, SEARCH.xnat_imageScanData49 AS FRAMES, SEARCH.xnat_imageScanData50 AS OPERATOR, SEARCH.xnat_imageScanData52 AS STARTTIME, SEARCH.xnat_imageScanData53 AS ID, SEARCH.xnat_imageScanData54 AS TYPE, SEARCH.xnat_imageScanData55 AS UID, SEARCH.xnat_imageScanData56 AS PROJECT, SEARCH.xnat_ctScanData_meta_data193 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_ctScanData1 AS PARAMETERS_VOXELRES_UNITS, SEARCH.xnat_ctScanData2 AS PARAMETERS_VOXELRES_X, SEARCH.xnat_ctScanData3 AS PARAMETERS_VOXELRES_Y, SEARCH.xnat_ctScanData4 AS PARAMETERS_VOXELRES_Z, SEARCH.xnat_ctScanData5 AS PARAMETERS_ORIENTATION, SEARCH.xnat_ctScanData6 AS PARAMETERS_FOV_X, SEARCH.xnat_ctScanData7 AS PARAMETERS_FOV_Y, SEARCH.xnat_ctScanData8 AS PARAMETERS_RESCALE_INTERCEPT, SEARCH.xnat_ctScanData9 AS PARAMETERS_RESCALE_SLOPE, SEARCH.xnat_ctScanData10 AS PARAMETERS_KVP, SEARCH.xnat_ctScanData11 AS PARAMETERS_ACQUISITIONNUMBER, SEARCH.xnat_ctScanData12 AS PARAMETERS_IMAGETYPE, SEARCH.xnat_ctScanData13 AS PARAMETERS_OPTIONS, SEARCH.xnat_ctScanData14 AS PARAMETERS_COLLECTIONDIAMETER, SEARCH.xnat_ctScanData15 AS PARAMETERS_DISTANCESOURCETODETECTOR, SEARCH.xnat_ctScanData16 AS PARAMETERS_DISTANCESOURCETOPATIENT, SEARCH.xnat_ctScanData17 AS PARAMETERS_GANTRYTILT, SEARCH.xnat_ctScanData18 AS PARAMETERS_TABLEHEIGHT, SEARCH.xnat_ctScanData19 AS PARAMETERS_ROTATIONDIRECTION, SEARCH.xnat_ctScanData20 AS PARAMETERS_EXPOSURETIME, SEARCH.xnat_ctScanData21 AS PARAMETERS_XRAYTUBECURRENT, SEARCH.xnat_ctScanData22 AS PARAMETERS_EXPOSURE, SEARCH.xnat_ctScanData23 AS PARAMETERS_FILTER, SEARCH.xnat_ctScanData24 AS PARAMETERS_GENERATORPOWER, SEARCH.xnat_ctScanData25 AS PARAMETERS_CONVOLUTIONKERNEL, SEARCH.xnat_ctScanData26 AS PARAMETERS_COLLIMATIONWIDTH_SINGLE, SEARCH.xnat_ctScanData27 AS PARAMETERS_COLLIMATIONWIDTH_TOTAL, SEARCH.xnat_ctScanData28 AS PARAMETERS_TABLESPEED, SEARCH.xnat_ctScanData29 AS PARAMETERS_TABLEFEEDPERROTATION, SEARCH.xnat_ctScanData30 AS PARAMETERS_PITCHFACTOR, SEARCH.xnat_ctScanData31 AS PARAMETERS_ESTIMATEDDOSESAVING_MODULATION, SEARCH.xnat_ctScanData32 AS PARAMETERS_ESTIMATEDDOSESAVING, SEARCH.xnat_ctScanData33 AS PARAMETERS_CTDIVOL, SEARCH.xnat_ctScanData34 AS PARAMETERS_DERIVATION, SEARCH.xnat_ctScanData36 AS DCMVALIDATION, SEARCH.xnat_ctScanData37 AS DCMVALIDATION_STATUS, SEARCH.xnat_ctScanData_meta_data190 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_ctScanData0, table2.status AS xnat_ctScanData_meta_data190, table0.image_session_id AS xnat_imageScanData39, table0.note AS xnat_imageScanData40, table0.quality AS xnat_imageScanData41, table0.condition AS xnat_imageScanData42, table0.series_description AS xnat_imageScanData43, table0.documentation AS xnat_imageScanData44, table0.scanner AS xnat_imageScanData45, table0.scanner_manufacturer AS xnat_imageScanData46, table0.scanner_model AS xnat_imageScanData47, table0.modality AS xnat_imageScanData48, table0.frames AS xnat_imageScanData49, table0.operator AS xnat_imageScanData50, table0.starttime AS xnat_imageScanData52, table0.id AS xnat_imageScanData53, table0.type AS xnat_imageScanData54, table0.uid AS xnat_imageScanData55, table0.project AS xnat_imageScanData56, table2.insert_date AS xnat_ctScanData_meta_data193, table4.login AS table4_login, xnat_ctScanData.parameters_voxelres_units AS xnat_ctScanData1, xnat_ctScanData.parameters_voxelres_x AS xnat_ctScanData2, xnat_ctScanData.parameters_voxelres_y AS xnat_ctScanData3, xnat_ctScanData.parameters_voxelres_z AS xnat_ctScanData4, xnat_ctScanData.parameters_orientation AS xnat_ctScanData5, xnat_ctScanData.parameters_fov_x AS xnat_ctScanData6, xnat_ctScanData.parameters_fov_y AS xnat_ctScanData7, xnat_ctScanData.parameters_rescale_intercept AS xnat_ctScanData8, xnat_ctScanData.parameters_rescale_slope AS xnat_ctScanData9, xnat_ctScanData.parameters_kvp AS xnat_ctScanData10, xnat_ctScanData.parameters_acquisitionnumber AS xnat_ctScanData11, xnat_ctScanData.parameters_imagetype AS xnat_ctScanData12, xnat_ctScanData.parameters_options AS xnat_ctScanData13, xnat_ctScanData.parameters_collectiondiameter AS xnat_ctScanData14, xnat_ctScanData.parameters_distancesourcetodetector AS xnat_ctScanData15, xnat_ctScanData.parameters_distancesourcetopatient AS xnat_ctScanData16, xnat_ctScanData.parameters_gantrytilt AS xnat_ctScanData17, xnat_ctScanData.parameters_tableheight AS xnat_ctScanData18, xnat_ctScanData.parameters_rotationdirection AS xnat_ctScanData19, xnat_ctScanData.parameters_exposuretime AS xnat_ctScanData20, xnat_ctScanData.parameters_xraytubecurrent AS xnat_ctScanData21, xnat_ctScanData.parameters_exposure AS xnat_ctScanData22, xnat_ctScanData.parameters_filter AS xnat_ctScanData23, xnat_ctScanData.parameters_generatorpower AS xnat_ctScanData24, xnat_ctScanData.parameters_convolutionkernel AS xnat_ctScanData25, xnat_ctScanData.parameters_collimationwidth_single AS xnat_ctScanData26, xnat_ctScanData.parameters_collimationwidth_total AS xnat_ctScanData27, xnat_ctScanData.parameters_tablespeed AS xnat_ctScanData28, xnat_ctScanData.parameters_tablefeedperrotation AS xnat_ctScanData29, xnat_ctScanData.parameters_pitchfactor AS xnat_ctScanData30, xnat_ctScanData.parameters_estimateddosesaving_modulation AS xnat_ctScanData31, xnat_ctScanData.parameters_estimateddosesaving AS xnat_ctScanData32, xnat_ctScanData.parameters_ctdivol AS xnat_ctScanData33, xnat_ctScanData.parameters_derivation AS xnat_ctScanData34, xnat_ctScanData.dcmvalidation AS xnat_ctScanData36, xnat_ctScanData.dcmvalidation_status AS xnat_ctScanData37 FROM xnat_ctScanData xnat_ctScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_ctScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_ctScanData_meta_data table2 ON xnat_ctScanData.ctScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_ctScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_ctScanData0, table2.insert_date AS xnat_ctScanData_meta_data193 FROM xnat_ctScanData xnat_ctScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_ctScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_ctScanData_meta_data table2 ON xnat_ctScanData.ctScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_ctScanData0=SEARCH.xnat_ctScanData0 ORDER BY (SEARCH.xnat_imageScanData39) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW EXT_SEGMENTATIONFASTDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='ext:segmentationFastData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_ext_segmentationFastData AS SELECT SEARCH.xnat_imageAssessorData7 AS SESSION_ID, SEARCH.xnat_mrSessionData_sor_xnat_subjectAssessorData21 AS SUBJECT_ID, SEARCH.xnat_mrSessionData_sordata__xnat_experimentData24 AS MR_DATE, SEARCH.ext_segmentationFastData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData12 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_mrSessionData_sordata__xnat_experimentData24) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_mrSessionData_sordata__xnat_experimentData24)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, EXT_SEGMENTATIONFASTDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData28, SEARCH.ext_segmentationFastData0) AS LABEL, SEARCH.table6_login AS INSERT_USER, SEARCH.ext_segmentationFastData_meta_data393 AS INSERT_DATE, SEARCH.xnat_experimentData22 AS PROJECT, SEARCH.ext_segmentationFastData2 AS BRAINPERCENT, SEARCH.ext_segmentationFastData_meta_data390 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (ext_segmentationFastData0) *, (xnat_experimentData12-xnat_mrSessionData_sordata__xnat_experimentData24) AS ext_segmentationFastData_xnat_mrSessionData_DIFF FROM (SELECT table3.id AS ext_segmentationFastData0, table5.status AS ext_segmentationFastData_meta_data390, table1.imagesession_id AS xnat_imageAssessorData7, table3.date AS xnat_experimentData12, table3.label AS xnat_experimentData28, table6.login AS table6_login, table5.insert_date AS ext_segmentationFastData_meta_data393, table3.project AS xnat_experimentData22, ext_segmentationFastData.brainpercent AS ext_segmentationFastData2, xnat_mrSessionData.xnat_mrSessionData0 AS xnat_mrSessionData_sordata_EX_xnat_mrSessionData0, xnat_mrSessionData.xnat_experimentData24 AS xnat_mrSessionData_sordata__xnat_experimentData24, xnat_mrSessionData.xnat_subjectAssessorData21 AS xnat_mrSessionData_sor_xnat_subjectAssessorData21, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, EXT_SEGMENTATIONFASTDATA_PROJECTS.PROJECTS AS EXT_SEGMENTATIONFASTDATA_PROJECTS_PROJECTS FROM ext_segmentationFastData ext_segmentationFastData   LEFT JOIN xnat_mrAssessorData table0 ON ext_segmentationFastData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id   LEFT JOIN ext_segmentationFastData_meta_data table5 ON ext_segmentationFastData.segmentationFastData_info=table5.meta_data_id   LEFT JOIN xdat_user table6 ON table5.insert_user_xdat_user_id=table6.xdat_user_id  LEFT JOIN EXT_SEGMENTATIONFASTDATA_PROJECTS EXT_SEGMENTATIONFASTDATA_PROJECTS ON table3.id=EXT_SEGMENTATIONFASTDATA_PROJECTS.id LEFT JOIN (SELECT table2.id AS xnat_mrSessionData0, table2.date AS xnat_experimentData24, table1.subject_id AS xnat_subjectAssessorData21 FROM xnat_mrSessionData xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_mrSessionData ON table1.imagesession_id=xnat_mrSessionData.xnat_mrSessionData0 LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, ext_segmentationFastData.ext_segmentationFastData0 AS ext_segmentationFastData_ata__ext_segmentationFastData0, ext_segmentationFastData.xnat_experimentData12 AS ext_segmentationFastData_ata_EXT__xnat_experimentData12, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table3.id AS ext_segmentationFastData0, table1.imagesession_id AS xnat_imageAssessorData7, xnat_mrSessionData.xnat_subjectAssessorData21 AS xnat_subjectAssessorData21 FROM ext_segmentationFastData ext_segmentationFastData   LEFT JOIN xnat_mrAssessorData table0 ON ext_segmentationFastData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id LEFT JOIN (SELECT table2.id AS xnat_mrSessionData0, table1.subject_id AS xnat_subjectAssessorData21 FROM xnat_mrSessionData xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_mrSessionData ON table1.imagesession_id=xnat_mrSessionData.xnat_mrSessionData0) AS map_ext_segmentationFastData ON xnat_subjectData.id=map_ext_segmentationFastData.xnat_subjectAssessorData21 LEFT JOIN (SELECT table3.id AS ext_segmentationFastData0, table3.date AS xnat_experimentData12 FROM ext_segmentationFastData ext_segmentationFastData   LEFT JOIN xnat_mrAssessorData table0 ON ext_segmentationFastData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id) AS ext_segmentationFastData ON map_ext_segmentationFastData.ext_segmentationFastData0=ext_segmentationFastData.ext_segmentationFastData0 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, ext_segmentationFastData_ata_EXT__xnat_experimentData12 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table3.id=map_xnat_subjectData_xnat_demographicData.ext_segmentationFastData_ata__ext_segmentationFastData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY ext_segmentationFastData0, (xnat_experimentData12-xnat_mrSessionData_sordata__xnat_experimentData24) ASC, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT ext_segmentationFastData0 FROM (SELECT table3.id AS ext_segmentationFastData0, table3.date AS xnat_experimentData12 FROM ext_segmentationFastData ext_segmentationFastData   LEFT JOIN xnat_mrAssessorData table0 ON ext_segmentationFastData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.ext_segmentationFastData0=SEARCH.ext_segmentationFastData0 ORDER BY (SEARCH.xnat_imageAssessorData7) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW VAL_PROTOCOLDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='val:protocolData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_val_protocolData AS SELECT SEARCH.val_protocolData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData10 AS DATE, VAL_PROTOCOLDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData26, SEARCH.val_protocolData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.val_protocolData_meta_data466 AS INSERT_DATE, SEARCH.xnat_experimentData20 AS PROJECT, SEARCH.val_protocolData2 AS CHECK_STATUS, SEARCH.val_protocolData_meta_data463 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table2.id AS val_protocolData0, table4.status AS val_protocolData_meta_data463, table2.date AS xnat_experimentData10, table2.label AS xnat_experimentData26, table5.login AS table5_login, table4.insert_date AS val_protocolData_meta_data466, table2.project AS xnat_experimentData20, val_protocolData.check_status AS val_protocolData2, VAL_PROTOCOLDATA_PROJECTS.PROJECTS AS VAL_PROTOCOLDATA_PROJECTS_PROJECTS FROM val_protocolData val_protocolData   LEFT JOIN xnat_imageAssessorData table0 ON val_protocolData.id=table0.id   LEFT JOIN xnat_derivedData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN val_protocolData_meta_data table4 ON val_protocolData.protocolData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN VAL_PROTOCOLDATA_PROJECTS VAL_PROTOCOLDATA_PROJECTS ON table2.id=VAL_PROTOCOLDATA_PROJECTS.id) SEARCH RIGHT JOIN (SELECT DISTINCT val_protocolData0 FROM (SELECT table2.id AS val_protocolData0, table2.date AS xnat_experimentData10 FROM val_protocolData val_protocolData   LEFT JOIN xnat_imageAssessorData table0 ON val_protocolData.id=table0.id   LEFT JOIN xnat_derivedData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.val_protocolData0=SEARCH.val_protocolData0 ORDER BY (SEARCH.val_protocolData0) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_optScanData AS SELECT SEARCH.xnat_imageScanData14 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData15 AS NOTE, SEARCH.xnat_imageScanData16 AS QUALITY, SEARCH.xnat_imageScanData17 AS CONDITION, SEARCH.xnat_imageScanData18 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData19 AS DOCUMENTATION, SEARCH.xnat_imageScanData20 AS SCANNER, SEARCH.xnat_imageScanData21 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData22 AS SCANNER_MODEL, SEARCH.xnat_imageScanData23 AS MODALITY, SEARCH.xnat_imageScanData24 AS FRAMES, SEARCH.xnat_imageScanData25 AS OPERATOR, SEARCH.xnat_imageScanData27 AS STARTTIME, SEARCH.xnat_imageScanData28 AS ID, SEARCH.xnat_imageScanData29 AS TYPE, SEARCH.xnat_imageScanData30 AS UID, SEARCH.xnat_imageScanData31 AS PROJECT, SEARCH.xnat_optScanData_meta_data130 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_optScanData1 AS PARAMETERS_VOXELRES_UNITS, SEARCH.xnat_optScanData2 AS PARAMETERS_VOXELRES_X, SEARCH.xnat_optScanData3 AS PARAMETERS_VOXELRES_Y, SEARCH.xnat_optScanData4 AS PARAMETERS_VOXELRES_Z, SEARCH.xnat_optScanData5 AS PARAMETERS_FOV_X, SEARCH.xnat_optScanData6 AS PARAMETERS_FOV_Y, SEARCH.xnat_optScanData7 AS PARAMETERS_LATERALITY, SEARCH.xnat_optScanData8 AS PARAMETERS_ILLUMINATION_WAVELENGTH, SEARCH.xnat_optScanData9 AS PARAMETERS_ILLUMINATION_POWER, SEARCH.xnat_optScanData10 AS PARAMETERS_IMAGETYPE, SEARCH.xnat_optScanData11 AS DCMVALIDATION, SEARCH.xnat_optScanData12 AS DCMVALIDATION_STATUS, SEARCH.xnat_optScanData_meta_data127 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_optScanData0, table2.status AS xnat_optScanData_meta_data127, table0.image_session_id AS xnat_imageScanData14, table0.note AS xnat_imageScanData15, table0.quality AS xnat_imageScanData16, table0.condition AS xnat_imageScanData17, table0.series_description AS xnat_imageScanData18, table0.documentation AS xnat_imageScanData19, table0.scanner AS xnat_imageScanData20, table0.scanner_manufacturer AS xnat_imageScanData21, table0.scanner_model AS xnat_imageScanData22, table0.modality AS xnat_imageScanData23, table0.frames AS xnat_imageScanData24, table0.operator AS xnat_imageScanData25, table0.starttime AS xnat_imageScanData27, table0.id AS xnat_imageScanData28, table0.type AS xnat_imageScanData29, table0.uid AS xnat_imageScanData30, table0.project AS xnat_imageScanData31, table2.insert_date AS xnat_optScanData_meta_data130, table4.login AS table4_login, xnat_optScanData.parameters_voxelres_units AS xnat_optScanData1, xnat_optScanData.parameters_voxelres_x AS xnat_optScanData2, xnat_optScanData.parameters_voxelres_y AS xnat_optScanData3, xnat_optScanData.parameters_voxelres_z AS xnat_optScanData4, xnat_optScanData.parameters_fov_x AS xnat_optScanData5, xnat_optScanData.parameters_fov_y AS xnat_optScanData6, xnat_optScanData.parameters_laterality AS xnat_optScanData7, xnat_optScanData.parameters_illumination_wavelength AS xnat_optScanData8, xnat_optScanData.parameters_illumination_power AS xnat_optScanData9, xnat_optScanData.parameters_imagetype AS xnat_optScanData10, xnat_optScanData.dcmvalidation AS xnat_optScanData11, xnat_optScanData.dcmvalidation_status AS xnat_optScanData12 FROM xnat_optScanData xnat_optScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_optScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_optScanData_meta_data table2 ON xnat_optScanData.optScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_optScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_optScanData0, table2.insert_date AS xnat_optScanData_meta_data130 FROM xnat_optScanData xnat_optScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_optScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_optScanData_meta_data table2 ON xnat_optScanData.optScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_optScanData0=SEARCH.xnat_optScanData0 ORDER BY (SEARCH.xnat_imageScanData14) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_crScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_crScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_crScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_crScanData0, table2.status AS xnat_crScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_crScanData_meta_data118, table4.login AS table4_login FROM xnat_crScanData xnat_crScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_crScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_crScanData_meta_data table2 ON xnat_crScanData.crScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_crScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_crScanData0, table2.insert_date AS xnat_crScanData_meta_data118 FROM xnat_crScanData xnat_crScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_crScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_crScanData_meta_data table2 ON xnat_crScanData.crScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_crScanData0=SEARCH.xnat_crScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_fieldDefinitionGroup AS SELECT SEARCH.xnat_fieldDefinitionGroup_meta_data51 AS INSERT_DATE, SEARCH.table2_login AS INSERT_USER, SEARCH.xnat_fieldDefinitionGroup0 AS ID, SEARCH.xnat_fieldDefinitionGroup1 AS DATA_TYPE, SEARCH.xnat_fieldDefinitionGroup2 AS DESCRIPTION, SEARCH.xnat_fieldDefinitionGroup3 AS SHAREABLE, SEARCH.xnat_fieldDefinitionGroup4 AS PROJECT_SPECIFIC, SEARCH.xnat_fieldDefinitionGroup_meta_data48 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xnat_fieldDefinitionGroup.xnat_fielddefinitiongroup_id AS xnat_fieldDefinitionGroup6, table1.status AS xnat_fieldDefinitionGroup_meta_data48, table1.insert_date AS xnat_fieldDefinitionGroup_meta_data51, table2.login AS table2_login, xnat_fieldDefinitionGroup.id AS xnat_fieldDefinitionGroup0, xnat_fieldDefinitionGroup.data_type AS xnat_fieldDefinitionGroup1, xnat_fieldDefinitionGroup.description AS xnat_fieldDefinitionGroup2, xnat_fieldDefinitionGroup.shareable AS xnat_fieldDefinitionGroup3, xnat_fieldDefinitionGroup.project_specific AS xnat_fieldDefinitionGroup4 FROM xnat_fieldDefinitionGroup xnat_fieldDefinitionGroup   LEFT JOIN xnat_fieldDefinitionGroup_meta_data table1 ON xnat_fieldDefinitionGroup.fieldDefinitionGroup_info=table1.meta_data_id   LEFT JOIN xdat_user table2 ON table1.insert_user_xdat_user_id=table2.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_fieldDefinitionGroup6 FROM (SELECT xnat_fieldDefinitionGroup.xnat_fielddefinitiongroup_id AS xnat_fieldDefinitionGroup6, table1.insert_date AS xnat_fieldDefinitionGroup_meta_data51 FROM xnat_fieldDefinitionGroup xnat_fieldDefinitionGroup   LEFT JOIN xnat_fieldDefinitionGroup_meta_data table1 ON xnat_fieldDefinitionGroup.fieldDefinitionGroup_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_fieldDefinitionGroup6=SEARCH.xnat_fieldDefinitionGroup6 ORDER BY (SEARCH.xnat_fieldDefinitionGroup_meta_data51) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_CRSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:crSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_crSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_crSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_CRSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_crSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_crSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_crSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_crSessionData0) * FROM (SELECT table2.id AS xnat_crSessionData0, table4.status AS xnat_crSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_crSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_CRSESSIONDATA_PROJECTS.PROJECTS AS XNAT_CRSESSIONDATA_PROJECTS_PROJECTS FROM xnat_crSessionData xnat_crSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_crSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_crSessionData_meta_data table4 ON xnat_crSessionData.crSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_CRSESSIONDATA_PROJECTS XNAT_CRSESSIONDATA_PROJECTS ON table2.id=XNAT_CRSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_crSessionData.xnat_crSessionData0 AS xnat_crSessionData_sordata_EX_xnat_crSessionData0, xnat_crSessionData.xnat_experimentData20 AS xnat_crSessionData_sordata__xnat_experimentData20, xnat_crSessionData.xnat_subjectAssessorData17 AS xnat_crSessionData_sor_xnat_subjectAssessorData17, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_crSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_crSessionData xnat_crSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_crSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_crSessionData ON xnat_subjectData.id=xnat_crSessionData.xnat_subjectAssessorData17 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_crSessionData_sordata__xnat_experimentData20 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_crSessionData_sordata_EX_xnat_crSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_crSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_crSessionData0 FROM (SELECT table2.id AS xnat_crSessionData0, table2.date AS xnat_experimentData20 FROM xnat_crSessionData xnat_crSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_crSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_crSessionData0=SEARCH.xnat_crSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW EXT_CLINICALASSESSMENTDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='ext:clinicalAssessmentData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_ext_clinicalAssessmentData AS SELECT SEARCH.xnat_subjectAssessorData32 AS SUBJECT_ID, SEARCH.ext_clinicalAssessmentData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData35 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData35) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData35)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, EXT_CLINICALASSESSMENTDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData51, SEARCH.ext_clinicalAssessmentData0) AS LABEL, SEARCH.table4_login AS INSERT_USER, SEARCH.ext_clinicalAssessmentData_meta_data239 AS INSERT_DATE, SEARCH.xnat_experimentData45 AS PROJECT, SEARCH.ext_clinicalAssessmentData1 AS BLOODPRESSURE_HIGHBP_CS_BOOL, SEARCH.ext_clinicalAssessmentData2 AS BLOODPRESSURE_SYSTOLIC, SEARCH.ext_clinicalAssessmentData3 AS BLOODPRESSURE_DIASTOLIC, SEARCH.ext_clinicalAssessmentData4 AS NEURO_SBT, SEARCH.ext_clinicalAssessmentData5 AS NEURO_MMSE, SEARCH.ext_clinicalAssessmentData6 AS NEURO_BDSC, SEARCH.ext_clinicalAssessmentData7 AS NEURO_CDR_MEMORY, SEARCH.ext_clinicalAssessmentData8 AS NEURO_CDR_ORIENTATION, SEARCH.ext_clinicalAssessmentData9 AS NEURO_CDR_JUDGMENT_PROBLEM_SOLVING, SEARCH.ext_clinicalAssessmentData10 AS NEURO_CDR_COMMUNITY_AFFAIRS, SEARCH.ext_clinicalAssessmentData11 AS NEURO_CDR_HOME_HOBBIES, SEARCH.ext_clinicalAssessmentData12 AS NEURO_CDR_PERSONAL_CARE, SEARCH.ext_clinicalAssessmentData13 AS NEURO_CDR_SUMBOX, SEARCH.ext_clinicalAssessmentData14 AS NEURO_CDR_RATING, SEARCH.ext_clinicalAssessmentData15 AS NEURO_THINKINGPROBLEM_S_BOOL, SEARCH.ext_clinicalAssessmentData16 AS NEURO_THINKINGPROBLEM_CS_BOOL, SEARCH.ext_clinicalAssessmentData17 AS NEURO_CONSMEMORYPROBLEM_BOOL, SEARCH.ext_clinicalAssessmentData18 AS NEURO_STROKEBOOL, SEARCH.ext_clinicalAssessmentData19 AS NEURO_SX_STROKE_BOOL, SEARCH.ext_clinicalAssessmentData20 AS NEURO_SX_TIA_BOOL, SEARCH.ext_clinicalAssessmentData21 AS MOVEMENT_SPASTICITY_BOOL, SEARCH.ext_clinicalAssessmentData22 AS MOVEMENT_RIGID, SEARCH.ext_clinicalAssessmentData23 AS MOVEMENT_BRADYK_BOOL, SEARCH.ext_clinicalAssessmentData24 AS MOVEMENT_GAIT, SEARCH.ext_clinicalAssessmentData25 AS MOVEMENT_ABNORMALGAIT_BOOL, SEARCH.ext_clinicalAssessmentData26 AS WEIGHT, SEARCH.ext_clinicalAssessmentData27 AS DIABETES_BOOL, SEARCH.ext_clinicalAssessmentData28 AS HEARTPROBLEMS_BOOL, SEARCH.ext_clinicalAssessmentData29 AS TOBACCOUSE_BOOL, SEARCH.ext_clinicalAssessmentData_meta_data236 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (ext_clinicalAssessmentData0) * FROM (SELECT table1.id AS ext_clinicalAssessmentData0, table3.status AS ext_clinicalAssessmentData_meta_data236, table0.subject_id AS xnat_subjectAssessorData32, table1.date AS xnat_experimentData35, table1.label AS xnat_experimentData51, table4.login AS table4_login, table3.insert_date AS ext_clinicalAssessmentData_meta_data239, table1.project AS xnat_experimentData45, ext_clinicalAssessmentData.bloodpressure_highbp_cs_bool AS ext_clinicalAssessmentData1, ext_clinicalAssessmentData.bloodpressure_systolic AS ext_clinicalAssessmentData2, ext_clinicalAssessmentData.bloodpressure_diastolic AS ext_clinicalAssessmentData3, ext_clinicalAssessmentData.neuro_sbt AS ext_clinicalAssessmentData4, ext_clinicalAssessmentData.neuro_mmse AS ext_clinicalAssessmentData5, ext_clinicalAssessmentData.neuro_bdsc AS ext_clinicalAssessmentData6, ext_clinicalAssessmentData.neuro_cdr_memory AS ext_clinicalAssessmentData7, ext_clinicalAssessmentData.neuro_cdr_orientation AS ext_clinicalAssessmentData8, ext_clinicalAssessmentData.neuro_cdr_judgment_problem_solving AS ext_clinicalAssessmentData9, ext_clinicalAssessmentData.neuro_cdr_community_affairs AS ext_clinicalAssessmentData10, ext_clinicalAssessmentData.neuro_cdr_home_hobbies AS ext_clinicalAssessmentData11, ext_clinicalAssessmentData.neuro_cdr_personal_care AS ext_clinicalAssessmentData12, ext_clinicalAssessmentData.neuro_cdr_sumbox AS ext_clinicalAssessmentData13, ext_clinicalAssessmentData.neuro_cdr_rating AS ext_clinicalAssessmentData14, ext_clinicalAssessmentData.neuro_thinkingproblem_s_bool AS ext_clinicalAssessmentData15, ext_clinicalAssessmentData.neuro_thinkingproblem_cs_bool AS ext_clinicalAssessmentData16, ext_clinicalAssessmentData.neuro_consmemoryproblem_bool AS ext_clinicalAssessmentData17, ext_clinicalAssessmentData.neuro_strokebool AS ext_clinicalAssessmentData18, ext_clinicalAssessmentData.neuro_sx_stroke_bool AS ext_clinicalAssessmentData19, ext_clinicalAssessmentData.neuro_sx_tia_bool AS ext_clinicalAssessmentData20, ext_clinicalAssessmentData.movement_spasticity_bool AS ext_clinicalAssessmentData21, ext_clinicalAssessmentData.movement_rigid AS ext_clinicalAssessmentData22, ext_clinicalAssessmentData.movement_bradyk_bool AS ext_clinicalAssessmentData23, ext_clinicalAssessmentData.movement_gait AS ext_clinicalAssessmentData24, ext_clinicalAssessmentData.movement_abnormalgait_bool AS ext_clinicalAssessmentData25, ext_clinicalAssessmentData.weight AS ext_clinicalAssessmentData26, ext_clinicalAssessmentData.diabetes_bool AS ext_clinicalAssessmentData27, ext_clinicalAssessmentData.heartproblems_bool AS ext_clinicalAssessmentData28, ext_clinicalAssessmentData.tobaccouse_bool AS ext_clinicalAssessmentData29, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, EXT_CLINICALASSESSMENTDATA_PROJECTS.PROJECTS AS EXT_CLINICALASSESSMENTDATA_PROJECTS_PROJECTS FROM ext_clinicalAssessmentData ext_clinicalAssessmentData   LEFT JOIN xnat_subjectAssessorData table0 ON ext_clinicalAssessmentData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN ext_clinicalAssessmentData_meta_data table3 ON ext_clinicalAssessmentData.clinicalAssessmentData_info=table3.meta_data_id   LEFT JOIN xdat_user table4 ON table3.insert_user_xdat_user_id=table4.xdat_user_id  LEFT JOIN EXT_CLINICALASSESSMENTDATA_PROJECTS EXT_CLINICALASSESSMENTDATA_PROJECTS ON table1.id=EXT_CLINICALASSESSMENTDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, ext_clinicalAssessmentData.ext_clinicalAssessmentData0 AS ext_clinicalAssessmentData_td_ext_clinicalAssessmentData0, ext_clinicalAssessmentData.xnat_experimentData35 AS ext_clinicalAssessmentData_tdata_EX_xnat_experimentData35, ext_clinicalAssessmentData.xnat_subjectAssessorData32 AS ext_clinicalAssessmentData_cal_xnat_subjectAssessorData32, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table1.id AS ext_clinicalAssessmentData0, table1.date AS xnat_experimentData35, table0.subject_id AS xnat_subjectAssessorData32 FROM ext_clinicalAssessmentData ext_clinicalAssessmentData   LEFT JOIN xnat_subjectAssessorData table0 ON ext_clinicalAssessmentData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) AS ext_clinicalAssessmentData ON xnat_subjectData.id=ext_clinicalAssessmentData.xnat_subjectAssessorData32 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, ext_clinicalAssessmentData_tdata_EX_xnat_experimentData35 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table1.id=map_xnat_subjectData_xnat_demographicData.ext_clinicalAssessmentData_td_ext_clinicalAssessmentData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY ext_clinicalAssessmentData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT ext_clinicalAssessmentData0 FROM (SELECT table1.id AS ext_clinicalAssessmentData0, table1.date AS xnat_experimentData35 FROM ext_clinicalAssessmentData ext_clinicalAssessmentData   LEFT JOIN xnat_subjectAssessorData table0 ON ext_clinicalAssessmentData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.ext_clinicalAssessmentData0=SEARCH.ext_clinicalAssessmentData0 ORDER BY (SEARCH.xnat_subjectAssessorData32) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_ESSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:esSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_esSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_esSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_ESSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_esSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_esSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_esSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_esSessionData0) * FROM (SELECT table2.id AS xnat_esSessionData0, table4.status AS xnat_esSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_esSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_ESSESSIONDATA_PROJECTS.PROJECTS AS XNAT_ESSESSIONDATA_PROJECTS_PROJECTS FROM xnat_esSessionData xnat_esSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_esSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_esSessionData_meta_data table4 ON xnat_esSessionData.esSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_ESSESSIONDATA_PROJECTS XNAT_ESSESSIONDATA_PROJECTS ON table2.id=XNAT_ESSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_esSessionData.xnat_esSessionData0 AS xnat_esSessionData_sordata_EX_xnat_esSessionData0, xnat_esSessionData.xnat_experimentData20 AS xnat_esSessionData_sordata__xnat_experimentData20, xnat_esSessionData.xnat_subjectAssessorData17 AS xnat_esSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_esSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_esSessionData xnat_esSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_esSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_esSessionData ON xnat_subjectData.id=xnat_esSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_esSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_esSessionData_sordata_EX_xnat_esSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_esSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_esSessionData0 FROM (SELECT table2.id AS xnat_esSessionData0, table2.date AS xnat_experimentData20 FROM xnat_esSessionData xnat_esSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_esSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_esSessionData0=SEARCH.xnat_esSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_usScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_usScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_usScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_usScanData0, table2.status AS xnat_usScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_usScanData_meta_data118, table4.login AS table4_login FROM xnat_usScanData xnat_usScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_usScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_usScanData_meta_data table2 ON xnat_usScanData.usScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_usScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_usScanData0, table2.insert_date AS xnat_usScanData_meta_data118 FROM xnat_usScanData xnat_usScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_usScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_usScanData_meta_data table2 ON xnat_usScanData.usScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_usScanData0=SEARCH.xnat_usScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW LAST_LOGIN AS select DISTINCT ON (user_xdat_user_id) user_xdat_user_id AS USER_ID, login_date FROM xdat_user_login ORDER BY user_xdat_user_id,login_date DESC;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xdat_newsEntry AS SELECT SEARCH.xdat_newsEntry_meta_data11 AS INSERT_DATE, SEARCH.table2_login AS INSERT_USER, SEARCH.xdat_newsEntry0 AS DATE, SEARCH.xdat_newsEntry1 AS TITLE, SEARCH.xdat_newsEntry2 AS DESCRIPTION, SEARCH.xdat_newsEntry3 AS LINK, SEARCH.xdat_newsEntry_meta_data8 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xdat_newsEntry.xdat_newsentry_id AS xdat_newsEntry5, table1.status AS xdat_newsEntry_meta_data8, table1.insert_date AS xdat_newsEntry_meta_data11, table2.login AS table2_login, xdat_newsEntry.date AS xdat_newsEntry0, xdat_newsEntry.title AS xdat_newsEntry1, xdat_newsEntry.description AS xdat_newsEntry2, xdat_newsEntry.link AS xdat_newsEntry3 FROM xdat_newsEntry xdat_newsEntry   LEFT JOIN xdat_newsEntry_meta_data table1 ON xdat_newsEntry.newsEntry_info=table1.meta_data_id   LEFT JOIN xdat_user table2 ON table1.insert_user_xdat_user_id=table2.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xdat_newsEntry5 FROM (SELECT xdat_newsEntry.xdat_newsentry_id AS xdat_newsEntry5, table1.insert_date AS xdat_newsEntry_meta_data11 FROM xdat_newsEntry xdat_newsEntry   LEFT JOIN xdat_newsEntry_meta_data table1 ON xdat_newsEntry.newsEntry_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xdat_newsEntry5=SEARCH.xdat_newsEntry5 ORDER BY (SEARCH.xdat_newsEntry_meta_data11) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW mr_scan_count_agg AS SELECT image_session_id, TRIM(', ' FROM xs_a_concat(TYPE_COUNT || ', ')) AS TYPE_COUNT FROM (SELECT image_session_id, (TYPE || '(' || COUNT(id) || ')') AS TYPE_COUNT FROM xnat_imageScanData GROUP BY image_session_id,TYPE ORDER BY image_session_id,TYPE) _TYPES GROUP BY image_session_id;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW MR_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:mrSessionData' GROUP BY expt.id,expt.project;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW ordered_workflows AS SELECT wrk_workflowdata.id, status, wrk_workflowdata_id,         CASE pipeline_name             WHEN 'Transfer'::text THEN 'Archive'::text      ELSE    CASE xs_lastposition('/'::text, pipeline_name::text) WHEN 0 THEN pipeline_name ELSE   substring(substring(pipeline_name::text, xs_lastposition('/'::text, pipeline_name::text) + 1), 1, xs_lastposition('.'::text, substring(pipeline_name::text, xs_lastposition('/'::text, pipeline_name::text) + 1)) - 1)         END END AS pipeline_name    FROM wrk_workflowdata    RIGHT JOIN ( SELECT wrk_workflowdata.id, max(wrk_workflowdata.launch_time) AS launch_time            FROM wrk_workflowdata           GROUP BY wrk_workflowdata.id) wrk_max ON wrk_workflowdata.id::text = wrk_max.id::text AND wrk_workflowdata.launch_time = wrk_max.launch_time;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW DTI_COUNT AS SELECT image_session_id,COUNT(*) AS DTI_COUNT FROM xnat_imagescandata WHERE series_description LIKE '%DTI%' OR type LIKE '%DTI%' GROUP BY image_session_id;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW SUBJECT_LABEL AS SELECT isd.id AS image_session_id, sd.label AS subject_label from xnat_imageSessionData isd left join xnat_subjectassessordata sad on isd.id = sad.id LEFT JOIN xnat_subjectdata sd ON sad.subject_id = sd.id;;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_mrSessionData AS SELECT SEARCH.xnat_mrSessionData0 AS SESSION_ID, MR_PROJECTS_PROJECTS AS PROJECTS, '/@WEBAPP/images/v.gif'::text AS VIEW, SEARCH.xnat_subjectAssessorData21 AS SUBJECT_ID, SUBJECT_LABEL_SUBJECT_LABEL AS SUBJECT_LABEL, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_mrSessionData_meta_data975 AS INSERT_DATE, SEARCH.xnat_experimentData24 AS DATE, CAST(SEARCH.xnat_experimentData24 AS VARCHAR) AS DATE_CHAR, SEARCH.xnat_investigatorData64 || ' ' || SEARCH.xnat_investigatorData65 AS INVEST_SEARCH, SEARCH.xnat_investigatorData65 AS INVEST, SEARCH.xnat_investigatorData72 AS INVEST_ID, SEARCH.xnat_investigatorData65 AS INVEST_CSV, substring(SEARCH.xnat_experimentData29 FROM 0 FOR 10) AS MR_NOTES, SEARCH.xnat_experimentData29 AS MR_NOTES_CSV, substring(SEARCH.xnat_imageSessionData10 FROM 0 FOR 6) AS OPERATOR, SEARCH.xnat_imageSessionData16 AS TYPE, SEARCH.xnat_imageSessionData7 AS SCANNER, substring(SEARCH.xnat_mrSessionData3 FROM 0 FOR 6) AS MARKER, substring(SEARCH.xnat_mrSessionData4 FROM 0 FOR 6) AS STABILIZATION, SEARCH.xnat_imageSessionData10 AS OPERATOR_CSV, SEARCH.xnat_imageSessionData7 AS SCANNER_CSV, SEARCH.xnat_mrSessionData3 AS MARKER_CSV, SEARCH.xnat_mrSessionData4 AS STABILIZATION_CSV, CAST(ROUND(CAST(COALESCE(SEARCH.xnat_subjectAssessorData22,EXTRACT(YEAR FROM AGE(SEARCH.xnat_experimentData24, SEARCH.xnat_demographicData_xnat_demographicData1)),(EXTRACT(YEAR FROM SEARCH.xnat_experimentData24)) - (SEARCH.xnat_demographicData_xnat_demographicData2)) AS numeric),2) AS numeric) AS GEN_AGE, CAST(FLOOR(CAST(COALESCE(SEARCH.xnat_subjectAssessorData22,SEARCH.xnat_demographicData_xnat_demographicData3,EXTRACT(YEAR FROM AGE(SEARCH.xnat_experimentData24, SEARCH.xnat_demographicData_xnat_demographicData1)),(EXTRACT(YEAR FROM SEARCH.xnat_experimentData24)) - (SEARCH.xnat_demographicData_xnat_demographicData2)) AS numeric)) AS numeric) AS AGE, DTI_COUNT_DTI_COUNT AS DTI_COUNT, COALESCE(SEARCH.xnat_mrSessionData_meta_data971, SEARCH.xnat_mrSessionData_meta_data975) AS LAST_MODIFIED, MR_SCAN_COUNT_AGG_TYPE_COUNT AS MR_SCAN_COUNT_AGG, '<B>' || CASE ORDERED_WORKFLOWS_STATUS WHEN 'Complete' THEN '<FONT COLOR=green>' || ORDERED_WORKFLOWS_PIPELINE_NAME || '</FONT>' WHEN 'In Progress' THEN '<FONT COLOR=SlateGrey>' || ORDERED_WORKFLOWS_PIPELINE_NAME || '</FONT>' WHEN 'Running' THEN '<FONT COLOR=SlateGrey>' || ORDERED_WORKFLOWS_PIPELINE_NAME || '</FONT>' WHEN 'Queued' THEN '<FONT COLOR=orange>' || ORDERED_WORKFLOWS_PIPELINE_NAME || '</FONT>' WHEN 'Failed' THEN '<FONT COLOR=red>' || ORDERED_WORKFLOWS_PIPELINE_NAME || '</FONT>' ELSE '<FONT COLOR=orange>' || ORDERED_WORKFLOWS_PIPELINE_NAME || '</FONT>' END || '</B>' AS WORKFLOW_STATUS, SEARCH.xnat_experimentData34 AS PROJECT, COALESCE(SEARCH.xnat_experimentData40, SEARCH.xnat_mrSessionData0) AS LABEL, SEARCH.xnat_mrSessionData_meta_data972 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_mrSessionData0) * FROM (SELECT table2.id AS xnat_mrSessionData0, table4.status AS xnat_mrSessionData_meta_data972, table1.subject_id AS xnat_subjectAssessorData21, table5.login AS table5_login, table4.insert_date AS xnat_mrSessionData_meta_data975, table2.date AS xnat_experimentData24, table7.firstname AS xnat_investigatorData64, table7.lastname AS xnat_investigatorData65, table7.xnat_investigatordata_id AS xnat_investigatorData72, table2.note AS xnat_experimentData29, table0.operator AS xnat_imageSessionData10, table0.session_type AS xnat_imageSessionData16, table0.scanner AS xnat_imageSessionData7, xnat_mrSessionData.marker AS xnat_mrSessionData3, xnat_mrSessionData.stabilization AS xnat_mrSessionData4, table1.age AS xnat_subjectAssessorData22, table4.last_modified AS xnat_mrSessionData_meta_data971, table2.project AS xnat_experimentData34, table2.label AS xnat_experimentData40, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, xnat_demographicData.xnat_demographicData3 AS xnat_demographicData_xnat_demographicData3, MR_PROJECTS.PROJECTS AS MR_PROJECTS_PROJECTS, SUBJECT_LABEL.SUBJECT_LABEL AS SUBJECT_LABEL_SUBJECT_LABEL, DTI_COUNT.DTI_COUNT AS DTI_COUNT_DTI_COUNT, MR_SCAN_COUNT_AGG.TYPE_COUNT AS MR_SCAN_COUNT_AGG_TYPE_COUNT, ORDERED_WORKFLOWS.STATUS AS ORDERED_WORKFLOWS_STATUS, ORDERED_WORKFLOWS.PIPELINE_NAME AS ORDERED_WORKFLOWS_PIPELINE_NAME FROM xnat_mrSessionData xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_mrSessionData_meta_data table4 ON xnat_mrSessionData.mrSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id   LEFT JOIN xnat_investigatorData table7 ON table2.investigator_xnat_investigatordata_id=table7.xnat_investigatordata_id  LEFT JOIN MR_PROJECTS MR_PROJECTS ON table2.id=MR_PROJECTS.id  LEFT JOIN SUBJECT_LABEL SUBJECT_LABEL ON table2.id=SUBJECT_LABEL.image_session_id  LEFT JOIN DTI_COUNT DTI_COUNT ON table2.id=DTI_COUNT.image_session_id  LEFT JOIN MR_SCAN_COUNT_AGG MR_SCAN_COUNT_AGG ON table2.id=MR_SCAN_COUNT_AGG.image_session_id  LEFT JOIN ORDERED_WORKFLOWS ORDERED_WORKFLOWS ON table2.id=ORDERED_WORKFLOWS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_mrSessionData.xnat_mrSessionData0 AS xnat_mrSessionData_sordata_EX_xnat_mrSessionData0, xnat_mrSessionData.xnat_experimentData24 AS xnat_mrSessionData_sordata__xnat_experimentData24, xnat_mrSessionData.xnat_subjectAssessorData21 AS xnat_mrSessionData_sor_xnat_subjectAssessorData21, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_mrSessionData0, table2.date AS xnat_experimentData24, table1.subject_id AS xnat_subjectAssessorData21 FROM xnat_mrSessionData xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_mrSessionData ON xnat_subjectData.id=xnat_mrSessionData.xnat_subjectAssessorData21 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_mrSessionData_sordata__xnat_experimentData24 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_mrSessionData_sordata_EX_xnat_mrSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2, xnat_demographicData.age AS xnat_demographicData3 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_mrSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_mrSessionData0 FROM (SELECT table2.id AS xnat_mrSessionData0, table2.date AS xnat_experimentData24 FROM xnat_mrSessionData xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_mrSessionData0=SEARCH.xnat_mrSessionData0 ORDER BY (SEARCH.xnat_mrSessionData0) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW SCR_SCREENINGASSESSMENT_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='scr:screeningAssessment' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_scr_screeningAssessment AS SELECT SEARCH.scr_screeningAssessment0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData11 AS DATE, SCR_SCREENINGASSESSMENT_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData27, SEARCH.scr_screeningAssessment0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.scr_screeningAssessment_meta_data363 AS INSERT_DATE, SEARCH.xnat_experimentData21 AS PROJECT, SEARCH.scr_screeningAssessment1 AS RATER, SEARCH.scr_screeningAssessment2 AS COMMENTS, SEARCH.scr_screeningAssessment3 AS PASS, SEARCH.scr_screeningAssessment_meta_data360 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table2.id AS scr_screeningAssessment0, table4.status AS scr_screeningAssessment_meta_data360, table2.date AS xnat_experimentData11, table2.label AS xnat_experimentData27, table5.login AS table5_login, table4.insert_date AS scr_screeningAssessment_meta_data363, table2.project AS xnat_experimentData21, scr_screeningAssessment.rater AS scr_screeningAssessment1, scr_screeningAssessment.comments AS scr_screeningAssessment2, scr_screeningAssessment.pass AS scr_screeningAssessment3, SCR_SCREENINGASSESSMENT_PROJECTS.PROJECTS AS SCR_SCREENINGASSESSMENT_PROJECTS_PROJECTS FROM scr_screeningAssessment scr_screeningAssessment   LEFT JOIN xnat_imageAssessorData table0 ON scr_screeningAssessment.id=table0.id   LEFT JOIN xnat_derivedData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN scr_screeningAssessment_meta_data table4 ON scr_screeningAssessment.screeningAssessment_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN SCR_SCREENINGASSESSMENT_PROJECTS SCR_SCREENINGASSESSMENT_PROJECTS ON table2.id=SCR_SCREENINGASSESSMENT_PROJECTS.id) SEARCH RIGHT JOIN (SELECT DISTINCT scr_screeningAssessment0 FROM (SELECT table2.id AS scr_screeningAssessment0, table2.date AS xnat_experimentData11 FROM scr_screeningAssessment scr_screeningAssessment   LEFT JOIN xnat_imageAssessorData table0 ON scr_screeningAssessment.id=table0.id   LEFT JOIN xnat_derivedData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.scr_screeningAssessment0=SEARCH.scr_screeningAssessment0 ORDER BY (SEARCH.scr_screeningAssessment0) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW EXT_ATLASSCALINGFACTORDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='ext:atlasScalingFactorData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_ext_atlasScalingFactorData AS SELECT SEARCH.xnat_imageAssessorData9 AS SESSION_ID, SEARCH.xnat_mrSessionData_sor_xnat_subjectAssessorData21 AS SUBJECT_ID, SEARCH.xnat_mrSessionData_sordata__xnat_experimentData24 AS MR_DATE, SEARCH.ext_atlasScalingFactorData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData14 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_mrSessionData_sordata__xnat_experimentData24) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_mrSessionData_sordata__xnat_experimentData24)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, EXT_ATLASSCALINGFACTORDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData30, SEARCH.ext_atlasScalingFactorData0) AS LABEL, SEARCH.table6_login AS INSERT_USER, SEARCH.ext_atlasScalingFactorData_meta_data360 AS INSERT_DATE, SEARCH.xnat_experimentData24 AS PROJECT, SEARCH.ext_atlasScalingFactorData1 AS SCALINGFACTOR, SEARCH.ext_atlasScalingFactorData2 AS ETA, SEARCH.ext_atlasScalingFactorData3 AS EICV, SEARCH.ext_atlasScalingFactorData4 AS BASESCANNUMBER, SEARCH.ext_atlasScalingFactorData_meta_data357 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (ext_atlasScalingFactorData0) *, (xnat_experimentData14-xnat_mrSessionData_sordata__xnat_experimentData24) AS ext_atlasScalingFactorData_xnat_mrSessionData_DIFF FROM (SELECT table3.id AS ext_atlasScalingFactorData0, table5.status AS ext_atlasScalingFactorData_meta_data357, table1.imagesession_id AS xnat_imageAssessorData9, table3.date AS xnat_experimentData14, table3.label AS xnat_experimentData30, table6.login AS table6_login, table5.insert_date AS ext_atlasScalingFactorData_meta_data360, table3.project AS xnat_experimentData24, ext_atlasScalingFactorData.scalingfactor AS ext_atlasScalingFactorData1, ext_atlasScalingFactorData.eta AS ext_atlasScalingFactorData2, ext_atlasScalingFactorData.eicv AS ext_atlasScalingFactorData3, ext_atlasScalingFactorData.basescannumber AS ext_atlasScalingFactorData4, xnat_mrSessionData.xnat_mrSessionData0 AS xnat_mrSessionData_sordata_EX_xnat_mrSessionData0, xnat_mrSessionData.xnat_experimentData24 AS xnat_mrSessionData_sordata__xnat_experimentData24, xnat_mrSessionData.xnat_subjectAssessorData21 AS xnat_mrSessionData_sor_xnat_subjectAssessorData21, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, EXT_ATLASSCALINGFACTORDATA_PROJECTS.PROJECTS AS EXT_ATLASSCALINGFACTORDATA_PROJECTS_PROJECTS FROM ext_atlasScalingFactorData ext_atlasScalingFactorData   LEFT JOIN xnat_mrAssessorData table0 ON ext_atlasScalingFactorData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id   LEFT JOIN ext_atlasScalingFactorData_meta_data table5 ON ext_atlasScalingFactorData.atlasScalingFactorData_info=table5.meta_data_id   LEFT JOIN xdat_user table6 ON table5.insert_user_xdat_user_id=table6.xdat_user_id  LEFT JOIN EXT_ATLASSCALINGFACTORDATA_PROJECTS EXT_ATLASSCALINGFACTORDATA_PROJECTS ON table3.id=EXT_ATLASSCALINGFACTORDATA_PROJECTS.id LEFT JOIN (SELECT table2.id AS xnat_mrSessionData0, table2.date AS xnat_experimentData24, table1.subject_id AS xnat_subjectAssessorData21 FROM xnat_mrSessionData xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_mrSessionData ON table1.imagesession_id=xnat_mrSessionData.xnat_mrSessionData0 LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, ext_atlasScalingFactorData.ext_atlasScalingFactorData0 AS ext_atlasScalingFactorData_at_ext_atlasScalingFactorData0, ext_atlasScalingFactorData.xnat_experimentData14 AS ext_atlasScalingFactorData_ata_EXT__xnat_experimentData14 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table3.id AS ext_atlasScalingFactorData0, table1.imagesession_id AS xnat_imageAssessorData9, xnat_mrSessionData.xnat_subjectAssessorData21 AS xnat_subjectAssessorData21 FROM ext_atlasScalingFactorData ext_atlasScalingFactorData   LEFT JOIN xnat_mrAssessorData table0 ON ext_atlasScalingFactorData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id LEFT JOIN (SELECT table2.id AS xnat_mrSessionData0, table1.subject_id AS xnat_subjectAssessorData21 FROM xnat_mrSessionData xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_mrSessionData ON table1.imagesession_id=xnat_mrSessionData.xnat_mrSessionData0) AS map_ext_atlasScalingFactorData ON xnat_subjectData.id=map_ext_atlasScalingFactorData.xnat_subjectAssessorData21 LEFT JOIN (SELECT table3.id AS ext_atlasScalingFactorData0, table3.date AS xnat_experimentData14 FROM ext_atlasScalingFactorData ext_atlasScalingFactorData   LEFT JOIN xnat_mrAssessorData table0 ON ext_atlasScalingFactorData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id) AS ext_atlasScalingFactorData ON map_ext_atlasScalingFactorData.ext_atlasScalingFactorData0=ext_atlasScalingFactorData.ext_atlasScalingFactorData0) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, ext_atlasScalingFactorData_ata_EXT__xnat_experimentData14 DESC) AS map_xnat_subjectData_xnat_demographicData ON table3.id=map_xnat_subjectData_xnat_demographicData.ext_atlasScalingFactorData_at_ext_atlasScalingFactorData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY ext_atlasScalingFactorData0, (xnat_experimentData14-xnat_mrSessionData_sordata__xnat_experimentData24) ASC, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT ext_atlasScalingFactorData0 FROM (SELECT table3.id AS ext_atlasScalingFactorData0, table3.date AS xnat_experimentData14 FROM ext_atlasScalingFactorData ext_atlasScalingFactorData   LEFT JOIN xnat_mrAssessorData table0 ON ext_atlasScalingFactorData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.ext_atlasScalingFactorData0=SEARCH.ext_atlasScalingFactorData0 ORDER BY (SEARCH.xnat_imageAssessorData9) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_hdScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_hdScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_hdScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_hdScanData0, table2.status AS xnat_hdScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_hdScanData_meta_data118, table4.login AS table4_login FROM xnat_hdScanData xnat_hdScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_hdScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_hdScanData_meta_data table2 ON xnat_hdScanData.hdScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_hdScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_hdScanData0, table2.insert_date AS xnat_hdScanData_meta_data118 FROM xnat_hdScanData xnat_hdScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_hdScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_hdScanData_meta_data table2 ON xnat_hdScanData.hdScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_hdScanData0=SEARCH.xnat_hdScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_ecgScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_ecgScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_ecgScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_ecgScanData0, table2.status AS xnat_ecgScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_ecgScanData_meta_data118, table4.login AS table4_login FROM xnat_ecgScanData xnat_ecgScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_ecgScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_ecgScanData_meta_data table2 ON xnat_ecgScanData.ecgScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_ecgScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_ecgScanData0, table2.insert_date AS xnat_ecgScanData_meta_data118 FROM xnat_ecgScanData xnat_ecgScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_ecgScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_ecgScanData_meta_data table2 ON xnat_ecgScanData.ecgScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_ecgScanData0=SEARCH.xnat_ecgScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_XCSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:xcSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_xcSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_xcSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_XCSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_xcSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_xcSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_xcSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_xcSessionData0) * FROM (SELECT table2.id AS xnat_xcSessionData0, table4.status AS xnat_xcSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_xcSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_XCSESSIONDATA_PROJECTS.PROJECTS AS XNAT_XCSESSIONDATA_PROJECTS_PROJECTS FROM xnat_xcSessionData xnat_xcSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xcSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_xcSessionData_meta_data table4 ON xnat_xcSessionData.xcSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_XCSESSIONDATA_PROJECTS XNAT_XCSESSIONDATA_PROJECTS ON table2.id=XNAT_XCSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_xcSessionData.xnat_xcSessionData0 AS xnat_xcSessionData_sordata_EX_xnat_xcSessionData0, xnat_xcSessionData.xnat_experimentData20 AS xnat_xcSessionData_sordata__xnat_experimentData20, xnat_xcSessionData.xnat_subjectAssessorData17 AS xnat_xcSessionData_sor_xnat_subjectAssessorData17, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_xcSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_xcSessionData xnat_xcSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xcSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_xcSessionData ON xnat_subjectData.id=xnat_xcSessionData.xnat_subjectAssessorData17 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_xcSessionData_sordata__xnat_experimentData20 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_xcSessionData_sordata_EX_xnat_xcSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_xcSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_xcSessionData0 FROM (SELECT table2.id AS xnat_xcSessionData0, table2.date AS xnat_experimentData20 FROM xnat_xcSessionData xnat_xcSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xcSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_xcSessionData0=SEARCH.xnat_xcSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xdat_stored_search AS SELECT SEARCH.xdat_stored_search0 AS ROOT_ELEMENT_NAME, SEARCH.xdat_stored_search1 AS SORT_BY_ELEMENT_NAME, SEARCH.xdat_stored_search2 AS SORT_BY_FIELD_ID, SEARCH.xdat_stored_search5 AS LAYERED_SEQUENCE, SEARCH.xdat_stored_search3 AS ID, SEARCH.xdat_stored_search4 AS DESCRIPTION, SEARCH.xdat_stored_search8 AS BRIEF_DESCRIPTION, SEARCH.xdat_stored_search_meta_data107 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xdat_stored_search.id AS xdat_stored_search3, table1.status AS xdat_stored_search_meta_data107, xdat_stored_search.root_element_name AS xdat_stored_search0, xdat_stored_search.sort_by_element_name AS xdat_stored_search1, xdat_stored_search.sort_by_field_id AS xdat_stored_search2, xdat_stored_search.layeredsequence AS xdat_stored_search5, xdat_stored_search.description AS xdat_stored_search4, xdat_stored_search.brief_description AS xdat_stored_search8, table1.insert_date AS xdat_stored_search_meta_data110 FROM xdat_stored_search xdat_stored_search   LEFT JOIN xdat_stored_search_meta_data table1 ON xdat_stored_search.stored_search_info=table1.meta_data_id) SEARCH RIGHT JOIN (SELECT DISTINCT xdat_stored_search3 FROM (SELECT xdat_stored_search.id AS xdat_stored_search3, table1.insert_date AS xdat_stored_search_meta_data110 FROM xdat_stored_search xdat_stored_search   LEFT JOIN xdat_stored_search_meta_data table1 ON xdat_stored_search.stored_search_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xdat_stored_search3=SEARCH.xdat_stored_search3 ORDER BY (SEARCH.xdat_stored_search0) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_QCMANUALASSESSORDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:qcManualAssessorData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_qcManualAssessorData AS SELECT SEARCH.xnat_qcManualAssessorData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData17 AS DATE, XNAT_QCMANUALASSESSORDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData33, SEARCH.xnat_qcManualAssessorData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_qcManualAssessorData_meta_data395 AS INSERT_DATE, SEARCH.xnat_experimentData27 AS PROJECT, SEARCH.xnat_qcManualAssessorData1 AS RATER, SEARCH.xnat_qcManualAssessorData2 AS STEREOTACTICMARKER, SEARCH.xnat_qcManualAssessorData3 AS INCIDENTALFINDINGS, SEARCH.xnat_qcManualAssessorData4 AS COMMENTS, SEARCH.xnat_qcManualAssessorData5 AS PASS, SEARCH.xnat_qcManualAssessorData6 AS PAYABLE, SEARCH.xnat_qcManualAssessorData7 AS RESCAN, SEARCH.xnat_qcManualAssessorData8 AS RESOLVABLE, SEARCH.xnat_qcManualAssessorData9 AS RETRAIN, SEARCH.xnat_qcManualAssessorData_meta_data392 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table2.id AS xnat_qcManualAssessorData0, table4.status AS xnat_qcManualAssessorData_meta_data392, table2.date AS xnat_experimentData17, table2.label AS xnat_experimentData33, table5.login AS table5_login, table4.insert_date AS xnat_qcManualAssessorData_meta_data395, table2.project AS xnat_experimentData27, xnat_qcManualAssessorData.rater AS xnat_qcManualAssessorData1, xnat_qcManualAssessorData.stereotacticmarker AS xnat_qcManualAssessorData2, xnat_qcManualAssessorData.incidentalfindings AS xnat_qcManualAssessorData3, xnat_qcManualAssessorData.comments AS xnat_qcManualAssessorData4, xnat_qcManualAssessorData.pass AS xnat_qcManualAssessorData5, xnat_qcManualAssessorData.payable AS xnat_qcManualAssessorData6, xnat_qcManualAssessorData.rescan AS xnat_qcManualAssessorData7, xnat_qcManualAssessorData.resolvable AS xnat_qcManualAssessorData8, xnat_qcManualAssessorData.retrain AS xnat_qcManualAssessorData9, XNAT_QCMANUALASSESSORDATA_PROJECTS.PROJECTS AS XNAT_QCMANUALASSESSORDATA_PROJECTS_PROJECTS FROM xnat_qcManualAssessorData xnat_qcManualAssessorData   LEFT JOIN xnat_imageAssessorData table0 ON xnat_qcManualAssessorData.id=table0.id   LEFT JOIN xnat_derivedData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_qcManualAssessorData_meta_data table4 ON xnat_qcManualAssessorData.qcManualAssessorData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_QCMANUALASSESSORDATA_PROJECTS XNAT_QCMANUALASSESSORDATA_PROJECTS ON table2.id=XNAT_QCMANUALASSESSORDATA_PROJECTS.id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_qcManualAssessorData0 FROM (SELECT table2.id AS xnat_qcManualAssessorData0, table2.date AS xnat_experimentData17 FROM xnat_qcManualAssessorData xnat_qcManualAssessorData   LEFT JOIN xnat_imageAssessorData table0 ON xnat_qcManualAssessorData.id=table0.id   LEFT JOIN xnat_derivedData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_qcManualAssessorData0=SEARCH.xnat_qcManualAssessorData0 ORDER BY (SEARCH.xnat_qcManualAssessorData0) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_cat_dcmCatalog AS SELECT SEARCH.cat_catalog13 AS ID, SEARCH.cat_catalog14 AS NAME, SEARCH.cat_catalog15 AS DESCRIPTION, SEARCH.cat_dcmCatalog_meta_data136 AS INSERT_DATE, SEARCH.table3_login AS INSERT_USER, SEARCH.cat_dcmCatalog1 AS DIMENSIONS_X, SEARCH.cat_dcmCatalog2 AS DIMENSIONS_Y, SEARCH.cat_dcmCatalog3 AS DIMENSIONS_Z, SEARCH.cat_dcmCatalog4 AS DIMENSIONS_VOLUMES, SEARCH.cat_dcmCatalog5 AS VOXELRES_X, SEARCH.cat_dcmCatalog6 AS VOXELRES_Y, SEARCH.cat_dcmCatalog7 AS VOXELRES_Z, SEARCH.cat_dcmCatalog8 AS VOXELRES_UNITS, SEARCH.cat_dcmCatalog9 AS ORIENTATION, SEARCH.cat_dcmCatalog10 AS UID, SEARCH.cat_dcmCatalog_meta_data133 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.cat_catalog_id AS cat_dcmCatalog0, table2.status AS cat_dcmCatalog_meta_data133, table0.id AS cat_catalog13, table0.name AS cat_catalog14, table0.description AS cat_catalog15, table2.insert_date AS cat_dcmCatalog_meta_data136, table3.login AS table3_login, cat_dcmCatalog.dimensions_x AS cat_dcmCatalog1, cat_dcmCatalog.dimensions_y AS cat_dcmCatalog2, cat_dcmCatalog.dimensions_z AS cat_dcmCatalog3, cat_dcmCatalog.dimensions_volumes AS cat_dcmCatalog4, cat_dcmCatalog.voxelres_x AS cat_dcmCatalog5, cat_dcmCatalog.voxelres_y AS cat_dcmCatalog6, cat_dcmCatalog.voxelres_z AS cat_dcmCatalog7, cat_dcmCatalog.voxelres_units AS cat_dcmCatalog8, cat_dcmCatalog.orientation AS cat_dcmCatalog9, cat_dcmCatalog.uid AS cat_dcmCatalog10 FROM cat_dcmCatalog cat_dcmCatalog   LEFT JOIN cat_catalog table0 ON cat_dcmCatalog.cat_catalog_id=table0.cat_catalog_id   LEFT JOIN cat_dcmCatalog_meta_data table2 ON cat_dcmCatalog.dcmCatalog_info=table2.meta_data_id   LEFT JOIN xdat_user table3 ON table2.insert_user_xdat_user_id=table3.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT cat_dcmCatalog0 FROM (SELECT table0.cat_catalog_id AS cat_dcmCatalog0, table2.insert_date AS cat_dcmCatalog_meta_data136 FROM cat_dcmCatalog cat_dcmCatalog   LEFT JOIN cat_catalog table0 ON cat_dcmCatalog.cat_catalog_id=table0.cat_catalog_id   LEFT JOIN cat_dcmCatalog_meta_data table2 ON cat_dcmCatalog.dcmCatalog_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.cat_dcmCatalog0=SEARCH.cat_dcmCatalog0 ORDER BY (SEARCH.cat_catalog13) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_xcScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_xcScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_xcScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_xcScanData0, table2.status AS xnat_xcScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_xcScanData_meta_data118, table4.login AS table4_login FROM xnat_xcScanData xnat_xcScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_xcScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_xcScanData_meta_data table2 ON xnat_xcScanData.xcScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_xcScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_xcScanData0, table2.insert_date AS xnat_xcScanData_meta_data118 FROM xnat_xcScanData xnat_xcScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_xcScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_xcScanData_meta_data table2 ON xnat_xcScanData.xcScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_xcScanData0=SEARCH.xnat_xcScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_eegScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_eegScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_eegScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_eegScanData0, table2.status AS xnat_eegScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_eegScanData_meta_data118, table4.login AS table4_login FROM xnat_eegScanData xnat_eegScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_eegScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_eegScanData_meta_data table2 ON xnat_eegScanData.eegScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_eegScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_eegScanData0, table2.insert_date AS xnat_eegScanData_meta_data118 FROM xnat_eegScanData xnat_eegScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_eegScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_eegScanData_meta_data table2 ON xnat_eegScanData.eegScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_eegScanData0=SEARCH.xnat_eegScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_mgScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_mgScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_mgScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_mgScanData0, table2.status AS xnat_mgScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_mgScanData_meta_data118, table4.login AS table4_login FROM xnat_mgScanData xnat_mgScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_mgScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_mgScanData_meta_data table2 ON xnat_mgScanData.mgScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_mgScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_mgScanData0, table2.insert_date AS xnat_mgScanData_meta_data118 FROM xnat_mgScanData xnat_mgScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_mgScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_mgScanData_meta_data table2 ON xnat_mgScanData.mgScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_mgScanData0=SEARCH.xnat_mgScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_OPTSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:optSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_optSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_optSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_OPTSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_optSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_optSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_optSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_optSessionData0) * FROM (SELECT table2.id AS xnat_optSessionData0, table4.status AS xnat_optSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_optSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_OPTSESSIONDATA_PROJECTS.PROJECTS AS XNAT_OPTSESSIONDATA_PROJECTS_PROJECTS FROM xnat_optSessionData xnat_optSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_optSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_optSessionData_meta_data table4 ON xnat_optSessionData.optSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_OPTSESSIONDATA_PROJECTS XNAT_OPTSESSIONDATA_PROJECTS ON table2.id=XNAT_OPTSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_optSessionData.xnat_optSessionData0 AS xnat_optSessionData_sordata_E_xnat_optSessionData0, xnat_optSessionData.xnat_experimentData20 AS xnat_optSessionData_sordata__xnat_experimentData20, xnat_optSessionData.xnat_subjectAssessorData17 AS xnat_optSessionData_sor_xnat_subjectAssessorData17, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_optSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_optSessionData xnat_optSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_optSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_optSessionData ON xnat_subjectData.id=xnat_optSessionData.xnat_subjectAssessorData17 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_optSessionData_sordata__xnat_experimentData20 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_optSessionData_sordata_E_xnat_optSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_optSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_optSessionData0 FROM (SELECT table2.id AS xnat_optSessionData0, table2.date AS xnat_experimentData20 FROM xnat_optSessionData xnat_optSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_optSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_optSessionData0=SEARCH.xnat_optSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_xaScanData AS SELECT SEARCH.xnat_imageScanData12 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData13 AS NOTE, SEARCH.xnat_imageScanData14 AS QUALITY, SEARCH.xnat_imageScanData15 AS CONDITION, SEARCH.xnat_imageScanData16 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData17 AS DOCUMENTATION, SEARCH.xnat_imageScanData18 AS SCANNER, SEARCH.xnat_imageScanData19 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData20 AS SCANNER_MODEL, SEARCH.xnat_imageScanData21 AS MODALITY, SEARCH.xnat_imageScanData22 AS FRAMES, SEARCH.xnat_imageScanData23 AS OPERATOR, SEARCH.xnat_imageScanData25 AS STARTTIME, SEARCH.xnat_imageScanData26 AS ID, SEARCH.xnat_imageScanData27 AS TYPE, SEARCH.xnat_imageScanData28 AS UID, SEARCH.xnat_imageScanData29 AS PROJECT, SEARCH.xnat_xaScanData_meta_data150 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_xaScanData1 AS PARAMETERS_PIXELRES_UNITS, SEARCH.xnat_xaScanData2 AS PARAMETERS_PIXELRES_X, SEARCH.xnat_xaScanData3 AS PARAMETERS_PIXELRES_Y, SEARCH.xnat_xaScanData4 AS PARAMETERS_ORIENTATION, SEARCH.xnat_xaScanData5 AS PARAMETERS_FOV_X, SEARCH.xnat_xaScanData6 AS PARAMETERS_FOV_Y, SEARCH.xnat_xaScanData7 AS PARAMETERS_IMAGETYPE, SEARCH.xnat_xaScanData8 AS PARAMETERS_OPTIONS, SEARCH.xnat_xaScanData9 AS PARAMETERS_DERIVATION, SEARCH.xnat_xaScanData_meta_data147 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_xaScanData0, table2.status AS xnat_xaScanData_meta_data147, table0.image_session_id AS xnat_imageScanData12, table0.note AS xnat_imageScanData13, table0.quality AS xnat_imageScanData14, table0.condition AS xnat_imageScanData15, table0.series_description AS xnat_imageScanData16, table0.documentation AS xnat_imageScanData17, table0.scanner AS xnat_imageScanData18, table0.scanner_manufacturer AS xnat_imageScanData19, table0.scanner_model AS xnat_imageScanData20, table0.modality AS xnat_imageScanData21, table0.frames AS xnat_imageScanData22, table0.operator AS xnat_imageScanData23, table0.starttime AS xnat_imageScanData25, table0.id AS xnat_imageScanData26, table0.type AS xnat_imageScanData27, table0.uid AS xnat_imageScanData28, table0.project AS xnat_imageScanData29, table2.insert_date AS xnat_xaScanData_meta_data150, table4.login AS table4_login, xnat_xaScanData.parameters_pixelres_units AS xnat_xaScanData1, xnat_xaScanData.parameters_pixelres_x AS xnat_xaScanData2, xnat_xaScanData.parameters_pixelres_y AS xnat_xaScanData3, xnat_xaScanData.parameters_orientation AS xnat_xaScanData4, xnat_xaScanData.parameters_fov_x AS xnat_xaScanData5, xnat_xaScanData.parameters_fov_y AS xnat_xaScanData6, xnat_xaScanData.parameters_imagetype AS xnat_xaScanData7, xnat_xaScanData.parameters_options AS xnat_xaScanData8, xnat_xaScanData.parameters_derivation AS xnat_xaScanData9 FROM xnat_xaScanData xnat_xaScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_xaScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_xaScanData_meta_data table2 ON xnat_xaScanData.xaScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_xaScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_xaScanData0, table2.insert_date AS xnat_xaScanData_meta_data150 FROM xnat_xaScanData xnat_xaScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_xaScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_xaScanData_meta_data table2 ON xnat_xaScanData.xaScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_xaScanData0=SEARCH.xnat_xaScanData0 ORDER BY (SEARCH.xnat_imageScanData12) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_GENERICDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:genericData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_genericData AS SELECT SEARCH.xnat_genericData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData2 AS DATE, XNAT_GENERICDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData18, SEARCH.xnat_genericData0) AS LABEL, SEARCH.table3_login AS INSERT_USER, SEARCH.xnat_genericData_meta_data157 AS INSERT_DATE, SEARCH.xnat_experimentData12 AS PROJECT, SEARCH.xnat_genericData_meta_data154 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.id AS xnat_genericData0, table2.status AS xnat_genericData_meta_data154, table0.date AS xnat_experimentData2, table0.label AS xnat_experimentData18, table3.login AS table3_login, table2.insert_date AS xnat_genericData_meta_data157, table0.project AS xnat_experimentData12, XNAT_GENERICDATA_PROJECTS.PROJECTS AS XNAT_GENERICDATA_PROJECTS_PROJECTS FROM xnat_genericData xnat_genericData   LEFT JOIN xnat_experimentData table0 ON xnat_genericData.id=table0.id   LEFT JOIN xnat_genericData_meta_data table2 ON xnat_genericData.genericData_info=table2.meta_data_id   LEFT JOIN xdat_user table3 ON table2.insert_user_xdat_user_id=table3.xdat_user_id  LEFT JOIN XNAT_GENERICDATA_PROJECTS XNAT_GENERICDATA_PROJECTS ON table0.id=XNAT_GENERICDATA_PROJECTS.id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_genericData0 FROM (SELECT table0.id AS xnat_genericData0, table0.date AS xnat_experimentData2 FROM xnat_genericData xnat_genericData   LEFT JOIN xnat_experimentData table0 ON xnat_genericData.id=table0.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_genericData0=SEARCH.xnat_genericData0 ORDER BY (SEARCH.xnat_genericData0) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_smScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_smScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_smScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_smScanData0, table2.status AS xnat_smScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_smScanData_meta_data118, table4.login AS table4_login FROM xnat_smScanData xnat_smScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_smScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_smScanData_meta_data table2 ON xnat_smScanData.smScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_smScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_smScanData0, table2.insert_date AS xnat_smScanData_meta_data118 FROM xnat_smScanData xnat_smScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_smScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_smScanData_meta_data table2 ON xnat_smScanData.smScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_smScanData0=SEARCH.xnat_smScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_gmvScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_gmvScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_gmvScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_gmvScanData0, table2.status AS xnat_gmvScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_gmvScanData_meta_data118, table4.login AS table4_login FROM xnat_gmvScanData xnat_gmvScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_gmvScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_gmvScanData_meta_data table2 ON xnat_gmvScanData.gmvScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_gmvScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_gmvScanData0, table2.insert_date AS xnat_gmvScanData_meta_data118 FROM xnat_gmvScanData xnat_gmvScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_gmvScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_gmvScanData_meta_data table2 ON xnat_gmvScanData.gmvScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_gmvScanData0=SEARCH.xnat_gmvScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_rtImageScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_rtImageScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_rtImageScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_rtImageScanData0, table2.status AS xnat_rtImageScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_rtImageScanData_meta_data118, table4.login AS table4_login FROM xnat_rtImageScanData xnat_rtImageScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_rtImageScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_rtImageScanData_meta_data table2 ON xnat_rtImageScanData.rtImageScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_rtImageScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_rtImageScanData0, table2.insert_date AS xnat_rtImageScanData_meta_data118 FROM xnat_rtImageScanData xnat_rtImageScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_rtImageScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_rtImageScanData_meta_data table2 ON xnat_rtImageScanData.rtImageScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_rtImageScanData0=SEARCH.xnat_rtImageScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_A_YGTSSDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat_a:ygtssData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_a_ygtssData AS SELECT SEARCH.xnat_subjectAssessorData19 AS SUBJECT_ID, SEARCH.xnat_a_ygtssData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData22 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData22) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData22)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_A_YGTSSDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData38, SEARCH.xnat_a_ygtssData0) AS LABEL, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_a_ygtssData_meta_data189 AS INSERT_DATE, SEARCH.xnat_experimentData32 AS PROJECT, SEARCH.xnat_a_ygtssData1 AS FILLEDOUTBY, SEARCH.xnat_a_ygtssData2 AS PERIOD, SEARCH.xnat_a_ygtssData3 AS WORSTEVERAGE, SEARCH.xnat_a_ygtssData4 AS MOTOR_NUMBER, SEARCH.xnat_a_ygtssData5 AS MOTOR_FREQUENCY, SEARCH.xnat_a_ygtssData6 AS MOTOR_INTENSITY, SEARCH.xnat_a_ygtssData7 AS MOTOR_COMPLEXITY, SEARCH.xnat_a_ygtssData8 AS MOTOR_INTERFERENCE, SEARCH.xnat_a_ygtssData9 AS MOTOR_INVENTORY, SEARCH.xnat_a_ygtssData10 AS PHONIC_NUMBER, SEARCH.xnat_a_ygtssData11 AS PHONIC_FREQUENCY, SEARCH.xnat_a_ygtssData12 AS PHONIC_INTENSITY, SEARCH.xnat_a_ygtssData13 AS PHONIC_COMPLEXITY, SEARCH.xnat_a_ygtssData14 AS PHONIC_INTERFERENCE, SEARCH.xnat_a_ygtssData15 AS PHONIC_INVENTORY, SEARCH.xnat_a_ygtssData16 AS IMPAIRMENT, SEARCH.xnat_a_ygtssData_meta_data186 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_a_ygtssData0) * FROM (SELECT table1.id AS xnat_a_ygtssData0, table3.status AS xnat_a_ygtssData_meta_data186, table0.subject_id AS xnat_subjectAssessorData19, table1.date AS xnat_experimentData22, table1.label AS xnat_experimentData38, table4.login AS table4_login, table3.insert_date AS xnat_a_ygtssData_meta_data189, table1.project AS xnat_experimentData32, xnat_a_ygtssData.filledoutby AS xnat_a_ygtssData1, xnat_a_ygtssData.period AS xnat_a_ygtssData2, xnat_a_ygtssData.worsteverage AS xnat_a_ygtssData3, xnat_a_ygtssData.motor_number AS xnat_a_ygtssData4, xnat_a_ygtssData.motor_frequency AS xnat_a_ygtssData5, xnat_a_ygtssData.motor_intensity AS xnat_a_ygtssData6, xnat_a_ygtssData.motor_complexity AS xnat_a_ygtssData7, xnat_a_ygtssData.motor_interference AS xnat_a_ygtssData8, xnat_a_ygtssData.motor_inventory AS xnat_a_ygtssData9, xnat_a_ygtssData.phonic_number AS xnat_a_ygtssData10, xnat_a_ygtssData.phonic_frequency AS xnat_a_ygtssData11, xnat_a_ygtssData.phonic_intensity AS xnat_a_ygtssData12, xnat_a_ygtssData.phonic_complexity AS xnat_a_ygtssData13, xnat_a_ygtssData.phonic_interference AS xnat_a_ygtssData14, xnat_a_ygtssData.phonic_inventory AS xnat_a_ygtssData15, xnat_a_ygtssData.impairment AS xnat_a_ygtssData16, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_A_YGTSSDATA_PROJECTS.PROJECTS AS XNAT_A_YGTSSDATA_PROJECTS_PROJECTS FROM xnat_a_ygtssData xnat_a_ygtssData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_ygtssData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xnat_a_ygtssData_meta_data table3 ON xnat_a_ygtssData.ygtssData_info=table3.meta_data_id   LEFT JOIN xdat_user table4 ON table3.insert_user_xdat_user_id=table4.xdat_user_id  LEFT JOIN XNAT_A_YGTSSDATA_PROJECTS XNAT_A_YGTSSDATA_PROJECTS ON table1.id=XNAT_A_YGTSSDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_a_ygtssData.xnat_a_ygtssData0 AS xnat_a_ygtssData_tdata_EXT_xn_xnat_a_ygtssData0, xnat_a_ygtssData.xnat_experimentData22 AS xnat_a_ygtssData_tdata_EX_xnat_experimentData22, xnat_a_ygtssData.xnat_subjectAssessorData19 AS xnat_a_ygtssData_tss_xnat_subjectAssessorData19 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table1.id AS xnat_a_ygtssData0, table1.date AS xnat_experimentData22, table0.subject_id AS xnat_subjectAssessorData19 FROM xnat_a_ygtssData xnat_a_ygtssData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_ygtssData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) AS xnat_a_ygtssData ON xnat_subjectData.id=xnat_a_ygtssData.xnat_subjectAssessorData19) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_a_ygtssData_tdata_EX_xnat_experimentData22 DESC) AS map_xnat_subjectData_xnat_demographicData ON table1.id=map_xnat_subjectData_xnat_demographicData.xnat_a_ygtssData_tdata_EXT_xn_xnat_a_ygtssData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_a_ygtssData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_a_ygtssData0 FROM (SELECT table1.id AS xnat_a_ygtssData0, table1.date AS xnat_experimentData22 FROM xnat_a_ygtssData xnat_a_ygtssData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_ygtssData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_a_ygtssData0=SEARCH.xnat_a_ygtssData0 ORDER BY (SEARCH.xnat_subjectAssessorData19) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_PVISITDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:pVisitData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_pVisitData AS SELECT SEARCH.xnat_pVisitData1 AS SUBJECT_ID, SEARCH.xnat_pVisitData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData15 AS DATE, XNAT_PVISITDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData31, SEARCH.xnat_pVisitData0) AS LABEL, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_pVisitData_meta_data182 AS INSERT_DATE, SEARCH.xnat_experimentData25 AS PROJECT, SEARCH.xnat_pVisitData2 AS VISIT_TYPE, SEARCH.xnat_pVisitData3 AS VISIT_NAME, SEARCH.xnat_pVisitData7 AS CLOSED, SEARCH.xnat_pVisitData8 AS TERMINAL, SEARCH.xnat_pVisitData10 AS PROTOCOLVERSION, SEARCH.xnat_pVisitData11 AS PROTOCOLID, SEARCH.xnat_pVisitData_meta_data179 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table1.id AS xnat_pVisitData0, table3.status AS xnat_pVisitData_meta_data179, xnat_pVisitData.subject_id AS xnat_pVisitData1, table1.date AS xnat_experimentData15, table1.label AS xnat_experimentData31, table4.login AS table4_login, table3.insert_date AS xnat_pVisitData_meta_data182, table1.project AS xnat_experimentData25, xnat_pVisitData.visit_type AS xnat_pVisitData2, xnat_pVisitData.visit_name AS xnat_pVisitData3, xnat_pVisitData.closed AS xnat_pVisitData7, xnat_pVisitData.terminal AS xnat_pVisitData8, xnat_pVisitData.protocolversion AS xnat_pVisitData10, xnat_pVisitData.protocolid AS xnat_pVisitData11, XNAT_PVISITDATA_PROJECTS.PROJECTS AS XNAT_PVISITDATA_PROJECTS_PROJECTS FROM xnat_pVisitData xnat_pVisitData   LEFT JOIN xnat_genericData table0 ON xnat_pVisitData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xnat_pVisitData_meta_data table3 ON xnat_pVisitData.pVisitData_info=table3.meta_data_id   LEFT JOIN xdat_user table4 ON table3.insert_user_xdat_user_id=table4.xdat_user_id  LEFT JOIN XNAT_PVISITDATA_PROJECTS XNAT_PVISITDATA_PROJECTS ON table1.id=XNAT_PVISITDATA_PROJECTS.id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_pVisitData0 FROM (SELECT table1.id AS xnat_pVisitData0, table1.date AS xnat_experimentData15 FROM xnat_pVisitData xnat_pVisitData   LEFT JOIN xnat_genericData table0 ON xnat_pVisitData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_pVisitData0=SEARCH.xnat_pVisitData0 ORDER BY (SEARCH.xnat_pVisitData1) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_A_YBOCSDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat_a:ybocsData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_a_ybocsData AS SELECT SEARCH.xnat_subjectAssessorData20 AS SUBJECT_ID, SEARCH.xnat_a_ybocsData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData23 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData23) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData23)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_A_YBOCSDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData39, SEARCH.xnat_a_ybocsData0) AS LABEL, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_a_ybocsData_meta_data190 AS INSERT_DATE, SEARCH.xnat_experimentData33 AS PROJECT, SEARCH.xnat_a_ybocsData1 AS CURRENTORWORSTEVER, SEARCH.xnat_a_ybocsData2 AS TIMEOCCUPIEDWITHTHOUGHTS, SEARCH.xnat_a_ybocsData3 AS THOUGHTSINTERFEREFUNCTIONING, SEARCH.xnat_a_ybocsData4 AS DISTRESSCAUSED, SEARCH.xnat_a_ybocsData5 AS EFFORTTORESISTTHOUGHTS, SEARCH.xnat_a_ybocsData6 AS CONTROLOVERTHOUGHTS, SEARCH.xnat_a_ybocsData7 AS TIMEPERFORMING, SEARCH.xnat_a_ybocsData8 AS BEHAVIORSINTERFEREFUNCTIONING, SEARCH.xnat_a_ybocsData9 AS FEELINGIFPREVENTED, SEARCH.xnat_a_ybocsData10 AS EFFORTTORESISTBEHAVIORS, SEARCH.xnat_a_ybocsData11 AS BEHAVIORDRIVESTRENGTH, SEARCH.xnat_a_ybocsData12 AS UNTILJUSTRIGHT, SEARCH.xnat_a_ybocsData13 AS UNTILJUSTRIGHTAWARENESS, SEARCH.xnat_a_ybocsData14 AS UNTILJUSTRIGHTPERCEPTIONS, SEARCH.xnat_a_ybocsData15 AS WHENSTARTUNTILJUSTRIGHT, SEARCH.xnat_a_ybocsData16 AS FREQUENCYUNTILJUSTRIGHT, SEARCH.xnat_a_ybocsData17 AS FIRSTUNTILJUSTRIGHTAGE, SEARCH.xnat_a_ybocsData_meta_data187 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_a_ybocsData0) * FROM (SELECT table1.id AS xnat_a_ybocsData0, table3.status AS xnat_a_ybocsData_meta_data187, table0.subject_id AS xnat_subjectAssessorData20, table1.date AS xnat_experimentData23, table1.label AS xnat_experimentData39, table4.login AS table4_login, table3.insert_date AS xnat_a_ybocsData_meta_data190, table1.project AS xnat_experimentData33, xnat_a_ybocsData.currentorworstever AS xnat_a_ybocsData1, xnat_a_ybocsData.timeoccupiedwiththoughts AS xnat_a_ybocsData2, xnat_a_ybocsData.thoughtsinterferefunctioning AS xnat_a_ybocsData3, xnat_a_ybocsData.distresscaused AS xnat_a_ybocsData4, xnat_a_ybocsData.efforttoresistthoughts AS xnat_a_ybocsData5, xnat_a_ybocsData.controloverthoughts AS xnat_a_ybocsData6, xnat_a_ybocsData.timeperforming AS xnat_a_ybocsData7, xnat_a_ybocsData.behaviorsinterferefunctioning AS xnat_a_ybocsData8, xnat_a_ybocsData.feelingifprevented AS xnat_a_ybocsData9, xnat_a_ybocsData.efforttoresistbehaviors AS xnat_a_ybocsData10, xnat_a_ybocsData.behaviordrivestrength AS xnat_a_ybocsData11, xnat_a_ybocsData.untiljustright AS xnat_a_ybocsData12, xnat_a_ybocsData.untiljustrightawareness AS xnat_a_ybocsData13, xnat_a_ybocsData.untiljustrightperceptions AS xnat_a_ybocsData14, xnat_a_ybocsData.whenstartuntiljustright AS xnat_a_ybocsData15, xnat_a_ybocsData.frequencyuntiljustright AS xnat_a_ybocsData16, xnat_a_ybocsData.firstuntiljustrightage AS xnat_a_ybocsData17, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_A_YBOCSDATA_PROJECTS.PROJECTS AS XNAT_A_YBOCSDATA_PROJECTS_PROJECTS FROM xnat_a_ybocsData xnat_a_ybocsData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_ybocsData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xnat_a_ybocsData_meta_data table3 ON xnat_a_ybocsData.ybocsData_info=table3.meta_data_id   LEFT JOIN xdat_user table4 ON table3.insert_user_xdat_user_id=table4.xdat_user_id  LEFT JOIN XNAT_A_YBOCSDATA_PROJECTS XNAT_A_YBOCSDATA_PROJECTS ON table1.id=XNAT_A_YBOCSDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_a_ybocsData.xnat_a_ybocsData0 AS xnat_a_ybocsData_tdata_EXT_xn_xnat_a_ybocsData0, xnat_a_ybocsData.xnat_experimentData23 AS xnat_a_ybocsData_tdata_EX_xnat_experimentData23, xnat_a_ybocsData.xnat_subjectAssessorData20 AS xnat_a_ybocsData_ocs_xnat_subjectAssessorData20 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table1.id AS xnat_a_ybocsData0, table1.date AS xnat_experimentData23, table0.subject_id AS xnat_subjectAssessorData20 FROM xnat_a_ybocsData xnat_a_ybocsData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_ybocsData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) AS xnat_a_ybocsData ON xnat_subjectData.id=xnat_a_ybocsData.xnat_subjectAssessorData20) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_a_ybocsData_tdata_EX_xnat_experimentData23 DESC) AS map_xnat_subjectData_xnat_demographicData ON table1.id=map_xnat_subjectData_xnat_demographicData.xnat_a_ybocsData_tdata_EXT_xn_xnat_a_ybocsData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_a_ybocsData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_a_ybocsData0 FROM (SELECT table1.id AS xnat_a_ybocsData0, table1.date AS xnat_experimentData23 FROM xnat_a_ybocsData xnat_a_ybocsData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_ybocsData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_a_ybocsData0=SEARCH.xnat_a_ybocsData0 ORDER BY (SEARCH.xnat_subjectAssessorData20) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_mrScanData AS SELECT SEARCH.xnat_imageScanData36 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData37 AS NOTE, SEARCH.xnat_imageScanData38 AS QUALITY, SEARCH.xnat_imageScanData39 AS CONDITION, SEARCH.xnat_imageScanData40 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData41 AS DOCUMENTATION, SEARCH.xnat_imageScanData42 AS SCANNER, SEARCH.xnat_imageScanData43 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData44 AS SCANNER_MODEL, SEARCH.xnat_imageScanData45 AS MODALITY, SEARCH.xnat_imageScanData46 AS FRAMES, SEARCH.xnat_imageScanData47 AS OPERATOR, SEARCH.xnat_imageScanData49 AS STARTTIME, SEARCH.xnat_imageScanData50 AS ID, SEARCH.xnat_imageScanData51 AS TYPE, SEARCH.xnat_imageScanData52 AS UID, SEARCH.xnat_imageScanData53 AS PROJECT, SEARCH.xnat_mrScanData_meta_data172 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_mrScanData1 AS COIL, SEARCH.xnat_mrScanData2 AS FIELDSTRENGTH, SEARCH.xnat_mrScanData3 AS MARKER, SEARCH.xnat_mrScanData4 AS STABILIZATION, SEARCH.xnat_mrScanData5 AS PARAMETERS_VOXELRES_UNITS, SEARCH.xnat_mrScanData6 AS PARAMETERS_VOXELRES_X, SEARCH.xnat_mrScanData7 AS PARAMETERS_VOXELRES_Y, SEARCH.xnat_mrScanData8 AS PARAMETERS_VOXELRES_Z, SEARCH.xnat_mrScanData9 AS PARAMETERS_ORIENTATION, SEARCH.xnat_mrScanData10 AS PARAMETERS_FOV_X, SEARCH.xnat_mrScanData11 AS PARAMETERS_FOV_Y, SEARCH.xnat_mrScanData12 AS PARAMETERS_MATRIX_X, SEARCH.xnat_mrScanData13 AS PARAMETERS_MATRIX_Y, SEARCH.xnat_mrScanData14 AS PARAMETERS_PARTITIONS, SEARCH.xnat_mrScanData15 AS PARAMETERS_TR, SEARCH.xnat_mrScanData16 AS PARAMETERS_TE, SEARCH.xnat_mrScanData17 AS PARAMETERS_TI, SEARCH.xnat_mrScanData18 AS PARAMETERS_FLIP, SEARCH.xnat_mrScanData19 AS PARAMETERS_SEQUENCE, SEARCH.xnat_mrScanData20 AS PARAMETERS_ORIGIN, SEARCH.xnat_mrScanData21 AS PARAMETERS_IMAGETYPE, SEARCH.xnat_mrScanData22 AS PARAMETERS_SCANSEQUENCE, SEARCH.xnat_mrScanData23 AS PARAMETERS_SEQVARIANT, SEARCH.xnat_mrScanData24 AS PARAMETERS_SCANOPTIONS, SEARCH.xnat_mrScanData25 AS PARAMETERS_ACQTYPE, SEARCH.xnat_mrScanData26 AS PARAMETERS_COIL, SEARCH.xnat_mrScanData27 AS PARAMETERS_DTIACQCOUNT, SEARCH.xnat_mrScanData28 AS PARAMETERS_PIXELBANDWIDTH, SEARCH.xnat_mrScanData29 AS PARAMETERS_DIFFUSION_BVALUES, SEARCH.xnat_mrScanData30 AS PARAMETERS_DIFFUSION_DIRECTIONALITY, SEARCH.xnat_mrScanData31 AS PARAMETERS_DIFFUSION_ORIENTATIONS, SEARCH.xnat_mrScanData32 AS PARAMETERS_DIFFUSION_ANISOTROPYTYPE, SEARCH.xnat_mrScanData33 AS DCMVALIDATION, SEARCH.xnat_mrScanData34 AS DCMVALIDATION_STATUS, SEARCH.xnat_mrScanData_meta_data169 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_mrScanData0, table2.status AS xnat_mrScanData_meta_data169, table0.image_session_id AS xnat_imageScanData36, table0.note AS xnat_imageScanData37, table0.quality AS xnat_imageScanData38, table0.condition AS xnat_imageScanData39, table0.series_description AS xnat_imageScanData40, table0.documentation AS xnat_imageScanData41, table0.scanner AS xnat_imageScanData42, table0.scanner_manufacturer AS xnat_imageScanData43, table0.scanner_model AS xnat_imageScanData44, table0.modality AS xnat_imageScanData45, table0.frames AS xnat_imageScanData46, table0.operator AS xnat_imageScanData47, table0.starttime AS xnat_imageScanData49, table0.id AS xnat_imageScanData50, table0.type AS xnat_imageScanData51, table0.uid AS xnat_imageScanData52, table0.project AS xnat_imageScanData53, table2.insert_date AS xnat_mrScanData_meta_data172, table4.login AS table4_login, xnat_mrScanData.coil AS xnat_mrScanData1, xnat_mrScanData.fieldstrength AS xnat_mrScanData2, xnat_mrScanData.marker AS xnat_mrScanData3, xnat_mrScanData.stabilization AS xnat_mrScanData4, xnat_mrScanData.parameters_voxelres_units AS xnat_mrScanData5, xnat_mrScanData.parameters_voxelres_x AS xnat_mrScanData6, xnat_mrScanData.parameters_voxelres_y AS xnat_mrScanData7, xnat_mrScanData.parameters_voxelres_z AS xnat_mrScanData8, xnat_mrScanData.parameters_orientation AS xnat_mrScanData9, xnat_mrScanData.parameters_fov_x AS xnat_mrScanData10, xnat_mrScanData.parameters_fov_y AS xnat_mrScanData11, xnat_mrScanData.parameters_matrix_x AS xnat_mrScanData12, xnat_mrScanData.parameters_matrix_y AS xnat_mrScanData13, xnat_mrScanData.parameters_partitions AS xnat_mrScanData14, xnat_mrScanData.parameters_tr AS xnat_mrScanData15, xnat_mrScanData.parameters_te AS xnat_mrScanData16, xnat_mrScanData.parameters_ti AS xnat_mrScanData17, xnat_mrScanData.parameters_flip AS xnat_mrScanData18, xnat_mrScanData.parameters_sequence AS xnat_mrScanData19, xnat_mrScanData.parameters_origin AS xnat_mrScanData20, xnat_mrScanData.parameters_imagetype AS xnat_mrScanData21, xnat_mrScanData.parameters_scansequence AS xnat_mrScanData22, xnat_mrScanData.parameters_seqvariant AS xnat_mrScanData23, xnat_mrScanData.parameters_scanoptions AS xnat_mrScanData24, xnat_mrScanData.parameters_acqtype AS xnat_mrScanData25, xnat_mrScanData.parameters_coil AS xnat_mrScanData26, xnat_mrScanData.parameters_dtiacqcount AS xnat_mrScanData27, xnat_mrScanData.parameters_pixelbandwidth AS xnat_mrScanData28, xnat_mrScanData.parameters_diffusion_bvalues AS xnat_mrScanData29, xnat_mrScanData.parameters_diffusion_directionality AS xnat_mrScanData30, xnat_mrScanData.parameters_diffusion_orientations AS xnat_mrScanData31, xnat_mrScanData.parameters_diffusion_anisotropytype AS xnat_mrScanData32, xnat_mrScanData.dcmvalidation AS xnat_mrScanData33, xnat_mrScanData.dcmvalidation_status AS xnat_mrScanData34 FROM xnat_mrScanData xnat_mrScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_mrScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_mrScanData_meta_data table2 ON xnat_mrScanData.mrScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_mrScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_mrScanData0, table2.insert_date AS xnat_mrScanData_meta_data172 FROM xnat_mrScanData xnat_mrScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_mrScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_mrScanData_meta_data table2 ON xnat_mrScanData.mrScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_mrScanData0=SEARCH.xnat_mrScanData0 ORDER BY (SEARCH.xnat_imageScanData36) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_EEGSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:eegSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_eegSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_eegSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_EEGSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_eegSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_eegSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_eegSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_eegSessionData0) * FROM (SELECT table2.id AS xnat_eegSessionData0, table4.status AS xnat_eegSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_eegSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_EEGSESSIONDATA_PROJECTS.PROJECTS AS XNAT_EEGSESSIONDATA_PROJECTS_PROJECTS FROM xnat_eegSessionData xnat_eegSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_eegSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_eegSessionData_meta_data table4 ON xnat_eegSessionData.eegSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_EEGSESSIONDATA_PROJECTS XNAT_EEGSESSIONDATA_PROJECTS ON table2.id=XNAT_EEGSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_eegSessionData.xnat_eegSessionData0 AS xnat_eegSessionData_sordata_E_xnat_eegSessionData0, xnat_eegSessionData.xnat_experimentData20 AS xnat_eegSessionData_sordata__xnat_experimentData20, xnat_eegSessionData.xnat_subjectAssessorData17 AS xnat_eegSessionData_sor_xnat_subjectAssessorData17, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_eegSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_eegSessionData xnat_eegSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_eegSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_eegSessionData ON xnat_subjectData.id=xnat_eegSessionData.xnat_subjectAssessorData17 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_eegSessionData_sordata__xnat_experimentData20 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_eegSessionData_sordata_E_xnat_eegSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_eegSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_eegSessionData0 FROM (SELECT table2.id AS xnat_eegSessionData0, table2.date AS xnat_experimentData20 FROM xnat_eegSessionData xnat_eegSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_eegSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_eegSessionData0=SEARCH.xnat_eegSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xdat_infoEntry AS SELECT SEARCH.xdat_infoEntry_meta_data11 AS INSERT_DATE, SEARCH.table2_login AS INSERT_USER, SEARCH.xdat_infoEntry0 AS DATE, SEARCH.xdat_infoEntry1 AS TITLE, SEARCH.xdat_infoEntry2 AS DESCRIPTION, SEARCH.xdat_infoEntry3 AS LINK, SEARCH.xdat_infoEntry_meta_data8 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xdat_infoEntry.xdat_infoentry_id AS xdat_infoEntry5, table1.status AS xdat_infoEntry_meta_data8, table1.insert_date AS xdat_infoEntry_meta_data11, table2.login AS table2_login, xdat_infoEntry.date AS xdat_infoEntry0, xdat_infoEntry.title AS xdat_infoEntry1, xdat_infoEntry.description AS xdat_infoEntry2, xdat_infoEntry.link AS xdat_infoEntry3 FROM xdat_infoEntry xdat_infoEntry   LEFT JOIN xdat_infoEntry_meta_data table1 ON xdat_infoEntry.infoEntry_info=table1.meta_data_id   LEFT JOIN xdat_user table2 ON table1.insert_user_xdat_user_id=table2.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xdat_infoEntry5 FROM (SELECT xdat_infoEntry.xdat_infoentry_id AS xdat_infoEntry5, table1.insert_date AS xdat_infoEntry_meta_data11 FROM xdat_infoEntry xdat_infoEntry   LEFT JOIN xdat_infoEntry_meta_data table1 ON xdat_infoEntry.infoEntry_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xdat_infoEntry5=SEARCH.xdat_infoEntry5 ORDER BY (SEARCH.xdat_infoEntry_meta_data11) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW SUBJECT_IDS AS SELECT sub.ID as subject_id,sub.label ||', '|| TRIM(', ' FROM xs_a_concat(pp.label || ', ')) AS ADDIDS FROM xnat_subjectData sub LEFT JOIN xnat_projectParticipant pp ON sub.id=pp.subject_id WHERE subject_id IS NOT NULL GROUP BY ID,sub.label;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW SUB_PROJECTS AS SELECT id, ',<' || sub.project || '>' || xs_a_concat(',<' || shared.project || '>') AS PROJECTS FROM xnat_subjectData sub LEFT JOIN xnat_projectParticipant shared ON sub.id=shared.subject_id GROUP BY sub.id,sub.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_subjectData AS SELECT SEARCH.xnat_subjectData3 AS SUBJECT_ID, SEARCH.xnat_subjectData3 AS SUBJECTID, SEARCH.xnat_subjectData_meta_data328 AS INSERT_DATE, SEARCH.table2_login AS INSERT_USER, SEARCH.xnat_demographicData_xnat_demographicData4 AS GENDER, CASE SEARCH.xnat_demographicData_xnat_demographicData4 WHEN 'male' THEN 'M' WHEN 'female' THEN 'F' ELSE 'U' END AS GENDER_TEXT, SEARCH.xnat_demographicData_xnat_demographicData5 AS HANDEDNESS, CASE LOWER(SEARCH.xnat_demographicData_xnat_demographicData5) WHEN 'left' THEN 'L' WHEN 'right' THEN 'R' WHEN 'ambidextrous' THEN 'A' WHEN 'r' THEN 'R' WHEN 'l' THEN 'L' WHEN 'a' THEN 'A' END AS HANDEDNESS_TEXT, CAST(FLOOR(COALESCE(SEARCH.xnat_demographicData_xnat_demographicData2,EXTRACT(YEAR FROM SEARCH.xnat_demographicData_xnat_demographicData1))) AS INTEGER) AS DOB, SEARCH.xnat_demographicData_xnat_demographicData8 AS EDUC, SEARCH.xnat_demographicData_xnat_demographicData6 AS SES, xnat_mrSessionData_COUNT AS MR_COUNT, SEARCH.xnat_investigatorData69 AS INVEST_CSV, SUB_PROJECTS_PROJECTS AS PROJECTS, SEARCH.xnat_subjectData4 AS PROJECT, SEARCH.xnat_subjectData5 AS SUB_GROUP, COALESCE(SEARCH.xnat_subjectData6, SEARCH.xnat_subjectData3) AS SUBJECT_LABEL, SEARCH.xnat_projectParticipant10 AS SHARED_LABEL, SUBJECT_IDS_ADDIDS AS ADD_IDS, SEARCH.xnat_demographicData_xnat_demographicData10 AS RACE, SEARCH.xnat_demographicData_xnat_demographicData16 AS ETHNICITY, SEARCH.xnat_subjectData_meta_data325 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_subjectData3) *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.status AS xnat_subjectData_meta_data325, table1.insert_date AS xnat_subjectData_meta_data328, table2.login AS table2_login, table3.lastname AS xnat_investigatorData69, xnat_subjectData.project AS xnat_subjectData4, xnat_subjectData._group AS xnat_subjectData5, xnat_subjectData.label AS xnat_subjectData6, table4.label AS xnat_projectParticipant10, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData4 AS xnat_demographicData_xnat_demographicData4, xnat_demographicData.xnat_demographicData5 AS xnat_demographicData_xnat_demographicData5, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData8 AS xnat_demographicData_xnat_demographicData8, xnat_demographicData.xnat_demographicData6 AS xnat_demographicData_xnat_demographicData6, xnat_demographicData.xnat_demographicData10 AS xnat_demographicData_xnat_demographicData10, xnat_demographicData.xnat_demographicData16 AS xnat_demographicData_xnat_demographicData16, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_mrSessionData_COUNT AS xnat_mrSessionData_COUNT, SUB_PROJECTS.PROJECTS AS SUB_PROJECTS_PROJECTS, SUBJECT_IDS.ADDIDS AS SUBJECT_IDS_ADDIDS FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id   LEFT JOIN xdat_user table2 ON table1.insert_user_xdat_user_id=table2.xdat_user_id   LEFT JOIN xnat_investigatorData table3 ON xnat_subjectData.investigator_xnat_investigatordata_id=table3.xnat_investigatordata_id   LEFT JOIN xnat_projectParticipant table4 ON xnat_subjectData.id=table4.subject_id LEFT JOIN (SELECT xnat_mrSessionData_COUNT.xnat_subjectAssessorData21, COUNT(*) AS xnat_mrSessionData_COUNT  FROM (SELECT table2.id AS xnat_mrSessionData0, table1.subject_id AS xnat_subjectAssessorData21, table2.date AS xnat_experimentData24 FROM (SELECT SEARCH.* FROM (SELECT DISTINCT ON (xnat_mrSessionData0) * FROM (SELECT table2.id AS xnat_mrSessionData0, table4.status AS xnat_mrSessionData_meta_data972 FROM xnat_mrSessionData xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_mrSessionData_meta_data table4 ON xnat_mrSessionData.mrSessionData_info=table4.meta_data_id) SECURITY WHERE 
 (
 ( (xnat_mrSessionData_meta_data972='active') OR  (xnat_mrSessionData_meta_data972='locked') OR  (xnat_mrSessionData_meta_data972='quarantine')) AND 
 ( (xnat_mrSessionData_meta_data972='active') OR  (xnat_mrSessionData_meta_data972='locked') OR  (xnat_mrSessionData_meta_data972='quarantine')) AND 
 ( (xnat_mrSessionData_meta_data972='active') OR  (xnat_mrSessionData_meta_data972='locked') OR  (xnat_mrSessionData_meta_data972='quarantine')))) SECURITY LEFT JOIN xnat_mrSessionData SEARCH ON SECURITY.xnat_mrSessionData0=SEARCH.id) xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) xnat_mrSessionData_COUNT  GROUP BY xnat_mrSessionData_COUNT.xnat_subjectAssessorData21) AS xnat_mrSessionData_COUNT ON xnat_subjectData.id=xnat_mrSessionData_COUNT.xnat_subjectAssessorData21  LEFT JOIN SUB_PROJECTS SUB_PROJECTS ON xnat_subjectData.id=SUB_PROJECTS.id  LEFT JOIN SUBJECT_IDS SUBJECT_IDS ON xnat_subjectData.id=SUBJECT_IDS.subject_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.gender AS xnat_demographicData4, xnat_demographicData.handedness AS xnat_demographicData5, xnat_demographicData.yob AS xnat_demographicData2, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.education AS xnat_demographicData8, xnat_demographicData.ses AS xnat_demographicData6, xnat_demographicData.race AS xnat_demographicData10, xnat_demographicData.ethnicity AS xnat_demographicData16, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_subjectData3 FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_subjectData3=SEARCH.xnat_subjectData3 ORDER BY (SEARCH.xnat_subjectData3) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_voiceAudioScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_voiceAudioScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_voiceAudioScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_voiceAudioScanData0, table2.status AS xnat_voiceAudioScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_voiceAudioScanData_meta_data118, table4.login AS table4_login FROM xnat_voiceAudioScanData xnat_voiceAudioScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_voiceAudioScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_voiceAudioScanData_meta_data table2 ON xnat_voiceAudioScanData.voiceAudioScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_voiceAudioScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_voiceAudioScanData0, table2.insert_date AS xnat_voiceAudioScanData_meta_data118 FROM xnat_voiceAudioScanData xnat_voiceAudioScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_voiceAudioScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_voiceAudioScanData_meta_data table2 ON xnat_voiceAudioScanData.voiceAudioScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_voiceAudioScanData0=SEARCH.xnat_voiceAudioScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_megScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_megScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_megScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_megScanData0, table2.status AS xnat_megScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_megScanData_meta_data118, table4.login AS table4_login FROM xnat_megScanData xnat_megScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_megScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_megScanData_meta_data table2 ON xnat_megScanData.megScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_megScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_megScanData0, table2.insert_date AS xnat_megScanData_meta_data118 FROM xnat_megScanData xnat_megScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_megScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_megScanData_meta_data table2 ON xnat_megScanData.megScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_megScanData0=SEARCH.xnat_megScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_RFSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:rfSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_rfSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_rfSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_RFSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_rfSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_rfSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_rfSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_rfSessionData0) * FROM (SELECT table2.id AS xnat_rfSessionData0, table4.status AS xnat_rfSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_rfSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_RFSESSIONDATA_PROJECTS.PROJECTS AS XNAT_RFSESSIONDATA_PROJECTS_PROJECTS FROM xnat_rfSessionData xnat_rfSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_rfSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_rfSessionData_meta_data table4 ON xnat_rfSessionData.rfSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_RFSESSIONDATA_PROJECTS XNAT_RFSESSIONDATA_PROJECTS ON table2.id=XNAT_RFSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_rfSessionData.xnat_rfSessionData0 AS xnat_rfSessionData_sordata_EX_xnat_rfSessionData0, xnat_rfSessionData.xnat_experimentData20 AS xnat_rfSessionData_sordata__xnat_experimentData20, xnat_rfSessionData.xnat_subjectAssessorData17 AS xnat_rfSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_rfSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_rfSessionData xnat_rfSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_rfSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_rfSessionData ON xnat_subjectData.id=xnat_rfSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_rfSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_rfSessionData_sordata_EX_xnat_rfSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_rfSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_rfSessionData0 FROM (SELECT table2.id AS xnat_rfSessionData0, table2.date AS xnat_experimentData20 FROM xnat_rfSessionData xnat_rfSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_rfSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_rfSessionData0=SEARCH.xnat_rfSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_NMSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:nmSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_nmSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_nmSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_NMSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_nmSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_nmSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_nmSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_nmSessionData0) * FROM (SELECT table2.id AS xnat_nmSessionData0, table4.status AS xnat_nmSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_nmSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_NMSESSIONDATA_PROJECTS.PROJECTS AS XNAT_NMSESSIONDATA_PROJECTS_PROJECTS FROM xnat_nmSessionData xnat_nmSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_nmSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_nmSessionData_meta_data table4 ON xnat_nmSessionData.nmSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_NMSESSIONDATA_PROJECTS XNAT_NMSESSIONDATA_PROJECTS ON table2.id=XNAT_NMSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_nmSessionData.xnat_nmSessionData0 AS xnat_nmSessionData_sordata_EX_xnat_nmSessionData0, xnat_nmSessionData.xnat_experimentData20 AS xnat_nmSessionData_sordata__xnat_experimentData20, xnat_nmSessionData.xnat_subjectAssessorData17 AS xnat_nmSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_nmSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_nmSessionData xnat_nmSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_nmSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_nmSessionData ON xnat_subjectData.id=xnat_nmSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_nmSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_nmSessionData_sordata_EX_xnat_nmSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_nmSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_nmSessionData0 FROM (SELECT table2.id AS xnat_nmSessionData0, table2.date AS xnat_experimentData20 FROM xnat_nmSessionData xnat_nmSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_nmSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_nmSessionData0=SEARCH.xnat_nmSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_rfScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_rfScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_rfScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_rfScanData0, table2.status AS xnat_rfScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_rfScanData_meta_data118, table4.login AS table4_login FROM xnat_rfScanData xnat_rfScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_rfScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_rfScanData_meta_data table2 ON xnat_rfScanData.rfScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_rfScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_rfScanData0, table2.insert_date AS xnat_rfScanData_meta_data118 FROM xnat_rfScanData xnat_rfScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_rfScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_rfScanData_meta_data table2 ON xnat_rfScanData.rfScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_rfScanData0=SEARCH.xnat_rfScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_xa3DScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_xa3DScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_xa3DScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_xa3DScanData0, table2.status AS xnat_xa3DScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_xa3DScanData_meta_data118, table4.login AS table4_login FROM xnat_xa3DScanData xnat_xa3DScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_xa3DScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_xa3DScanData_meta_data table2 ON xnat_xa3DScanData.xa3DScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_xa3DScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_xa3DScanData0, table2.insert_date AS xnat_xa3DScanData_meta_data118 FROM xnat_xa3DScanData xnat_xa3DScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_xa3DScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_xa3DScanData_meta_data table2 ON xnat_xa3DScanData.xa3DScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_xa3DScanData0=SEARCH.xnat_xa3DScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xdat_userGroup AS SELECT SEARCH.xdat_userGroup0 AS ID, SEARCH.xdat_userGroup1 AS DISPLAY_NAME, SEARCH.xdat_userGroup_meta_data83 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xdat_userGroup.xdat_usergroup_id AS xdat_userGroup4, table1.status AS xdat_userGroup_meta_data83, xdat_userGroup.id AS xdat_userGroup0, xdat_userGroup.displayname AS xdat_userGroup1, table1.insert_date AS xdat_userGroup_meta_data86 FROM xdat_userGroup xdat_userGroup   LEFT JOIN xdat_userGroup_meta_data table1 ON xdat_userGroup.userGroup_info=table1.meta_data_id) SEARCH RIGHT JOIN (SELECT DISTINCT xdat_userGroup4 FROM (SELECT xdat_userGroup.xdat_usergroup_id AS xdat_userGroup4, table1.insert_date AS xdat_userGroup_meta_data86 FROM xdat_userGroup xdat_userGroup   LEFT JOIN xdat_userGroup_meta_data table1 ON xdat_userGroup.userGroup_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xdat_userGroup4=SEARCH.xdat_userGroup4 ORDER BY (SEARCH.xdat_userGroup0) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_A_SIDEEFFECTSPITTSBURGHDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat_a:sideEffectsPittsburghData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_a_sideEffectsPittsburghData AS SELECT SEARCH.xnat_subjectAssessorData22 AS SUBJECT_ID, SEARCH.xnat_a_sideEffectsPittsburghData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData25 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData25) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData25)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_A_SIDEEFFECTSPITTSBURGHDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData41, SEARCH.xnat_a_sideEffectsPittsburghData0) AS LABEL, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_a_sideEffectsPittsburghData_meta_data192 AS INSERT_DATE, SEARCH.xnat_experimentData35 AS PROJECT, SEARCH.xnat_a_sideEffectsPittsburghData1 AS MOTORTICS, SEARCH.xnat_a_sideEffectsPittsburghData2 AS BUCCAL_LINGUALMOVEMENTS, SEARCH.xnat_a_sideEffectsPittsburghData3 AS PICKING_SKIN_FINGERS_NAILS_LIP, SEARCH.xnat_a_sideEffectsPittsburghData4 AS WORRIED_ANXIOUS, SEARCH.xnat_a_sideEffectsPittsburghData5 AS DULL_TIRED_LISTLESS, SEARCH.xnat_a_sideEffectsPittsburghData6 AS SEDATION, SEARCH.xnat_a_sideEffectsPittsburghData7 AS STOMACHACHE, SEARCH.xnat_a_sideEffectsPittsburghData8 AS NAUSEA_VOMITING, SEARCH.xnat_a_sideEffectsPittsburghData9 AS CRABBY_IRRITABLE, SEARCH.xnat_a_sideEffectsPittsburghData10 AS TEARFUL_SAD_DEPRESSED, SEARCH.xnat_a_sideEffectsPittsburghData11 AS HALLUCINATIONS, SEARCH.xnat_a_sideEffectsPittsburghData12 AS TROUBLESLEEPING, SEARCH.xnat_a_sideEffectsPittsburghData13 AS LOSSOFAPPETITE, SEARCH.xnat_a_sideEffectsPittsburghData14 AS TROUBLECONCENTRATING_DISTRACTIBLE, SEARCH.xnat_a_sideEffectsPittsburghData15 AS DIZZINESS_LIGHTHEADEDNESS, SEARCH.xnat_a_sideEffectsPittsburghData16 AS HEADACHES, SEARCH.xnat_a_sideEffectsPittsburghData17 AS SOCIALWITHDRAWAL, SEARCH.xnat_a_sideEffectsPittsburghData18 AS DRYMOUTH, SEARCH.xnat_a_sideEffectsPittsburghData19 AS PALPITATIONS, SEARCH.xnat_a_sideEffectsPittsburghData_meta_data189 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_a_sideEffectsPittsburghData0) * FROM (SELECT table1.id AS xnat_a_sideEffectsPittsburghData0, table3.status AS xnat_a_sideEffectsPittsburghData_meta_data189, table0.subject_id AS xnat_subjectAssessorData22, table1.date AS xnat_experimentData25, table1.label AS xnat_experimentData41, table4.login AS table4_login, table3.insert_date AS xnat_a_sideEffectsPittsburghData_meta_data192, table1.project AS xnat_experimentData35, xnat_a_sideEffectsPittsburghData.motortics AS xnat_a_sideEffectsPittsburghData1, xnat_a_sideEffectsPittsburghData.buccal_lingualmovements AS xnat_a_sideEffectsPittsburghData2, xnat_a_sideEffectsPittsburghData.picking_skin_fingers_nails_lip AS xnat_a_sideEffectsPittsburghData3, xnat_a_sideEffectsPittsburghData.worried_anxious AS xnat_a_sideEffectsPittsburghData4, xnat_a_sideEffectsPittsburghData.dull_tired_listless AS xnat_a_sideEffectsPittsburghData5, xnat_a_sideEffectsPittsburghData.sedation AS xnat_a_sideEffectsPittsburghData6, xnat_a_sideEffectsPittsburghData.stomachache AS xnat_a_sideEffectsPittsburghData7, xnat_a_sideEffectsPittsburghData.nausea_vomiting AS xnat_a_sideEffectsPittsburghData8, xnat_a_sideEffectsPittsburghData.crabby_irritable AS xnat_a_sideEffectsPittsburghData9, xnat_a_sideEffectsPittsburghData.tearful_sad_depressed AS xnat_a_sideEffectsPittsburghData10, xnat_a_sideEffectsPittsburghData.hallucinations AS xnat_a_sideEffectsPittsburghData11, xnat_a_sideEffectsPittsburghData.troublesleeping AS xnat_a_sideEffectsPittsburghData12, xnat_a_sideEffectsPittsburghData.lossofappetite AS xnat_a_sideEffectsPittsburghData13, xnat_a_sideEffectsPittsburghData.troubleconcentrating_distractible AS xnat_a_sideEffectsPittsburghData14, xnat_a_sideEffectsPittsburghData.dizziness_lightheadedness AS xnat_a_sideEffectsPittsburghData15, xnat_a_sideEffectsPittsburghData.headaches AS xnat_a_sideEffectsPittsburghData16, xnat_a_sideEffectsPittsburghData.socialwithdrawal AS xnat_a_sideEffectsPittsburghData17, xnat_a_sideEffectsPittsburghData.drymouth AS xnat_a_sideEffectsPittsburghData18, xnat_a_sideEffectsPittsburghData.palpitations AS xnat_a_sideEffectsPittsburghData19, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_A_SIDEEFFECTSPITTSBURGHDATA_PROJECTS.PROJECTS AS XNAT_A_SIDEEFFECTSPITTSBURGHDATA_PROJECTS_PROJECTS FROM xnat_a_sideEffectsPittsburghData xnat_a_sideEffectsPittsburghData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_sideEffectsPittsburghData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xnat_a_sideEffectsPittsburghData_meta_data table3 ON xnat_a_sideEffectsPittsburghData.sideEffectsPittsburghData_info=table3.meta_data_id   LEFT JOIN xdat_user table4 ON table3.insert_user_xdat_user_id=table4.xdat_user_id  LEFT JOIN XNAT_A_SIDEEFFECTSPITTSBURGHDATA_PROJECTS XNAT_A_SIDEEFFECTSPITTSBURGHDATA_PROJECTS ON table1.id=XNAT_A_SIDEEFFECTSPITTSBURGHDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_a_sideEffectsPittsburghData.xnat_a_sideEffectsPittsburghData0 AS xnat_a_sideEffectsPittsburghDa_t_a_sideEffectsPittsburghData0, xnat_a_sideEffectsPittsburghData.xnat_experimentData25 AS xnat_a_sideEffectsPittsburghDa_tdata_EX_xnat_experimentData25, xnat_a_sideEffectsPittsburghData.xnat_subjectAssessorData22 AS xnat_a_sideEffectsPittsburghDa_deE_xnat_subjectAssessorData22 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table1.id AS xnat_a_sideEffectsPittsburghData0, table1.date AS xnat_experimentData25, table0.subject_id AS xnat_subjectAssessorData22 FROM xnat_a_sideEffectsPittsburghData xnat_a_sideEffectsPittsburghData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_sideEffectsPittsburghData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) AS xnat_a_sideEffectsPittsburghData ON xnat_subjectData.id=xnat_a_sideEffectsPittsburghData.xnat_subjectAssessorData22) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_a_sideEffectsPittsburghDa_tdata_EX_xnat_experimentData25 DESC) AS map_xnat_subjectData_xnat_demographicData ON table1.id=map_xnat_subjectData_xnat_demographicData.xnat_a_sideEffectsPittsburghDa_t_a_sideEffectsPittsburghData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_a_sideEffectsPittsburghData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_a_sideEffectsPittsburghData0 FROM (SELECT table1.id AS xnat_a_sideEffectsPittsburghData0, table1.date AS xnat_experimentData25 FROM xnat_a_sideEffectsPittsburghData xnat_a_sideEffectsPittsburghData   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_sideEffectsPittsburghData.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_a_sideEffectsPittsburghData0=SEARCH.xnat_a_sideEffectsPittsburghData0 ORDER BY (SEARCH.xnat_subjectAssessorData22) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_dxScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_dxScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_dxScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_dxScanData0, table2.status AS xnat_dxScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_dxScanData_meta_data118, table4.login AS table4_login FROM xnat_dxScanData xnat_dxScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_dxScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_dxScanData_meta_data table2 ON xnat_dxScanData.dxScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_dxScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_dxScanData0, table2.insert_date AS xnat_dxScanData_meta_data118 FROM xnat_dxScanData xnat_dxScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_dxScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_dxScanData_meta_data table2 ON xnat_dxScanData.dxScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_dxScanData0=SEARCH.xnat_dxScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_scScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_scScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_scScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_scScanData0, table2.status AS xnat_scScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_scScanData_meta_data118, table4.login AS table4_login FROM xnat_scScanData xnat_scScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_scScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_scScanData_meta_data table2 ON xnat_scScanData.scScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_scScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_scScanData0, table2.insert_date AS xnat_scScanData_meta_data118 FROM xnat_scScanData xnat_scScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_scScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_scScanData_meta_data table2 ON xnat_scScanData.scScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_scScanData0=SEARCH.xnat_scScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xdat_element_security AS SELECT SEARCH.xdat_element_security0 AS ELEMENT_NAME, CASE SEARCH.xdat_element_security3 WHEN 1 THEN '/@WEBAPP/images/cg.gif' WHEN 0 THEN '/@WEBAPP/images/cr.gif' END AS SECURE, CASE SEARCH.xdat_element_security4 WHEN 1 THEN '/@WEBAPP/images/cg.gif' WHEN 0 THEN '/@WEBAPP/images/cr.gif' END AS BROWSE, SEARCH.xdat_element_security5 AS SEQUENCE, SEARCH.xdat_element_security_meta_data86 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xdat_element_security.element_name AS xdat_element_security0, table1.status AS xdat_element_security_meta_data86, xdat_element_security.secure AS xdat_element_security3, xdat_element_security.browse AS xdat_element_security4, xdat_element_security.sequence AS xdat_element_security5, table1.insert_date AS xdat_element_security_meta_data89 FROM xdat_element_security xdat_element_security   LEFT JOIN xdat_element_security_meta_data table1 ON xdat_element_security.element_security_info=table1.meta_data_id) SEARCH RIGHT JOIN (SELECT DISTINCT xdat_element_security0 FROM (SELECT xdat_element_security.element_name AS xdat_element_security0, table1.insert_date AS xdat_element_security_meta_data89 FROM xdat_element_security xdat_element_security   LEFT JOIN xdat_element_security_meta_data table1 ON xdat_element_security.element_security_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xdat_element_security0=SEARCH.xdat_element_security0 ORDER BY (SEARCH.xdat_element_security0) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_opScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_opScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_opScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_opScanData0, table2.status AS xnat_opScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_opScanData_meta_data118, table4.login AS table4_login FROM xnat_opScanData xnat_opScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_opScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_opScanData_meta_data table2 ON xnat_opScanData.opScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_opScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_opScanData0, table2.insert_date AS xnat_opScanData_meta_data118 FROM xnat_opScanData xnat_opScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_opScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_opScanData_meta_data table2 ON xnat_opScanData.opScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_opScanData0=SEARCH.xnat_opScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_PETSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:petSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_petSessionData AS SELECT SEARCH.xnat_subjectAssessorData40 AS SUBJECT_ID, SEARCH.xnat_petSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData43 AS DATE, CAST(FLOOR(CAST(COALESCE(SEARCH.xnat_subjectAssessorData41,SEARCH.xnat_demographicData_xnat_demographicData3,EXTRACT(YEAR FROM AGE(SEARCH.xnat_experimentData43, SEARCH.xnat_demographicData_xnat_demographicData1)),(EXTRACT(YEAR FROM SEARCH.xnat_experimentData43)) - (SEARCH.xnat_demographicData_xnat_demographicData2)) AS numeric)) AS numeric) AS AGE, XNAT_PETSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData59, SEARCH.xnat_petSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_petSessionData_meta_data994 AS INSERT_DATE, SEARCH.xnat_experimentData53 AS PROJECT, SEARCH.xnat_petSessionData1 AS STABILIZATION, SEARCH.xnat_petSessionData2 AS STUDYTYPE, SEARCH.xnat_petSessionData3 AS PATIENTID, SEARCH.xnat_petSessionData4 AS PATIENTNAME, SEARCH.xnat_petSessionData5 AS TRACER_DOSE_UNITS, SEARCH.xnat_petSessionData6 AS TRACER_DOSE, SEARCH.xnat_petSessionData7 AS TRACER_SPECIFICACTIVITY, SEARCH.xnat_petSessionData8 AS TRACER_TOTALMASS_UNITS, SEARCH.xnat_petSessionData9 AS TRACER_TOTALMASS, SEARCH.xnat_petSessionData10 AS TRACER_INTERMEDIATE_UNITS, SEARCH.xnat_petSessionData11 AS TRACER_INTERMEDIATE, SEARCH.xnat_petSessionData12 AS TRACER_ISOTOPE_HALF_LIFE, SEARCH.xnat_petSessionData13 AS TRACER_ISOTOPE, SEARCH.xnat_petSessionData15 AS TRACER_TRANSMISSIONS_STARTTIME, SEARCH.xnat_petSessionData14 AS TRACER_TRANSMISSIONS, SEARCH.xnat_petSessionData16 AS TRACER_NAME, SEARCH.xnat_petSessionData17 AS TRACER_STARTTIME, SEARCH.xnat_imageSessionData37 AS UID, SEARCH.xnat_petSessionData_meta_data991 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_petSessionData0) * FROM (SELECT table2.id AS xnat_petSessionData0, table4.status AS xnat_petSessionData_meta_data991, table1.subject_id AS xnat_subjectAssessorData40, table2.date AS xnat_experimentData43, table1.age AS xnat_subjectAssessorData41, table2.label AS xnat_experimentData59, table5.login AS table5_login, table4.insert_date AS xnat_petSessionData_meta_data994, table2.project AS xnat_experimentData53, xnat_petSessionData.stabilization AS xnat_petSessionData1, xnat_petSessionData.studytype AS xnat_petSessionData2, xnat_petSessionData.patientid AS xnat_petSessionData3, xnat_petSessionData.patientname AS xnat_petSessionData4, xnat_petSessionData.tracer_dose_units AS xnat_petSessionData5, xnat_petSessionData.tracer_dose AS xnat_petSessionData6, xnat_petSessionData.tracer_specificactivity AS xnat_petSessionData7, xnat_petSessionData.tracer_totalmass_units AS xnat_petSessionData8, xnat_petSessionData.tracer_totalmass AS xnat_petSessionData9, xnat_petSessionData.tracer_intermediate_units AS xnat_petSessionData10, xnat_petSessionData.tracer_intermediate AS xnat_petSessionData11, xnat_petSessionData.tracer_isotope_half_life AS xnat_petSessionData12, xnat_petSessionData.tracer_isotope AS xnat_petSessionData13, xnat_petSessionData.tracer_transmissions_starttime AS xnat_petSessionData15, xnat_petSessionData.tracer_transmissions AS xnat_petSessionData14, xnat_petSessionData.tracer_name AS xnat_petSessionData16, xnat_petSessionData.tracer_starttime AS xnat_petSessionData17, table0.uid AS xnat_imageSessionData37, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, xnat_demographicData.xnat_demographicData3 AS xnat_demographicData_xnat_demographicData3, XNAT_PETSESSIONDATA_PROJECTS.PROJECTS AS XNAT_PETSESSIONDATA_PROJECTS_PROJECTS FROM xnat_petSessionData xnat_petSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_petSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_petSessionData_meta_data table4 ON xnat_petSessionData.petSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_PETSESSIONDATA_PROJECTS XNAT_PETSESSIONDATA_PROJECTS ON table2.id=XNAT_PETSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_petSessionData.xnat_petSessionData0 AS xnat_petSessionData_sordata_E_xnat_petSessionData0, xnat_petSessionData.xnat_experimentData43 AS xnat_petSessionData_sordata__xnat_experimentData43, xnat_petSessionData.xnat_subjectAssessorData40 AS xnat_petSessionData_sor_xnat_subjectAssessorData40 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_petSessionData0, table2.date AS xnat_experimentData43, table1.subject_id AS xnat_subjectAssessorData40 FROM xnat_petSessionData xnat_petSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_petSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_petSessionData ON xnat_subjectData.id=xnat_petSessionData.xnat_subjectAssessorData40) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_petSessionData_sordata__xnat_experimentData43 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_petSessionData_sordata_E_xnat_petSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2, xnat_demographicData.age AS xnat_demographicData3 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_petSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_petSessionData0 FROM (SELECT table2.id AS xnat_petSessionData0, table2.date AS xnat_experimentData43 FROM xnat_petSessionData xnat_petSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_petSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_petSessionData0=SEARCH.xnat_petSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData40) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_GMSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:gmSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_gmSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_gmSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_GMSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_gmSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_gmSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_gmSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_gmSessionData0) * FROM (SELECT table2.id AS xnat_gmSessionData0, table4.status AS xnat_gmSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_gmSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_GMSESSIONDATA_PROJECTS.PROJECTS AS XNAT_GMSESSIONDATA_PROJECTS_PROJECTS FROM xnat_gmSessionData xnat_gmSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_gmSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_gmSessionData_meta_data table4 ON xnat_gmSessionData.gmSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_GMSESSIONDATA_PROJECTS XNAT_GMSESSIONDATA_PROJECTS ON table2.id=XNAT_GMSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_gmSessionData.xnat_gmSessionData0 AS xnat_gmSessionData_sordata_EX_xnat_gmSessionData0, xnat_gmSessionData.xnat_experimentData20 AS xnat_gmSessionData_sordata__xnat_experimentData20, xnat_gmSessionData.xnat_subjectAssessorData17 AS xnat_gmSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_gmSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_gmSessionData xnat_gmSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_gmSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_gmSessionData ON xnat_subjectData.id=xnat_gmSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_gmSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_gmSessionData_sordata_EX_xnat_gmSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_gmSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_gmSessionData0 FROM (SELECT table2.id AS xnat_gmSessionData0, table2.date AS xnat_experimentData20 FROM xnat_gmSessionData xnat_gmSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_gmSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_gmSessionData0=SEARCH.xnat_gmSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_SMSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:smSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_smSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_smSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_SMSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_smSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_smSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_smSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_smSessionData0) * FROM (SELECT table2.id AS xnat_smSessionData0, table4.status AS xnat_smSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_smSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_SMSESSIONDATA_PROJECTS.PROJECTS AS XNAT_SMSESSIONDATA_PROJECTS_PROJECTS FROM xnat_smSessionData xnat_smSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_smSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_smSessionData_meta_data table4 ON xnat_smSessionData.smSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_SMSESSIONDATA_PROJECTS XNAT_SMSESSIONDATA_PROJECTS ON table2.id=XNAT_SMSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_smSessionData.xnat_smSessionData0 AS xnat_smSessionData_sordata_EX_xnat_smSessionData0, xnat_smSessionData.xnat_experimentData20 AS xnat_smSessionData_sordata__xnat_experimentData20, xnat_smSessionData.xnat_subjectAssessorData17 AS xnat_smSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_smSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_smSessionData xnat_smSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_smSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_smSessionData ON xnat_subjectData.id=xnat_smSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_smSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_smSessionData_sordata_EX_xnat_smSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_smSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_smSessionData0 FROM (SELECT table2.id AS xnat_smSessionData0, table2.date AS xnat_experimentData20 FROM xnat_smSessionData xnat_smSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_smSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_smSessionData0=SEARCH.xnat_smSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_nmScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_nmScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_nmScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_nmScanData0, table2.status AS xnat_nmScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_nmScanData_meta_data118, table4.login AS table4_login FROM xnat_nmScanData xnat_nmScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_nmScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_nmScanData_meta_data table2 ON xnat_nmScanData.nmScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_nmScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_nmScanData0, table2.insert_date AS xnat_nmScanData_meta_data118 FROM xnat_nmScanData xnat_nmScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_nmScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_nmScanData_meta_data table2 ON xnat_nmScanData.nmScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_nmScanData0=SEARCH.xnat_nmScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_CTSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:ctSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_ctSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_ctSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(EXTRACT(YEAR FROM AGE(SEARCH.xnat_experimentData20, SEARCH.xnat_demographicData_xnat_demographicData1)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_CTSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_ctSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_ctSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_imageSessionData8 AS DCMACCESSIONNUMBER, SEARCH.xnat_imageSessionData9 AS DCMPATIENTID, SEARCH.xnat_imageSessionData10 AS DCMPATIENTNAME, SEARCH.xnat_imageSessionData14 AS UID, SEARCH.xnat_ctSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_ctSessionData0) * FROM (SELECT table2.id AS xnat_ctSessionData0, table4.status AS xnat_ctSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_ctSessionData_meta_data971, table2.project AS xnat_experimentData30, table0.dcmaccessionnumber AS xnat_imageSessionData8, table0.dcmpatientid AS xnat_imageSessionData9, table0.dcmpatientname AS xnat_imageSessionData10, table0.uid AS xnat_imageSessionData14, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_CTSESSIONDATA_PROJECTS.PROJECTS AS XNAT_CTSESSIONDATA_PROJECTS_PROJECTS FROM xnat_ctSessionData xnat_ctSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_ctSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_ctSessionData_meta_data table4 ON xnat_ctSessionData.ctSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_CTSESSIONDATA_PROJECTS XNAT_CTSESSIONDATA_PROJECTS ON table2.id=XNAT_CTSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_ctSessionData.xnat_ctSessionData0 AS xnat_ctSessionData_sordata_EX_xnat_ctSessionData0, xnat_ctSessionData.xnat_experimentData20 AS xnat_ctSessionData_sordata__xnat_experimentData20, xnat_ctSessionData.xnat_subjectAssessorData17 AS xnat_ctSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_ctSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_ctSessionData xnat_ctSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_ctSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_ctSessionData ON xnat_subjectData.id=xnat_ctSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_ctSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_ctSessionData_sordata_EX_xnat_ctSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_ctSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_ctSessionData0 FROM (SELECT table2.id AS xnat_ctSessionData0, table2.date AS xnat_experimentData20 FROM xnat_ctSessionData xnat_ctSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_ctSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_ctSessionData0=SEARCH.xnat_ctSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_ECGSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:ecgSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_ecgSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_ecgSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_ECGSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_ecgSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_ecgSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_ecgSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_ecgSessionData0) * FROM (SELECT table2.id AS xnat_ecgSessionData0, table4.status AS xnat_ecgSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_ecgSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_ECGSESSIONDATA_PROJECTS.PROJECTS AS XNAT_ECGSESSIONDATA_PROJECTS_PROJECTS FROM xnat_ecgSessionData xnat_ecgSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_ecgSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_ecgSessionData_meta_data table4 ON xnat_ecgSessionData.ecgSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_ECGSESSIONDATA_PROJECTS XNAT_ECGSESSIONDATA_PROJECTS ON table2.id=XNAT_ECGSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_ecgSessionData.xnat_ecgSessionData0 AS xnat_ecgSessionData_sordata_E_xnat_ecgSessionData0, xnat_ecgSessionData.xnat_experimentData20 AS xnat_ecgSessionData_sordata__xnat_experimentData20, xnat_ecgSessionData.xnat_subjectAssessorData17 AS xnat_ecgSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_ecgSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_ecgSessionData xnat_ecgSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_ecgSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_ecgSessionData ON xnat_subjectData.id=xnat_ecgSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_ecgSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_ecgSessionData_sordata_E_xnat_ecgSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_ecgSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_ecgSessionData0 FROM (SELECT table2.id AS xnat_ecgSessionData0, table2.date AS xnat_experimentData20 FROM xnat_ecgSessionData xnat_ecgSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_ecgSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_ecgSessionData0=SEARCH.xnat_ecgSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_MGSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:mgSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_mgSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_mgSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_MGSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_mgSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_mgSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_mgSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_mgSessionData0) * FROM (SELECT table2.id AS xnat_mgSessionData0, table4.status AS xnat_mgSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_mgSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_MGSESSIONDATA_PROJECTS.PROJECTS AS XNAT_MGSESSIONDATA_PROJECTS_PROJECTS FROM xnat_mgSessionData xnat_mgSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mgSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_mgSessionData_meta_data table4 ON xnat_mgSessionData.mgSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_MGSESSIONDATA_PROJECTS XNAT_MGSESSIONDATA_PROJECTS ON table2.id=XNAT_MGSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_mgSessionData.xnat_mgSessionData0 AS xnat_mgSessionData_sordata_EX_xnat_mgSessionData0, xnat_mgSessionData.xnat_experimentData20 AS xnat_mgSessionData_sordata__xnat_experimentData20, xnat_mgSessionData.xnat_subjectAssessorData17 AS xnat_mgSessionData_sor_xnat_subjectAssessorData17, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_mgSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_mgSessionData xnat_mgSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mgSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_mgSessionData ON xnat_subjectData.id=xnat_mgSessionData.xnat_subjectAssessorData17 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_mgSessionData_sordata__xnat_experimentData20 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_mgSessionData_sordata_EX_xnat_mgSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_mgSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_mgSessionData0 FROM (SELECT table2.id AS xnat_mgSessionData0, table2.date AS xnat_experimentData20 FROM xnat_mgSessionData xnat_mgSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mgSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_mgSessionData0=SEARCH.xnat_mgSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_OPSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:opSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_opSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_opSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_OPSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_opSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_opSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_opSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_opSessionData0) * FROM (SELECT table2.id AS xnat_opSessionData0, table4.status AS xnat_opSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_opSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_OPSESSIONDATA_PROJECTS.PROJECTS AS XNAT_OPSESSIONDATA_PROJECTS_PROJECTS FROM xnat_opSessionData xnat_opSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_opSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_opSessionData_meta_data table4 ON xnat_opSessionData.opSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_OPSESSIONDATA_PROJECTS XNAT_OPSESSIONDATA_PROJECTS ON table2.id=XNAT_OPSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_opSessionData.xnat_opSessionData0 AS xnat_opSessionData_sordata_EX_xnat_opSessionData0, xnat_opSessionData.xnat_experimentData20 AS xnat_opSessionData_sordata__xnat_experimentData20, xnat_opSessionData.xnat_subjectAssessorData17 AS xnat_opSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_opSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_opSessionData xnat_opSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_opSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_opSessionData ON xnat_subjectData.id=xnat_opSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_opSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_opSessionData_sordata_EX_xnat_opSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_opSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_opSessionData0 FROM (SELECT table2.id AS xnat_opSessionData0, table2.date AS xnat_experimentData20 FROM xnat_opSessionData xnat_opSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_opSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_opSessionData0=SEARCH.xnat_opSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_esScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_esScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_esScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_esScanData0, table2.status AS xnat_esScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_esScanData_meta_data118, table4.login AS table4_login FROM xnat_esScanData xnat_esScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_esScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_esScanData_meta_data table2 ON xnat_esScanData.esScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_esScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_esScanData0, table2.insert_date AS xnat_esScanData_meta_data118 FROM xnat_esScanData xnat_esScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_esScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_esScanData_meta_data table2 ON xnat_esScanData.esScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_esScanData0=SEARCH.xnat_esScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_srScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_srScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_srScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_srScanData0, table2.status AS xnat_srScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_srScanData_meta_data118, table4.login AS table4_login FROM xnat_srScanData xnat_srScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_srScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_srScanData_meta_data table2 ON xnat_srScanData.srScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_srScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_srScanData0, table2.insert_date AS xnat_srScanData_meta_data118 FROM xnat_srScanData xnat_srScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_srScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_srScanData_meta_data table2 ON xnat_srScanData.srScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_srScanData0=SEARCH.xnat_srScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_A_UPDRS3DATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat_a:updrs3Data' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_a_updrs3Data AS SELECT SEARCH.xnat_subjectAssessorData36 AS SUBJECT_ID, SEARCH.xnat_a_updrs3Data0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData39 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData39) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData39)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_A_UPDRS3DATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData55, SEARCH.xnat_a_updrs3Data0) AS LABEL, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_a_updrs3Data_meta_data206 AS INSERT_DATE, SEARCH.xnat_experimentData49 AS PROJECT, SEARCH.xnat_a_updrs3Data1 AS INSCANNER, SEARCH.xnat_a_updrs3Data2 AS CLICKER_RIGHT, SEARCH.xnat_a_updrs3Data3 AS CLICKER_LEFT, SEARCH.xnat_a_updrs3Data4 AS CLICKER_INTERVAL, SEARCH.xnat_a_updrs3Data5 AS TREMORREST_FACE, SEARCH.xnat_a_updrs3Data6 AS TREMORREST_RUE, SEARCH.xnat_a_updrs3Data7 AS TREMORREST_LUE, SEARCH.xnat_a_updrs3Data8 AS TREMORREST_RLE, SEARCH.xnat_a_updrs3Data9 AS TREMORREST_LLE, SEARCH.xnat_a_updrs3Data10 AS RIGIDITY_NECK, SEARCH.xnat_a_updrs3Data11 AS RIGIDITY_RUE, SEARCH.xnat_a_updrs3Data12 AS RIGIDITY_LUE, SEARCH.xnat_a_updrs3Data13 AS RIGIDITY_RLE, SEARCH.xnat_a_updrs3Data14 AS RIGIDITY_LLE, SEARCH.xnat_a_updrs3Data15 AS HANDMOVEMENTSGRIP_RIGHT, SEARCH.xnat_a_updrs3Data16 AS HANDMOVEMENTSGRIP_LEFT, SEARCH.xnat_a_updrs3Data17 AS FACIALEXPRESSION, SEARCH.xnat_a_updrs3Data18 AS GAIT, SEARCH.xnat_a_updrs3Data19 AS SPEECH, SEARCH.xnat_a_updrs3Data20 AS WRITING, SEARCH.xnat_a_updrs3Data21 AS ARISEFROMCHAIR, SEARCH.xnat_a_updrs3Data22 AS ACTIONPOSTURALTREMOR_RIGHT, SEARCH.xnat_a_updrs3Data23 AS ACTIONPOSTURALTREMOR_LEFT, SEARCH.xnat_a_updrs3Data24 AS HANDSRAM_RIGHT, SEARCH.xnat_a_updrs3Data25 AS HANDSRAM_LEFT, SEARCH.xnat_a_updrs3Data26 AS FINGERTAPS_RIGHT, SEARCH.xnat_a_updrs3Data27 AS FINGERTAPS_LEFT, SEARCH.xnat_a_updrs3Data28 AS POSTURE, SEARCH.xnat_a_updrs3Data29 AS POSTURALSTABILITY, SEARCH.xnat_a_updrs3Data30 AS FOOTTAPS_RIGHT, SEARCH.xnat_a_updrs3Data31 AS FOOTTAPS_LEFT, SEARCH.xnat_a_updrs3Data32 AS BODYBRADYKINESIAHYPOKINESIA, SEARCH.xnat_a_updrs3Data33 AS PROBLEM, SEARCH.xnat_a_updrs3Data_meta_data203 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_a_updrs3Data0) * FROM (SELECT table1.id AS xnat_a_updrs3Data0, table3.status AS xnat_a_updrs3Data_meta_data203, table0.subject_id AS xnat_subjectAssessorData36, table1.date AS xnat_experimentData39, table1.label AS xnat_experimentData55, table4.login AS table4_login, table3.insert_date AS xnat_a_updrs3Data_meta_data206, table1.project AS xnat_experimentData49, xnat_a_updrs3Data.inscanner AS xnat_a_updrs3Data1, xnat_a_updrs3Data.clicker_right AS xnat_a_updrs3Data2, xnat_a_updrs3Data.clicker_left AS xnat_a_updrs3Data3, xnat_a_updrs3Data.clicker_interval AS xnat_a_updrs3Data4, xnat_a_updrs3Data.tremorrest_face AS xnat_a_updrs3Data5, xnat_a_updrs3Data.tremorrest_rue AS xnat_a_updrs3Data6, xnat_a_updrs3Data.tremorrest_lue AS xnat_a_updrs3Data7, xnat_a_updrs3Data.tremorrest_rle AS xnat_a_updrs3Data8, xnat_a_updrs3Data.tremorrest_lle AS xnat_a_updrs3Data9, xnat_a_updrs3Data.rigidity_neck AS xnat_a_updrs3Data10, xnat_a_updrs3Data.rigidity_rue AS xnat_a_updrs3Data11, xnat_a_updrs3Data.rigidity_lue AS xnat_a_updrs3Data12, xnat_a_updrs3Data.rigidity_rle AS xnat_a_updrs3Data13, xnat_a_updrs3Data.rigidity_lle AS xnat_a_updrs3Data14, xnat_a_updrs3Data.handmovementsgrip_right AS xnat_a_updrs3Data15, xnat_a_updrs3Data.handmovementsgrip_left AS xnat_a_updrs3Data16, xnat_a_updrs3Data.facialexpression AS xnat_a_updrs3Data17, xnat_a_updrs3Data.gait AS xnat_a_updrs3Data18, xnat_a_updrs3Data.speech AS xnat_a_updrs3Data19, xnat_a_updrs3Data.writing AS xnat_a_updrs3Data20, xnat_a_updrs3Data.arisefromchair AS xnat_a_updrs3Data21, xnat_a_updrs3Data.actionposturaltremor_right AS xnat_a_updrs3Data22, xnat_a_updrs3Data.actionposturaltremor_left AS xnat_a_updrs3Data23, xnat_a_updrs3Data.handsram_right AS xnat_a_updrs3Data24, xnat_a_updrs3Data.handsram_left AS xnat_a_updrs3Data25, xnat_a_updrs3Data.fingertaps_right AS xnat_a_updrs3Data26, xnat_a_updrs3Data.fingertaps_left AS xnat_a_updrs3Data27, xnat_a_updrs3Data.posture AS xnat_a_updrs3Data28, xnat_a_updrs3Data.posturalstability AS xnat_a_updrs3Data29, xnat_a_updrs3Data.foottaps_right AS xnat_a_updrs3Data30, xnat_a_updrs3Data.foottaps_left AS xnat_a_updrs3Data31, xnat_a_updrs3Data.bodybradykinesiahypokinesia AS xnat_a_updrs3Data32, xnat_a_updrs3Data.problem AS xnat_a_updrs3Data33, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_A_UPDRS3DATA_PROJECTS.PROJECTS AS XNAT_A_UPDRS3DATA_PROJECTS_PROJECTS FROM xnat_a_updrs3Data xnat_a_updrs3Data   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_updrs3Data.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id   LEFT JOIN xnat_a_updrs3Data_meta_data table3 ON xnat_a_updrs3Data.updrs3Data_info=table3.meta_data_id   LEFT JOIN xdat_user table4 ON table3.insert_user_xdat_user_id=table4.xdat_user_id  LEFT JOIN XNAT_A_UPDRS3DATA_PROJECTS XNAT_A_UPDRS3DATA_PROJECTS ON table1.id=XNAT_A_UPDRS3DATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_a_updrs3Data.xnat_a_updrs3Data0 AS xnat_a_updrs3Data_tdata_EXT_x_xnat_a_updrs3Data0, xnat_a_updrs3Data.xnat_experimentData39 AS xnat_a_updrs3Data_tdata_EX_xnat_experimentData39, xnat_a_updrs3Data.xnat_subjectAssessorData36 AS xnat_a_updrs3Data_drs_xnat_subjectAssessorData36, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table1.id AS xnat_a_updrs3Data0, table1.date AS xnat_experimentData39, table0.subject_id AS xnat_subjectAssessorData36 FROM xnat_a_updrs3Data xnat_a_updrs3Data   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_updrs3Data.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) AS xnat_a_updrs3Data ON xnat_subjectData.id=xnat_a_updrs3Data.xnat_subjectAssessorData36 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_a_updrs3Data_tdata_EX_xnat_experimentData39 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table1.id=map_xnat_subjectData_xnat_demographicData.xnat_a_updrs3Data_tdata_EXT_x_xnat_a_updrs3Data0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_a_updrs3Data0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_a_updrs3Data0 FROM (SELECT table1.id AS xnat_a_updrs3Data0, table1.date AS xnat_experimentData39 FROM xnat_a_updrs3Data xnat_a_updrs3Data   LEFT JOIN xnat_subjectAssessorData table0 ON xnat_a_updrs3Data.id=table0.id   LEFT JOIN xnat_experimentData table1 ON table0.id=table1.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_a_updrs3Data0=SEARCH.xnat_a_updrs3Data0 ORDER BY (SEARCH.xnat_subjectAssessorData36) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_otherDicomScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_otherDicomScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_otherDicomScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_otherDicomScanData0, table2.status AS xnat_otherDicomScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_otherDicomScanData_meta_data118, table4.login AS table4_login FROM xnat_otherDicomScanData xnat_otherDicomScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_otherDicomScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_otherDicomScanData_meta_data table2 ON xnat_otherDicomScanData.otherDicomScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_otherDicomScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_otherDicomScanData0, table2.insert_date AS xnat_otherDicomScanData_meta_data118 FROM xnat_otherDicomScanData xnat_otherDicomScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_otherDicomScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_otherDicomScanData_meta_data table2 ON xnat_otherDicomScanData.otherDicomScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_otherDicomScanData0=SEARCH.xnat_otherDicomScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_petScanData AS SELECT SEARCH.xnat_imageScanData66 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData67 AS NOTE, SEARCH.xnat_imageScanData68 AS QUALITY, SEARCH.xnat_imageScanData69 AS CONDITION, SEARCH.xnat_imageScanData70 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData71 AS DOCUMENTATION, SEARCH.xnat_imageScanData72 AS SCANNER, SEARCH.xnat_imageScanData73 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData74 AS SCANNER_MODEL, SEARCH.xnat_imageScanData75 AS MODALITY, SEARCH.xnat_imageScanData76 AS FRAMES, SEARCH.xnat_imageScanData77 AS OPERATOR, SEARCH.xnat_imageScanData79 AS STARTTIME, SEARCH.xnat_imageScanData80 AS ID, SEARCH.xnat_imageScanData81 AS TYPE, SEARCH.xnat_imageScanData82 AS UID, SEARCH.xnat_imageScanData83 AS PROJECT, SEARCH.xnat_petScanData_meta_data221 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_petScanData1 AS PARAMETERS_ORIENTATION, SEARCH.xnat_petScanData2 AS PARAMETERS_ORIGINALFILENAME, SEARCH.xnat_petScanData3 AS PARAMETERS_SYSTEMTYPE, SEARCH.xnat_petScanData4 AS PARAMETERS_FILETYPE, SEARCH.xnat_petScanData5 AS PARAMETERS_TRANSAXIALFOV, SEARCH.xnat_petScanData6 AS PARAMETERS_ACQTYPE, SEARCH.xnat_petScanData7 AS PARAMETERS_FACILITY, SEARCH.xnat_petScanData8 AS PARAMETERS_NUMPLANES, SEARCH.xnat_petScanData9 AS PARAMETERS_FRAMES_NUMFRAMES, SEARCH.xnat_petScanData10 AS PARAMETERS_NUMGATES, SEARCH.xnat_petScanData11 AS PARAMETERS_PLANESEPARATION, SEARCH.xnat_petScanData12 AS PARAMETERS_BINSIZE, SEARCH.xnat_petScanData13 AS PARAMETERS_DATATYPE, SEARCH.xnat_petScanData14 AS PARAMETERS_DIMENSIONS_X, SEARCH.xnat_petScanData15 AS PARAMETERS_DIMENSIONS_Y, SEARCH.xnat_petScanData16 AS PARAMETERS_DIMENSIONS_Z, SEARCH.xnat_petScanData17 AS PARAMETERS_DIMENSIONS_NUM, SEARCH.xnat_petScanData18 AS PARAMETERS_OFFSET_X, SEARCH.xnat_petScanData19 AS PARAMETERS_OFFSET_Y, SEARCH.xnat_petScanData20 AS PARAMETERS_OFFSET_Z, SEARCH.xnat_petScanData21 AS PARAMETERS_RECONZOOM, SEARCH.xnat_petScanData22 AS PARAMETERS_PIXELSIZE_X, SEARCH.xnat_petScanData23 AS PARAMETERS_PIXELSIZE_Y, SEARCH.xnat_petScanData24 AS PARAMETERS_PIXELSIZE_Z, SEARCH.xnat_petScanData25 AS PARAMETERS_FILTERCODE, SEARCH.xnat_petScanData26 AS PARAMETERS_RESOLUTION_X, SEARCH.xnat_petScanData27 AS PARAMETERS_RESOLUTION_Y, SEARCH.xnat_petScanData28 AS PARAMETERS_RESOLUTION_Z, SEARCH.xnat_petScanData29 AS PARAMETERS_NUMRELEMENTS, SEARCH.xnat_petScanData30 AS PARAMETERS_NUMANGLES, SEARCH.xnat_petScanData31 AS PARAMETERS_ZROTATIONANGLE, SEARCH.xnat_petScanData32 AS PARAMETERS_PROCESSINGCODE, SEARCH.xnat_petScanData33 AS PARAMETERS_GATEDURATION, SEARCH.xnat_petScanData34 AS PARAMETERS_RWAVEOFFSET, SEARCH.xnat_petScanData35 AS PARAMETERS_NUMACCEPTEDBEATS, SEARCH.xnat_petScanData36 AS PARAMETERS_FILTER_CUTOFF, SEARCH.xnat_petScanData37 AS PARAMETERS_ANNOTATION, SEARCH.xnat_petScanData38 AS PARAMETERS_MT_1_1, SEARCH.xnat_petScanData39 AS PARAMETERS_MT_1_2, SEARCH.xnat_petScanData40 AS PARAMETERS_MT_1_3, SEARCH.xnat_petScanData41 AS PARAMETERS_MT_1_4, SEARCH.xnat_petScanData42 AS PARAMETERS_MT_2_1, SEARCH.xnat_petScanData43 AS PARAMETERS_MT_2_2, SEARCH.xnat_petScanData44 AS PARAMETERS_MT_2_3, SEARCH.xnat_petScanData45 AS PARAMETERS_MT_2_4, SEARCH.xnat_petScanData46 AS PARAMETERS_MT_3_1, SEARCH.xnat_petScanData47 AS PARAMETERS_MT_3_2, SEARCH.xnat_petScanData48 AS PARAMETERS_MT_3_3, SEARCH.xnat_petScanData49 AS PARAMETERS_MT_3_4, SEARCH.xnat_petScanData50 AS PARAMETERS_RFILTER_CUTOFF, SEARCH.xnat_petScanData51 AS PARAMETERS_RFILTER_RESOLUTION, SEARCH.xnat_petScanData52 AS PARAMETERS_RFILTER_CODE, SEARCH.xnat_petScanData53 AS PARAMETERS_RFILTER_ORDER, SEARCH.xnat_petScanData54 AS PARAMETERS_ZFILTER_CUTOFF, SEARCH.xnat_petScanData55 AS PARAMETERS_ZFILTER_RESOLUTION, SEARCH.xnat_petScanData56 AS PARAMETERS_ZFILTER_CODE, SEARCH.xnat_petScanData57 AS PARAMETERS_ZFILTER_ORDER, SEARCH.xnat_petScanData58 AS PARAMETERS_SCATTERTYPE, SEARCH.xnat_petScanData59 AS PARAMETERS_RECONTYPE, SEARCH.xnat_petScanData60 AS PARAMETERS_RECONVIEWS, SEARCH.xnat_petScanData61 AS PARAMETERS_BEDPOSITION, SEARCH.xnat_petScanData62 AS PARAMETERS_ECATCALIBRATIONFACTOR, SEARCH.xnat_petScanData63 AS ECATVALIDATION, SEARCH.xnat_petScanData64 AS ECATVALIDATION_STATUS, SEARCH.xnat_petScanData_meta_data218 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_petScanData0, table2.status AS xnat_petScanData_meta_data218, table0.image_session_id AS xnat_imageScanData66, table0.note AS xnat_imageScanData67, table0.quality AS xnat_imageScanData68, table0.condition AS xnat_imageScanData69, table0.series_description AS xnat_imageScanData70, table0.documentation AS xnat_imageScanData71, table0.scanner AS xnat_imageScanData72, table0.scanner_manufacturer AS xnat_imageScanData73, table0.scanner_model AS xnat_imageScanData74, table0.modality AS xnat_imageScanData75, table0.frames AS xnat_imageScanData76, table0.operator AS xnat_imageScanData77, table0.starttime AS xnat_imageScanData79, table0.id AS xnat_imageScanData80, table0.type AS xnat_imageScanData81, table0.uid AS xnat_imageScanData82, table0.project AS xnat_imageScanData83, table2.insert_date AS xnat_petScanData_meta_data221, table4.login AS table4_login, xnat_petScanData.parameters_orientation AS xnat_petScanData1, xnat_petScanData.parameters_originalfilename AS xnat_petScanData2, xnat_petScanData.parameters_systemtype AS xnat_petScanData3, xnat_petScanData.parameters_filetype AS xnat_petScanData4, xnat_petScanData.parameters_transaxialfov AS xnat_petScanData5, xnat_petScanData.parameters_acqtype AS xnat_petScanData6, xnat_petScanData.parameters_facility AS xnat_petScanData7, xnat_petScanData.parameters_numplanes AS xnat_petScanData8, xnat_petScanData.parameters_frames_numframes AS xnat_petScanData9, xnat_petScanData.parameters_numgates AS xnat_petScanData10, xnat_petScanData.parameters_planeseparation AS xnat_petScanData11, xnat_petScanData.parameters_binsize AS xnat_petScanData12, xnat_petScanData.parameters_datatype AS xnat_petScanData13, xnat_petScanData.parameters_dimensions_x AS xnat_petScanData14, xnat_petScanData.parameters_dimensions_y AS xnat_petScanData15, xnat_petScanData.parameters_dimensions_z AS xnat_petScanData16, xnat_petScanData.parameters_dimensions_num AS xnat_petScanData17, xnat_petScanData.parameters_offset_x AS xnat_petScanData18, xnat_petScanData.parameters_offset_y AS xnat_petScanData19, xnat_petScanData.parameters_offset_z AS xnat_petScanData20, xnat_petScanData.parameters_reconzoom AS xnat_petScanData21, xnat_petScanData.parameters_pixelsize_x AS xnat_petScanData22, xnat_petScanData.parameters_pixelsize_y AS xnat_petScanData23, xnat_petScanData.parameters_pixelsize_z AS xnat_petScanData24, xnat_petScanData.parameters_filtercode AS xnat_petScanData25, xnat_petScanData.parameters_resolution_x AS xnat_petScanData26, xnat_petScanData.parameters_resolution_y AS xnat_petScanData27, xnat_petScanData.parameters_resolution_z AS xnat_petScanData28, xnat_petScanData.parameters_numrelements AS xnat_petScanData29, xnat_petScanData.parameters_numangles AS xnat_petScanData30, xnat_petScanData.parameters_zrotationangle AS xnat_petScanData31, xnat_petScanData.parameters_processingcode AS xnat_petScanData32, xnat_petScanData.parameters_gateduration AS xnat_petScanData33, xnat_petScanData.parameters_rwaveoffset AS xnat_petScanData34, xnat_petScanData.parameters_numacceptedbeats AS xnat_petScanData35, xnat_petScanData.parameters_filter_cutoff AS xnat_petScanData36, xnat_petScanData.parameters_annotation AS xnat_petScanData37, xnat_petScanData.parameters_mt_1_1 AS xnat_petScanData38, xnat_petScanData.parameters_mt_1_2 AS xnat_petScanData39, xnat_petScanData.parameters_mt_1_3 AS xnat_petScanData40, xnat_petScanData.parameters_mt_1_4 AS xnat_petScanData41, xnat_petScanData.parameters_mt_2_1 AS xnat_petScanData42, xnat_petScanData.parameters_mt_2_2 AS xnat_petScanData43, xnat_petScanData.parameters_mt_2_3 AS xnat_petScanData44, xnat_petScanData.parameters_mt_2_4 AS xnat_petScanData45, xnat_petScanData.parameters_mt_3_1 AS xnat_petScanData46, xnat_petScanData.parameters_mt_3_2 AS xnat_petScanData47, xnat_petScanData.parameters_mt_3_3 AS xnat_petScanData48, xnat_petScanData.parameters_mt_3_4 AS xnat_petScanData49, xnat_petScanData.parameters_rfilter_cutoff AS xnat_petScanData50, xnat_petScanData.parameters_rfilter_resolution AS xnat_petScanData51, xnat_petScanData.parameters_rfilter_code AS xnat_petScanData52, xnat_petScanData.parameters_rfilter_order AS xnat_petScanData53, xnat_petScanData.parameters_zfilter_cutoff AS xnat_petScanData54, xnat_petScanData.parameters_zfilter_resolution AS xnat_petScanData55, xnat_petScanData.parameters_zfilter_code AS xnat_petScanData56, xnat_petScanData.parameters_zfilter_order AS xnat_petScanData57, xnat_petScanData.parameters_scattertype AS xnat_petScanData58, xnat_petScanData.parameters_recontype AS xnat_petScanData59, xnat_petScanData.parameters_reconviews AS xnat_petScanData60, xnat_petScanData.parameters_bedposition AS xnat_petScanData61, xnat_petScanData.parameters_ecatcalibrationfactor AS xnat_petScanData62, xnat_petScanData.ecatvalidation AS xnat_petScanData63, xnat_petScanData.ecatvalidation_status AS xnat_petScanData64 FROM xnat_petScanData xnat_petScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_petScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_petScanData_meta_data table2 ON xnat_petScanData.petScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_petScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_petScanData0, table2.insert_date AS xnat_petScanData_meta_data221 FROM xnat_petScanData xnat_petScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_petScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_petScanData_meta_data table2 ON xnat_petScanData.petScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_petScanData0=SEARCH.xnat_petScanData0 ORDER BY (SEARCH.xnat_imageScanData66) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_epsScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_epsScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_epsScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_epsScanData0, table2.status AS xnat_epsScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_epsScanData_meta_data118, table4.login AS table4_login FROM xnat_epsScanData xnat_epsScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_epsScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_epsScanData_meta_data table2 ON xnat_epsScanData.epsScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_epsScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_epsScanData0, table2.insert_date AS xnat_epsScanData_meta_data118 FROM xnat_epsScanData xnat_epsScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_epsScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_epsScanData_meta_data table2 ON xnat_epsScanData.epsScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_epsScanData0=SEARCH.xnat_epsScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_reconstructedImageData AS SELECT SEARCH.xnat_reconstructedImageData_meta_data202 AS INSERT_DATE, SEARCH.table2_login AS INSERT_USER, SEARCH.xnat_reconstructedImageData0 AS IMAGE_SESSION_ID, SEARCH.xnat_reconstructedImageData2 AS ID, SEARCH.xnat_reconstructedImageData3 AS TYPE, SEARCH.xnat_reconstructedImageData4 AS BASESCANTYPE, SEARCH.xnat_reconstructedImageData_meta_data199 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xnat_reconstructedImageData.xnat_reconstructedimagedata_id AS xnat_reconstructedImageData6, table1.status AS xnat_reconstructedImageData_meta_data199, table1.insert_date AS xnat_reconstructedImageData_meta_data202, table2.login AS table2_login, xnat_reconstructedImageData.image_session_id AS xnat_reconstructedImageData0, xnat_reconstructedImageData.id AS xnat_reconstructedImageData2, xnat_reconstructedImageData.type AS xnat_reconstructedImageData3, xnat_reconstructedImageData.basescantype AS xnat_reconstructedImageData4 FROM xnat_reconstructedImageData xnat_reconstructedImageData   LEFT JOIN xnat_reconstructedImageData_meta_data table1 ON xnat_reconstructedImageData.reconstructedImageData_info=table1.meta_data_id   LEFT JOIN xdat_user table2 ON table1.insert_user_xdat_user_id=table2.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_reconstructedImageData6 FROM (SELECT xnat_reconstructedImageData.xnat_reconstructedimagedata_id AS xnat_reconstructedImageData6, table1.insert_date AS xnat_reconstructedImageData_meta_data202 FROM xnat_reconstructedImageData xnat_reconstructedImageData   LEFT JOIN xnat_reconstructedImageData_meta_data table1 ON xnat_reconstructedImageData.reconstructedImageData_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_reconstructedImageData6=SEARCH.xnat_reconstructedImageData6 ORDER BY (SEARCH.xnat_reconstructedImageData_meta_data202) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_QCASSESSMENTDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:qcAssessmentData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_qcAssessmentData AS SELECT SEARCH.xnat_imageAssessorData6 AS SESSION_ID, SEARCH.xnat_mrSessionData_sor_xnat_subjectAssessorData21 AS SUBJECT_ID, SEARCH.xnat_mrSessionData_sordata__xnat_experimentData24 AS MR_DATE, SEARCH.xnat_qcAssessmentData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData11 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_mrSessionData_sordata__xnat_experimentData24) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_mrSessionData_sordata__xnat_experimentData24)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_QCASSESSMENTDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData27, SEARCH.xnat_qcAssessmentData0) AS LABEL, SEARCH.table6_login AS INSERT_USER, SEARCH.xnat_qcAssessmentData_meta_data425 AS INSERT_DATE, SEARCH.xnat_experimentData21 AS PROJECT, SEARCH.xnat_qcAssessmentData1 AS TYPE, SEARCH.xnat_qcAssessmentData_meta_data422 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_qcAssessmentData0) *, (xnat_experimentData11-xnat_mrSessionData_sordata__xnat_experimentData24) AS xnat_qcAssessmentData_xnat_mrSessionData_DIFF FROM (SELECT table3.id AS xnat_qcAssessmentData0, table5.status AS xnat_qcAssessmentData_meta_data422, table1.imagesession_id AS xnat_imageAssessorData6, table3.date AS xnat_experimentData11, table3.label AS xnat_experimentData27, table6.login AS table6_login, table5.insert_date AS xnat_qcAssessmentData_meta_data425, table3.project AS xnat_experimentData21, xnat_qcAssessmentData.type AS xnat_qcAssessmentData1, xnat_mrSessionData.xnat_mrSessionData0 AS xnat_mrSessionData_sordata_EX_xnat_mrSessionData0, xnat_mrSessionData.xnat_experimentData24 AS xnat_mrSessionData_sordata__xnat_experimentData24, xnat_mrSessionData.xnat_subjectAssessorData21 AS xnat_mrSessionData_sor_xnat_subjectAssessorData21, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_QCASSESSMENTDATA_PROJECTS.PROJECTS AS XNAT_QCASSESSMENTDATA_PROJECTS_PROJECTS FROM xnat_qcAssessmentData xnat_qcAssessmentData   LEFT JOIN xnat_mrAssessorData table0 ON xnat_qcAssessmentData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id   LEFT JOIN xnat_qcAssessmentData_meta_data table5 ON xnat_qcAssessmentData.qcAssessmentData_info=table5.meta_data_id   LEFT JOIN xdat_user table6 ON table5.insert_user_xdat_user_id=table6.xdat_user_id  LEFT JOIN XNAT_QCASSESSMENTDATA_PROJECTS XNAT_QCASSESSMENTDATA_PROJECTS ON table3.id=XNAT_QCASSESSMENTDATA_PROJECTS.id LEFT JOIN (SELECT table2.id AS xnat_mrSessionData0, table2.date AS xnat_experimentData24, table1.subject_id AS xnat_subjectAssessorData21 FROM xnat_mrSessionData xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_mrSessionData ON table1.imagesession_id=xnat_mrSessionData.xnat_mrSessionData0 LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_qcAssessmentData.xnat_qcAssessmentData0 AS xnat_qcAssessmentData_ata_EXT_xnat_qcAssessmentData0, xnat_qcAssessmentData.xnat_experimentData11 AS xnat_qcAssessmentData_ata_EXT__xnat_experimentData11 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table3.id AS xnat_qcAssessmentData0, table1.imagesession_id AS xnat_imageAssessorData6, xnat_mrSessionData.xnat_subjectAssessorData21 AS xnat_subjectAssessorData21 FROM xnat_qcAssessmentData xnat_qcAssessmentData   LEFT JOIN xnat_mrAssessorData table0 ON xnat_qcAssessmentData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id LEFT JOIN (SELECT table2.id AS xnat_mrSessionData0, table1.subject_id AS xnat_subjectAssessorData21 FROM xnat_mrSessionData xnat_mrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_mrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_mrSessionData ON table1.imagesession_id=xnat_mrSessionData.xnat_mrSessionData0) AS map_xnat_qcAssessmentData ON xnat_subjectData.id=map_xnat_qcAssessmentData.xnat_subjectAssessorData21 LEFT JOIN (SELECT table3.id AS xnat_qcAssessmentData0, table3.date AS xnat_experimentData11 FROM xnat_qcAssessmentData xnat_qcAssessmentData   LEFT JOIN xnat_mrAssessorData table0 ON xnat_qcAssessmentData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id) AS xnat_qcAssessmentData ON map_xnat_qcAssessmentData.xnat_qcAssessmentData0=xnat_qcAssessmentData.xnat_qcAssessmentData0) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_qcAssessmentData_ata_EXT__xnat_experimentData11 DESC) AS map_xnat_subjectData_xnat_demographicData ON table3.id=map_xnat_subjectData_xnat_demographicData.xnat_qcAssessmentData_ata_EXT_xnat_qcAssessmentData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_qcAssessmentData0, (xnat_experimentData11-xnat_mrSessionData_sordata__xnat_experimentData24) ASC, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_qcAssessmentData0 FROM (SELECT table3.id AS xnat_qcAssessmentData0, table3.date AS xnat_experimentData11 FROM xnat_qcAssessmentData xnat_qcAssessmentData   LEFT JOIN xnat_mrAssessorData table0 ON xnat_qcAssessmentData.id=table0.id   LEFT JOIN xnat_imageAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_derivedData table2 ON table1.id=table2.id   LEFT JOIN xnat_experimentData table3 ON table2.id=table3.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_qcAssessmentData0=SEARCH.xnat_qcAssessmentData0 ORDER BY (SEARCH.xnat_imageAssessorData6) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_xcvScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_xcvScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_xcvScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_xcvScanData0, table2.status AS xnat_xcvScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_xcvScanData_meta_data118, table4.login AS table4_login FROM xnat_xcvScanData xnat_xcvScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_xcvScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_xcvScanData_meta_data table2 ON xnat_xcvScanData.xcvScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_xcvScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_xcvScanData0, table2.insert_date AS xnat_xcvScanData_meta_data118 FROM xnat_xcvScanData xnat_xcvScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_xcvScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_xcvScanData_meta_data table2 ON xnat_xcvScanData.xcvScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_xcvScanData0=SEARCH.xnat_xcvScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW SESSION_LABEL_VIEW AS SELECT DISTINCT ex.label AS session_label, ex.project AS project, wf.wrk_workflowdata_id AS workflow_id FROM wrk_workflowData wf LEFT JOIN xnat_experimentData ex ON ex.id = wf.id;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW SUBJECT_LABEL_VIEW AS SELECT DISTINCT sub.label AS subject_label, wf.wrk_workflowdata_id AS workflow_id FROM wrk_workflowData wf LEFT JOIN xnat_subjectData sub ON sub.id = wf.id;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW USERFULLNAME_VIEW AS SELECT wrk.wrk_workflowdata_id AS workflow_id, u.login, u.firstname, u.lastname, u.firstname || ' ' ||  u.lastname AS userfullname, u.email FROM wrk_workflowData wrk LEFT JOIN wrk_workflowdata_meta_data meta ON wrk.workflowData_info=meta.meta_data_id LEFT JOIN xdat_user u ON meta.insert_user_xdat_user_id=u.xdat_user_id;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_wrk_workflowData AS SELECT SEARCH.wrk_workflowData8 AS DATA_TYPE, SEARCH.wrk_workflowData22 AS WORKFLOW_ID, SEARCH.wrk_workflowData9 AS ID, SEARCH.wrk_workflowData10 AS EXTERNALID, SEARCH.wrk_workflowData11 AS CURRENT_STEP_LAUNCH_TIME, SEARCH.wrk_workflowData12 AS CURRENT_STEP_ID, '<B>' || CASE SEARCH.wrk_workflowData13 WHEN 'Complete' THEN '<FONT COLOR=green>Complete</FONT>' WHEN 'In Progress' THEN '<FONT COLOR=yellow>In Progress</FONT>' WHEN 'Running' THEN '<FONT COLOR=yellow>Running</FONT>' WHEN 'Queued' THEN '<FONT COLOR=orange>Queued</FONT>' WHEN 'Failed' THEN '<FONT COLOR=red>Failed</FONT>' ELSE '<FONT COLOR=orange>' || SEARCH.wrk_workflowData13 || '</FONT>' END || '</B>'  AS STATUS, SEARCH.wrk_workflowData15 AS PIPELINE_NAME, SEARCH.wrk_workflowData16 AS NEXT_STEP_ID, SEARCH.wrk_workflowData17 AS STEP_DESCRIPTION, SEARCH.wrk_workflowData18 AS LAUNCH_TIME, SEARCH.wrk_workflowData19 AS PERCENTAGECOMPLETE, SEARCH.wrk_workflowData20 AS JOB_ID, COALESCE(SEARCH.wrk_workflowData_meta_data41, SEARCH.wrk_workflowData_meta_data45) AS LAST_MODIFIED, SESSION_LABEL_VIEW_session_label AS SESSION_LABEL, SESSION_LABEL_VIEW_project AS PROJECT, SUBJECT_LABEL_VIEW_subject_label AS SUBJECT_LABEL, USERFULLNAME_VIEW_userfullname AS USERFULLNAME, USERFULLNAME_VIEW_login AS USERLOGIN, USERFULLNAME_VIEW_email AS USEREMAIL, SEARCH.wrk_workflowData_meta_data42 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  wrk_workflowData.wrk_workflowdata_id AS wrk_workflowData22, table1.status AS wrk_workflowData_meta_data42, wrk_workflowData.data_type AS wrk_workflowData8, wrk_workflowData.id AS wrk_workflowData9, wrk_workflowData.externalid AS wrk_workflowData10, wrk_workflowData.current_step_launch_time AS wrk_workflowData11, wrk_workflowData.current_step_id AS wrk_workflowData12, wrk_workflowData.status AS wrk_workflowData13, wrk_workflowData.pipeline_name AS wrk_workflowData15, wrk_workflowData.next_step_id AS wrk_workflowData16, wrk_workflowData.step_description AS wrk_workflowData17, wrk_workflowData.launch_time AS wrk_workflowData18, wrk_workflowData.percentagecomplete AS wrk_workflowData19, wrk_workflowData.jobid AS wrk_workflowData20, table1.insert_date AS wrk_workflowData_meta_data45, table1.last_modified AS wrk_workflowData_meta_data41, SESSION_LABEL_VIEW.session_label AS SESSION_LABEL_VIEW_session_label, SESSION_LABEL_VIEW.project AS SESSION_LABEL_VIEW_project, SUBJECT_LABEL_VIEW.subject_label AS SUBJECT_LABEL_VIEW_subject_label, USERFULLNAME_VIEW.userfullname AS USERFULLNAME_VIEW_userfullname, USERFULLNAME_VIEW.login AS USERFULLNAME_VIEW_login, USERFULLNAME_VIEW.email AS USERFULLNAME_VIEW_email FROM wrk_workflowData wrk_workflowData   LEFT JOIN wrk_workflowData_meta_data table1 ON wrk_workflowData.workflowData_info=table1.meta_data_id  LEFT JOIN SESSION_LABEL_VIEW SESSION_LABEL_VIEW ON wrk_workflowData.wrk_workflowdata_id=SESSION_LABEL_VIEW.workflow_id  LEFT JOIN SUBJECT_LABEL_VIEW SUBJECT_LABEL_VIEW ON wrk_workflowData.wrk_workflowdata_id=SUBJECT_LABEL_VIEW.workflow_id  LEFT JOIN USERFULLNAME_VIEW USERFULLNAME_VIEW ON wrk_workflowData.wrk_workflowdata_id=USERFULLNAME_VIEW.workflow_id) SEARCH RIGHT JOIN (SELECT DISTINCT wrk_workflowData22 FROM (SELECT wrk_workflowData.wrk_workflowdata_id AS wrk_workflowData22, table1.insert_date AS wrk_workflowData_meta_data45 FROM wrk_workflowData wrk_workflowData   LEFT JOIN wrk_workflowData_meta_data table1 ON wrk_workflowData.workflowData_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.wrk_workflowData22=SEARCH.wrk_workflowData22 ORDER BY (SEARCH.wrk_workflowData8) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_SRSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:srSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_srSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_srSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_SRSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_srSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_srSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_srSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_srSessionData0) * FROM (SELECT table2.id AS xnat_srSessionData0, table4.status AS xnat_srSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_srSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_SRSESSIONDATA_PROJECTS.PROJECTS AS XNAT_SRSESSIONDATA_PROJECTS_PROJECTS FROM xnat_srSessionData xnat_srSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_srSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_srSessionData_meta_data table4 ON xnat_srSessionData.srSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_SRSESSIONDATA_PROJECTS XNAT_SRSESSIONDATA_PROJECTS ON table2.id=XNAT_SRSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_srSessionData.xnat_srSessionData0 AS xnat_srSessionData_sordata_EX_xnat_srSessionData0, xnat_srSessionData.xnat_experimentData20 AS xnat_srSessionData_sordata__xnat_experimentData20, xnat_srSessionData.xnat_subjectAssessorData17 AS xnat_srSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_srSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_srSessionData xnat_srSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_srSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_srSessionData ON xnat_subjectData.id=xnat_srSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_srSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_srSessionData_sordata_EX_xnat_srSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_srSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_srSessionData0 FROM (SELECT table2.id AS xnat_srSessionData0, table2.date AS xnat_experimentData20 FROM xnat_srSessionData xnat_srSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_srSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_srSessionData0=SEARCH.xnat_srSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_esvScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_esvScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_esvScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_esvScanData0, table2.status AS xnat_esvScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_esvScanData_meta_data118, table4.login AS table4_login FROM xnat_esvScanData xnat_esvScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_esvScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_esvScanData_meta_data table2 ON xnat_esvScanData.esvScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_esvScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_esvScanData0, table2.insert_date AS xnat_esvScanData_meta_data118 FROM xnat_esvScanData xnat_esvScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_esvScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_esvScanData_meta_data table2 ON xnat_esvScanData.esvScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_esvScanData0=SEARCH.xnat_esvScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJECT_INVS AS SELECT proj.id AS xnat_projectdata_id, COALESCE(((pi.lastname::text || ', '::text) || pi.firstname::text),'') || COALESCE(others.other_invs,'') AS proj_invs FROM xnat_projectData proj LEFT JOIN xnat_investigatorData pi ON proj.pi_xnat_investigatorData_id=pi.xnat_investigatorData_id LEFT JOIN (  SELECT xnat_projectdata_id, xs_a_concat(' <br/> ' || lastname || ', ' || firstname) AS other_invs   FROM xnat_projectData_investigator pinv  LEFT JOIN xnat_investigatorData inv ON pinv.xnat_investigatordata_xnat_investigatordata_id=inv.xnat_investigatordata_id  GROUP BY xnat_projectdata_id) others ON proj.id=xnat_projectdata_id;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJECT_ACCESS AS SELECT proj.id,CASE WHEN (project_read=1 AND subject_read=1) THEN 'public' WHEN (project_read=1) THEN 'protected' ELSE 'private' END AS accessibility FROM xnat_projectData proj LEFT JOIN ( SELECT field_value,read_element AS project_read FROM xdat_element_access ea LEFT JOIN xdat_field_mapping_set fms ON ea.xdat_element_access_id=fms.permissions_allow_set_xdat_elem_xdat_element_access_id LEFT JOIN xdat_user u ON ea.xdat_user_xdat_user_id=u.xdat_user_id LEFT JOIN xdat_field_mapping fm ON fms.xdat_field_mapping_set_id=fm.xdat_field_mapping_set_xdat_field_mapping_set_id WHERE login='guest' AND element_name='xnat:projectData'  )project_read ON proj.id=project_read.field_value LEFT JOIN ( SELECT field_value,read_element AS subject_read FROM xdat_element_access ea LEFT JOIN xdat_field_mapping_set fms ON ea.xdat_element_access_id=fms.permissions_allow_set_xdat_elem_xdat_element_access_id LEFT JOIN xdat_user u ON ea.xdat_user_xdat_user_id=u.xdat_user_id LEFT JOIN xdat_field_mapping fm ON fms.xdat_field_mapping_set_id=fm.xdat_field_mapping_set_xdat_field_mapping_set_id WHERE login='guest' AND field='xnat:subjectData/project'  )subject_read ON proj.id=subject_read.field_value;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJECT_USERS AS SELECT FIELD_VALUE AS xnat_projectdata_id, TRIM('<br/>' FROM xs_a_concat( ' '|| login || ' <br/>')) AS users FROM (SELECT DISTINCT FIELD_VALUE,login FROM xdat_element_access ea  LEFT JOIN xdat_field_mapping_set fms ON ea.xdat_element_access_id=fms.permissions_allow_set_xdat_elem_xdat_element_access_id  LEFT JOIN xdat_field_mapping fm ON fms.xdat_field_mapping_set_id=fm.xdat_field_mapping_set_xdat_field_mapping_set_id  RIGHT JOIN xdat_userGroup grp ON ea.xdat_usergroup_xdat_usergroup_id=grp.xdat_usergroup_id  RIGHT JOIN xdat_user_groupid map ON grp.id=map.groupid RIGHT JOIN xdat_user u ON map.groups_groupid_xdat_user_xdat_user_id=u.xdat_user_id WHERE field='xnat:subjectData/sharing/share/project') PROJ_USERS GROUP BY FIELD_VALUE;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJECT_OWNERS AS SELECT FIELD_VALUE AS xnat_projectdata_id, TRIM('<br/>' FROM xs_a_concat( ' '|| login || ' <br/>')) AS users FROM (SELECT DISTINCT FIELD_VALUE,login FROM xdat_element_access ea  LEFT JOIN xdat_field_mapping_set fms ON ea.xdat_element_access_id=fms.permissions_allow_set_xdat_elem_xdat_element_access_id  LEFT JOIN xdat_field_mapping fm ON fms.xdat_field_mapping_set_id=fm.xdat_field_mapping_set_xdat_field_mapping_set_id  RIGHT JOIN xdat_userGroup grp ON ea.xdat_usergroup_xdat_usergroup_id=grp.xdat_usergroup_id AND grp.displayname='Owners'  RIGHT JOIN xdat_user_groupid map ON grp.id=map.groupid RIGHT JOIN xdat_user u ON map.groups_groupid_xdat_user_xdat_user_id=u.xdat_user_id WHERE field='xnat:subjectData/sharing/share/project') PROJ_USERS GROUP BY FIELD_VALUE;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJECT_MEMBERS AS SELECT FIELD_VALUE AS xnat_projectdata_id, TRIM('<br/>' FROM xs_a_concat( ' '|| login || ' <br/>')) AS users FROM (SELECT DISTINCT FIELD_VALUE,login FROM xdat_element_access ea  LEFT JOIN xdat_field_mapping_set fms ON ea.xdat_element_access_id=fms.permissions_allow_set_xdat_elem_xdat_element_access_id  LEFT JOIN xdat_field_mapping fm ON fms.xdat_field_mapping_set_id=fm.xdat_field_mapping_set_xdat_field_mapping_set_id  RIGHT JOIN xdat_userGroup grp ON ea.xdat_usergroup_xdat_usergroup_id=grp.xdat_usergroup_id AND grp.displayname='Members'  RIGHT JOIN xdat_user_groupid map ON grp.id=map.groupid RIGHT JOIN xdat_user u ON map.groups_groupid_xdat_user_xdat_user_id=u.xdat_user_id WHERE field='xnat:subjectData/sharing/share/project') PROJ_USERS GROUP BY FIELD_VALUE;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJECT_COLLABS AS SELECT FIELD_VALUE AS xnat_projectdata_id, TRIM('<br/>' FROM xs_a_concat( ' '|| login || ' <br/>')) AS users FROM (SELECT DISTINCT FIELD_VALUE,login FROM xdat_element_access ea  LEFT JOIN xdat_field_mapping_set fms ON ea.xdat_element_access_id=fms.permissions_allow_set_xdat_elem_xdat_element_access_id  LEFT JOIN xdat_field_mapping fm ON fms.xdat_field_mapping_set_id=fm.xdat_field_mapping_set_xdat_field_mapping_set_id  RIGHT JOIN xdat_userGroup grp ON ea.xdat_usergroup_xdat_usergroup_id=grp.xdat_usergroup_id AND grp.displayname='Collaborators'  RIGHT JOIN xdat_user_groupid map ON grp.id=map.groupid RIGHT JOIN xdat_user u ON map.groups_groupid_xdat_user_xdat_user_id=u.xdat_user_id WHERE field='xnat:subjectData/sharing/share/project') PROJ_USERS GROUP BY FIELD_VALUE;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJECT_LAST_WORKFLOW AS SELECT ID, LAST_WORKFLOW FROM xnat_projectData proj LEFT JOIN (SELECT externalid,MAX(launch_time) as LAST_WORKFLOW FROM wrk_workflowData GROUP BY externalid)launch_times ON proj.id=launch_times.externalid;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJECT_LAST_ACCESS AS SELECT search_value,TRIM('<br/>' FROM xs_a_concat( ' '|| login || ' <br/>')) AS users FROM (SELECT DISTINCT search_value,xdat_user_id FROM xdat_search.xs_item_access WHERE search_element='xnat:projectData' AND accessed > (NOW()-interval '1 month')) last_access LEFT JOIN xdat_user u ON last_access.xdat_user_id::text=u.xdat_user_id::text GROUP BY search_value;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJECT_FAVS AS SELECT id AS project_id,TRIM('<br/>' FROM xs_a_concat( ' '|| login || ' <br/>')) AS users FROM (   SELECT DISTINCT id,xdat_user_id    FROM xdat_search.xs_fav_entries   WHERE dataType='Project' ) last_access  LEFT JOIN xdat_user u ON last_access.xdat_user_id::integer=u.xdat_user_id::integer GROUP BY id;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJ_EXPT_COUNTS AS SELECT project, element_name, COUNT(ID) AS PROJ_EXPT_COUNT FROM ( SELECT project,ID,element_name FROM xnat_experimentData expt LEFT JOIN xdat_meta_element xme ON expt.extension=xme.xdat_meta_element_id UNION SELECT ep.project, ep.label, element_name FROM xnat_experimentdata_share ep LEFT JOIN xnat_experimentData expt ON ep.sharing_share_xnat_experimentda_id=expt.id LEFT JOIN xdat_meta_element xme ON expt.extension=xme.xdat_meta_element_id ) GROUPING GROUP BY project,element_name;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJ_MR_COUNTS AS SELECT project, proj_expt_count FROM ( SELECT project, element_name, COUNT(ID) AS PROJ_EXPT_COUNT FROM ( SELECT project,ID,element_name FROM xnat_experimentData expt LEFT JOIN xdat_meta_element xme ON expt.extension=xme.xdat_meta_element_id UNION SELECT ep.project, ep.label, element_name FROM xnat_experimentdata_share ep LEFT JOIN xnat_experimentData expt ON ep.sharing_share_xnat_experimentda_id=expt.id LEFT JOIN xdat_meta_element xme ON expt.extension=xme.xdat_meta_element_id ) GROUPING GROUP BY project,element_name ) GROUPING WHERE element_name='xnat:mrSessionData';


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJ_PET_COUNTS AS SELECT project, proj_expt_count FROM ( SELECT project, element_name, COUNT(ID) AS PROJ_EXPT_COUNT FROM ( SELECT project,ID,element_name FROM xnat_experimentData expt LEFT JOIN xdat_meta_element xme ON expt.extension=xme.xdat_meta_element_id UNION SELECT ep.project, ep.label, element_name FROM xnat_experimentdata_share ep LEFT JOIN xnat_experimentData expt ON ep.sharing_share_xnat_experimentda_id=expt.id LEFT JOIN xdat_meta_element xme ON expt.extension=xme.xdat_meta_element_id ) GROUPING GROUP BY project,element_name ) GROUPING WHERE element_name='xnat:petSessionData';


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJ_CT_COUNTS AS SELECT project, proj_expt_count FROM ( SELECT project, element_name, COUNT(ID) AS PROJ_EXPT_COUNT FROM ( SELECT project,ID,element_name FROM xnat_experimentData expt LEFT JOIN xdat_meta_element xme ON expt.extension=xme.xdat_meta_element_id UNION SELECT ep.project, ep.label, element_name FROM xnat_experimentdata_share ep LEFT JOIN xnat_experimentData expt ON ep.sharing_share_xnat_experimentda_id=expt.id LEFT JOIN xdat_meta_element xme ON expt.extension=xme.xdat_meta_element_id ) GROUPING GROUP BY project,element_name ) GROUPING WHERE element_name='xnat:ctSessionData';


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJ_UT_COUNTS AS SELECT project, proj_expt_count FROM ( SELECT project, element_name, COUNT(ID) AS PROJ_EXPT_COUNT FROM ( SELECT project,ID,element_name FROM xnat_experimentData expt LEFT JOIN xdat_meta_element xme ON expt.extension=xme.xdat_meta_element_id UNION SELECT ep.project, ep.label, element_name FROM xnat_experimentdata_share ep LEFT JOIN xnat_experimentData expt ON ep.sharing_share_xnat_experimentda_id=expt.id LEFT JOIN xdat_meta_element xme ON expt.extension=xme.xdat_meta_element_id ) GROUPING GROUP BY project,element_name ) GROUPING WHERE element_name='xnat:utSessionData';


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW PROJ_ARC AS SELECT id AS PROJ_ID,current_arc,COALESCE(quarantine_code,0) AS quarantine_code,COALESCE(prearchive_code,0) AS prearchive_code FROM arc_project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_projectData AS SELECT SEARCH.xnat_projectData_meta_data216 AS INSERT_DATE, SEARCH.table2_login AS INSERT_USER, SEARCH.xnat_projectData4 AS ID, SEARCH.xnat_projectData0 AS NAME, SEARCH.xnat_projectData0 AS NAME_CSV, substring(SEARCH.xnat_projectData1 FROM 0 FOR 162) AS DESCRIPTION, SEARCH.xnat_projectData1 AS DESCRIPTION_CSV, SEARCH.xnat_projectData5 AS SECONDARY_ID, SEARCH.xnat_projectData2 AS KEYWORDS, SEARCH.xnat_investigatorData151 || ' ' || SEARCH.xnat_investigatorData152 AS PI, PROJECT_INVS_PROJ_INVS AS PROJECT_INVS, PROJECT_ACCESS_accessibility AS PROJECT_ACCESS, PROJECT_USERS_users AS PROJECT_USERS, PROJECT_OWNERS_users AS PROJECT_OWNERS, PROJECT_MEMBERS_users AS PROJECT_MEMBERS, PROJECT_COLLABS_users AS PROJECT_COLLABS, PROJECT_LAST_WORKFLOW_LAST_WORKFLOW AS PROJECT_LAST_WORKFLOW, PROJECT_LAST_ACCESS_users AS PROJECT_LAST_ACCESS, PROJECT_FAVS_users AS PROJECT_FAV, CASE PROJECT_ACCESS_accessibility WHEN 'public' THEN '/@WEBAPPimages/globe.gif' ELSE '/@WEBAPPimages/key.gif' END AS PROJECT_ACCESS_IMG, PROJ_MR_COUNTS_PROJ_EXPT_COUNT AS PROJ_MR_COUNT, PROJ_CT_COUNTS_PROJ_EXPT_COUNT AS PROJ_CT_COUNT, PROJ_PET_COUNTS_PROJ_EXPT_COUNT AS PROJ_PET_COUNT, PROJ_UT_COUNTS_PROJ_EXPT_COUNT AS PROJ_UT_COUNT, PROJ_ARC_quarantine_code AS PROJ_QUARANTINE, PROJ_ARC_prearchive_code AS PROJ_PREARCHIVE_CODE, SEARCH.xnat_projectData_meta_data213 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xnat_projectData.id AS xnat_projectData4, table1.status AS xnat_projectData_meta_data213, table1.insert_date AS xnat_projectData_meta_data216, table2.login AS table2_login, xnat_projectData.name AS xnat_projectData0, xnat_projectData.description AS xnat_projectData1, xnat_projectData.secondary_id AS xnat_projectData5, xnat_projectData.keywords AS xnat_projectData2, table3.firstname AS xnat_investigatorData151, table3.lastname AS xnat_investigatorData152, PROJECT_INVS.PROJ_INVS AS PROJECT_INVS_PROJ_INVS, PROJECT_ACCESS.accessibility AS PROJECT_ACCESS_accessibility, PROJECT_USERS.users AS PROJECT_USERS_users, PROJECT_OWNERS.users AS PROJECT_OWNERS_users, PROJECT_MEMBERS.users AS PROJECT_MEMBERS_users, PROJECT_COLLABS.users AS PROJECT_COLLABS_users, PROJECT_LAST_WORKFLOW.LAST_WORKFLOW AS PROJECT_LAST_WORKFLOW_LAST_WORKFLOW, PROJECT_LAST_ACCESS.users AS PROJECT_LAST_ACCESS_users, PROJECT_FAVS.users AS PROJECT_FAVS_users, PROJ_MR_COUNTS.PROJ_EXPT_COUNT AS PROJ_MR_COUNTS_PROJ_EXPT_COUNT, PROJ_CT_COUNTS.PROJ_EXPT_COUNT AS PROJ_CT_COUNTS_PROJ_EXPT_COUNT, PROJ_PET_COUNTS.PROJ_EXPT_COUNT AS PROJ_PET_COUNTS_PROJ_EXPT_COUNT, PROJ_UT_COUNTS.PROJ_EXPT_COUNT AS PROJ_UT_COUNTS_PROJ_EXPT_COUNT, PROJ_ARC.quarantine_code AS PROJ_ARC_quarantine_code, PROJ_ARC.prearchive_code AS PROJ_ARC_prearchive_code FROM xnat_projectData xnat_projectData   LEFT JOIN xnat_projectData_meta_data table1 ON xnat_projectData.projectData_info=table1.meta_data_id   LEFT JOIN xdat_user table2 ON table1.insert_user_xdat_user_id=table2.xdat_user_id   LEFT JOIN xnat_investigatorData table3 ON xnat_projectData.pi_xnat_investigatordata_id=table3.xnat_investigatordata_id  LEFT JOIN PROJECT_INVS PROJECT_INVS ON xnat_projectData.id=PROJECT_INVS.xnat_projectdata_id  LEFT JOIN PROJECT_ACCESS PROJECT_ACCESS ON xnat_projectData.id=PROJECT_ACCESS.id  LEFT JOIN PROJECT_USERS PROJECT_USERS ON xnat_projectData.id=PROJECT_USERS.xnat_projectdata_id  LEFT JOIN PROJECT_OWNERS PROJECT_OWNERS ON xnat_projectData.id=PROJECT_OWNERS.xnat_projectdata_id  LEFT JOIN PROJECT_MEMBERS PROJECT_MEMBERS ON xnat_projectData.id=PROJECT_MEMBERS.xnat_projectdata_id  LEFT JOIN PROJECT_COLLABS PROJECT_COLLABS ON xnat_projectData.id=PROJECT_COLLABS.xnat_projectdata_id  LEFT JOIN PROJECT_LAST_WORKFLOW PROJECT_LAST_WORKFLOW ON xnat_projectData.id=PROJECT_LAST_WORKFLOW.id  LEFT JOIN PROJECT_LAST_ACCESS PROJECT_LAST_ACCESS ON xnat_projectData.id=PROJECT_LAST_ACCESS.search_value  LEFT JOIN PROJECT_FAVS PROJECT_FAVS ON xnat_projectData.id=PROJECT_FAVS.project_id  LEFT JOIN PROJ_MR_COUNTS PROJ_MR_COUNTS ON xnat_projectData.id=PROJ_MR_COUNTS.project  LEFT JOIN PROJ_CT_COUNTS PROJ_CT_COUNTS ON xnat_projectData.id=PROJ_CT_COUNTS.project  LEFT JOIN PROJ_PET_COUNTS PROJ_PET_COUNTS ON xnat_projectData.id=PROJ_PET_COUNTS.project  LEFT JOIN PROJ_UT_COUNTS PROJ_UT_COUNTS ON xnat_projectData.id=PROJ_UT_COUNTS.project  LEFT JOIN PROJ_ARC PROJ_ARC ON xnat_projectData.id=PROJ_ARC.PROJ_ID) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_projectData4 FROM (SELECT xnat_projectData.id AS xnat_projectData4, table1.insert_date AS xnat_projectData_meta_data216 FROM xnat_projectData xnat_projectData   LEFT JOIN xnat_projectData_meta_data table1 ON xnat_projectData.projectData_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_projectData4=SEARCH.xnat_projectData4 ORDER BY (SEARCH.xnat_projectData_meta_data216) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_investigatorData AS SELECT SEARCH.xnat_investigatorData9 AS INVESTIGATOR_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_investigatorData1 || ' ' || SEARCH.xnat_investigatorData2 AS INVESTIGATOR_NAME, SEARCH.xnat_investigatorData5 AS EMAIL, SEARCH.xnat_investigatorData6 AS PHONE, SEARCH.xnat_investigatorData_meta_data12 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  xnat_investigatorData.xnat_investigatordata_id AS xnat_investigatorData9, table1.status AS xnat_investigatorData_meta_data12, xnat_investigatorData.firstname AS xnat_investigatorData1, xnat_investigatorData.lastname AS xnat_investigatorData2, xnat_investigatorData.email AS xnat_investigatorData5, xnat_investigatorData.phone AS xnat_investigatorData6, table1.insert_date AS xnat_investigatorData_meta_data15 FROM xnat_investigatorData xnat_investigatorData   LEFT JOIN xnat_investigatorData_meta_data table1 ON xnat_investigatorData.investigatorData_info=table1.meta_data_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_investigatorData9 FROM (SELECT xnat_investigatorData.xnat_investigatordata_id AS xnat_investigatorData9, table1.insert_date AS xnat_investigatorData_meta_data15 FROM xnat_investigatorData xnat_investigatorData   LEFT JOIN xnat_investigatorData_meta_data table1 ON xnat_investigatorData.investigatorData_info=table1.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_investigatorData9=SEARCH.xnat_investigatorData9 ORDER BY (SEARCH.xnat_investigatorData9) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_XASESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:xaSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_xaSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_xaSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_XASESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_xaSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_xaSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_xaSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_xaSessionData0) * FROM (SELECT table2.id AS xnat_xaSessionData0, table4.status AS xnat_xaSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_xaSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_XASESSIONDATA_PROJECTS.PROJECTS AS XNAT_XASESSIONDATA_PROJECTS_PROJECTS FROM xnat_xaSessionData xnat_xaSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xaSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_xaSessionData_meta_data table4 ON xnat_xaSessionData.xaSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_XASESSIONDATA_PROJECTS XNAT_XASESSIONDATA_PROJECTS ON table2.id=XNAT_XASESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_xaSessionData.xnat_xaSessionData0 AS xnat_xaSessionData_sordata_EX_xnat_xaSessionData0, xnat_xaSessionData.xnat_experimentData20 AS xnat_xaSessionData_sordata__xnat_experimentData20, xnat_xaSessionData.xnat_subjectAssessorData17 AS xnat_xaSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_xaSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_xaSessionData xnat_xaSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xaSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_xaSessionData ON xnat_subjectData.id=xnat_xaSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_xaSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_xaSessionData_sordata_EX_xnat_xaSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_xaSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_xaSessionData0 FROM (SELECT table2.id AS xnat_xaSessionData0, table2.date AS xnat_experimentData20 FROM xnat_xaSessionData xnat_xaSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xaSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_xaSessionData0=SEARCH.xnat_xaSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_USSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:usSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_usSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_usSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_USSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_usSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_usSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_usSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_usSessionData0) * FROM (SELECT table2.id AS xnat_usSessionData0, table4.status AS xnat_usSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_usSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_USSESSIONDATA_PROJECTS.PROJECTS AS XNAT_USSESSIONDATA_PROJECTS_PROJECTS FROM xnat_usSessionData xnat_usSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_usSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_usSessionData_meta_data table4 ON xnat_usSessionData.usSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_USSESSIONDATA_PROJECTS XNAT_USSESSIONDATA_PROJECTS ON table2.id=XNAT_USSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_usSessionData.xnat_usSessionData0 AS xnat_usSessionData_sordata_EX_xnat_usSessionData0, xnat_usSessionData.xnat_experimentData20 AS xnat_usSessionData_sordata__xnat_experimentData20, xnat_usSessionData.xnat_subjectAssessorData17 AS xnat_usSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_usSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_usSessionData xnat_usSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_usSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_usSessionData ON xnat_subjectData.id=xnat_usSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_usSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_usSessionData_sordata_EX_xnat_usSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_usSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_usSessionData0 FROM (SELECT table2.id AS xnat_usSessionData0, table2.date AS xnat_experimentData20 FROM xnat_usSessionData xnat_usSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_usSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_usSessionData0=SEARCH.xnat_usSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_XCVSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:xcvSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_xcvSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_xcvSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_XCVSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_xcvSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_xcvSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_xcvSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_xcvSessionData0) * FROM (SELECT table2.id AS xnat_xcvSessionData0, table4.status AS xnat_xcvSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_xcvSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_XCVSESSIONDATA_PROJECTS.PROJECTS AS XNAT_XCVSESSIONDATA_PROJECTS_PROJECTS FROM xnat_xcvSessionData xnat_xcvSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xcvSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_xcvSessionData_meta_data table4 ON xnat_xcvSessionData.xcvSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_XCVSESSIONDATA_PROJECTS XNAT_XCVSESSIONDATA_PROJECTS ON table2.id=XNAT_XCVSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_xcvSessionData.xnat_xcvSessionData0 AS xnat_xcvSessionData_sordata_E_xnat_xcvSessionData0, xnat_xcvSessionData.xnat_experimentData20 AS xnat_xcvSessionData_sordata__xnat_experimentData20, xnat_xcvSessionData.xnat_subjectAssessorData17 AS xnat_xcvSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_xcvSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_xcvSessionData xnat_xcvSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xcvSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_xcvSessionData ON xnat_subjectData.id=xnat_xcvSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_xcvSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_xcvSessionData_sordata_E_xnat_xcvSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_xcvSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_xcvSessionData0 FROM (SELECT table2.id AS xnat_xcvSessionData0, table2.date AS xnat_experimentData20 FROM xnat_xcvSessionData xnat_xcvSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xcvSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_xcvSessionData0=SEARCH.xnat_xcvSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_ESVSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:esvSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_esvSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_esvSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_ESVSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_esvSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_esvSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_esvSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_esvSessionData0) * FROM (SELECT table2.id AS xnat_esvSessionData0, table4.status AS xnat_esvSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_esvSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_ESVSESSIONDATA_PROJECTS.PROJECTS AS XNAT_ESVSESSIONDATA_PROJECTS_PROJECTS FROM xnat_esvSessionData xnat_esvSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_esvSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_esvSessionData_meta_data table4 ON xnat_esvSessionData.esvSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_ESVSESSIONDATA_PROJECTS XNAT_ESVSESSIONDATA_PROJECTS ON table2.id=XNAT_ESVSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_esvSessionData.xnat_esvSessionData0 AS xnat_esvSessionData_sordata_E_xnat_esvSessionData0, xnat_esvSessionData.xnat_experimentData20 AS xnat_esvSessionData_sordata__xnat_experimentData20, xnat_esvSessionData.xnat_subjectAssessorData17 AS xnat_esvSessionData_sor_xnat_subjectAssessorData17, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_esvSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_esvSessionData xnat_esvSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_esvSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_esvSessionData ON xnat_subjectData.id=xnat_esvSessionData.xnat_subjectAssessorData17 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_esvSessionData_sordata__xnat_experimentData20 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_esvSessionData_sordata_E_xnat_esvSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_esvSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_esvSessionData0 FROM (SELECT table2.id AS xnat_esvSessionData0, table2.date AS xnat_experimentData20 FROM xnat_esvSessionData xnat_esvSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_esvSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_esvSessionData0=SEARCH.xnat_esvSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_RTSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:rtSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_rtSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_rtSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_RTSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_rtSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_rtSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_rtSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_rtSessionData0) * FROM (SELECT table2.id AS xnat_rtSessionData0, table4.status AS xnat_rtSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_rtSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_RTSESSIONDATA_PROJECTS.PROJECTS AS XNAT_RTSESSIONDATA_PROJECTS_PROJECTS FROM xnat_rtSessionData xnat_rtSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_rtSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_rtSessionData_meta_data table4 ON xnat_rtSessionData.rtSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_RTSESSIONDATA_PROJECTS XNAT_RTSESSIONDATA_PROJECTS ON table2.id=XNAT_RTSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_rtSessionData.xnat_rtSessionData0 AS xnat_rtSessionData_sordata_EX_xnat_rtSessionData0, xnat_rtSessionData.xnat_experimentData20 AS xnat_rtSessionData_sordata__xnat_experimentData20, xnat_rtSessionData.xnat_subjectAssessorData17 AS xnat_rtSessionData_sor_xnat_subjectAssessorData17, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_rtSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_rtSessionData xnat_rtSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_rtSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_rtSessionData ON xnat_subjectData.id=xnat_rtSessionData.xnat_subjectAssessorData17 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_rtSessionData_sordata__xnat_experimentData20 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_rtSessionData_sordata_EX_xnat_rtSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_rtSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_rtSessionData0 FROM (SELECT table2.id AS xnat_rtSessionData0, table2.date AS xnat_experimentData20 FROM xnat_rtSessionData xnat_rtSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_rtSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_rtSessionData0=SEARCH.xnat_rtSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_resourceCatalog AS SELECT SEARCH.xnat_resource4 AS URI, SEARCH.xnat_resource5 AS FORMAT, SEARCH.xnat_resource6 AS DESCRIPTION, SEARCH.xnat_resource7 AS CONTENT, SEARCH.xnat_resource8 AS CACHEPATH, SEARCH.xnat_abstractResource10 AS NOTE, SEARCH.xnat_abstractResource11 AS LABEL, SEARCH.xnat_abstractResource12 AS FILE_COUNT, SEARCH.xnat_abstractResource13 AS FILE_SIZE, SEARCH.xnat_resourceCatalog_meta_data123 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_resourceCatalog_meta_data120 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table1.xnat_abstractresource_id AS xnat_resourceCatalog0, table3.status AS xnat_resourceCatalog_meta_data120, table0.uri AS xnat_resource4, table0.format AS xnat_resource5, table0.description AS xnat_resource6, table0.content AS xnat_resource7, table0.cachepath AS xnat_resource8, table1.note AS xnat_abstractResource10, table1.label AS xnat_abstractResource11, table1.file_count AS xnat_abstractResource12, table1.file_size AS xnat_abstractResource13, table3.insert_date AS xnat_resourceCatalog_meta_data123, table4.login AS table4_login FROM xnat_resourceCatalog xnat_resourceCatalog   LEFT JOIN xnat_resource table0 ON xnat_resourceCatalog.xnat_abstractresource_id=table0.xnat_abstractresource_id   LEFT JOIN xnat_abstractResource table1 ON table0.xnat_abstractresource_id=table1.xnat_abstractresource_id   LEFT JOIN xnat_resourceCatalog_meta_data table3 ON xnat_resourceCatalog.resourceCatalog_info=table3.meta_data_id   LEFT JOIN xdat_user table4 ON table3.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_resourceCatalog0 FROM (SELECT table1.xnat_abstractresource_id AS xnat_resourceCatalog0, table3.insert_date AS xnat_resourceCatalog_meta_data123 FROM xnat_resourceCatalog xnat_resourceCatalog   LEFT JOIN xnat_resource table0 ON xnat_resourceCatalog.xnat_abstractresource_id=table0.xnat_abstractresource_id   LEFT JOIN xnat_abstractResource table1 ON table0.xnat_abstractresource_id=table1.xnat_abstractresource_id   LEFT JOIN xnat_resourceCatalog_meta_data table3 ON xnat_resourceCatalog.resourceCatalog_info=table3.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_resourceCatalog0=SEARCH.xnat_resourceCatalog0 ORDER BY (SEARCH.xnat_resource4) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_segScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_segScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_segScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_segScanData0, table2.status AS xnat_segScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_segScanData_meta_data118, table4.login AS table4_login FROM xnat_segScanData xnat_segScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_segScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_segScanData_meta_data table2 ON xnat_segScanData.segScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_segScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_segScanData0, table2.insert_date AS xnat_segScanData_meta_data118 FROM xnat_segScanData xnat_segScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_segScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_segScanData_meta_data table2 ON xnat_segScanData.segScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_segScanData0=SEARCH.xnat_segScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_EPSSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:epsSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_epsSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_epsSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_EPSSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_epsSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_epsSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_epsSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_epsSessionData0) * FROM (SELECT table2.id AS xnat_epsSessionData0, table4.status AS xnat_epsSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_epsSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_EPSSESSIONDATA_PROJECTS.PROJECTS AS XNAT_EPSSESSIONDATA_PROJECTS_PROJECTS FROM xnat_epsSessionData xnat_epsSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_epsSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_epsSessionData_meta_data table4 ON xnat_epsSessionData.epsSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_EPSSESSIONDATA_PROJECTS XNAT_EPSSESSIONDATA_PROJECTS ON table2.id=XNAT_EPSSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_epsSessionData.xnat_epsSessionData0 AS xnat_epsSessionData_sordata_E_xnat_epsSessionData0, xnat_epsSessionData.xnat_experimentData20 AS xnat_epsSessionData_sordata__xnat_experimentData20, xnat_epsSessionData.xnat_subjectAssessorData17 AS xnat_epsSessionData_sor_xnat_subjectAssessorData17, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_epsSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_epsSessionData xnat_epsSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_epsSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_epsSessionData ON xnat_subjectData.id=xnat_epsSessionData.xnat_subjectAssessorData17 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_epsSessionData_sordata__xnat_experimentData20 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_epsSessionData_sordata_E_xnat_epsSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_epsSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_epsSessionData0 FROM (SELECT table2.id AS xnat_epsSessionData0, table2.date AS xnat_experimentData20 FROM xnat_epsSessionData xnat_epsSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_epsSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_epsSessionData0=SEARCH.xnat_epsSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_XA3DSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:xa3DSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_xa3DSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_xa3DSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_XA3DSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_xa3DSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_xa3DSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_xa3DSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_xa3DSessionData0) * FROM (SELECT table2.id AS xnat_xa3DSessionData0, table4.status AS xnat_xa3DSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_xa3DSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_XA3DSESSIONDATA_PROJECTS.PROJECTS AS XNAT_XA3DSESSIONDATA_PROJECTS_PROJECTS FROM xnat_xa3DSessionData xnat_xa3DSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xa3DSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_xa3DSessionData_meta_data table4 ON xnat_xa3DSessionData.xa3DSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_XA3DSESSIONDATA_PROJECTS XNAT_XA3DSESSIONDATA_PROJECTS ON table2.id=XNAT_XA3DSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_xa3DSessionData.xnat_xa3DSessionData0 AS xnat_xa3DSessionData_sordata__xnat_xa3DSessionData0, xnat_xa3DSessionData.xnat_experimentData20 AS xnat_xa3DSessionData_sordata__xnat_experimentData20, xnat_xa3DSessionData.xnat_subjectAssessorData17 AS xnat_xa3DSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_xa3DSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_xa3DSessionData xnat_xa3DSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xa3DSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_xa3DSessionData ON xnat_subjectData.id=xnat_xa3DSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_xa3DSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_xa3DSessionData_sordata__xnat_xa3DSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_xa3DSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_xa3DSessionData0 FROM (SELECT table2.id AS xnat_xa3DSessionData0, table2.date AS xnat_experimentData20 FROM xnat_xa3DSessionData xnat_xa3DSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_xa3DSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_xa3DSessionData0=SEARCH.xnat_xa3DSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_ioScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_ioScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_ioScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_ioScanData0, table2.status AS xnat_ioScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_ioScanData_meta_data118, table4.login AS table4_login FROM xnat_ioScanData xnat_ioScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_ioScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_ioScanData_meta_data table2 ON xnat_ioScanData.ioScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_ioScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_ioScanData0, table2.insert_date AS xnat_ioScanData_meta_data118 FROM xnat_ioScanData xnat_ioScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_ioScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_ioScanData_meta_data table2 ON xnat_ioScanData.ioScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_ioScanData0=SEARCH.xnat_ioScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_IOSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:ioSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_ioSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_ioSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_IOSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_ioSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_ioSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_ioSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_ioSessionData0) * FROM (SELECT table2.id AS xnat_ioSessionData0, table4.status AS xnat_ioSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_ioSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_IOSESSIONDATA_PROJECTS.PROJECTS AS XNAT_IOSESSIONDATA_PROJECTS_PROJECTS FROM xnat_ioSessionData xnat_ioSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_ioSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_ioSessionData_meta_data table4 ON xnat_ioSessionData.ioSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_IOSESSIONDATA_PROJECTS XNAT_IOSESSIONDATA_PROJECTS ON table2.id=XNAT_IOSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_ioSessionData.xnat_ioSessionData0 AS xnat_ioSessionData_sordata_EX_xnat_ioSessionData0, xnat_ioSessionData.xnat_experimentData20 AS xnat_ioSessionData_sordata__xnat_experimentData20, xnat_ioSessionData.xnat_subjectAssessorData17 AS xnat_ioSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_ioSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_ioSessionData xnat_ioSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_ioSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_ioSessionData ON xnat_subjectData.id=xnat_ioSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_ioSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_ioSessionData_sordata_EX_xnat_ioSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_ioSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_ioSessionData0 FROM (SELECT table2.id AS xnat_ioSessionData0, table2.date AS xnat_experimentData20 FROM xnat_ioSessionData xnat_ioSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_ioSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_ioSessionData0=SEARCH.xnat_ioSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_dx3DCraniofacialScanData AS SELECT SEARCH.xnat_imageScanData2 AS IMAGE_SESSION_ID, SEARCH.xnat_imageScanData3 AS NOTE, SEARCH.xnat_imageScanData4 AS QUALITY, SEARCH.xnat_imageScanData5 AS CONDITION, SEARCH.xnat_imageScanData6 AS SERIES_DESCRIPTION, SEARCH.xnat_imageScanData7 AS DOCUMENTATION, SEARCH.xnat_imageScanData8 AS SCANNER, SEARCH.xnat_imageScanData9 AS SCANNER_MANUFACTURER, SEARCH.xnat_imageScanData10 AS SCANNER_MODEL, SEARCH.xnat_imageScanData11 AS MODALITY, SEARCH.xnat_imageScanData12 AS FRAMES, SEARCH.xnat_imageScanData13 AS OPERATOR, SEARCH.xnat_imageScanData15 AS STARTTIME, SEARCH.xnat_imageScanData16 AS ID, SEARCH.xnat_imageScanData17 AS TYPE, SEARCH.xnat_imageScanData18 AS UID, SEARCH.xnat_imageScanData19 AS PROJECT, SEARCH.xnat_dx3DCraniofacialScanData_meta_data118 AS INSERT_DATE, SEARCH.table4_login AS INSERT_USER, SEARCH.xnat_dx3DCraniofacialScanData_meta_data115 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT  table0.xnat_imagescandata_id AS xnat_dx3DCraniofacialScanData0, table2.status AS xnat_dx3DCraniofacialScanData_meta_data115, table0.image_session_id AS xnat_imageScanData2, table0.note AS xnat_imageScanData3, table0.quality AS xnat_imageScanData4, table0.condition AS xnat_imageScanData5, table0.series_description AS xnat_imageScanData6, table0.documentation AS xnat_imageScanData7, table0.scanner AS xnat_imageScanData8, table0.scanner_manufacturer AS xnat_imageScanData9, table0.scanner_model AS xnat_imageScanData10, table0.modality AS xnat_imageScanData11, table0.frames AS xnat_imageScanData12, table0.operator AS xnat_imageScanData13, table0.starttime AS xnat_imageScanData15, table0.id AS xnat_imageScanData16, table0.type AS xnat_imageScanData17, table0.uid AS xnat_imageScanData18, table0.project AS xnat_imageScanData19, table2.insert_date AS xnat_dx3DCraniofacialScanData_meta_data118, table4.login AS table4_login FROM xnat_dx3DCraniofacialScanData xnat_dx3DCraniofacialScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_dx3DCraniofacialScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_dx3DCraniofacialScanData_meta_data table2 ON xnat_dx3DCraniofacialScanData.dx3DCraniofacialScanData_info=table2.meta_data_id   LEFT JOIN xdat_user table4 ON table2.insert_user_xdat_user_id=table4.xdat_user_id) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_dx3DCraniofacialScanData0 FROM (SELECT table0.xnat_imagescandata_id AS xnat_dx3DCraniofacialScanData0, table2.insert_date AS xnat_dx3DCraniofacialScanData_meta_data118 FROM xnat_dx3DCraniofacialScanData xnat_dx3DCraniofacialScanData   LEFT JOIN xnat_imageScanData table0 ON xnat_dx3DCraniofacialScanData.xnat_imagescandata_id=table0.xnat_imagescandata_id   LEFT JOIN xnat_dx3DCraniofacialScanData_meta_data table2 ON xnat_dx3DCraniofacialScanData.dx3DCraniofacialScanData_info=table2.meta_data_id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_dx3DCraniofacialScanData0=SEARCH.xnat_dx3DCraniofacialScanData0 ORDER BY (SEARCH.xnat_imageScanData2) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_HDSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:hdSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_hdSessionData AS SELECT SEARCH.xnat_subjectAssessorData17 AS SUBJECT_ID, SEARCH.xnat_hdSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData20 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData20) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData20)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_HDSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData36, SEARCH.xnat_hdSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_hdSessionData_meta_data971 AS INSERT_DATE, SEARCH.xnat_experimentData30 AS PROJECT, SEARCH.xnat_hdSessionData_meta_data968 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_hdSessionData0) * FROM (SELECT table2.id AS xnat_hdSessionData0, table4.status AS xnat_hdSessionData_meta_data968, table1.subject_id AS xnat_subjectAssessorData17, table2.date AS xnat_experimentData20, table2.label AS xnat_experimentData36, table5.login AS table5_login, table4.insert_date AS xnat_hdSessionData_meta_data971, table2.project AS xnat_experimentData30, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_HDSESSIONDATA_PROJECTS.PROJECTS AS XNAT_HDSESSIONDATA_PROJECTS_PROJECTS FROM xnat_hdSessionData xnat_hdSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_hdSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_hdSessionData_meta_data table4 ON xnat_hdSessionData.hdSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_HDSESSIONDATA_PROJECTS XNAT_HDSESSIONDATA_PROJECTS ON table2.id=XNAT_HDSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27, xnat_hdSessionData.xnat_hdSessionData0 AS xnat_hdSessionData_sordata_EX_xnat_hdSessionData0, xnat_hdSessionData.xnat_experimentData20 AS xnat_hdSessionData_sordata__xnat_experimentData20, xnat_hdSessionData.xnat_subjectAssessorData17 AS xnat_hdSessionData_sor_xnat_subjectAssessorData17 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27 LEFT JOIN (SELECT table2.id AS xnat_hdSessionData0, table2.date AS xnat_experimentData20, table1.subject_id AS xnat_subjectAssessorData17 FROM xnat_hdSessionData xnat_hdSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_hdSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_hdSessionData ON xnat_subjectData.id=xnat_hdSessionData.xnat_subjectAssessorData17) SEARCH ORDER BY xnat_subjectData3, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC, xnat_hdSessionData_sordata__xnat_experimentData20 DESC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_hdSessionData_sordata_EX_xnat_hdSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_hdSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_hdSessionData0 FROM (SELECT table2.id AS xnat_hdSessionData0, table2.date AS xnat_experimentData20 FROM xnat_hdSessionData xnat_hdSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_hdSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_hdSessionData0=SEARCH.xnat_hdSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData17) ;


--BR
--DEFINED VIEW
CREATE OR REPLACE VIEW XNAT_PETMRSESSIONDATA_PROJECTS AS SELECT id, '<' || expt.project || '>' || xs_a_concat(',<' || shared.project || '>') AS projects FROM xnat_experimentData expt LEFT JOIN xnat_experimentData_share shared ON expt.id=shared.sharing_share_xnat_experimentda_id LEFT JOIN xdat_meta_element xme ON expt.extension = xme.xdat_meta_element_id WHERE element_name='xnat:petmrSessionData' GROUP BY expt.id,expt.project;


--BR
--DISPLAY LINK
CREATE OR REPLACE VIEW displayfields_xnat_petmrSessionData AS SELECT SEARCH.xnat_subjectAssessorData43 AS SUBJECT_ID, SEARCH.xnat_petmrSessionData0 AS EXPT_ID, '/@WEBAPP/images/r.gif'::text AS RPT, SEARCH.xnat_experimentData46 AS DATE, CAST(COALESCE(FLOOR(CAST((CAST(((SEARCH.xnat_experimentData46) - (SEARCH.xnat_demographicData_xnat_demographicData1))AS FLOAT4)/365) AS numeric)),FLOOR((EXTRACT(YEAR FROM SEARCH.xnat_experimentData46)) - (SEARCH.xnat_demographicData_xnat_demographicData2))) AS numeric) AS AGE, XNAT_PETMRSESSIONDATA_PROJECTS_PROJECTS AS PROJECTS, COALESCE(SEARCH.xnat_experimentData62, SEARCH.xnat_petmrSessionData0) AS LABEL, SEARCH.table5_login AS INSERT_USER, SEARCH.xnat_petmrSessionData_meta_data997 AS INSERT_DATE, SEARCH.xnat_experimentData56 AS PROJECT, SEARCH.xnat_petmrSessionData1 AS COIL, SEARCH.xnat_petmrSessionData2 AS FIELDSTRENGTH, SEARCH.xnat_petmrSessionData3 AS MARKER, SEARCH.xnat_petmrSessionData4 AS STABILIZATION, SEARCH.xnat_petmrSessionData5 AS STUDYTYPE, SEARCH.xnat_petmrSessionData6 AS PATIENTID, SEARCH.xnat_petmrSessionData7 AS PATIENTNAME, SEARCH.xnat_petmrSessionData8 AS TRACER_DOSE_UNITS, SEARCH.xnat_petmrSessionData9 AS TRACER_DOSE, SEARCH.xnat_petmrSessionData10 AS TRACER_SPECIFICACTIVITY, SEARCH.xnat_petmrSessionData11 AS TRACER_TOTALMASS_UNITS, SEARCH.xnat_petmrSessionData12 AS TRACER_TOTALMASS, SEARCH.xnat_petmrSessionData13 AS TRACER_INTERMEDIATE_UNITS, SEARCH.xnat_petmrSessionData14 AS TRACER_INTERMEDIATE, SEARCH.xnat_petmrSessionData15 AS TRACER_ISOTOPE_HALF_LIFE, SEARCH.xnat_petmrSessionData16 AS TRACER_ISOTOPE, SEARCH.xnat_petmrSessionData17 AS TRACER_TRANSMISSIONS, SEARCH.xnat_petmrSessionData18 AS TRACER_TRANSMISSIONS_STARTTIME, SEARCH.xnat_petmrSessionData19 AS TRACER_NAME, SEARCH.xnat_petmrSessionData20 AS TRACER_STARTTIME, SEARCH.xnat_petmrSessionData21 AS START_TIME, SEARCH.xnat_petmrSessionData22 AS START_TIME_SCAN, SEARCH.xnat_petmrSessionData23 AS START_TIME_INJECTION, SEARCH.xnat_petmrSessionData24 AS BLOOD_GLUCOSE, SEARCH.xnat_petmrSessionData25 AS BLOOD_GLUCOSE_UNITS, SEARCH.xnat_petmrSessionData26 AS BLOOD_GLUCOSE_TIME, SEARCH.xnat_petmrSessionData_meta_data994 AS QUARANTINE_STATUS  FROM (SELECT DISTINCT ON (xnat_petmrSessionData0) * FROM (SELECT table2.id AS xnat_petmrSessionData0, table4.status AS xnat_petmrSessionData_meta_data994, table1.subject_id AS xnat_subjectAssessorData43, table2.date AS xnat_experimentData46, table2.label AS xnat_experimentData62, table5.login AS table5_login, table4.insert_date AS xnat_petmrSessionData_meta_data997, table2.project AS xnat_experimentData56, xnat_petmrSessionData.coil AS xnat_petmrSessionData1, xnat_petmrSessionData.fieldstrength AS xnat_petmrSessionData2, xnat_petmrSessionData.marker AS xnat_petmrSessionData3, xnat_petmrSessionData.stabilization AS xnat_petmrSessionData4, xnat_petmrSessionData.studytype AS xnat_petmrSessionData5, xnat_petmrSessionData.patientid AS xnat_petmrSessionData6, xnat_petmrSessionData.patientname AS xnat_petmrSessionData7, xnat_petmrSessionData.tracer_dose_units AS xnat_petmrSessionData8, xnat_petmrSessionData.tracer_dose AS xnat_petmrSessionData9, xnat_petmrSessionData.tracer_specificactivity AS xnat_petmrSessionData10, xnat_petmrSessionData.tracer_totalmass_units AS xnat_petmrSessionData11, xnat_petmrSessionData.tracer_totalmass AS xnat_petmrSessionData12, xnat_petmrSessionData.tracer_intermediate_units AS xnat_petmrSessionData13, xnat_petmrSessionData.tracer_intermediate AS xnat_petmrSessionData14, xnat_petmrSessionData.tracer_isotope_half_life AS xnat_petmrSessionData15, xnat_petmrSessionData.tracer_isotope AS xnat_petmrSessionData16, xnat_petmrSessionData.tracer_transmissions AS xnat_petmrSessionData17, xnat_petmrSessionData.tracer_transmissions_starttime AS xnat_petmrSessionData18, xnat_petmrSessionData.tracer_name AS xnat_petmrSessionData19, xnat_petmrSessionData.tracer_starttime AS xnat_petmrSessionData20, xnat_petmrSessionData.start_time AS xnat_petmrSessionData21, xnat_petmrSessionData.start_time_scan AS xnat_petmrSessionData22, xnat_petmrSessionData.start_time_injection AS xnat_petmrSessionData23, xnat_petmrSessionData.blood_glucose AS xnat_petmrSessionData24, xnat_petmrSessionData.blood_glucose_units AS xnat_petmrSessionData25, xnat_petmrSessionData.blood_glucose_time AS xnat_petmrSessionData26, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_demographicData1 AS xnat_demographicData_xnat_demographicData1, xnat_demographicData.xnat_demographicData2 AS xnat_demographicData_xnat_demographicData2, XNAT_PETMRSESSIONDATA_PROJECTS.PROJECTS AS XNAT_PETMRSESSIONDATA_PROJECTS_PROJECTS FROM xnat_petmrSessionData xnat_petmrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_petmrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id   LEFT JOIN xnat_petmrSessionData_meta_data table4 ON xnat_petmrSessionData.petmrSessionData_info=table4.meta_data_id   LEFT JOIN xdat_user table5 ON table4.insert_user_xdat_user_id=table5.xdat_user_id  LEFT JOIN XNAT_PETMRSESSIONDATA_PROJECTS XNAT_PETMRSESSIONDATA_PROJECTS ON table2.id=XNAT_PETMRSESSIONDATA_PROJECTS.id LEFT JOIN (SELECT  *, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) AS xnat_subjectData_xnat_demographicData_DIFF FROM (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.insert_date AS xnat_subjectData_meta_data328, xnat_petmrSessionData.xnat_petmrSessionData0 AS xnat_petmrSessionData_sordata_xnat_petmrSessionData0, xnat_petmrSessionData.xnat_experimentData46 AS xnat_petmrSessionData_sordata__xnat_experimentData46, xnat_petmrSessionData.xnat_subjectAssessorData43 AS xnat_petmrSessionData_sor_xnat_subjectAssessorData43, xnat_demographicData.xnat_demographicData0 AS xnat_demographicData_demograp_xnat_demographicData0, xnat_demographicData.xnat_demographicData_meta_data47 AS xnat_demographicData_at_demographicData_meta_data47, xnat_demographicData.xnat_abstractDemographicData27 AS xnat_demographicData_xnat_abstractDemographicData27 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_subjectData_meta_data table1 ON xnat_subjectData.subjectData_info=table1.meta_data_id LEFT JOIN (SELECT table2.id AS xnat_petmrSessionData0, table2.date AS xnat_experimentData46, table1.subject_id AS xnat_subjectAssessorData43 FROM xnat_petmrSessionData xnat_petmrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_petmrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) AS xnat_petmrSessionData ON xnat_subjectData.id=xnat_petmrSessionData.xnat_subjectAssessorData43 LEFT JOIN (SELECT xnat_subjectData.id AS xnat_subjectData3, table1.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData91, table2.insert_date AS xnat_subjectData_meta_data328 FROM xnat_subjectData xnat_subjectData   LEFT JOIN xnat_abstractDemographicData table1 ON xnat_subjectData.demographics_xnat_abstractdemographicdata_id=table1.xnat_abstractdemographicdata_id   LEFT JOIN xnat_subjectData_meta_data table2 ON xnat_subjectData.subjectData_info=table2.meta_data_id) AS map_xnat_demographicData ON xnat_subjectData.id=map_xnat_demographicData.xnat_subjectData3 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, table0.xnat_abstractdemographicdata_id AS xnat_abstractDemographicData27 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_demographicData.xnat_abstractDemographicData91=xnat_demographicData.xnat_abstractDemographicData27) SEARCH ORDER BY xnat_subjectData3, xnat_petmrSessionData_sordata__xnat_experimentData46 DESC, EXTRACT( MILLISECONDS FROM (xnat_subjectData_meta_data328-xnat_demographicData_at_demographicData_meta_data47)) ASC) AS map_xnat_subjectData_xnat_demographicData ON table2.id=map_xnat_subjectData_xnat_demographicData.xnat_petmrSessionData_sordata_xnat_petmrSessionData0 LEFT JOIN (SELECT table0.xnat_abstractdemographicdata_id AS xnat_demographicData0, table2.insert_date AS xnat_demographicData_meta_data47, xnat_demographicData.dob AS xnat_demographicData1, xnat_demographicData.yob AS xnat_demographicData2 FROM xnat_demographicData xnat_demographicData   LEFT JOIN xnat_abstractDemographicData table0 ON xnat_demographicData.xnat_abstractdemographicdata_id=table0.xnat_abstractdemographicdata_id   LEFT JOIN xnat_demographicData_meta_data table2 ON xnat_demographicData.demographicData_info=table2.meta_data_id) AS xnat_demographicData ON map_xnat_subjectData_xnat_demographicData.xnat_demographicData_demograp_xnat_demographicData0=xnat_demographicData.xnat_demographicData0) SEARCH ORDER BY xnat_petmrSessionData0, xnat_demographicData_at_demographicData_meta_data47 DESC) SEARCH RIGHT JOIN (SELECT DISTINCT xnat_petmrSessionData0 FROM (SELECT table2.id AS xnat_petmrSessionData0, table2.date AS xnat_experimentData46 FROM xnat_petmrSessionData xnat_petmrSessionData   LEFT JOIN xnat_imageSessionData table0 ON xnat_petmrSessionData.id=table0.id   LEFT JOIN xnat_subjectAssessorData table1 ON table0.id=table1.id   LEFT JOIN xnat_experimentData table2 ON table1.id=table2.id) WHERE_CLAUSE ) WHERE_CLAUSE ON WHERE_CLAUSE.xnat_petmrSessionData0=SEARCH.xnat_petmrSessionData0 ORDER BY (SEARCH.xnat_subjectAssessorData43) ;


--BR
CREATE OR REPLACE FUNCTION xdat_search_create("varchar","varchar")
  RETURNS "varchar" AS
'
    declare
        search_query_name alias for $1;
        search_query alias for $2;
	entry xdat_searches%ROWTYPE;
    begin
	SELECT * INTO entry FROM xdat_searches WHERE search_name = search_query_name;

	    IF FOUND THEN
		RAISE NOTICE ''Search Table % exists.'',
		  search_query_name;
		UPDATE xdat_searches SET last_access=NOW() WHERE search_name = search_query_name;
	    ELSE
		RAISE NOTICE ''Creating Search Table %.'',
		  search_query_name;
		EXECUTE ''CREATE TABLE '' || search_query_name || '' AS '' || search_query;
		INSERT INTO xdat_searches (search_name) VALUES (search_query_name);
     EXECUTE ''GRANT ALL ON TABLE '' || search_query_name || '' TO public'';
	    END IF;

	PERFORM xdat_search_drop_unused();

	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION xdat_search_create("varchar", "varchar", "varchar")
  RETURNS "varchar" AS
'
    declare
        search_query_name alias for $1;
        search_query alias for $2;
        search_owner alias for $3;
	entry xdat_searches%ROWTYPE;
    begin
	SELECT * INTO entry FROM xdat_searches WHERE search_name = search_query_name;

	    IF FOUND THEN
		RAISE NOTICE ''Search Table % exists.'',
		  search_query_name;
		UPDATE xdat_searches SET last_access=NOW() WHERE search_name = search_query_name;
	    ELSE
		RAISE NOTICE ''Creating Search Table %.'',
		  search_query_name;
		EXECUTE ''CREATE TABLE '' || search_query_name || '' AS '' || search_query;
		INSERT INTO xdat_searches (search_name,owner) VALUES (search_query_name,search_owner);
	    END IF;

	PERFORM xdat_search_drop_unused(search_owner);

	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION xdat_search_drop("varchar")
  RETURNS "varchar" AS
'
    declare
        search_query_name alias for $1;
    begin
	EXECUTE ''DROP TABLE '' || search_query_name;
	DELETE FROM xdat_searches WHERE search_name = search_query_name;
	
	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION xdat_search_drop_unused()
  RETURNS "varchar" AS
'
    declare
	entry xdat_searches%ROWTYPE;
    begin
	FOR entry IN SELECT * FROM xdat_searches WHERE last_access + interval ''1 hour'' / int ''2'' < NOW()
	LOOP
		PERFORM xdat_search_drop(entry.search_name);

		RAISE NOTICE ''Dropped Expired Search Table %. (Last Access: %)'',
		  entry.search_name,entry.last_access;
	END LOOP;

	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION xdat_search_drop_unused("varchar")
  RETURNS "varchar" AS
'
    declare
	entry xdat_searches%ROWTYPE;
        search_owner alias for $1;
    begin
	FOR entry IN SELECT * FROM xdat_searches WHERE owner=search_owner AND last_access + interval ''1 hour'' / int ''2'' < NOW()
	LOOP
		PERFORM xdat_search_drop(entry.search_name);

		RAISE NOTICE ''Dropped Expired Search Table %. (Last Access: %)'',
		  entry.search_name,entry.last_access;
	END LOOP;

	RETURN ''DONE'';
    end;
'
  LANGUAGE 'plpgsql' VOLATILE;
--BR
SELECT CREATE_CLASS('sortedstrings','CREATE TYPE sortedstrings AS (strings "varchar",sort_order int4)');
--BR
CREATE OR REPLACE FUNCTION getnextview()   RETURNS name AS 
' DECLARE   my_record RECORD;  viewName name; 
BEGIN  FOR my_record IN SELECT c.relname FROM pg_catalog.pg_class AS c LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace
WHERE     c.relkind IN (''v'') AND n.nspname NOT IN (''pg_catalog'', ''pg_toast'') AND pg_catalog.pg_table_is_visible(c.oid) LIMIT 1
LOOP   viewName := my_record.relname;  END LOOP;  RETURN (viewName); END; '  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION viewcount()   RETURNS int8 AS ' DECLARE   my_record RECORD;  counter int8;
BEGIN  FOR my_record IN SELECT * FROM (SELECT COUNT (c.relname) AS view_count FROM pg_catalog.pg_class AS c 
LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace WHERE     c.relkind IN (''v'') AND n.nspname 
NOT IN (''pg_catalog'', ''pg_toast'') AND pg_catalog.pg_table_is_visible(c.oid) LIMIT 1) AS COUNT_TABLE  LOOP   counter := my_record.view_count;  
END LOOP;  RETURN (counter); END; '  LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION getsortedstring("varchar", int4)   RETURNS sortedstrings AS 'DECLARE  sorted_strings sortedStrings%ROWTYPE; 
BEGIN  sorted_strings.strings:=$1;  sorted_strings.sort_order:=$2;  return sorted_strings; END;'   LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION removeviews()   RETURNS varchar AS ' DECLARE  viewName name;  viewCounter int8; 
BEGIN  SELECT INTO viewName getnextview();  SELECT INTO viewCounter viewCount();  WHILE (viewCounter > 0)   LOOP
EXECUTE ''DROP VIEW ''|| viewName || '' CASCADE'';   RAISE NOTICE ''DROPPED %. % more.'',viewName,viewCounter;   SELECT INTO viewName getnextview();
SELECT INTO viewCounter viewCount();  END LOOP;   RETURN (''DONE''); END; '   LANGUAGE 'plpgsql' VOLATILE;
--BR
CREATE OR REPLACE FUNCTION stringstosortedtable(varchar[])
RETURNS SETOF sortedstrings AS
'DECLARE  
ss sortedstrings%ROWTYPE; 
i int4;  
BEGIN  
i :=1 ;
WHILE ($1[i] IS NOT NULL) 
LOOP   
		FOR ss IN 
			SELECT * FROM getSortedString($1[i],i) 
		LOOP
			RAISE NOTICE ''SORTED STRING: %,%'',ss.strings,ss.sort_order;
			RETURN NEXT ss;
		END LOOP;
		i:=i+1; 
	END LOOP; 
	RETURN; 
END;'
   LANGUAGE 'plpgsql' VOLATILE;
--BR

-- commit transaction
COMMIT;
